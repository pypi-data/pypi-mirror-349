[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ai-shell-assistant"
dynamic = ["version"]
description = "AI-powered command-line interface with extensible tools"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "PierrunoYT", email = "pierrebruno@hotmail.ch"}
]
maintainers = [
    {name = "PierrunoYT", email = "pierrebruno@hotmail.ch"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Shells",
    "Topic :: Utilities",
    "Environment :: Console",
]
keywords = [
    "ai", "cli", "shell", "assistant", "openai", "gpt", "command-line", 
    "natural-language", "automation", "tools", "file-operations"
]
requires-python = ">=3.8"
dependencies = [
    "openai>=1.0.0",
    "python-dotenv>=1.0.0",
    "requests>=2.31.0",
    "click>=8.1.7",
    "rich>=13.5.0",
    "pydantic>=2.4.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]

[project.urls]
Homepage = "https://github.com/PierrunoYT/ai-shell-assistant"
Documentation = "https://github.com/PierrunoYT/ai-shell-assistant#readme"
Repository = "https://github.com/PierrunoYT/ai-shell-assistant"
"Bug Tracker" = "https://github.com/PierrunoYT/ai-shell-assistant/issues"

[project.scripts]
ai-cli = "ai_cli.cli:main"
ai-shell = "ai_cli.cli:main"

[tool.setuptools.dynamic]
version = {attr = "ai_cli.__version__"}

[tool.setuptools.packages.find]
include = ["ai_cli*"]

[tool.setuptools.package-data]
ai_cli = ["py.typed"]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=ai_cli",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]

[tool.coverage.run]
source = ["ai_cli"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
