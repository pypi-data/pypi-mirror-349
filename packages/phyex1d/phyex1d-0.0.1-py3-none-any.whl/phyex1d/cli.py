"""
Command line client
"""

import argparse
from matplotlib import pyplot as plt
from .phyex1d import Phyex1d
from . import Phyex1DError


def main():
    """
    Function to deal with command line arguments and execute the 1D model
    """
    epilog = """
Each --exp option is followed by a list of key=value strings.
The allowed keys are:
- grid: Grid name or file name containing a grid description
        (with '.grid' extension).
- dt: Timestep (s)
- dx, dy: mesh size (for scale aware parametrizations)
- name: experiment name
- class: name of the class that implements a timestep among:
         - PhysicsAromeTQ, PhysicsAromeThetaR
         - PhysicsForcingTQ, PhysicsForcingThetaR
- pyphyex: path to the pyphyex.py file to use (this file is automatically generated
           during the PHYEX compilation). If not provided, the file must be found
           in the PYTHONPATH.
- namel: naemlist name or file name (with a .namel extension)
"""
    parser = argparse.ArgumentParser(description='1D model using PHYEX', epilog=epilog,
                                     formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument('INPUT_FILE',
                        help='Netcdf input file describing the case')
    parser.add_argument('--exp', nargs='*', action='append', dest='experiments',
                        help="List of key=value strings defining an experiment. " +
                             "The list of keys is provided at the end of the help message.")
    parser.add_argument('-o', dest='output_dir', type=str, default='.',
                        help="Output directory")
    parser.add_argument('--plot', nargs='*', action='append', dest='plots', default=[],
                        help="plot file name followed by options and then the list of "
                             "variables to plot (one plot by --plot usage). " +
                             "example: --plot theta.png y_var=P Theta")
    parser.add_argument('--force', default=False, action='store_true',
                        help="Force run to be executed even if output already exists")
    parser.add_argument('--name', default='', type=str,
                        help='Name of the comparison')
    args = parser.parse_args()

    # Experiment list
    experiments = []
    for expe in args.experiments:
        expe_descr = {}
        for arg in expe:
            key, val = arg.split('=', 1)
            if key in ('grid', 'dt', 'dx', 'dy', 'name', 'class', 'pyphyex', 'namel'):
                expe_descr[key] = val
            else:
                raise  Phyex1DError(f"This experiment option doest not exist: {key}")
        experiments.append(expe_descr)

    # Run
    ph1d = Phyex1d(args.INPUT_FILE, experiments, args.output_dir, args.name)
    ph1d.run(force=args.force)

    # plot
    for plot in args.plots:
        fig, ax = plt.subplots()
        filename = plot[0]
        var_names = []
        options = {}
        ylim = [None, None]  # min max for y-axis
        vlim = [None, None]  # min and max value
        for arg in plot[1:]:
            if '=' in arg:
                key, value = arg.split('=', 1)
                if key in ('y_var', 'only_param_tag', 'title', 'xlabel', 'ylabel',
                           'legend'):
                    # Strings
                    options[key] = value
                elif key in ('mfactor', 'linewidth'):
                    # Floats
                    options[key] = float(value)
                elif key in ('enable_contourf', 'switch_cls', 'colorbar', 'clabel'):
                    # Booleans
                    options[key] = value == 'True'
                elif key in ('ymin', 'ymax'):
                    if key == 'ymin':
                        ylim[0] = float(value)
                    else:
                        ylim[1] = float(value)
                elif key in ('vmin', 'vmax'):
                    if key == 'vmin':
                        vlim[0] = float(value)
                    else:
                        vlim[1] = float(value)
                else:
                    raise Phyex1DError(f"This plot option does not exist: {key}")
            else:
                var_names.append(arg)
        kwargs_contourf = {}
        if vlim[0] is not None:
            kwargs_contourf['vmin'] = vlim[0]
        if vlim[1] is not None:
            kwargs_contourf['vmax'] = vlim[1]
        if len(kwargs_contourf) != 0:
            options['kwargs_contourf'] = kwargs_contourf
        ph1d.plot_evol(ax, var_names, **options)
        if options.get('y_var', 'X') == 'P':
            ax.invert_yaxis()
        ax.set_ylim(ylim)
        fig.savefig(filename)
        plt.close(fig)
