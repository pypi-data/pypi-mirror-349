syntax = "proto3";

package strique.types;

import "options/strique_enum_options.proto";

option java_outer_classname = "WhereClauseFiltersProto";
option java_package = "com.strique.types.WhereClauseFilters";

// Next ID : 6
// Enum for supported operators.
enum NumericOperatorType {
    NUMERIC_EQUAL = 0
    [(options.label) = '=' ]; 

    NUMERIC_NOT_EQUAL = 1
    [(options.label) = '<>'];   

    NUMERIC_GREATER_THAN = 2 
    [(options.label) = '>'];

    NUMERIC_LESS_THAN = 3
    [(options.label) = '<'];

    NUMERIC_GREATER_EQUAL = 4
    [(options.label) = '>='];

    NUMERIC_LESS_EQUAL = 5
    [(options.label) = '<='];
}

// Next ID : 7
// Enum for supported operators.
enum StringOperatorType {
    STRING_EQUAL = 0 
    [(options.label) = "ilike '%s'"];  

    STRING_NOT_EQUAL = 1 
    [(options.label) = "not ilike '%s'"]; 

    STRING_CONTAINS = 2 
    [(options.label) = "ilike '%%s%'"];

    STRING_NOT_CONTAINS = 3 
    [(options.label) = "not ilike '%%s%'"]; 

    STRING_START_WITH = 4 
    [(options.label) = "ilike '%s%'"];

    STRING_END_WITH = 5 
    [(options.label) = "ilike '%%s'"];

    STRING_EMPTY = 6 
    [(options.label) = "coalesce(%s, '') = ''"];
    
    STRING_NOT_EMPTY = 7 
    [(options.label) = "coalesce(%s, '') <> ''"];
}

// Next ID : 3
message OperatorType {
  oneof operator_type {
    NumericOperatorType numeric_operator_type = 1;
    StringOperatorType string_operator_type = 2;
  }
}

// Next ID : 6
message ValueType {
  oneof value {
    double double_value = 1;
    string string_value = 2;
    int64 number_value = 3;
    uint64 unsigned_value = 4;
    float float_value = 5;
  }
}

// Next ID : 4
// A single condition in the WHERE clause.
message Predicate {
  uint32 column_no = 1;
	
  OperatorType operator = 2;
	
  optional ValueType filter_value_type = 3; 
}

// Next ID : 2
message Expressions {
  repeated Expression expression = 1;
}

// Next ID : 4
message Expression {
  oneof predicate_type {
    // A group of predicates combined by a logical operator 'AND'.
    Expressions all_of = 1;
    
    // A group of predicates combined by a logical operator 'OR'.
    Expressions any_of = 2;
    
    Predicate predicate = 3;
  }
}
