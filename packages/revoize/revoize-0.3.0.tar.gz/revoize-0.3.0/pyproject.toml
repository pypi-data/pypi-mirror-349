[tool.poetry]
name = "revoize"
version = "0.3.0"
description = "Revoize Python SDK"
authors = ["Revoize <office@revoize.com>"]
license = "MIT"
readme = "README.md"
classifiers = [
    "Development Status :: 1 - Planning"
]

[tool.poetry.urls]
"Homepage" = "https://revoize.com"

[[tool.poetry.source]]
name = "PyPI"
priority = "primary"

[tool.poetry.dependencies]
python = "^3.11"
click = "^8.1.7"
pydantic = "^2.6.4"
requests = "^2.31.0"
tomli = "^2.0.1"

[tool.poetry.group.dev.dependencies]
black = "^24.3.0"
coverage = "^7.4.4"
flake8 = "^7.0.0"
flake8-black = "^0.3.6"
flake8-pyproject = "^1.2.3"
flake8-spellcheck = "^0.28.0"
mypy = "^1.15.0"
poetry-bumpversion = "^0.3.2"
pytest = "^8.0.0"
pytest-env = "^1.1.3"
pytest-mock = "^3.14.0"
types-requests = "^2.32.0.20250306"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
revoize-enhance = "revoize.cli.enhance:_enhance"

[tool.black]
line-length = 88
target-version = ["py311"]

[tool.coverage.run]
branch = true
source = ["revoize"]
command_line = "-m pytest tests"

[tool.coverage.report]
show_missing = true

[tool.coverage.xml]
output = "coverage.xml"

[tool.poe]
envfile = ".env"

[tool.poe.tasks.test]
sequence = [
    "test-unit",
    "test-integration",
]

[tool.poe.tasks.test-unit]
cmd = "poetry run pytest tests/unit_tests/"

[tool.poe.tasks.test-integration]
cmd = "poetry run pytest tests/integration_tests/"

[tool.poe.tasks.test-coverage-run]
cmd = "poetry run coverage run"

[tool.poe.tasks.test-coverage-report]
cmd = "poetry run coverage report"

[tool.poe.tasks.test-coverage-xml]
cmd = "poetry run coverage xml"

## --------------------------------------------
# The section below defines management scripts which are shared across all Revoize packages.
# If you feel like you need to make a change there, consider making a change to the
# Python Package Template and all other packages as well.
## --------------------------------------------

[tool.flake8]
exclude = ["venv", ".venv"]
max-line-length = 88
dictionaries = ["en_US", "python", "technical"]
ignore = ["D104", "D100", "D101", "D106", "W503", "E704"]
per-file-ignores = """
    tests/**: F401, F811
"""
whitelist = ".spellcheck-allowlist"

[tool.poe.tasks.package-name]
shell="""
version=$(poetry version --no-ansi)
package_info=($version)  # Split string by space
echo ${package_info[0]}
"""

[tool.poe.tasks.lint]
cmd = "poetry run flake8"

[tool.poe.tasks.check-types]
cmd = "poetry run mypy ."

[tool.poe.tasks.build]
cmd = "poetry build"

[tool.poe.tasks._version]
cmd = "poetry version --no-ansi -s"

[tool.poe.tasks._published_version]
shell = "curl https://pypi.org/pypi/revoize/json | jq -r '.info.version'"

[tool.poe.tasks.publish]
help = "Publish this package to PyPI"
cmd = "poetry publish"
deps = [
    "check-version",
    "build"
]

[tool.poe.tasks.check-version]
cmd = """
poetry run python -c '
from packaging import version
import os
import sys

current_version = os.getenv("CURRENT_VERSION")
published_version = os.getenv("PUBLISHED_VERSION")

if version.parse(current_version) <= version.parse(published_version):
    print("Current package version is less or equal to published one.")
    print(f"Current version: {current_version}")
    print(f"Published version: {published_version}")
    print("Run `poe bump-version major|minor|patch` to upgrade the version before publishing.")
    # There is a version mismatch, exit with a non-zero code to break the task sequence
    sys.exit(1)
'
"""
uses = {CURRENT_VERSION = "_version", PUBLISHED_VERSION = "_published_version"}

[tool.poe.tasks.bump-version]
cmd = "poetry version --no-ansi $version_rule"
args = [
  { name = "version_rule", positional=true, help = "can be one of 'major', 'minor', 'patch", required=true }
]
