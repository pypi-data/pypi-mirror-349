Metadata-Version: 2.4
Name: iziproxy
Version: 0.4.0
Summary: Une biblioth√®que Python pour la gestion simplifi√©e des proxys d'entreprise
Author: sanjuant
License: MIT License
        
        Copyright (c) 2025 IziProxy Contributors
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        
Project-URL: Homepage, https://github.com/sanjuant/iziproxy
Project-URL: Bug Tracker, https://github.com/sanjuant/iziproxy/issues
Keywords: proxy,enterprise,authentication,ntlm,requests,configuration,development,pac
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: Topic :: Internet :: Proxy Servers
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Requires-Python: >=3.7
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: requests>=2.25.0
Requires-Dist: PyYAML>=6.0
Requires-Dist: keyring>=23.0.0
Requires-Dist: cryptography>=36.0.0
Requires-Dist: importlib_metadata>=4.0.0; python_version < "3.8"
Provides-Extra: ntlm
Requires-Dist: ntlm-auth>=1.5.0; extra == "ntlm"
Requires-Dist: pycryptodomex>=3.14.1; extra == "ntlm"
Provides-Extra: dev
Requires-Dist: pytest>=6.0.0; extra == "dev"
Requires-Dist: pytest-cov>=2.12.0; extra == "dev"
Requires-Dist: black>=22.0.0; extra == "dev"
Requires-Dist: flake8>=4.0.0; extra == "dev"
Requires-Dist: sphinx>=4.0.0; extra == "dev"
Requires-Dist: sphinx-rtd-theme>=1.0.0; extra == "dev"
Dynamic: license-file

# IziProxy

Une biblioth√®que Python pour la gestion simplifi√©e des proxys d'entreprise.

[![PyPI version](https://img.shields.io/pypi/v/iziproxy.svg)](https://pypi.org/project/iziproxy/)
[![Python versions](https://img.shields.io/pypi/pyversions/iziproxy.svg)](https://pypi.org/project/iziproxy/)
[![License](https://img.shields.io/github/license/votrenom/iziproxy.svg)](https://github.com/votrenom/iziproxy/blob/main/LICENSE)

## Fonctionnalit√©s

- üîç D√©tection automatique de l'environnement (local, dev, prod)
- üåê D√©tection automatique des configurations de proxy syst√®me
- üîê Gestion s√©curis√©e des identifiants proxy
- üîÑ Support pour l'authentification basique et NTLM
- üìã Compatibilit√© avec les fichiers PAC
- üõ†Ô∏è API simple et intuitive

## Installation

```bash
pip install iziproxy
```

Pour le support de l'authentification NTLM (recommand√© pour les environnements Windows d'entreprise) :

```bash
pip install iziproxy[ntlm]
```

## Utilisation rapide

```python
from iziproxy import IziProxy

# Cr√©ation avec d√©tection automatique
proxy = IziProxy()

# M√©thode 1: Obtenir une session requests pr√©configur√©e
session = proxy.create_session()
response = session.get('https://example.com')

# M√©thode 2: Utiliser comme dictionnaire de proxy standard
proxies = proxy.get_proxy_dict()
response = requests.get('https://example.com', proxies=proxies)

# M√©thode 3: Patcher le module requests (monkey patching)
proxy.patch_requests()
# D√©sormais, toutes les requ√™tes requests utiliseront le proxy
import requests
response = requests.get('https://example.com')
```

## Configuration

IziProxy fonctionne sans configuration, mais vous pouvez personnaliser son comportement :

### Configuration par code

```python
from iziproxy import IziProxy

proxy = IziProxy(
    proxy_url="http://proxy.example.com:8080",
    username="user",
    password="pass",
    environment="prod"
)
```

### Configuration par fichier YAML

Cr√©ez un fichier `iziproxy.yml` dans votre r√©pertoire courant ou dans `~/.config/` :

```yaml
environments:
  local:
    proxy_url: null
    requires_auth: false
  dev:
    proxy_url: "http://dev-proxy.example.com:8080"
    requires_auth: true
    auth_type: "basic"
  prod:
    proxy_url: "http://prod-proxy.example.com:8080"
    requires_auth: true
    auth_type: "ntlm"

credentials:
  # Section simplifi√©e - gestion automatique des identifiants

environment_detection:
  method: "auto"  # Options: auto, env_var, hostname, ip, ask
```

### Configuration des identifiants

Pour la s√©curit√©, les identifiants (nom d'utilisateur, mot de passe, domaine) ne doivent pas √™tre stock√©s dans le fichier de configuration. Utilisez plut√¥t :

#### Variables d'environnement

IziProxy recherche les variables d'environnement suivantes :

```bash
# Format recommand√©
IZI_USERNAME=mon_utilisateur
IZI_PASSWORD=mon_mot_de_passe
IZI_DOMAIN=mon_domaine

# Format alternatif (r√©trocompatibilit√©)
PROXY_USERNAME=mon_utilisateur
PROXY_PASSWORD=mon_mot_de_passe
PROXY_DOMAIN=mon_domaine
```

#### Fichier .env

Vous pouvez √©galement d√©finir ces variables dans un fichier `.env` :

```bash
# Identifiants pour l'authentification proxy
IZI_USERNAME=mon_utilisateur
IZI_PASSWORD=mon_mot_de_passe
IZI_DOMAIN=mon_domaine
```

Le fichier `.env` peut √™tre plac√© :
- Dans le r√©pertoire courant (`./.env`)
- Dans le r√©pertoire de configuration utilisateur (`~/.config/.env`)
- Dans le r√©pertoire personnel de l'utilisateur (`~/.env`)

#### Stockage s√©curis√© avec keyring

Si un nom d'utilisateur est d√©fini mais que le mot de passe est manquant, IziProxy tentera de r√©cup√©rer le mot de passe depuis le trousseau de cl√©s du syst√®me (via `keyring`). 

Lorsque vous fournissez un mot de passe la premi√®re fois, il sera automatiquement enregistr√© dans le trousseau de cl√©s pour les utilisations futures.

### Fonctionnalit√©s avanc√©es

- Int√©gration avec des biblioth√®ques tierces via monkey patching
- Support pour les wrappers d'API utilisant `requests`
- Gestion avanc√©e des identifiants via variables d'environnement et `.env`

Consultez [la documentation compl√®te](https://iziproxy.readthedocs.io/) pour plus de d√©tails sur les fonctionnalit√©s avanc√©es.

## Licence

Ce projet est sous licence MIT - voir le fichier [LICENSE](LICENSE) pour plus de d√©tails.
