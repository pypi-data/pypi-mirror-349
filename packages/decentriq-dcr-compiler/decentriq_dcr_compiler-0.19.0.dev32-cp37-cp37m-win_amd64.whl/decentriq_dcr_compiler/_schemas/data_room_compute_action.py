# generated by datamodel-codegen:
#   filename:  data_room_compute_action.json

from __future__ import annotations

from enum import Enum
from typing import Any, Mapping, Optional, Sequence, Union

from pydantic import BaseModel, ConfigDict, Field, RootModel, conint


class Kind(Enum):
    media = 'media'


class DataRoomComputeAction1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    kind: Kind
    getMatchingValidationReport: Mapping[str, Any]


class DataRoomComputeAction2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    kind: Kind
    getSegmentsValidationReport: Mapping[str, Any]


class DataRoomComputeAction3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    kind: Kind
    getDemographicsValidationReport: Mapping[str, Any]


class DataRoomComputeAction4(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    kind: Kind
    getAudiencesValidationReport: Mapping[str, Any]


class DataRoomComputeAction5(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    kind: Kind
    computeInsights: Mapping[str, Any]


class DataRoomComputeAction6(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    kind: Kind
    computeOverlapStatistics: Mapping[str, Any]


class DataRoomComputeAction7(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    kind: Kind
    getDataAttributes: Mapping[str, Any]


class DataRoomComputeAction8(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    kind: Kind
    retrieveModelQualityReport: Mapping[str, Any]


class GetAudiences(BaseModel):
    user: str


class DataRoomComputeAction10(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    kind: Kind
    getAudiences: GetAudiences


class Kind63(Enum):
    BASE = 'BASE'


class AudienceReference16(BaseModel):
    kind: Kind63


class Kind64(Enum):
    CUSTOM = 'CUSTOM'


class AudienceReference17(BaseModel):
    id: str
    kind: Kind64


class Kind65(Enum):
    SEED = 'SEED'


class AudienceReference18(BaseModel):
    audienceType: str
    kind: Kind65


class AudienceReference(
    RootModel[Union[AudienceReference16, AudienceReference17, AudienceReference18]]
):
    root: Union[AudienceReference16, AudienceReference17, AudienceReference18]


class Kind66(Enum):
    REF = 'REF'


class AudienceReferenceOrDraft1(BaseModel):
    kind: Kind66
    value: AudienceReference


class Kind67(Enum):
    DRAFT = 'DRAFT'


class BooleanOp(Enum):
    AND = 'AND'
    OR = 'OR'


class CombineOperator(Enum):
    INTERSECT = 'INTERSECT'
    UNION = 'UNION'
    DIFF = 'DIFF'


class Kind68(Enum):
    LOOKALIKE = 'LOOKALIKE'


class CustomAudienceDefinition11(BaseModel):
    excludeSeedAudience: Optional[bool] = None
    kind: Kind68
    reach: conint(ge=0)
    sourceRef: AudienceReference


class Kind69(Enum):
    RULE_BASED = 'RULE_BASED'


class FilterOperator(Enum):
    CONTAINS_ANY_OF = 'CONTAINS_ANY_OF'
    CONTAINS_NONE_OF = 'CONTAINS_NONE_OF'
    CONTAINS_ALL_OF = 'CONTAINS_ALL_OF'
    EMPTY = 'EMPTY'
    NOT_EMPTY = 'NOT_EMPTY'


class GetLookalikeAudienceStatistics(BaseModel):
    audienceRef: AudienceReference


class DataRoomComputeAction9(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    kind: Kind
    getLookalikeAudienceStatistics: GetLookalikeAudienceStatistics


class GetAudienceUserList(GetLookalikeAudienceStatistics):
    pass


class DataRoomComputeAction12(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    kind: Kind
    getAudienceUserList: GetAudienceUserList


class AudienceFilter(BaseModel):
    attribute: str
    operator: FilterOperator
    values: Optional[Sequence[str]] = None


class AudienceFilters(BaseModel):
    booleanOp: BooleanOp
    filters: Sequence[AudienceFilter]


class AudienceCombinator(BaseModel):
    filters: Optional[AudienceFilters] = None
    operator: CombineOperator
    sourceRef: AudienceReference


class CustomAudienceDefinition12(BaseModel):
    combine: Optional[Sequence[AudienceCombinator]] = None
    filters: Optional[AudienceFilters] = None
    kind: Kind69
    sourceRef: AudienceReference


class CustomAudienceDefinition(
    RootModel[Union[CustomAudienceDefinition11, CustomAudienceDefinition12]]
):
    root: Union[CustomAudienceDefinition11, CustomAudienceDefinition12]


class AudienceReferenceOrDraft2(BaseModel):
    kind: Kind67
    value: CustomAudienceDefinition


class AudienceReferenceOrDraft(
    RootModel[Union[AudienceReferenceOrDraft1, AudienceReferenceOrDraft2]]
):
    root: Union[AudienceReferenceOrDraft1, AudienceReferenceOrDraft2]


class EstimateAudienceSize(BaseModel):
    audience: AudienceReferenceOrDraft


class DataRoomComputeAction11(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    kind: Kind
    estimateAudienceSize: EstimateAudienceSize


class DataRoomComputeAction(
    RootModel[
        Union[
            DataRoomComputeAction1,
            DataRoomComputeAction2,
            DataRoomComputeAction3,
            DataRoomComputeAction4,
            DataRoomComputeAction5,
            DataRoomComputeAction6,
            DataRoomComputeAction7,
            DataRoomComputeAction8,
            DataRoomComputeAction9,
            DataRoomComputeAction10,
            DataRoomComputeAction11,
            DataRoomComputeAction12,
        ]
    ]
):
    root: Union[
        DataRoomComputeAction1,
        DataRoomComputeAction2,
        DataRoomComputeAction3,
        DataRoomComputeAction4,
        DataRoomComputeAction5,
        DataRoomComputeAction6,
        DataRoomComputeAction7,
        DataRoomComputeAction8,
        DataRoomComputeAction9,
        DataRoomComputeAction10,
        DataRoomComputeAction11,
        DataRoomComputeAction12,
    ] = Field(..., title='DataRoomComputeAction')
