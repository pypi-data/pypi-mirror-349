# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_core.ipynb.

# %% auto 0
__all__ = ['ufw', 'user', 'source', 'apt', 'systemd', 'log_rotate', 'phone_home', 'reboot', 'mounts', 'cloud_init_config',
           'cloud_init_base']

# %% ../nbs/00_core.ipynb
from fastcore.utils import *
import fastcore.xtras, yaml
from textwrap import dedent

# %% ../nbs/00_core.ipynb
def ufw(logging="off", def_incoming="deny", def_outgoing="allow", internal=None, **allows):
    rules = [dict(name=k, rule="allow", port=v) for k,v in allows.items()]
    if internal: rules.append(dict(interface=internal, rule="allow", direction="in"))
    defaults=dict(incoming=def_incoming, outgoing=def_outgoing)
    res = dict(enabled=True, logging=logging, defaults=defaults, rules=rules)
    return dict(ufw=res)

# %% ../nbs/00_core.ipynb
def user(name, pub_keys, groups=None, shell="/bin/bash", sudo=True):
    groups = listify(groups)
    if sudo and 'sudo' not in groups: groups.append('sudo')
    sudo = ["ALL=(ALL) NOPASSWD:ALL"] if sudo else []
    return dict(name=name, groups=groups, shell=shell, sudo=sudo, ssh_authorized_keys=listify(pub_keys))

# %% ../nbs/00_core.ipynb
def source(url, keyid, keyserver):
    return dict(source=f"deb [signed-by=$KEY_FILE] {url} $RELEASE stable", keyid=keyid, keyserver=keyserver)

# %% ../nbs/00_core.ipynb
def apt(unattended=False, autoclean=30, email='', auto_reboot=False, **sources):
    unattended = "1" if unattended else "0"
    auto_reboot = "true" if auto_reboot else "false"
    apt_conf = f"""\
APT::Periodic::Update-Package-Lists "1";
APT::Periodic::Download-Upgradeable-Packages "1";
APT::Periodic::AutocleanInterval "7";
APT::Periodic::Unattended-Upgrade "{unattended}";
Unattended-Upgrade::Automatic-Reboot "{auto_reboot}";
"""
    if email: apt_conf += 'Unattended-Upgrade::Mail "{email}";\n'
    res = dict(conf=apt_conf)
    if sources: res['sources'] = sources
    return dict(apt=res)

# %% ../nbs/00_core.ipynb
def systemd(items):
    units = [dict(name=k, dropin=True, content=v) for k,v in items.items()]
    return dict(systemd=dict(units=units))

# %% ../nbs/00_core.ipynb
def log_rotate(freq="weekly", num_keep=7, fname="00-cloud-init-global"):
    snippet = f"""\
/var/log/*.log {{
    {freq}
    rotate {num_keep}
    compress
    su root adm
    create
    missingok
}}
"""
    return dict(path=f"/etc/logrotate.d/{fname}", owner="root:root", permissions="0644", content=snippet)

# %% ../nbs/00_core.ipynb
def phone_home(url):
    if not url: return {}
    res = dict(url=url, post=["instance_id", "hostname"], tries=5)
    return dict(phone_home=res)

# %% ../nbs/00_core.ipynb
def reboot(enable=True, message="Rebooting"):
    if not enable: return {}
    return dict(power_state=dict( mode="reboot", message=message, timeout=1, condition=True))

# %% ../nbs/00_core.ipynb
def mounts(devices):
    if not devices: return {}
    return dict(mounts=devices)

# %% ../nbs/00_core.ipynb
def cloud_init_config(hostname, username, pub_keys, email='',
                      devices=None, ping_host=None, packages=None, dropins=None, **sources):
    if not dropins: dropins={}
    cfg = dict(
        hostname=hostname, preserve_hostname=False,
        users=[user(username, pub_keys, groups="docker")],
        packages=listify(packages), package_update=True, package_upgrade=True,
        disable_root=True, ssh_pwauth=False,
        **ufw(internal="enp7s0", OpenSSH=22),
        **apt(**sources),
        **systemd(dropins),
        write_files=[ log_rotate() ],
        **mounts(devices),
        **phone_home(ping_host),
        **reboot(),
    )
    return "#cloud-config\n" + yaml.safe_dump(cfg, sort_keys=False, width=1_000_000)

# %% ../nbs/00_core.ipynb
def cloud_init_base(hostname, packages=None, **kw):
    cfg = dict(
        hostname=hostname, preserve_hostname=False,
        packages=listify(packages), package_update=True, package_upgrade=True,
        disable_root=True, ssh_pwauth=False, **kw
    )
    return "#cloud-config\n" + yaml.safe_dump(cfg, sort_keys=False, width=1_000_000)

# %% ../nbs/00_core.ipynb
def cloud_init_config(hostname, username, pub_keys, email='', groups=None, internal=None,
                      devices=None, ping_host=None, packages=None, dropins=None, **sources):
    return cloud_init_base(
        hostname, packages=packages,
        users=[user(username, pub_keys, groups=groups)],
        **ufw(internal=internal, OpenSSH=22),
        **apt(**sources),
        **systemd(dropins or {}),
        write_files=[ log_rotate() ],
        **mounts(devices),
        **phone_home(ping_host),
        **reboot(),
    )
