#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
线程引擎模块的类型提示文件
"""

import threading
from typing import Any, Dict, List, Optional, Type, Callable, Tuple

from psbtree.core import NodeStatus, TreeNode
from psbtree.nodes.action_node import SimpleActionNode
from psbtree.engine.sequential_engine import SequentialEngine

class ThreadEngine:
    """
    线程B树引擎类
    
    该类实现了基于线程的B树操作，每个行为树在独立的线程中执行。
    """
    
    def __init__(self) -> None: ...
    
    def register_action_behavior(self, action_id: str, tick_functor: Callable[[TreeNode], NodeStatus], 
                              ports_list: List[Dict[str, str]]) -> None: ...
    
    def register_action_class(self, action_class: Type[SimpleActionNode], action_id: Optional[str] = None) -> None: ...
    
    def create_tree_from_text(self, xml_text: str, tree_id: Optional[str] = None) -> str: ...
    
    def create_tree_from_file(self, file_path: str, tree_id: Optional[str] = None) -> str: ...
    
    def get_tree_ids(self) -> List[str]: ...
    
    def tick_once(self, tree_id: str) -> NodeStatus: ...
    
    def tick_until_failure(self, tree_id: str) -> int: ...
    
    def tick_until_success(self, tree_id: str) -> int: ...
    
    def tick_n_times(self, tree_id: str, n: int) -> List[NodeStatus]: ...
    
    def get_tree_status(self, tree_id: str) -> Dict[str, Any]: ...
    
    def get_blackboard_data(self, tree_id: str, key: str) -> Any: ...
    
    def set_blackboard_data(self, tree_id: str, key: str, value: Any) -> None: ...
    
    def get_all_blackboard_data(self, tree_id: str) -> Dict[str, Any]: ...
    
    def reset_tree(self, tree_id: str) -> None: ...
    
    def stop_tree(self, tree_id: str) -> None: ...
    
    def stop_all_trees(self) -> None: ...
    
    def __del__(self) -> None: ... 