[project]
name = "pydantic-views"
version = "0.2.0"
description = "Views for Pydantic models"
authors = [
    {name = "Alfred Santacatalina",email = "alfred.santacatalinagea@telefonica.com"}
]
license = "MIT"
readme = "README.rst"
requires-python = ">=3.13,<4.0.0"
dependencies = ["pydantic (>=2.10.6,<3.0.0)"]
keywords = ["view", "pydantic", "datamodel", "model", "REST API"]

classifiers = [
    "Development Status :: 4 - Beta",
    "Framework :: Pydantic",
    "Framework :: Pydantic :: 2",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Typing :: Typed"
]

[project.urls]
Homepage = "https://pydantic-views.readthedocs.io/stable/"
Repository = "https://github.com/alfred82santa/pydantic-views.git"
Documentation = "https://pydantic-views.readthedocs.io/stable/"
Issues = "https://github.com/alfred82santa/pydantic-views/issues"

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"


[tool.poetry]
requires-poetry = ">=2.0"
packages = [{ from = "src", include = "pydantic_views" }]

[tool.poetry.group.dev.dependencies]
flake8 = "^7.1.2"
pytest-cov = "^6.0.0"
isort = "^5.13.2"
absolufy-imports = "^0.3.1"
ruff = "^0.9.9"
mypy = "^1.15.0"
pytest = "^8.3.5"
flake8-pyproject = "^1.2.3"
autoflake = "^2.3.1"


[tool.poetry.group.docs.dependencies]
sphinx = "^8.2.3"
autodoc-pydantic = "^2.2.0"

[tool.ruff]
exclude = [".venv/*"]

[tool.flake8]
exclude = [".venv/*"]
max-line-length = 120
extend-ignore = "E251"

[tool.isort]
profile = "black"
src_paths = ["src", "tests"]
skip_glob = [".venv/*"]
reverse_relative = true
split_on_trailing_comma = true
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
files = ["src", "tests"]
exclude = [".venv/.*", "docs/source/.*"]
disable_error_code="valid-type,import-untyped"


[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true

[tool.coverage.run]
omit = [".venv/*"]
branch = true
relative_files = false

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_also = [
    # Dont complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",

    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",

    # Don't complain type checking imports, they aren't run:
    "if TYPE_CHECKING",

    # Don't complain overloads, they aren't run:
    "@overload"
]

[tool.coverage.paths]
source = ["src/"]
