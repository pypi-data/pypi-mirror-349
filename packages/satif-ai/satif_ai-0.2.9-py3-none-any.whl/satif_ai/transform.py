from pathlib import Path
from typing import Any, Dict, List, Optional

from fastmcp import FastMCP
from fastmcp.client.transports import FastMCPTransport
from satif_core.code_executors.base import CodeExecutor
from satif_core.transformation_builders.base import AsyncTransformationBuilder
from satif_core.types import (
    FilePath,
    SDIFPath,
    TransformationResult,
)
from satif_sdk.code_executors.local_executor import LocalCodeExecutor
from satif_sdk.transformers.code import CodeTransformer
from sdif_mcp.server import mcp

from satif_ai.transformation_builders.syncpulse import SyncpulseTransformationBuilder
from satif_ai.utils.openai_mcp import OpenAICompatibleMCP


async def atransform(
    sdif: SDIFPath,
    output_target_files: Dict[FilePath, str] | List[FilePath] | FilePath,
    instructions: Optional[str] = None,
    output_path: FilePath = Path("."),
    *,
    transformation_code: Optional[str] = None,
    transformation_builder: Optional[AsyncTransformationBuilder] = None,
    code_executor: Optional[CodeExecutor] = None,
    mcp_server: Optional[FastMCP] = None,
    mcp_transport: Optional[FastMCPTransport] = None,
    llm_model: str = "o4-mini",
    schema_only: bool = False,
    representer_kwargs: Optional[Dict[str, Any]] = None,
) -> TransformationResult:
    """
    Asynchronously transforms an SDIF (Standard Data Interchange Format) input using
    an AI-generated or provided transformation code.

    This function orchestrates the process of:
    1. Optionally generating transformation code using an AI model via a `CodeBuilder`
       if `transformation_code` is not provided.
       explicitly passed.
    2. Executing the transformation code using a `CodeTransformer` and a `CodeExecutor`.
    3. Exporting the results to the specified output.

    Args:
        sdif: Path to the input SDIF file or an `SDIFDatabase` object.
        output_target_files: A dictionary mapping original example file paths (or string identifiers)
                             to their desired agent-facing filenames, or a list of output example
                             file paths, or a single output file path. These are used by the AI to understand the target
                             format and structure, and also by the `CodeTransformer` to determine
                             output filenames if the transformation result keys match.
        instructions: Optional. Natural language instructions for the AI to generate
                      the transformation code. Used if `transformation_code` is None.
        transformation_code: Optional. Pre-existing Python code for the transformation.
                             If None, code will be generated by the `transformation_builder`.
        transformation_builder: Optional. An `AsyncTransformationBuilder` instance responsible for generating
                      the transformation code if `transformation_code` is not provided.
                      If None, a `TransformationAsyncCodeBuilder` is instantiated.
        code_executor: Optional. A `CodeExecutor` instance for running the transformation
                       code. If None, a `LocalCodeExecutor` is used.
        mcp_server: Optional. A `FastMCP` server instance for the AI code builder.
                    Defaults to the global `mcp` instance if `transformation_builder` is None.
        mcp_transport: Optional. A `FastMCPTransport` instance for communication with
                       the `mcp_server`. Defaults to a new transport using `mcp_server`
                       if `transformation_builder` is None.
        llm_model: The language model to use for code generation (e.g., "o4-mini").
                   Used if `transformation_builder` is None.
        schema_only: If True, the transformation aims to match only the schema (headers)
                     of the `output_target_files`, and input samples may be omitted or marked
                     as empty for the AI. This is useful for structural transformations
                     without processing actual data rows.
        representer_kwargs: Optional dictionary of keyword arguments to pass to the
                            representer when analyzing `output_target_files`.

    Returns:
        A `TransformationResult` object containing the path to the output
        and the transformation code used.
    """
    if transformation_builder is None:
        if mcp_server is None:
            mcp_server = mcp

        if mcp_transport is None:
            mcp_transport = FastMCPTransport(mcp=mcp_server)

        openai_compatible_mcp = OpenAICompatibleMCP(mcp=mcp_server)
        await openai_compatible_mcp.connect()

        transformation_builder = SyncpulseTransformationBuilder(
            mcp_server=openai_compatible_mcp,
            mcp_session=mcp_transport,
            llm_model=llm_model,
        )

    if transformation_code is None:
        function_code = await transformation_builder.build(
            sdif=sdif,
            output_target_files=output_target_files,
            instructions=instructions,
            schema_only=schema_only,
            representer_kwargs=representer_kwargs,
        )
    else:
        function_code = transformation_code

    if code_executor is None:
        code_executor = LocalCodeExecutor()

    transformer = CodeTransformer(
        function=function_code,
        code_executor=code_executor,
    )

    output_path = transformer.export(
        sdif=sdif,
        output_path=output_path,
    )

    return TransformationResult(output_path=output_path, function_code=function_code)
