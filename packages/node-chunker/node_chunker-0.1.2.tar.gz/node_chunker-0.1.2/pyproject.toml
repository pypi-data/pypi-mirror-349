[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]

[project]
authors = [{email = "kamenialexnea@gmail.com", name = "Alex Kameni"}]
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Text Processing :: Markup",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Intended Audience :: Education",
    "Topic :: Education",
]
description = "A Python package for Document Node Chunking based on Table of Contents"
keywords = [
    "LLM",
    "NLP",
    "RAG",
    "document",
    "chunking",
    "TOC",
    "parser",
    "llama-index",
]
license = {text = "MIT"}
name = "node-chunker"
readme = "README.md"
requires-python = ">=3.10,<4.0"
version = "0.1.2"

# Base dependencies that are always needed
dependencies = [
    "llama-index-core>=0.12.36,<0.13",
    "requests",
    "markitdown[docx,pdf]>=0.1.1",
    "pymupdf>=1.25.5",
]

[project.urls]
Homepage = "https://github.com/KameniAlexNea/llama-index-toc-parser"
Repository = "https://github.com/KameniAlexNea/llama-index-toc-parser"
"Bug Tracker" = "https://github.com/KameniAlexNea/llama-index-toc-parser/issues"

[project.optional-dependencies]
# Format-specific dependencies

# Testing and development dependencies
test = [
    "coverage>=5.0", # For unittest coverage
]
dev = [
    "tox",
    "sphinx",
    "wheel",
    "twine",
    "build",
    "pickleshare",
    "black>=23.0,<25.0",
    "ruff>=0.1.0",
    "mypy>=1.0",
    "codespell>=2.2.0",
    "pre-commit>=3.0",
    "pylint>=2.15,<4.0", # Optional, as Ruff covers many checks
    "safety",
    "coverage>=5.0", # For unittest coverage
]

[tool.codespell]
check-filenames = true
check-hidden = true
ignore-words-list = ""
skip = "*.json,*.jsonl,*.csv,*.ipynb,./.git,./.mypy_cache,./.pytest_cache,./.ruff_cache,./build,./dist,./*.egg-info,./venv"

[tool.hatch.build.targets.sdist]
include = ["node_chunker/"] # Ensure the package directory is included

[tool.hatch.build.targets.wheel]
packages = ["node_chunker"] # More modern way to specify package

[tool.hatch.metadata]
allow-direct-references = true

[tool.mypy]
python_version = "3.10"
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
ignore_missing_imports = true
plugins = "pydantic.mypy"
exclude = ["build", "examples", "tests", "venv"] # Keep existing excludes

[[tool.mypy.overrides]]
module = "pydantic.*"
ignore_missing_imports = true

[tool.ruff]
exclude = [
    "build",
    "examples",
    "tests",
    "venv",
    ".tox",
    ".eggs",
    "__pycache__",
]
target-version = "py310"
line-length = 88
lint.select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "ANN", # flake8-annotations
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "RUF", # Ruff-specific rules
    "D", # pydocstyle (if you want to enforce it via ruff)
]
lint.ignore = [
    "ANN101", # Missing type annotation for self
    "ANN102", # Missing type annotation for cls
    "E501",   # Line too long (handled by black/ruff format)
    "D212",   # Multi-line summary first line should be on a new line (pydocstyle) - adjust as needed
    "D417",   # Missing argument descriptions in Docstring (pydocstyle) - adjust as needed
]

[tool.ruff.lint.isort]
known-first-party = ["node_chunker"]

[tool.ruff.lint.pydocstyle] # If using Ruff for pydocstyle (D in select)
convention = "google"

[tool.black]
line-length = 88
target-version = ['py310', 'py311']
