# Code generated by smithy-python-codegen DO NOT EDIT.

from dataclasses import dataclass
from datetime import datetime
from enum import StrEnum
from typing import Union

from smithy_core.documents import Document


@dataclass(kw_only=True)
class AccessLogMember:
    """
    :param time: This time will be a 13 digit timestamp.
    :param email: Email of the user.
    :param request_id: A unique request ID.
    :param roles: List of role the user has while logging the request.
    :param operation: Smithy operation name for thr request.
    :param msg: Message logged.
    :param input: Input payload.
    """

    time: str | None = None
    email: str | None = None
    request_id: str | None = None
    roles: list[str] | None = None
    operation: str | None = None
    msg: str | None = None
    input: Document | None = None


class AwsResourceType(StrEnum):
    DYNAMODB_TABLE = "aws_dynamodb_table"
    EC2_INSTANCE = "aws_ec2_instance"
    EBS_VOLUME = "aws_ebs_volume"
    ES_DOMAIN = "aws_elasticsearch_domain"
    S3_BUCKET = "aws_s3_bucket"
    REDSHIFT_CLUSTER = "aws_redshift_cluster"
    EKS_CLUSTER = "aws_eks_cluster"
    ECS_CLUSTER = "aws_ecs_cluster"
    EMR_CLUSTER = "aws_emr_cluster"
    RDS_INSTANCE = "aws_rds_db_instance"


@dataclass(kw_only=True)
class AccountPermissions:
    """The permission granted to the AWS IAM "Borneo Control Plane" role for
    the
    account, when the account was added to Borneo.

    :param enable_inventory_policy: If set to true, this indicates that the
    permission to sync cloud resources from the account is enabled.
    :param enable_aws_config_policy: If set to true, it indicates that AWS Config is
    enabled for the account.
    :param enable_dataplane_deploy_policy: If set to true, it indicates that the
    permission to deploy the DataPlane is enabled for the account.
    :param enable_dp_cli: If set to `true`, it indicates that the permission to
    deploy a DataPlane through the Borneo CLI is enabled.
    :param regions: The list of the AWS regions where Borneo will have the
    permission to sync resources or scan data.
    :param add_event_bridge_permission: If set to true, it indicates that the
    permission to publish to an EventBridge is enabled for the account
    :param trusted_data_planes: List of all trusted data plane ids to allow this
    account for access.
    :param enabled_resource_types: List of all enabled resource types
    """

    enable_inventory_policy: bool

    enable_aws_config_policy: bool

    enable_dataplane_deploy_policy: bool

    enable_dp_cli: bool

    regions: list[str]

    add_event_bridge_permission: bool | None = None
    trusted_data_planes: list[str] | None = None
    enabled_resource_types: list[str] | None = None


class AccountRoleType(StrEnum):
    CONTROL_PLANE = "control_plane"
    DATA_PLANE = "data_plane"
    CLI = "cli"


@dataclass(kw_only=True)
class AccountRoleValidation:
    """
    :param validated: Validation status for the role
    :param data_plane_id: Data plane identifier of the role for data plane based
    roles.
    """

    validated: bool | None = None
    data_plane_id: str | None = None


@dataclass(kw_only=True)
class AccountRole:
    """
    :param name: Name of the role
    :param type: Type of role
    :param external_id: External Id assosiated with the role
    :param validations: Validation status for control plane and data plane role
    with
    associated data planes.
    """

    name: str | None = None
    type: str | None = None
    external_id: str | None = None
    validations: list[AccountRoleValidation] | None = None


class AccountStatus(StrEnum):
    """The current account status."""

    NEW = "NEW"
    VALIDATED = "VALIDATED"
    VALIDATION_FAILED = "VALIDATION_FAILED"
    DELETING = "DELETING"
    DELETED = "DELETED"


@dataclass(kw_only=True)
class AccountStatusDetails:

    validation_time: int | None = None
    validation_message: str | None = None


class AccountType(StrEnum):
    """The type of account."""

    AWS = "AWS"
    GCP = "GCP"
    AZURE = "AZURE"


@dataclass(kw_only=True)
class ValidationExceptionField:
    """Describes one specific validation failure for an input member.

    :param path: A JSONPointer expression to the structure member whose value failed
    to satisfy the modeled constraints.
    :param message: A detailed description of the validation failure.
    """

    path: str

    message: str


@dataclass(kw_only=True)
class DescribeAccountInput:
    """
    :param account_id: The unique Borneo account ID.
    """

    organisation_id: int | None = None
    account_id: str | None = None


@dataclass(kw_only=True)
class DescribeAccountOutput:
    """The Account Details represent a list of information related to a specific
    account

    :param account_id: The unique Borneo account ID.
    :param name: The account name.
    :param cloud_account_id: The cloud account ID, e.g. a 12-digit AWS account ID.
    :param type: Type of account.
    :param meta: Additional metadata about the account.
    :param roles: List of control plane and data plane roles with its respective
    status
    :param permissions: Which actions Borneo is allowed to perform on this account
    using the Borneo Control Plane and/or Data Plane IAM roles.
    :param status_details: Details about the account's last validation time and
    status message
    :param status: The account status.
    :param created_at: Time when the account was registered within Borneo, as a Unix
    epoch timestamp.
    :param updated_at: Time when the account was last updated within Borneo, as a
    Unix epoch timestamp.
    :param deleted_at: Time when the account was removed from Borneo, as a Unix
    epoch timestamp.
    :param created_by: Email of the user who added the AWS account
    :param owner_email: Email of the owner of the AWS account
    """

    account_id: str

    name: str | None = None
    cloud_account_id: str | None = None
    type: str | None = None
    meta: dict[str, Document] | None = None
    roles: list[AccountRole] | None = None
    permissions: AccountPermissions | None = None
    status_details: AccountStatusDetails | None = None
    status: str | None = None
    created_at: datetime | None = None
    updated_at: datetime | None = None
    deleted_at: datetime | None = None
    created_by: str | None = None
    owner_email: str | None = None


@dataclass(kw_only=True)
class DescribeCloudAccountInput:
    """
    :param cloud_account_id: The cloud-provider specific account ID, e.g. a 12-digit
    AWS account ID.
    """

    organisation_id: int | None = None
    cloud_account_id: str | None = None


@dataclass(kw_only=True)
class DescribeCloudAccountOutput:
    """The Account Details represent a list of information related to a specific
    account

    :param account_id: The unique Borneo account ID.
    :param name: The account name.
    :param cloud_account_id: The cloud account ID, e.g. a 12-digit AWS account ID.
    :param type: Type of account.
    :param meta: Additional metadata about the account.
    :param roles: List of control plane and data plane roles with its respective
    status
    :param permissions: Which actions Borneo is allowed to perform on this account
    using the Borneo Control Plane and/or Data Plane IAM roles.
    :param status_details: Details about the account's last validation time and
    status message
    :param status: The account status.
    :param created_at: Time when the account was registered within Borneo, as a Unix
    epoch timestamp.
    :param updated_at: Time when the account was last updated within Borneo, as a
    Unix epoch timestamp.
    :param deleted_at: Time when the account was removed from Borneo, as a Unix
    epoch timestamp.
    :param created_by: Email of the user who added the AWS account
    :param owner_email: Email of the owner of the AWS account
    """

    account_id: str

    name: str | None = None
    cloud_account_id: str | None = None
    type: str | None = None
    meta: dict[str, Document] | None = None
    roles: list[AccountRole] | None = None
    permissions: AccountPermissions | None = None
    status_details: AccountStatusDetails | None = None
    status: str | None = None
    created_at: datetime | None = None
    updated_at: datetime | None = None
    deleted_at: datetime | None = None
    created_by: str | None = None
    owner_email: str | None = None


@dataclass(kw_only=True)
class AccountFilter:
    """
    :param search: Search for accounts by name.
    :param type: Filter accounts by account type.
    :param status: Filter accounts by status.
    :param account_id: Filter accounts by the Borneo account ID.
    :param cloud_account_id: Filter accounts by the cloud-provider specific account
    ID.
    :param active_states: Filters out accounts which are not in deleting or deleted
    states
    """

    search: str | None = None
    type: str | None = None
    status: list[str] | None = None
    account_id: list[str] | None = None
    cloud_account_id: list[str] | None = None
    active_states: bool | None = None


class SortOrder(StrEnum):
    ASC = "ASC"
    DESC = "DESC"


@dataclass(kw_only=True)
class SortRecords:
    """Specifies how to sort the returned results.

    :param column: The column name to sort on.
    :param order: The sort order.
    """

    column: str | None = None
    order: str | None = None


@dataclass(kw_only=True)
class ListAccountsInput:
    """
    :param page_size: The maximum number of records to return per API call. If more
    records
    are available, the response will be truncated and will contain
    a
    "nextToken" value, which can be used to return additional records.
    :param next_token: Optional "nextToken" value from the last API response.
    :param sort: Specifies how to sort the returned results.
    """

    organisation_id: int | None = None
    filter: AccountFilter | None = None
    page_size: int | None = None
    next_token: str | None = None
    sort: SortRecords | None = None


@dataclass(kw_only=True)
class AccountListMember:
    """The Account Details represent a list of information related to a specific
    account

    :param account_id: The unique Borneo account ID.
    :param name: The account name.
    :param cloud_account_id: The cloud account ID, e.g. a 12-digit AWS account ID.
    :param type: Type of account.
    :param meta: Additional metadata about the account.
    :param roles: List of control plane and data plane roles with its respective
    status
    :param permissions: Which actions Borneo is allowed to perform on this account
    using the Borneo Control Plane and/or Data Plane IAM roles.
    :param status_details: Details about the account's last validation time and
    status message
    :param status: The account status.
    :param created_at: Time when the account was registered within Borneo, as a Unix
    epoch timestamp.
    :param updated_at: Time when the account was last updated within Borneo, as a
    Unix epoch timestamp.
    :param deleted_at: Time when the account was removed from Borneo, as a Unix
    epoch timestamp.
    :param created_by: Email of the user who added the AWS account
    :param owner_email: Email of the owner of the AWS account
    """

    account_id: str

    name: str | None = None
    cloud_account_id: str | None = None
    type: str | None = None
    meta: dict[str, Document] | None = None
    roles: list[AccountRole] | None = None
    permissions: AccountPermissions | None = None
    status_details: AccountStatusDetails | None = None
    status: str | None = None
    created_at: datetime | None = None
    updated_at: datetime | None = None
    deleted_at: datetime | None = None
    created_by: str | None = None
    owner_email: str | None = None


@dataclass(kw_only=True)
class ListAccountsOutput:
    """
    :param accounts: The list of accounts matching the filter conditions, up to the
    specified page size.
    :param total: The total number of resources matching the filter condition.
    This
    value can be larger than the number of records returned in the response,
    in
    which case a "nextToken" will be included in the response to retrieve
    the next
    set of records.
    :param next_token: A token that can used in a subsequent API request to retrieve
    the next set of records.
    :param sort: The sorting order
    """

    accounts: list[AccountListMember] | None = None
    total: int | None = None
    next_token: str | None = None
    sort: SortRecords | None = None


@dataclass(kw_only=True)
class ActiveResourcesStats:

    timestamp: datetime | None = None
    active_count: int | None = None


@dataclass(kw_only=True)
class AddDiscoveredRecipientAsRecipientsInput:
    """
    :param discovered_recipient_ids: Identifiers of the discovered recipients to add
    as recipients.
    """

    organisation_id: int | None = None
    discovered_recipient_ids: list[str] | None = None


@dataclass(kw_only=True)
class AddDiscoveredRecipientAsRecipientsOutput:

    recipient_ids: list[str] | None = None


@dataclass(kw_only=True)
class AdditionalDataOptions:

    violation_summary: bool | None = None
    framework_exceptions_count: bool | None = None


@dataclass(kw_only=True)
class ChildResourceStatsOptions:
    """Selects which type of aggregate stats from child resources to include in the
    response.

    :param scans: Include aggregate scan stats from child resources.
    :param data_size: Include aggregate data size stats from child resources.
    """

    scans: bool | None = None
    data_size: bool | None = None


@dataclass(kw_only=True)
class AdditionalInventoryDataOptions:
    """
    :param child_resource_stats: Include aggregate child resource stats in the
    response.
    :param violation_metrics: Include violation count by severity for resource and
    child resources.
    :param framework_exceptions_count: Include framework exceptions count for the
    resource and its children
    :param cloud_connection_details: Include cloud connection name and provider.
    """

    child_resource_stats: ChildResourceStatsOptions | None = None
    violation_metrics: bool | None = None
    framework_exceptions_count: bool | None = None
    cloud_connection_details: bool | None = None


class ProcessingActivityDocType(StrEnum):
    THRESHOLD = "threshold"
    DPIA = "dpia"
    THRESHOLD_AND_DPIA = "thresholdAndDpia"


@dataclass(kw_only=True)
class AddTaDpiaFileInput:

    organisation_id: int | None = None
    processing_activity_id: str | None = None
    uploaded_file_id: str | None = None
    doc_type: str | None = None
    link: str | None = None


@dataclass
class AddTaDpiaFileOutput:
    pass


@dataclass(kw_only=True)
class AggregateScanStats:

    scan_durationin_ms: float | None = None
    data_scanned: float | None = None
    identifiers_matched: int | None = None
    scanned_resources: int | None = None
    total_resource_count: int | None = None
    failed_scans: int | None = None
    total_scans: int | None = None
    successful_scans: int | None = None
    repeated_scans: int | None = None
    one_time_scans: int | None = None
    full_scans: int | None = None
    sample_scans: int | None = None
    increment_scanned_resources: int | None = None


@dataclass(kw_only=True)
class ArchiveDiscoveredRecipientInput:
    """
    :param discovered_recipient_id: Identifier of the discovered recipient.
    """

    organisation_id: int | None = None
    discovered_recipient_id: str | None = None


@dataclass
class ArchiveDiscoveredRecipientOutput:
    pass


class LocationType(StrEnum):
    EXTERNAL = "external"
    REMOTE = "remote"
    OFFICE = "office"


class Type(StrEnum):
    """Indicates the type of the asset. An asset can be one of the several options."""

    APPLICATIONS = "applications"
    CLOUDSERVICES = "cloudServices"
    COMMUNICATIONS = "communications"
    DATAINFORMATION = "dataInformation"
    EXTERNALSTORAGE = "externalStorage"
    HARDWARE = "hardware"
    HOSTING = "hosting"
    FURNITURE = "furniture"
    OTHER = "other"
    PAPERDOCUMENTATION = "paperDocumentation"
    PRINTER = "printer"
    SERVER = "server"
    SHREDDER = "shredder"
    VIDEOSURVEILLANCE = "videoSurveillance"
    FILINGROOM = "filingRoom"


@dataclass(kw_only=True)
class CreateAssetInput:
    """
    :param name: Name of the asset to create
    :param type: Indicates the type of the asset. An asset can be one of the several
    options.
    """

    organisation_id: int | None = None
    name: str | None = None
    type: str | None = None
    tom_ids: list[str] | None = None
    location_type: str | None = None
    location_id: str | None = None
    created_at: datetime | None = None


@dataclass(kw_only=True)
class CreateAssetOutput:
    """
    :param asset_id: Identifier of the asset
    """

    asset_id: str


@dataclass(kw_only=True)
class DescribeAssetInput:
    """
    :param asset_id: Identifier of the asset
    """

    organisation_id: int | None = None
    asset_id: str | None = None


class TomStatus(StrEnum):
    """Status of the TOM, i.e. whether the TOM is already implemented,
    implementation
    is pending, or the TOM is not implemented.
    """

    IMPLEMENTED = "implemented"
    AVAILABLE = "available"
    PENDING_TO_IMPLEMENT = "pendingToImplement"


class TomType(StrEnum):
    """Type of the TOM"""

    ORGANISATIONAL = "organisational"
    TECHNICAL = "technical"


@dataclass(kw_only=True)
class TomListMember:
    """
    :param tom_id: Identifier of the TOM
    :param name: Key that represents the name of the TOM
    :param description: Key that represents the description of the TOM
    :param list_: Standard to which the TOM belongs, i.e. HIPAA
    :param category: key that represents the category of the TOM
    :param type: Type of the TOM
    :param reference_code: The reference code of the TOM
    :param status: Status of the TOM, i.e. whether the TOM is already implemented,
    implementation is pending, or the TOM is not implemented.
    :param note: Additional information related to the TOM
    """

    tom_id: str | None = None
    name: str | None = None
    description: str | None = None
    list_: str | None = None
    category: str | None = None
    type: str | None = None
    reference_code: str | None = None
    status: str | None = None
    note: str | None = None


@dataclass(kw_only=True)
class HeadquarterRecord:
    """
    :param headquarter_id: The identifier of the headquarter
    :param name: The name of the headquarter
    :param city: The locality of the headquarter
    :param address: The address of the headquarter
    :param country: Two letter code that represents the country where the
    headquarter is located
    :param zipcode: The zipcode of the headquarter
    """

    headquarter_id: str

    name: str | None = None
    city: str | None = None
    address: str | None = None
    country: str | None = None
    zipcode: str | None = None
    toms: list[TomListMember] | None = None


@dataclass(kw_only=True)
class DescribeAssetOutput:
    """
    :param asset_id: Identifier of the asset
    :param name: Name of the asset
    :param type: Indicates the type of the asset. An asset can be one of the several
    options.
    """

    asset_id: str

    name: str | None = None
    type: str | None = None
    tom_ids: list[str] | None = None
    location_type: str | None = None
    location_id: str | None = None
    toms: list[TomListMember] | None = None
    location: HeadquarterRecord | None = None


@dataclass(kw_only=True)
class AssetSelectFilter:
    """
    :param search: Free-form text search to apply to the asset name.
    """

    search: str | None = None
    type: list[str] | None = None


@dataclass(kw_only=True)
class ListAssetsInput:
    """
    :param next_token: The `nextToken` from the last page of results to retrieve the
    next page of results.
    :param page_size: The maximum number of records to return per API call. If more
    records
    are available, the response will be truncated and will contain
    a
    "nextToken" value, which can be used to return additional records.
    :param sort: Specifies how to sort the returned results.
    """

    organisation_id: int | None = None
    next_token: str | None = None
    page_size: int | None = None
    filter: AssetSelectFilter | None = None
    sort: SortRecords | None = None


@dataclass(kw_only=True)
class AssetListRecord:
    """
    :param asset_id: Identifier of the asset
    :param type: Indicates the type of the asset. An asset can be one of the several
    options.
    """

    asset_id: str

    name: str | None = None
    type: str | None = None
    location_type: str | None = None
    toms: list[TomListMember] | None = None
    location: HeadquarterRecord | None = None
    no_of_processing_activities: int | None = None


@dataclass(kw_only=True)
class ListAssetsOutput:
    """
    :param assets: The list of assets up to the specified page size.
    :param total: The total number of assets. This value can be larger than the
    number of records
     returned in the response, in which case a "nextToken" will be
    included in the response
     to retrieve the next set of records.
    :param next_token: A token that can used in a subsequent API request to retrieve
    the next
    set of records.
    :param sort: Specifies how to sort the returned results.
    """

    assets: list[AssetListRecord]

    total: int

    next_token: str | None = None
    sort: SortRecords | None = None


@dataclass(kw_only=True)
class RemoveAssetInput:
    """
    :param asset_id: Identifier of the asset
    """

    organisation_id: int | None = None
    asset_id: str | None = None


@dataclass
class RemoveAssetOutput:
    pass


@dataclass(kw_only=True)
class UpdateAssetInput:
    """
    :param asset_id: Identifier of the asset
    :param name: Name of the asset
    :param type: Indicates the type of the asset. An asset can be one of the several
    options.
    """

    organisation_id: int | None = None
    asset_id: str | None = None
    name: str | None = None
    type: str | None = None
    tom_ids: list[str] | None = None
    location_type: str | None = None
    location_id: str | None = None


@dataclass
class UpdateAssetOutput:
    pass


@dataclass(kw_only=True)
class AssetRecord:
    """
    :param asset_id: Identifier of the asset
    :param name: Name of the asset
    :param type: Indicates the type of the asset. An asset can be one of the several
    options.
    """

    asset_id: str

    name: str | None = None
    type: str | None = None
    tom_ids: list[str] | None = None
    location_type: str | None = None
    location_id: str | None = None
    toms: list[TomListMember] | None = None
    location: HeadquarterRecord | None = None


class AutomationStatus(StrEnum):
    IGNORED = "ignored"
    CREATED = "created"
    NEW = "new"


class ObjectType(StrEnum):
    EMAIL = "email"


class SuggestionSource(StrEnum):
    USER = "user"
    EMPLOYEE = "employee"
    ALL = "all"


@dataclass(kw_only=True)
class ListAutoSuggestionsInput:

    organisation_id: int | None = None
    prefix: str | None = None
    object_type: str | None = None
    source: str = "all"


@dataclass(kw_only=True)
class Suggestion:

    object_id: str | None = None
    object_type: str | None = None
    object_name: str | None = None
    source: str | None = None


@dataclass(kw_only=True)
class ListAutoSuggestionsOutput:

    suggestions: list[Suggestion] | None = None


@dataclass(kw_only=True)
class ComplianceDetail:
    """
    :param name: Classification name.
    :param compliant: `true` if no infotypes belonging to the classification were
    detected in the data source; `false` otherwise.
    :param infotypes: List of infotypes belonging to the classification that were
    detected in the data source.
    """

    name: str | None = None
    compliant: bool | None = None
    infotypes: list[str] | None = None


@dataclass(kw_only=True)
class DescribeCatalogResourceInput:
    """
    :param resource_id: The unique resource ID.
    """

    organisation_id: int | None = None
    resource_id: str | None = None
    include_parent_details: bool | None = None


@dataclass(kw_only=True)
class OwnerObject:
    """Information about a resource owner.

    :param name: Name of the owner.
    :param id: Id of the owner.
    :param meta: Additional metadata about the owner.
    """

    name: str | None = None
    id: str | None = None
    meta: Document | None = None


@dataclass(kw_only=True)
class ResourceParent:

    name: str | None = None


@dataclass(kw_only=True)
class SampleTokens:
    """
    :param token: The token value that was matched to an infotype in the scanned
    data. The
    token value may be empty if token collection was disabled for the
    scan.
    If a token was collected, it may have masking applied to it, depending
    on
    configuration of the scan and the masking configuration for the
    infotype.
    :param info_type: The infotype of the token.
    :param column: Optional column number where the token was found. Only applicable
    to structured data sources.
    :param column_name: Optional column name where the token was found. Only
    applicable to structured data sources.
    :param row: Optional row number where the token was found. Only applicable to
    structured data sources.
    :param confidence: Numeric confidence value of the token
    """

    token: str | None = None
    info_type: str | None = None
    column: int | None = None
    column_name: str | None = None
    row: int | None = None
    confidence: int | None = None


@dataclass(kw_only=True)
class InfotypeSnapshot:
    """Snapshot result for a specific infotype.

    :param found: Whether the infotype was found during the scan.
    :param count: The actual number of matches for the infotype in the scan. Will
    only be present for some types of inspection results.
    """

    found: bool

    count: int | None = None


class SourceOfResource(StrEnum):
    """How the resource was added to the catalog, either through automatic
    data
    source
    discovery or manually added by the user. Catalog "leaf"
    resources,
    like database
    tables, are always added through automatic discovery;
    the
    "source" property is
    not set for these resources.
    """

    DISCOVERED = "discovered"
    MANUAL = "manual_resource"


class ResourceStatus(StrEnum):
    """Current status of the resource. Only "active" resources can be scanned."""

    NEW = "NEW"
    VALIDATED = "VALIDATED"
    VALIDATION_FAILED = "VALIDATION_FAILED"
    ACTIVE = "ACTIVE"
    DEPLOYMENT_SUCCESS = "DEPLOYMENT_SUCCESS"
    DEPLOYMENT_FAILED = "DEPLOYMENT_FAILED"
    DELETING = "DELETING"
    DELETED = "DELETED"
    CONNECTOR_DELETED = "CONNECTOR_DELETED"
    HOST_CONNECTIVITY_FAILED = "HOST_CONNECTIVITY_FAILED"
    CREDENTIAL_CHECK_FAILED = "CREDENTIAL_CHECK_FAILED"


@dataclass(kw_only=True)
class DescribeCatalogResourceOutput:
    """
    :param resource_id: Unique identifier of the resource.
    :param name: Resource name.
    :param type: Resource type.
    :param meta: Additonal resource metadata.
    :param owner: List of resource owners.
    :param status: Current status of the resource. Only "active" resources can be
    scanned.
    :param parent_id: Resource ID of the parent resource, e.g. a database instance,
    or a cloud provider account.
    :param source: How the resource was added to the catalog, either through
    automatic data
    source discovery or manually added by the user. Catalog "leaf"
    resources,
    like database tables, are always added through automatic discovery;
    the
    "source" property is not set for these resources.
    :param snapshot: Inspection "snapshot" result, providing a count of matched
    infotypes in
    the scanned data.
    :param sample_tokens: Sample tokens collected during a scan. Only available if
    the "Collect
    Tokens" option was enabled for the scan. Page-level results return
    sample
    tokens in the `tokens` property, while scan-level results return
    sample
    tokens in the `sampleTokens` property.
    :param compliance: Information about the classification of a data source based
    on the detected
    infotypes.
    :param last_scanned: Time when the resource was last scanned, in Unix epoch
    time.
    """

    resource_id: str

    name: str | None = None
    type: str | None = None
    meta: dict[str, Document] | None = None
    owner: list[OwnerObject] | None = None
    owner_email: str | None = None
    status: str | None = None
    parent_id: str | None = None
    source: str | None = None
    snapshot: dict[str, InfotypeSnapshot] | None = None
    sample_tokens: dict[str, list[SampleTokens]] | None = None
    compliance: list[ComplianceDetail] | None = None
    last_scanned: datetime | None = None
    parent: ResourceParent | None = None


class TimestampComparator(StrEnum):
    """Base of comparison to use when comparing two timestamps."""

    AFTER = "after"
    BEFORE = "before"


class InfoTypeFilterOperation(StrEnum):
    AND_ = "AND"
    OR_ = "OR"


@dataclass(kw_only=True)
class InfoTypesCombinationFilter:
    """Filter results based on the infotypes detected in a resource.

    :param info_types: The list of infotypes to filter on.
    :param ops: Whether to match resources that include all of the infotypes (AND)
    or any of the infotypes (OR) specified in the `infoTypes` list.
    """

    info_types: list[str]

    ops: str


@dataclass(kw_only=True)
class InventoryTagFilter:

    source: str

    tag_key: str

    tag_value: str


class SeverityLevel(StrEnum):
    """Violation & data classification severity"""

    INFORMATIONAL = "INFORMATIONAL"
    LOW = "LOW"
    MEDIUM = "MEDIUM"
    HIGH = "HIGH"
    CRITICAL = "CRITICAL"


@dataclass(kw_only=True)
class LeafResourceFilter:
    """Filters resources based on the specified filter criteria.

    :param search: Free-text search on the resource name.
    :param account: One or more cloud provider account IDs.
    :param instance: One or more resource IDs of the instances to which the
    resources belong,
    i.e. the parent resource ID.
    :param database: List tables from a specific database. Supported for the
    following
    resource types: (RDS) PostgreSQL, (RDS) MySQL, MongoDB.
    :param dataset: List tables from a specific dataset. Supported for on the
    following
    resource types: BigQuery.
    :param schema: List tables from a specific schema. Supported for the following
    resource types: Presto.
    :param drive_id: List drives from a specific driveId. Supported for the
    following resource types: Gdrive.
    :param org_unit_id: List orgUnits from a specific orgUnitIds. Supported for the
    following resource types: Gdrive.
    :param drive_type: List drives from a specific drive type. Supported for the
    following resource types: Gdrive.
    :param region: One or more cloud provider regions.
    :param status: Filter the resources based on list of status.
    :param parent_id: Filter the resources which has the specified parent ID.
    :param resource_id: Filter the resources with the specified resource IDs.
    :param resource_type: Filter the resources which can be scanned by Borneo.
    :param scanned: Include only resources that have been scanned.
    :param info_types: Filter the resources matching with the list of infoTypes.
    :param classification: Filter the resources matching with the list of
    classifications.
    :param categories: Filter the resources matching with the list of categories.
    :param space_status: Filter conlfluences based on status
    :param space_type: Filter conlfluences based on type
    :param severity_score: Filter the resources based on the assigned risk severity
    score; "critical" = 4, "high" = 3, "medium" = 2, "low" = 1.
    :param resource_tags: Filter the resources based on tags
    :param no_owner: Include only resources that have not been assigned an owner.
    :param has_owner: Include only resources that have been assigned an owner.
    :param first_seen: Set of conditions for comparing two timestamps.
    """

    search: str | None = None
    account: list[str] | None = None
    project_ids: list[str] | None = None
    instance: list[str] | None = None
    database: list[str] | None = None
    dataset: list[str] | None = None
    schema: list[str] | None = None
    drive_id: list[str] | None = None
    org_unit_id: list[str] | None = None
    drive_type: list[str] | None = None
    region: list[str] | None = None
    status: list[str] | None = None
    parent_id: str | None = None
    resource_id: list[str] | None = None
    resource_type: list[str] | None = None
    scanned: bool | None = None
    info_types: InfoTypesCombinationFilter | None = None
    classification: list[str] | None = None
    categories: list[str] | None = None
    space_status: list[str] | None = None
    space_type: list[str] | None = None
    severity_score: list[str] | None = None
    resource_tags: list[InventoryTagFilter] | None = None
    no_owner: bool | None = None
    has_owner: bool | None = None
    first_seen: dict[str, datetime] | None = None
    catalog: list[str] | None = None


@dataclass(kw_only=True)
class ListCatalogLeafResourcesInput:
    """
    :param source_type: Filter resource based on the resource type.
    :param filter: Filters resources based on the specified filter criteria.
    :param page_size: The maximum number of records to return per API call. If more
    records
    are available, the response will be truncated and will contain
    a
    "nextToken" value, which can be used to return additional records.
    :param next_token: Optional "nextToken" value from the last API response.
    :param sort: Specifies how to sort the returned results.
    """

    organisation_id: int | None = None
    source_type: str | None = None
    filter: LeafResourceFilter | None = None
    include: AdditionalDataOptions | None = None
    page_size: int | None = None
    next_token: str | None = None
    sort: SortRecords | None = None


@dataclass(kw_only=True)
class LeafResourceParent:

    name: str | None = None


@dataclass(kw_only=True)
class SeverityCount:
    """
    :param severity: Violation & data classification severity
    """

    severity: str | None = None
    count: int | None = None


@dataclass(kw_only=True)
class LeafResourcesDataRecordMember:
    """
    :param resource_id: Unique identifier of the resource.
    :param name: Name of the resource.
    :param parent_id: Resource ID of the parent resource, e.g. a database instance,
    or a cloud provider account.
    :param type: Resource type.
    :param meta: Additonal resource metadata.
    :param snapshot: Inspection "snapshot" result, providing a count of matched
    infotypes in
    the scanned data.
    :param compliance: Information about the classification of a data source based
    on the detected
    infotypes.
    :param owner: List of resource owners.
    :param status: Current status of the resource. Only "active" resources can be
    scanned.
    :param last_scanned: Time when the resource was last scanned, in Unix epoch
    time.
    """

    resource_id: str

    name: str | None = None
    parent_id: str | None = None
    type: str | None = None
    meta: dict[str, Document] | None = None
    snapshot: dict[str, InfotypeSnapshot] | None = None
    compliance: list[ComplianceDetail] | None = None
    owner: list[OwnerObject] | None = None
    owner_email: str | None = None
    status: str | None = None
    last_scanned: datetime | None = None
    violation_metrics: list[SeverityCount] | None = None
    framework_exceptions_count: int | None = None
    parent: LeafResourceParent | None = None


@dataclass(kw_only=True)
class ListCatalogLeafResourcesOutput:
    """
    :param resources: The list of resources matching the filter conditions, up to
    the specified page size.
    :param count: The total number of resources matching the filter condition.
    This
    value can be larger than the number of records returned in the response,
    in
    which case a "nextToken" will be included in the response to retrieve
    the next
    set of records.
    :param next_token: A token that can used in a subsequent API request to retrieve
    the next set of records.
    """

    resources: list[LeafResourcesDataRecordMember] | None = None
    count: int | None = None
    next_token: str | None = None


@dataclass(kw_only=True)
class ListCatalogLeafResourcesExportInput:
    """
    :param source_type: Filter resource based on the source type.
    eg: 'MYSQL',
    'RDS_MYSQL', 'S3', 'PRESTO', etc.
    :param filter: Filters resources based on the specified filter criteria.
    :param sort: Specifies how to sort the returned results.
    :param detailed: Set to `true` if the results exported to have detailed
    column
    level information of the detected infotypes.
    """

    organisation_id: int | None = None
    source_type: str | None = None
    filter: LeafResourceFilter | None = None
    sort: SortRecords | None = None
    detailed: bool | None = None


@dataclass(kw_only=True)
class ListCatalogLeafResourcesExportOutput:
    """
    :param url: The exported scan results will be available to download
    in the url
    with an expiry of 1 hour.
    """

    url: str | None = None


@dataclass(kw_only=True)
class GetChatbotResponseInput:

    query: str | None = None
    chat_history: list[Document] | None = None
    organisation_id: int | None = None


@dataclass(kw_only=True)
class GetChatbotResponseOutput:

    id: str | None = None
    answer: str | None = None
    relevant_links: list[Document] | None = None
    recommendations: str | None = None
    summary: str | None = None


@dataclass(kw_only=True)
class UpdatefeedbackInput:

    post_id: str | None = None
    rating: int | None = None
    organisation_id: int | None = None


@dataclass(kw_only=True)
class UpdatefeedbackOutput:

    status: str | None = None


class ConnectorState(StrEnum):
    """The current state of the connector. Only connectors in the "available"
    state
    can
    be used to scan data sources.
    """

    DEPLOYEMENT_SUCCESS = "deployment_success"
    DEPLOYEMENT_FAILED = "deployment_failed"
    HOSTCONNECTIVITY_FAILED = "hostconnectivity_failed"
    CREDENTIALCHECK_FAILED = "credentialcheck_failed"
    PENDING = "pending"
    AVAILABLE = "available"
    DESTROYING = "destroying"
    DESTROYED = "destroyed"
    UNAVAILABLE = "unavailable"


@dataclass(kw_only=True)
class ConnectorStatusDetails:
    """
    :param state: The current state of the connector. Only connectors in the
    "available"
    state can be used to scan data sources.
    """

    validation_time: int | None = None
    validation_message: str | None = None
    state: str | None = None


class CronValues(StrEnum):
    """The cron schedule expression to use for a recurring scan. Only a fixed set
    of
    cron expressions
    can be used to run scans at 30 minute, 1 hour, 1 day, or 1
    week
    intervals.
    """

    EVERY_30_MIN = "*/30 * * * *"
    EVERY_1_HOUR = "0 */1 * * *"
    EVERY_4_HOUR = "0 */4 * * *"
    EVERY_6_HOUR = "0 */6 * * *"
    EVERY_8_HOUR = "0 */8 * * *"
    EVERY_12_HOUR = "0 */12 * * *"
    EVERY_1_DAY = "0 0 * * *"
    EVERY_1_WEEK = "0 0 * * 0"
    EVERY_1_MONTH = "0 0 1 * *"
    EVERY_3_MONTH = "0 0 1 1,4,7,10 *"
    EVERY_6_MONTH = "0 0 1 1,7 *"
    CUSTOM = "CUSTOM"


@dataclass(kw_only=True)
class DescribeConnectorInput:
    """
    :param connector_id: The unique Borneo connector ID.
    """

    organisation_id: int | None = None
    connector_id: str | None = None


@dataclass(kw_only=True)
class DescribeConnectorOutput:
    """
    :param connector_id: The ID of the connector.
    :param name: The name of the connector.
    :param status_details: Details about the account's last validation time and
    status message
    :param state: State of the connector.
    :param data_plane_id: The ID of the data plane in which the connector is
    deployed.
    :param resource_type: The resource type that the connector supports.
    :param connector_type: The connector type.
    :param resource_id: The resource ID of the data source instance associated with
    the connector.
    :param region: The cloud-provider region in which the connector is deployed.
    :param created_at: The time at which the connector was created, in Unix epoch
    time.
    :param updated_at: The time at which the connector was last updated, in Unix
    epoch time.
    :param resource_account_id: For S3 and DynamoDB connectors, this is the cloud
    provider specific
    account ID of the data sources that the connector is
    configured to scan.
    :param next_meta_data_sync_schedule: Specifies the next metasync schedule
    :param is_meta_data_sync_running: True if the meta sync is running currently
    :param meta_data_sync_interval: Specifies the metasync interval
    :param created_by: Email of the user who created connector
    """

    connector_id: str

    name: str | None = None
    status_details: ConnectorStatusDetails | None = None
    state: str | None = None
    data_plane_id: str | None = None
    resource_type: str | None = None
    connector_type: str | None = None
    resource_id: str | None = None
    region: str | None = None
    created_at: datetime | None = None
    updated_at: datetime | None = None
    params: dict[str, Document] | None = None
    resource_account_id: str | None = None
    gcp_connection_id: str | None = None
    next_meta_data_sync_schedule: datetime | None = None
    is_meta_data_sync_running: bool | None = None
    meta_data_sync_interval: str | None = None
    custom_meta_data_sync_interval: str | None = None
    created_by: str | None = None


@dataclass(kw_only=True)
class ConnectorFilter:
    """
    :param search: Search for connectors by name.
    :param names: Filter based on connector name.
    :param states: Filter based on connector state.
    :param active_states: Filters out connectors which are not in destroying or
    destroyed states
    :param connector_ids: Filter based on the connector IDs.
    :param data_plane_ids: Filter based on the data plane in which the connector is
    deployed.
    :param resource_types: Filter based on the resource type that the connector
    supports.
    :param connector_types: Filter based on the connector type.
    :param resource_ids: Filter based on the resource ID of the data source instance
    associated with the connector.
    """

    search: str | None = None
    names: list[str] | None = None
    states: list[str] | None = None
    active_states: bool | None = None
    connector_ids: list[str] | None = None
    data_plane_ids: list[str] | None = None
    resource_types: list[str] | None = None
    connector_types: list[str] | None = None
    resource_ids: list[str] | None = None


@dataclass(kw_only=True)
class ListConnectorsInput:
    """
    :param page_size: The maximum number of records to return per API call. If more
    records
    are available, the response will be truncated and will contain
    a
    "nextToken" value, which can be used to return additional records.
    :param next_token: Optional "nextToken" value from the last API response.
    :param sort: Specifies how to sort the returned results.
    """

    organisation_id: int | None = None
    filter: ConnectorFilter | None = None
    page_size: int | None = None
    next_token: str | None = None
    sort: SortRecords | None = None


@dataclass(kw_only=True)
class ConnectorListMember:
    """
    :param connector_id: The ID of the connector.
    :param name: The name of the connector.
    :param status_details: Details about the account's last validation time and
    status message
    :param state: State of the connector.
    :param data_plane_id: The ID of the data plane in which the connector is
    deployed.
    :param resource_type: The resource type that the connector supports.
    :param connector_type: The connector type.
    :param resource_id: The resource ID of the data source instance associated with
    the connector.
    :param region: The cloud-provider region in which the connector is deployed.
    :param created_at: The time at which the connector was created, in Unix epoch
    time.
    :param updated_at: The time at which the connector was last updated, in Unix
    epoch time.
    :param resource_account_id: For S3 and DynamoDB connectors, this is the cloud
    provider specific
    account ID of the data sources that the connector is
    configured to scan.
    :param next_meta_data_sync_schedule: Specifies the next metasync schedule
    :param is_meta_data_sync_running: True if the meta sync is running currently
    :param meta_data_sync_interval: Specifies the metasync interval
    :param created_by: Email of the user who created connector
    """

    connector_id: str

    name: str | None = None
    status_details: ConnectorStatusDetails | None = None
    state: str | None = None
    data_plane_id: str | None = None
    resource_type: str | None = None
    connector_type: str | None = None
    resource_id: str | None = None
    region: str | None = None
    created_at: datetime | None = None
    updated_at: datetime | None = None
    params: dict[str, Document] | None = None
    resource_account_id: str | None = None
    gcp_connection_id: str | None = None
    next_meta_data_sync_schedule: datetime | None = None
    is_meta_data_sync_running: bool | None = None
    meta_data_sync_interval: str | None = None
    custom_meta_data_sync_interval: str | None = None
    created_by: str | None = None


@dataclass(kw_only=True)
class ListConnectorsOutput:
    """
    :param connectors: The list of connectors matching the filter conditions, up to
    the specified page size.
    :param total: The total number of resources matching the filter condition.
    This
    value can be larger than the number of records returned in the response,
    in
    which case a "nextToken" will be included in the response to retrieve
    the next
    set of records.
    :param next_token: A token that can used in a subsequent API request to retrieve
    the next set of records.
    :param sort: The API sort order
    """

    connectors: list[ConnectorListMember] | None = None
    total: int | None = None
    next_token: str | None = None
    sort: SortRecords | None = None


@dataclass(kw_only=True)
class CreateAndSendDashboardReportInput:

    organisation_id: int | None = None
    dashboard_report_id: str | None = None


@dataclass
class CreateAndSendDashboardReportOutput:
    pass


class ReportType(StrEnum):
    PRIVACY_OPS = "PRIVACY_OPS_DASHBOARD"
    DATA_DISCOVERY = "DATA_DISCOVERY_DASHBOARD"
    PRIVACY_OPS_DATA_FLOW = "PRIVACY_OPS_DATA_FLOW"
    MULTI_ENTITY_PRIVACY_REPORT = "MULTI_ENTITY_PRIVACY_REPORT"
    SENSITIVE_DATA_DISTRIBUTION = "SENSITIVE_DATA_DISTRIBUTION"
    PERSONAL_VIOLATIONS_OVERVIEW = "PERSONAL_VIOLATIONS_OVERVIEW"
    INFRASTRUCTURE_CHANGES = "INFRASTRUCTURE_CHANGES"
    EXECUTIVE_REPORT = "EXECUTIVE_REPORT"
    SCANS_SUMMARY = "SCANS_SUMMARY"
    ROPA_UPDATES_REPORT = "ROPA_UPDATES_REPORT"


class Role(StrEnum):
    ADMIN = "borneo_admin"
    ENGINEER = "borneo_engineer"
    ANALYST = "borneo_analyst"
    NO_ACCESS_ROLE = "no_access_role"
    DATA_ENGINEER = "data_engineer"
    COMPLIANCE_ENGINEER = "compliance_engineer"
    PRIVACY_SUPERVISOR = "privacy_supervisor"
    DEPARTMENT_COORDINATOR = "department_coordinator"


class ReportStatus(StrEnum):
    SCHEDULED = "SCHEDULED"
    ONCE = "ONCE"
    DELETED = "DELETED"


@dataclass(kw_only=True)
class CreateDashboardReportInput:
    """
    :param frequency: The cron schedule expression to use for a recurring scan. Only
    a fixed set of cron expressions
    can be used to run scans at 30 minute, 1 hour, 1
    day, or 1 week intervals.
    """

    organisation_id: int | None = None
    name: str | None = None
    report_types: list[str] | None = None
    recipients_email: list[str] | None = None
    external_email: list[str] | None = None
    roles: list[str] | None = None
    status: str | None = None
    frequency: str | None = None
    created_by: str | None = None
    trigger_immediately: bool | None = None
    filters: dict[str, list[str]] | None = None


@dataclass(kw_only=True)
class CreateDashboardReportOutput:

    dashboard_report_id: str


@dataclass(kw_only=True)
class DashboardReportDelivery:

    report_delivery_id: str | None = None
    report_edition_id: str | None = None
    email: str | None = None
    tenant_id: str | None = None
    status: str | None = None


class ReportEditionStatus(StrEnum):
    CREATED = "CREATED"
    FAILED = "FAILED"


@dataclass(kw_only=True)
class DashboardReportEditionListMember:
    """
    :param frequency: The cron schedule expression to use for a recurring scan. Only
    a fixed set of cron expressions
    can be used to run scans at 30 minute, 1 hour, 1
    day, or 1 week intervals.
    """

    report_edition_id: str

    dashboard_report_id: str | None = None
    tenant_id: str | None = None
    frequency: str | None = None
    recipients_count: int | None = None
    status: str | None = None
    url: str | None = None
    report_delivery: list[DashboardReportDelivery] | None = None
    created_at: datetime | None = None
    updated_at: datetime | None = None


@dataclass(kw_only=True)
class DescribeDashboardReportInput:

    organisation_id: int | None = None
    dashboard_report_id: str | None = None


@dataclass(kw_only=True)
class DescribeDashboardReportOutput:
    """
    :param frequency: The cron schedule expression to use for a recurring scan. Only
    a fixed set of cron expressions
    can be used to run scans at 30 minute, 1 hour, 1
    day, or 1 week intervals.
    """

    dashboard_report_id: str

    name: str | None = None
    report_types: list[str] | None = None
    recipients_email: list[str] | None = None
    external_email: list[str] | None = None
    roles: list[str] | None = None
    frequency: str | None = None
    status: str | None = None
    report_edition: list[DashboardReportEditionListMember] | None = None
    created_by: str | None = None
    last_sent_time: datetime | None = None
    next_send_time: datetime | None = None
    deleted_at: datetime | None = None
    created_at: datetime | None = None
    updated_at: datetime | None = None


@dataclass(kw_only=True)
class DownloadDashboardReportInput:

    organisation_id: int | None = None
    report_type: str | None = None


@dataclass(kw_only=True)
class DownloadDashboardReportOutput:

    url: str | None = None


@dataclass(kw_only=True)
class DownloadDashboardReportForSuperAdminInput:

    report_type: str | None = None


@dataclass(kw_only=True)
class DownloadDashboardReportForSuperAdminOutput:

    url: str | None = None


@dataclass(kw_only=True)
class ReportSelectFilter:
    """
    :param search: Free-form text search to apply to the scan name.
    """

    search: str | None = None
    type: list[str] | None = None
    frequency: list[str] | None = None


@dataclass(kw_only=True)
class ListReportSchedulesInput:
    """
    :param next_token: The `nextToken` from the last page of results to retrieve the
    next page of results.
    :param page_size: The maximum number of records to return per API call. If more
    records
    are available, the response will be truncated and will contain
    a
    "nextToken" value, which can be used to return additional records.
    :param sort: Specifies how to sort the returned results.
    """

    organisation_id: int | None = None
    filter: ReportSelectFilter | None = None
    next_token: str | None = None
    page_size: int | None = None
    sort: SortRecords | None = None


@dataclass(kw_only=True)
class DashboardReportListMember:
    """
    :param frequency: The cron schedule expression to use for a recurring scan. Only
    a fixed set of cron expressions
    can be used to run scans at 30 minute, 1 hour, 1
    day, or 1 week intervals.
    """

    dashboard_report_id: str

    name: str | None = None
    report_types: list[str] | None = None
    recipients_email: list[str] | None = None
    external_email: list[str] | None = None
    roles: list[str] | None = None
    frequency: str | None = None
    status: str | None = None
    report_edition: list[DashboardReportEditionListMember] | None = None
    created_by: str | None = None
    last_sent_time: datetime | None = None
    next_send_time: datetime | None = None
    deleted_at: datetime | None = None
    created_at: datetime | None = None
    updated_at: datetime | None = None


@dataclass(kw_only=True)
class ListReportSchedulesOutput:
    """
    :param dashboard_reports: The list of inspection results matching the filter
    conditions, up to
    the specified page size.
    :param count: The total number of results matching the filter conditions.
    This
    value can be larger than the number of records returned in the response,
    in
    which case a "nextToken" will be included in the response to retrieve
    the next
    set of records.
    :param next_token: A token that can used in a subsequent API request to retrieve
    the next
    set of records.
    :param sort: The sorting order
    """

    dashboard_reports: list[DashboardReportListMember] | None = None
    count: int | None = None
    next_token: str | None = None
    sort: SortRecords | None = None


@dataclass(kw_only=True)
class RemoveDashboardReportInput:

    organisation_id: int | None = None
    dashboard_report_id: str | None = None


@dataclass(kw_only=True)
class RemoveDashboardReportOutput:

    dashboard_report_id: str


@dataclass(kw_only=True)
class UpdateDashboardReportInput:
    """
    :param frequency: The cron schedule expression to use for a recurring scan. Only
    a fixed set of cron expressions
    can be used to run scans at 30 minute, 1 hour, 1
    day, or 1 week intervals.
    """

    organisation_id: int | None = None
    dashboard_report_id: str | None = None
    recipients_email: list[str] | None = None
    external_email: list[str] | None = None
    roles: list[str] | None = None
    frequency: str | None = None


@dataclass(kw_only=True)
class UpdateDashboardReportOutput:

    dashboard_report_id: str


@dataclass(kw_only=True)
class DescribeDashboardReportEditionInput:

    organisation_id: int | None = None
    report_edition_id: str | None = None


@dataclass(kw_only=True)
class DescribeDashboardReportEditionOutput:
    """
    :param frequency: The cron schedule expression to use for a recurring scan. Only
    a fixed set of cron expressions
    can be used to run scans at 30 minute, 1 hour, 1
    day, or 1 week intervals.
    """

    report_edition_id: str

    dashboard_report_id: str | None = None
    tenant_id: str | None = None
    frequency: str | None = None
    recipients_count: int | None = None
    status: str | None = None
    url: str | None = None
    report_delivery: list[DashboardReportDelivery] | None = None
    created_at: datetime | None = None
    updated_at: datetime | None = None


@dataclass(kw_only=True)
class DownloadDashboardReportEditionInput:

    organisation_id: int | None = None
    report_edition_id: str | None = None


@dataclass(kw_only=True)
class DownloadDashboardReportEditionOutput:

    url: str | None = None


@dataclass(kw_only=True)
class ListReportsEditionInput:
    """
    :param dashboard_report_id: The `nextToken` from the last page of results to
    retrieve the next page of results.
    :param page_size: The maximum number of records to return per API call. If more
    records
    are available, the response will be truncated and will contain
    a
    "nextToken" value, which can be used to return additional records.
    :param sort: Specifies how to sort the returned results.
    """

    organisation_id: int | None = None
    dashboard_report_id: str | None = None
    next_token: str | None = None
    page_size: int | None = None
    sort: SortRecords | None = None


@dataclass(kw_only=True)
class ListReportsEditionOutput:
    """
    :param dashboard_report_editions: The list of inspection results matching the
    filter conditions, up to
    the specified page size.
    :param count: The total number of results matching the filter conditions.
    This
    value can be larger than the number of records returned in the response,
    in
    which case a "nextToken" will be included in the response to retrieve
    the next
    set of records.
    :param next_token: A token that can used in a subsequent API request to retrieve
    the next
    set of records.
    :param sort: The sorting order
    """

    dashboard_report_editions: list[DashboardReportEditionListMember] | None = None
    count: int | None = None
    next_token: str | None = None
    sort: SortRecords | None = None


class DashboardUserType(StrEnum):
    OKTA = "OKTA"
    GCP = "GCP"


@dataclass(kw_only=True)
class DashboardUserFilter:

    type: str | None = None
    id: str | None = None


@dataclass(kw_only=True)
class UserOrganisation:

    roles: list[str]

    organisation_id: int | None = None
    departments: list[str] | None = None


@dataclass(kw_only=True)
class CreateDashboardUserInput:

    email: str | None = None
    roles: list[str] | None = None
    organisations: list[UserOrganisation] | None = None
    name: str | None = None
    filter: DashboardUserFilter | None = None
    organisation_id: int | None = None


@dataclass(kw_only=True)
class CreateDashboardUserOutput:

    username: str

    updated: bool | None = None


@dataclass
class DescribeCurrentUserInput:
    pass


class LanguageType(StrEnum):
    EN = "en"
    HI = "hi"
    ES = "es"
    DE = "de"
    AR = "ar"
    FR = "fr"
    IT = "it"
    ZH = "zh"
    PT = "pt"
    ES_MX = "es-MX"
    JA = "ja"
    ES_EC = "es-EC"


@dataclass(kw_only=True)
class DescribeCurrentUserOutput:

    username: str

    email: str | None = None
    name: str | None = None
    roles: list[str] | None = None
    organisations: list[UserOrganisation] | None = None
    super_admin: bool | None = None
    enabled: bool | None = None
    created_at: datetime | None = None
    updated_at: datetime | None = None
    provider: str | None = None
    external_provider: bool | None = None
    tenant_id: str | None = None
    language: str | None = None
    company_name: str | None = None


@dataclass(kw_only=True)
class DisableDashboardUserInput:

    username: str | None = None
    organisation_id: int | None = None


@dataclass(kw_only=True)
class DisableDashboardUserOutput:

    username: str

    email: str | None = None
    name: str | None = None
    roles: list[str] | None = None
    organisations: list[UserOrganisation] | None = None
    super_admin: bool | None = None
    enabled: bool | None = None
    created_at: datetime | None = None
    updated_at: datetime | None = None
    provider: str | None = None
    external_provider: bool | None = None
    tenant_id: str | None = None
    language: str | None = None
    company_name: str | None = None


@dataclass(kw_only=True)
class EnableDashboardUserInput:

    username: str | None = None
    organisation_id: int | None = None


@dataclass(kw_only=True)
class EnableDashboardUserOutput:

    username: str

    email: str | None = None
    name: str | None = None
    roles: list[str] | None = None
    organisations: list[UserOrganisation] | None = None
    super_admin: bool | None = None
    enabled: bool | None = None
    created_at: datetime | None = None
    updated_at: datetime | None = None
    provider: str | None = None
    external_provider: bool | None = None
    tenant_id: str | None = None
    language: str | None = None
    company_name: str | None = None


@dataclass(kw_only=True)
class ListDashboardUsersFilter:

    roles: list[str] | None = None
    tenant_id: str | None = None
    organisation_id: int | None = None
    departments: list[str] | None = None
    enabled: bool | None = None


@dataclass(kw_only=True)
class ListDashboardUsersInput:

    filter: ListDashboardUsersFilter | None = None
    organisation_id: int | None = None


@dataclass(kw_only=True)
class DashboardUserRecord:

    username: str

    email: str | None = None
    name: str | None = None
    roles: list[str] | None = None
    organisations: list[UserOrganisation] | None = None
    super_admin: bool | None = None
    enabled: bool | None = None
    created_at: datetime | None = None
    updated_at: datetime | None = None
    provider: str | None = None
    external_provider: bool | None = None
    tenant_id: str | None = None
    language: str | None = None
    company_name: str | None = None


@dataclass(kw_only=True)
class ListDashboardUsersOutput:

    users: list[DashboardUserRecord] | None = None
    count: int | None = None


@dataclass(kw_only=True)
class RemoveDashboardUserInput:

    username: str | None = None
    organisation_id: int | None = None


@dataclass
class RemoveDashboardUserOutput:
    pass


@dataclass(kw_only=True)
class ResetPasswordDashboardUserInput:

    username: str | None = None
    organisation_id: int | None = None


@dataclass
class ResetPasswordDashboardUserOutput:
    pass


@dataclass(kw_only=True)
class UpdateDashboardUserInput:

    username: str | None = None
    name: str | None = None
    organisation_id: int | None = None


@dataclass
class UpdateDashboardUserOutput:
    pass


@dataclass(kw_only=True)
class UpdateDashboardUserRolesInput:

    username: str | None = None
    organisations: list[UserOrganisation] | None = None
    organisation_id: int | None = None
    previous_roles: list[str] | None = None
    updated_roles: list[str] | None = None


@dataclass
class UpdateDashboardUserRolesOutput:
    pass


@dataclass(kw_only=True)
class CreateDataBreachInput:

    short_description: str | None = None
    occurred_at: datetime | None = None
    discovered_at: datetime | None = None
    description: str | None = None
    how_discovered: str | None = None
    was_intentional: str | None = None
    kind_of_data: str | None = None
    profile_people_affected: str | None = None
    consequences: str | None = None
    affected_people_from: str | None = None
    number_affected_people: int | None = None
    security_measures_or_protocols: str | None = None
    measures_to_prevent: str | None = None
    problem_of_security_measures: str | None = None
    people_informed: str | None = None
    authorities_informed: str | None = None
    additional_information: list[str] | None = None
    created_by: str | None = None
    evaluated_by: str | None = None
    compromised_sensitive_data: str | None = None
    organisation_id: int | None = None
    save_as_draft: bool | None = None
    created_at: datetime | None = None
    language: str | None = None


@dataclass(kw_only=True)
class CreateDataBreachOutput:
    """
    :param data_breach_id: Identifier of the DataBreach
    """

    data_breach_id: str


class DataBreachLocation(StrEnum):
    OUR_ORGANISATION = "ourOrganisation"
    THIRD_PARTY_PROCESSOR = "thirdPartyProcessor"


class DataBreachStatus(StrEnum):
    """Status of the Data Breach."""

    REPORT_IN_DRAFT = "report_in_draft"
    PENDING_EVALUATION = "pending_evaluation"
    EVALUATION_IN_DRAFT = "evaluation_in_draft"
    COMPLETED = "completed"


@dataclass(kw_only=True)
class DescribeDataBreachInput:
    """
    :param data_breach_id: Identifier of the DataBreach
    """

    organisation_id: int | None = None
    data_breach_id: str | None = None


@dataclass(kw_only=True)
class DescribeDataBreachOutput:
    """
    :param status: Status of the Data Breach.
    """

    short_description: str

    data_breach_id: str

    sequence: int

    occurred_at: datetime | None = None
    discovered_at: datetime | None = None
    description: str | None = None
    how_discovered: str | None = None
    was_intentional: str | None = None
    kind_of_data: str | None = None
    profile_people_affected: str | None = None
    consequences: str | None = None
    affected_people_from: str | None = None
    number_affected_people: int | None = None
    security_measures_or_protocols: str | None = None
    measures_to_prevent: str | None = None
    problem_of_security_measures: str | None = None
    people_informed: str | None = None
    authorities_informed: str | None = None
    additional_information: list[str] | None = None
    created_by: str | None = None
    evaluated_by: str | None = None
    compromised_sensitive_data: str | None = None
    status: str | None = None
    language: str | None = None
    translations: dict[str, dict[str, str]] | None = None


@dataclass(kw_only=True)
class DescribeDataBreachEvaluationInput:
    """
    :param data_breach_id: Identifier of the DataBreach
    """

    organisation_id: int | None = None
    data_breach_id: str | None = None


class RecipientRole(StrEnum):
    """Role of the recipient."""

    CONTROLLER = "controller"
    PROCESSOR = "processor"
    JOINT_CONTROLLER = "joint_controller"
    SUB_PROCESSOR = "sub_processor"
    INDEPENDENT_CONTROLLER = "independent_controller"


@dataclass(kw_only=True)
class DescribeDataBreachEvaluationOutput:
    """
    :param role: Role of the recipient.
    """

    authorities_notified: bool | None = None
    report_language: str | None = None
    evaluation: str | None = None
    data_subjects_notified: bool | None = None
    processor_notified: bool | None = None
    processors_involved: str | None = None
    companies_affected: str | None = None
    role: str | None = None
    data_breach_location: str | None = None
    data_breach_controller: str | None = None
    evaluated_by: str | None = None


@dataclass(kw_only=True)
class DataBreachSelectFilter:
    """Filter conditions to apply when listing data breaches.

    :param search: Free-form text search to apply to data breaches short
    description.
    """

    search: str | None = None
    authorities_notified: list[bool] | None = None
    owner: list[str] | None = None
    status: list[str] | None = None


@dataclass(kw_only=True)
class ListDataBreachInput:
    """
    :param filter: Filter conditions to apply when listing data breaches.
    :param next_token: The `nextToken` from the last page of results to retrieve the
    next page of results.
    :param page_size: The maximum number of records to return per API call. If more
    records
    are available, the response will be truncated and will contain
    a
    "nextToken" value, which can be used to return additional records.
    :param sort: Specifies how to sort the returned results.
    """

    organisation_id: int | None = None
    filter: DataBreachSelectFilter | None = None
    next_token: str | None = None
    page_size: int | None = None
    sort: SortRecords | None = None


@dataclass(kw_only=True)
class DataBreachListRecord:
    """
    :param status: Status of the Data Breach.
    """

    data_breach_id: str

    sequence: int

    short_description: str

    status: str

    created_by: str

    occurred_at: datetime | None = None
    discovered_at: datetime | None = None
    evaluated_by: str | None = None


@dataclass(kw_only=True)
class ListDataBreachOutput:
    """
    :param data_breaches: The list of data breaches up to the specified page size.
    :param total: The total number of data breaches. This value can be larger than
    the number of records
     returned in the response, in which case a "nextToken"
    will be included in the response
     to retrieve the next set of records.
    :param next_token: A token that can used in a subsequent API request to retrieve
    the next
    set of records.
    :param sort: The sorting order
    """

    data_breaches: list[DataBreachListRecord]

    total: int

    next_token: str | None = None
    sort: SortRecords | None = None


class ListDataBreachFilterType(StrEnum):
    OWNER = "owner"
    STATUS = "status"


@dataclass(kw_only=True)
class ListDataBreachFilterInput:

    organisation_id: int | None = None
    filter_type: str | None = None


@dataclass(kw_only=True)
class DataBreachFilterFilterOutputListMember:

    id: str | None = None
    name: str | None = None


@dataclass(kw_only=True)
class ListDataBreachFilterOutput:

    entries: list[DataBreachFilterFilterOutputListMember] | None = None


@dataclass(kw_only=True)
class RemoveDataBreachInput:
    """
    :param data_breach_id: Identifier of the DataBreach
    """

    organisation_id: int | None = None
    data_breach_id: str | None = None


@dataclass
class RemoveDataBreachOutput:
    pass


@dataclass(kw_only=True)
class RemoveDataBreachEvaluationInput:

    organisation_id: int | None = None
    data_breach_id: str | None = None


@dataclass
class RemoveDataBreachEvaluationOutput:
    pass


@dataclass(kw_only=True)
class UpdateDataBreachInput:
    """
    :param data_breach_id: Identifier of the DataBreach
    """

    short_description: str | None = None
    occurred_at: datetime | None = None
    discovered_at: datetime | None = None
    description: str | None = None
    how_discovered: str | None = None
    was_intentional: str | None = None
    kind_of_data: str | None = None
    profile_people_affected: str | None = None
    consequences: str | None = None
    affected_people_from: str | None = None
    number_affected_people: int | None = None
    security_measures_or_protocols: str | None = None
    measures_to_prevent: str | None = None
    problem_of_security_measures: str | None = None
    people_informed: str | None = None
    authorities_informed: str | None = None
    additional_information: list[str] | None = None
    created_by: str | None = None
    evaluated_by: str | None = None
    compromised_sensitive_data: str | None = None
    organisation_id: int | None = None
    data_breach_id: str | None = None
    save_as_draft: bool | None = None


@dataclass
class UpdateDataBreachOutput:
    pass


@dataclass(kw_only=True)
class UpdateDataBreachEvaluationInput:
    """
    :param data_breach_id: Identifier of the DataBreach
    :param role: Role of the recipient.
    """

    data_breach_id: str | None = None
    authorities_notified: bool | None = None
    report_language: str | None = None
    evaluation: str | None = None
    data_subjects_notified: bool | None = None
    processor_notified: bool | None = None
    processors_involved: str | None = None
    companies_affected: str | None = None
    role: str | None = None
    data_breach_location: str | None = None
    data_breach_controller: str | None = None
    evaluated_by: str | None = None
    organisation_id: int | None = None
    save_as_draft: bool | None = None


@dataclass
class UpdateDataBreachEvaluationOutput:
    pass


@dataclass(kw_only=True)
class CreateDepartmentInput:

    organisation_id: int | None = None
    name: str | None = None
    translations: dict[str, dict[str, str]] | None = None


@dataclass(kw_only=True)
class CreateDepartmentOutput:
    """
    :param department_id: Identifier of the department.

    """

    department_id: str


@dataclass(kw_only=True)
class DescribeDepartmentInput:
    """
    :param department_id: Identifier of the department.

    """

    organisation_id: int | None = None
    department_id: str | None = None


@dataclass(kw_only=True)
class DescribeDepartmentOutput:
    """
    :param department_id: Identifier of the department.

    """

    department_id: str

    name: str


@dataclass(kw_only=True)
class DepartmentSelectFilter:
    """
    :param search: Free-form text search to apply to the department name.
    """

    search: str | None = None
    department_ids: list[str] | None = None


@dataclass(kw_only=True)
class ListDepartmentsInput:
    """
    :param next_token: The `nextToken` from the last page of results to retrieve the
    next page of results.
    :param page_size: The maximum number of records to return per API call. If more
    records
    are available, the response will be truncated and will contain
    a
    "nextToken" value, which can be used to return additional records.
    :param sort: Specifies how to sort the returned results.
    """

    organisation_id: int | None = None
    filter: DepartmentSelectFilter | None = None
    next_token: str | None = None
    page_size: int | None = None
    sort: SortRecords | None = None


@dataclass(kw_only=True)
class DepartmentListMember:
    """
    :param department_id: Identifier of the department.

    """

    department_id: str

    name: str | None = None
    employees: int | None = None
    processing_activities: int | None = None
    number_of_users: int | None = None


@dataclass(kw_only=True)
class ListDepartmentsOutput:
    """
    :param departments: The list of departments up to the specified page size.
    :param total: The total number of departments. This value can be larger than the
    number of records
     returned in the response, in which case a "nextToken" will be
    included in the response
     to retrieve the next set of records.
    :param next_token: A token that can used in a subsequent API request to retrieve
    the next
    set of records.
    :param sort: The API sort order
    """

    departments: list[DepartmentListMember]

    total: int

    next_token: str | None = None
    sort: SortRecords | None = None


@dataclass
class ListDepartmentsForFilterInput:
    pass


@dataclass(kw_only=True)
class DepartmentForFilterMember:
    """
    :param department_id: Identifier of the department.

    """

    department_id: str

    name: str


@dataclass(kw_only=True)
class ListDepartmentsForFilterOutput:

    departments: list[DepartmentForFilterMember]


@dataclass(kw_only=True)
class RemoveDepartmentInput:
    """
    :param department_id: Identifier of the department.

    """

    organisation_id: int | None = None
    department_id: str | None = None


@dataclass(kw_only=True)
class RemoveDepartmentOutput:
    """
    :param department_id: Identifier of the department.

    """

    department_id: str


@dataclass(kw_only=True)
class UpdateDepartmentInput:
    """
    :param department_id: Identifier of the department.

    """

    organisation_id: int | None = None
    department_id: str | None = None
    name: str | None = None


@dataclass(kw_only=True)
class UpdateDepartmentOutput:
    """
    :param department_id: Identifier of the department.

    """

    department_id: str


@dataclass(kw_only=True)
class DescribeDiscoveredDocumentInput:

    organisation_id: int | None = None
    discovered_document_id: str | None = None


class DocumentDomainStatus(StrEnum):
    DELETED = "DELETED"
    ACTIVE = "ACTIVE"


class DiscoveredDocumentStatus(StrEnum):
    NEW = "NEW"
    IGNORED = "IGNORED"
    DELETED = "DELETED"
    ADDED = "ADDED"
    DOMAIN_DELETED = "DOMAIN_DELETED"


@dataclass(kw_only=True)
class DescribeDiscoveredDocumentOutput:

    discovered_document_id: str

    domain_id: str | None = None
    domain_name: str | None = None
    document_name: str | None = None
    status: str | None = None
    domain_status: str | None = None
    region: str | None = None
    discovered_at: datetime | None = None
    created_at: datetime | None = None
    updated_at: datetime | None = None


@dataclass(kw_only=True)
class DiscoveredDocumentsSelectFilter:
    """
    :param search: Free-form text search to apply to the scan name.
    """

    search: str | None = None
    status: str | None = None


@dataclass(kw_only=True)
class ListDiscoveredDocumentsInput:
    """
    :param next_token: The `nextToken` from the last page of results to retrieve the
    next page of results.
    :param page_size: The maximum number of records to return per API call. If more
    records
    are available, the response will be truncated and will contain
    a
    "nextToken" value, which can be used to return additional records.
    :param sort: Specifies how to sort the returned results.
    """

    organisation_id: int | None = None
    filter: DiscoveredDocumentsSelectFilter | None = None
    next_token: str | None = None
    page_size: int | None = None
    sort: SortRecords | None = None


@dataclass(kw_only=True)
class DiscoveredDocumentsListMember:

    discovered_document_id: str

    domain_id: str | None = None
    domain_name: str | None = None
    document_name: str | None = None
    status: str | None = None
    domain_status: str | None = None
    region: str | None = None
    discovered_at: datetime | None = None
    created_at: datetime | None = None
    updated_at: datetime | None = None


@dataclass(kw_only=True)
class ListDiscoveredDocumentsOutput:
    """
    :param discovered_documents: The list of document results matching the filter
    conditions, up to
    the specified page size.
    :param count: The total number of results matching the filter conditions.
    This
    value can be larger than the number of records returned in the response,
    in
    which case a "nextToken" will be included in the response to retrieve
    the next
    set of records.
    :param next_token: A token that can used in a subsequent API request to retrieve
    the next
    set of records.
    """

    discovered_documents: list[DiscoveredDocumentsListMember] | None = None
    count: int | None = None
    next_token: str | None = None


@dataclass(kw_only=True)
class UpdateDiscoveredDocumentInput:

    organisation_id: int | None = None
    discovered_document_id: str | None = None
    status: str | None = None


@dataclass
class UpdateDiscoveredDocumentOutput:
    pass


@dataclass(kw_only=True)
class DescribeDiscoveredInfotypesInput:

    organisation_id: int | None = None
    discovered_infotype_id: str | None = None


class LegalDocumentStatus(StrEnum):
    CREATED = "CREATED"
    SCANNING = "SCANNING"
    DELETED = "DELETED"


class LegalDocumentType(StrEnum):
    PRIVACY_POLICY = "PRIVACY_POLICY"
    DATA_PROCESSING = "DATA_PROCESSING"


@dataclass(kw_only=True)
class LegalDocumentListMember:

    document_id: str

    name: str | None = None
    type: str | None = None
    source: str | None = None
    document_link: str | None = None
    bucket_uri: str | None = None
    discovered_infotypes: list[str] | None = None
    last_scanned: datetime | None = None
    region: str | None = None
    status: str | None = None
    is_discover_infotype: bool | None = None
    from_discovered_document_id: str | None = None
    created_at: datetime | None = None
    updated_at: datetime | None = None


class DiscoveredInfotypesStatus(StrEnum):
    APPROVED_AUTOMATICALLY = "APPROVED_AUTOMATICALLY"
    NEW = "NEW"
    IGNORED = "IGNORED"
    APPROVED = "APPROVED"
    REQUESTED = "REQUESTED"
    DELETED = "DELETED"
    NOT_PRESENT = "NOT_PRESENT"


@dataclass(kw_only=True)
class DescribeDiscoveredInfotypesOutput:

    discovered_infotype_id: str

    keyword: list[str] | None = None
    discovery: str | None = None
    status: str | None = None
    last_discovered: datetime | None = None
    legal_documents: list[LegalDocumentListMember] | None = None
    created_at: datetime | None = None
    updated_at: datetime | None = None


@dataclass(kw_only=True)
class DiscoveredInfotypesSelectFilter:
    """
    :param search: Free-form text search to apply to the scan name.
    """

    search: str | None = None
    status: str | None = None


@dataclass(kw_only=True)
class ListDiscoveredInfotypesInput:
    """
    :param next_token: The `nextToken` from the last page of results to retrieve the
    next page of results.
    :param page_size: The maximum number of records to return per API call. If more
    records
    are available, the response will be truncated and will contain
    a
    "nextToken" value, which can be used to return additional records.
    :param sort: Specifies how to sort the returned results.
    """

    organisation_id: int | None = None
    filter: DiscoveredInfotypesSelectFilter | None = None
    next_token: str | None = None
    page_size: int | None = None
    sort: SortRecords | None = None


@dataclass(kw_only=True)
class DiscoveredInfotypesListMember:

    discovered_infotype_id: str

    keyword: list[str] | None = None
    discovery: str | None = None
    status: str | None = None
    last_discovered: datetime | None = None
    legal_documents: list[LegalDocumentListMember] | None = None
    created_at: datetime | None = None
    updated_at: datetime | None = None


@dataclass(kw_only=True)
class ListDiscoveredInfotypesOutput:
    """
    :param discovered_infotypes: The list of discovered infotypes results matching
    the filter conditions, up to
    the specified page size.
    :param count: The total number of results matching the filter conditions.
    This
    value can be larger than the number of records returned in the response,
    in
    which case a "nextToken" will be included in the response to retrieve
    the next
    set of records.
    :param next_token: A token that can used in a subsequent API request to retrieve
    the next
    set of records.
    """

    discovered_infotypes: list[DiscoveredInfotypesListMember] | None = None
    count: int | None = None
    next_token: str | None = None


@dataclass(kw_only=True)
class UpdateDiscoveredInfotypesInput:

    organisation_id: int | None = None
    discovered_infotype_id: str | None = None
    status: str | None = None


@dataclass(kw_only=True)
class UpdateDiscoveredInfotypesOutput:

    discovered_infotype_id: str


@dataclass(kw_only=True)
class DescribeDiscoveredRecipientInput:
    """
    :param discovered_recipient_id: Identifier of the discovered recipient.
    """

    organisation_id: int | None = None
    discovered_recipient_id: str | None = None


@dataclass(kw_only=True)
class DescribeDiscoveredRecipientOutput:
    """
    :param discovered_recipient_id: Identifier of the discovered recipient.
    :param recipient_model_id: Identifier of the recipient model if there is a match
    between the discovered recipient domain and some of the
    recipient models of our
    library.
    :param discovery_source: List of sources where the recipient was discovered.
    :param created_at: Date when the discovered recipient was found.
    """

    discovered_recipient_id: str

    recipient_model_id: str

    discovery_source: list[str]

    created_at: datetime


class DiscoveredRecipientStatus(StrEnum):
    """Status of the discovered recipient. Can be new or ignored if it's marked
    as
    ignored.
    """

    IGNORED = "ignored"
    NEW = "new"


@dataclass(kw_only=True)
class DiscoveredRecipientFilters:
    """Filter conditions to apply when listing discoveredRecipients.

    :param search: Free-form text search to apply to the DiscoveredRecipient name.
    :param status: Status of the discovered recipient. Can be new or ignored if it's
    marked as ignored.
    """

    search: str | None = None
    status: str | None = None
    discovery_source: list[str] | None = None


@dataclass(kw_only=True)
class ListDiscoveredRecipientsInput:
    """
    :param next_token: The `nextToken` from the last page of results to retrieve the
    next page of results.
    :param page_size: The maximum number of records to return per API call. If more
    records
    are available, the response will be truncated and will contain
    a
    "nextToken" value, which can be used to return additional records.
    :param sort: Specifies how to sort the returned results.
    :param filter: Filter conditions to apply when listing discoveredRecipients.
    """

    organisation_id: int | None = None
    next_token: str | None = None
    page_size: int | None = None
    sort: SortRecords | None = None
    filter: DiscoveredRecipientFilters | None = None


@dataclass(kw_only=True)
class DiscoveredRecipientListMember:
    """
    :param discovered_recipient_id: Identifier of the discovered recipient.
    :param name: Name of the discovered recipient.
    :param discovery_source: List of sources where the recipient was discovered.
    :param created_at: Date when the discovered recipient was found.
    :param status: Status of the discovered recipient. Can be new or ignored if it's
    marked as ignored.
    :param recipient_model_id: Identifier of the recipient model if there is a match
    between the discovered recipient domain and some of the
    recipient models of our
    library.
    """

    discovered_recipient_id: str

    name: str

    discovery_source: list[str]

    created_at: datetime

    status: str

    recipient_model_id: str | None = None
    user_count: int | None = None


@dataclass(kw_only=True)
class ListDiscoveredRecipientsOutput:
    """
    :param discovered_recipients: The list of discovered recipients up to the
    specified page size.
    :param next_token: A token that can used in a subsequent API request to retrieve
    the next
    set of records.
    :param sort: Specifies how to sort the returned results.
    """

    discovered_recipients: list[DiscoveredRecipientListMember] | None = None
    next_token: str | None = None
    total: int | None = None
    sort: SortRecords | None = None


@dataclass(kw_only=True)
class ListDiscoveredRecipientsUsersInput:

    organisation_id: int | None = None
    discovered_recipient_id: str | None = None


class OktaUserStatus(StrEnum):
    ACTIVE = "ACTIVE"
    DELETED = "DELETED"


@dataclass(kw_only=True)
class OktaUserDiscoveryListMember:

    user_id: str

    okta_username: str | None = None
    first_name: str | None = None
    last_name: str | None = None
    okta_connection_id: str | None = None
    okta_email: str | None = None
    created_at: datetime | None = None
    updated_at: datetime | None = None
    added_to_register: bool | None = None
    last_discovered_at: datetime | None = None
    status: str | None = None


@dataclass(kw_only=True)
class ListDiscoveredRecipientsUsersOutput:

    okta_users: list[OktaUserDiscoveryListMember] | None = None


class DomainFrequency(StrEnum):
    """Frequency of polling for a domain. Manual polling means that this domain
    will
    not be polled automatically.
    """

    MANUAL = "manual"
    EVERY_6_HOURS = "6h"
    EVERY_12_HOURS = "12h"
    EVERY_1_DAY = "1d"
    EVERY_1_WEEK = "1w"
    EVERY_30_DAYS = "30d"


@dataclass(kw_only=True)
class CreateDomainInput:
    """
    :param name: Name of the domain.
    :param frequency: Frequency of polling for a domain. Manual polling means that
    this domain will not be polled automatically.
    """

    organisation_id: int | None = None
    name: str | None = None
    frequency: str | None = None


@dataclass(kw_only=True)
class CreateDomainOutput:
    """
    :param domain_id: Identifier of the domain.
    """

    domain_id: str


@dataclass(kw_only=True)
class DescribeDomainInput:
    """
    :param domain_id: Identifier of the domain.
    """

    organisation_id: int | None = None
    domain_id: str | None = None


class DomainStatus(StrEnum):
    """Status of the domain. Domain_not_reached status appears when a domain is
    not
    reachable during a poll.
    In progress status means that a process of polling
    is
    in progress. Completed status means that the last poll process
    was
    finished
    successfully.
    """

    DOMAIN_NOT_REACHED = "domain_not_reached"
    IN_PROGRESS = "in_progress"
    COMPLETED = "finished"


@dataclass(kw_only=True)
class DescribeDomainOutput:
    """
    :param domain_id: Identifier of the domain.
    :param name: Name of the domain.
    :param status: Status of the domain. Domain_not_reached status appears when a
    domain is not reachable during a poll.
    In progress status means that a process
    of polling is in progress. Completed status means that the last poll process
    was
    finished successfully.
    :param frequency: Frequency of polling for a domain. Manual polling means that
    this domain will not be polled automatically.
    """

    domain_id: str

    name: str | None = None
    status: str | None = None
    frequency: str | None = None
    created_at: datetime | None = None
    updated_at: datetime | None = None
    recipients: list[str] | None = None
    discovered_documents: list[str] | None = None


@dataclass(kw_only=True)
class ListDomainsInput:
    """
    :param next_token: The `nextToken` from the last page of results to retrieve the
    next page of results.
    :param page_size: The maximum number of records to return per API call. If more
    records
    are available, the response will be truncated and will contain
    a
    "nextToken" value, which can be used to return additional records.
    :param sort: Specifies how to sort the returned results.
    """

    organisation_id: int | None = None
    next_token: str | None = None
    page_size: int | None = None
    sort: SortRecords | None = None


@dataclass(kw_only=True)
class DomainListMember:
    """
    :param domain_id: Identifier of the domain.
    :param name: Name of the domain.
    :param frequency: Frequency of polling for a domain. Manual polling means that
    this domain will not be polled automatically.
    :param status: Status of the domain. Domain_not_reached status appears when a
    domain is not reachable during a poll.
    In progress status means that a process
    of polling is in progress. Completed status means that the last poll process
    was
    finished successfully.
    """

    domain_id: str

    name: str

    frequency: str

    created_at: datetime

    status: str | None = None
    updated_at: datetime | None = None
    recipients: list[str] | None = None
    discovered_documents: list[str] | None = None


@dataclass(kw_only=True)
class ListDomainsOutput:
    """
    :param domains: The list of domains up to the specified page size.
    :param next_token: A token that can used in a subsequent API request to retrieve
    the next
    set of records.
    :param sort: Specifies how to sort the returned results.
    """

    domains: list[DomainListMember] | None = None
    next_token: str | None = None
    total: int | None = None
    sort: SortRecords | None = None


@dataclass(kw_only=True)
class PollDomainInput:
    """
    :param domain_id: Identifier of the domain.
    """

    organisation_id: int | None = None
    domain_id: str | None = None


@dataclass
class PollDomainOutput:
    pass


@dataclass(kw_only=True)
class RemoveDomainInput:
    """
    :param domain_id: Identifier of the domain.
    """

    organisation_id: int | None = None
    domain_id: str | None = None


@dataclass
class RemoveDomainOutput:
    pass


@dataclass(kw_only=True)
class UpdateDomainInput:
    """
    :param domain_id: Identifier of the domain.
    :param name: Name of the domain.
    :param frequency: Frequency of polling for a domain. Manual polling means that
    this domain will not be polled automatically.
    """

    organisation_id: int | None = None
    domain_id: str | None = None
    name: str | None = None
    frequency: str | None = None


@dataclass
class UpdateDomainOutput:
    pass


class DpiaRiskLikelihood(StrEnum):
    NEGLIGIBLE = "negligible"
    UNLIKELY = "unlikely"
    LIMITED = "limited"
    LIKELY = "likely"
    MAXIMUM = "maximum"


class DpiaRiskSeverity(StrEnum):
    """Represents the severity of a risk"""

    VERY_LOW = "very_low"
    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"
    VERY_HIGH = "very_high"


@dataclass(kw_only=True)
class DpiaAvailabilityRiskImpact:
    """Represents an Impact for the availability risk

    :param id: Identifier for the impact of availability risk. Can be an UUID if
    it's a custom impact or one of the
    keys of the default impacts that we offer
    :param name: Name of the impact
    """

    id: str

    name: str | None = None


@dataclass(kw_only=True)
class DpiaRiskRiskSource:
    """Represents a RiskSource for a risk

    :param id: Identifier for the risk source of a risk. Can be an UUID if it's a
    custom risk source or one of the
    keys of the default risk sources that we offer
    :param name: Name of the risk source
    """

    id: str

    name: str | None = None


@dataclass(kw_only=True)
class DpiaAvailabilityRiskThreat:
    """Represents a Threat for the availability risk

    :param id: Identifier for the threat of availability risk. Can be an UUID if
    it's a custom threat or one of the
    keys of the default threats that we offer
    :param name: Name of the threat
    """

    id: str

    name: str | None = None


@dataclass(kw_only=True)
class DpiaAvailabilityRisk:
    """Represents the availability risk

    :param threats: List of threats that availability risk can have.
    At least one
    element is necessary DPIA is saved as activated
    :param threats_comment: Comment to add additional information about the threat
    :param impacts: List of impacts that availability risk can have.
    At least one
    element is necessary DPIA is saved as activated
    :param impacts_comment: Comment to add additional information about the impact
    :param risk_sources: List of risk sources that availability risk can have.
    At
    least one element is necessary DPIA is saved as activated
    :param risk_sources_comment: Comment to add additional information about the
    availability risk sources
    :param implemented_toms: List of implemented TOMs that applies to the
    availability risk.
    At least one element is necessary DPIA is saved as activated
    :param implemented_toms_comment: Comment to add additional information about the
    implemented TOMs
    :param planned_toms: List of TOMs planned to be implemented and that applies to
    the availability risk.
    At least one element is necessary DPIA is saved as
    activated
    :param planned_toms_comment: Comment to add additional information about the
    planned TOMs
    :param baseline_severity: Represents the baseline risk severity of the
    availability
    :param baseline_likelihood: Represents the baseline risk likelihood of the
    availability
    :param baseline_comment: Comment to add additional information about the
    baseline risk of the availablity
    :param residual_risk_severity: Represents the residual risk severity of the
    availability
    :param residual_risk_likelihood: Represents the residual risk likelihood of the
    availability
    :param residual_risk_comment: Comment to add additional information about the
    residual risk of the availability
    """

    threats: list[DpiaAvailabilityRiskThreat] | None = None
    threats_comment: str | None = None
    impacts: list[DpiaAvailabilityRiskImpact] | None = None
    impacts_comment: str | None = None
    risk_sources: list[DpiaRiskRiskSource] | None = None
    risk_sources_comment: str | None = None
    implemented_toms: list[str] | None = None
    implemented_toms_comment: str | None = None
    planned_toms: list[str] | None = None
    planned_toms_comment: str | None = None
    baseline_severity: str | None = None
    baseline_likelihood: str | None = None
    baseline_comment: str | None = None
    residual_risk_severity: str | None = None
    residual_risk_likelihood: str | None = None
    residual_risk_comment: str | None = None


@dataclass(kw_only=True)
class DpiaConfidentialityRiskImpact:
    """Represents an Impact for the confidentiality risk

    :param id: Identifier for the impact of confidentiality risk. Can be an UUID if
    it's a custom impact or one of the
    keys of the default impacts that we offer
    """

    id: str

    name: str | None = None


@dataclass(kw_only=True)
class DpiaConfidentialityRiskThreat:
    """Represents a Threat for the confidentiality risk

    :param id: Identifier for the threat of confidentiality risk. Can be an UUID if
    it's a custom threat or one of the
    keys of the default threats that we offer
    """

    id: str

    name: str | None = None


@dataclass(kw_only=True)
class DpiaConfidentialityRisk:
    """Represents the confidentiality risk

    :param threats: List of threats that confidentiality risk can have. At least one
    element is necessary DPIA is saved as activated
    :param threats_comment: Comment to add additional information about the
    confidentiality risk threats
    :param impacts: List of impacts that confidentiality risk can have.
    At least one
    element is necessary DPIA is saved as activated
    :param impacts_comment: Comment to add additional information about the
    confidentiality risk impacts
    :param risk_sources: List of risk sources that confidentiality risk can have.
    At
    least one element is necessary DPIA is saved as activated
    :param risk_sources_comment: Comment to add additional information about the
    confidentiality risk sources
    :param implemented_toms: List of TOMs that are implemented to prevent
    confidentiality risk.
    At least one element is necessary DPIA is saved as
    activated
    :param implemented_toms_comment: Comment to add additional information about
    implemented TOMs to prevent confidentiality risk
    :param planned_toms: List of TOMs that are planned to be implemented to prevent
    confidentiality risk.
    At least one element is necessary DPIA is saved as
    activated
    :param planned_toms_comment: Comment to add additional information about planned
    TOMs to prevent confidentiality risk
    :param baseline_severity: Represents the baseline risk severity of the
    confidentiality
    Mandatory if DPIA is saved as activated
    :param baseline_likelihood: Represents the baseline risk likelihood of the
    confidentiality
    Mandatory if DPIA is saved as activated
    :param baseline_comment: Comment to add additional information about the
    baseline risk of the confidentiality
    :param residual_risk_severity: Represents the residual risk severity of the
    confidentiality
    Mandatory if DPIA is saved as activated
    :param residual_risk_likelihood: Represents the residual risk likelihood of the
    confidentiality
    Mandatory if DPIA is saved as activated
    :param residual_risk_comment: Comment to add additional information about the
    residual risk of the confidentiality
    """

    threats: list[DpiaConfidentialityRiskThreat] | None = None
    threats_comment: str | None = None
    impacts: list[DpiaConfidentialityRiskImpact] | None = None
    impacts_comment: str | None = None
    risk_sources: list[DpiaRiskRiskSource] | None = None
    risk_sources_comment: str | None = None
    implemented_toms: list[str] | None = None
    implemented_toms_comment: str | None = None
    planned_toms: list[str] | None = None
    planned_toms_comment: str | None = None
    baseline_severity: str | None = None
    baseline_likelihood: str | None = None
    baseline_comment: str | None = None
    residual_risk_severity: str | None = None
    residual_risk_likelihood: str | None = None
    residual_risk_comment: str | None = None


@dataclass(kw_only=True)
class DpiaIntegrityRiskImpact:
    """Represents an Impact for the integrity risk

    :param id: Identifier for the impact of integrity risk. Can be an UUID if it's a
    custom impact or one of the
    keys of the default impacts that we offer
    :param name: Name of the impact on integrity
    """

    id: str

    name: str | None = None


@dataclass(kw_only=True)
class DpiaIntegrityRiskThreat:
    """Represents a Threat for the integrity risk

    :param id: Identifier for the threat of integrity risk. Can be an UUID if it's a
    custom threat or one of the
    keys of the default threats that we offer
    :param name: Name of the threat on integrity
    """

    id: str

    name: str | None = None


@dataclass(kw_only=True)
class DpiaIntegrityRisk:
    """Represents the integrity risk

    :param threats: List of threats that integrity risk can have. At least one
    element is necessary DPIA is saved as activated
    :param threats_comment: Comment to add additional information about the
    integrity threats
    :param impacts: List of impacts that integrity risk can have.
    At least one
    element is necessary DPIA is saved as activated
    :param impacts_comment: Comment to add additional information about the
    integrity impacts
    :param risk_sources: List of risk sources that integrity risk can have.
    At least
    one element is necessary DPIA is saved as activated
    :param risk_sources_comment: Comment to add additional information about the
    integrity risk sources
    :param implemented_toms: List of TOMs that are implemented to prevent integrity
    risk.
    At least one element is necessary DPIA is saved as activated
    :param implemented_toms_comment: Comment to add additional information about
    implemented TOMs to prevent integrity risk
    :param planned_toms: List of TOMs that are planned to be implemented to prevent
    integrity risk.
    At least one element is necessary DPIA is saved as activated
    :param planned_toms_comment: Comment to add additional information about planned
    TOMs to prevent integrity risk
    :param baseline_severity: Represents the baseline risk severity of the
    integrity
    Mandatory if DPIA is saved as activated
    :param baseline_likelihood: Represents the baseline risk likelihood of the
    integrity
    Mandatory if DPIA is saved as activated
    :param baseline_comment: Comment to add additional information about the
    baseline risk of the integrity
    :param residual_risk_severity: Represents the residual risk severity of the
    integrity
    :param residual_risk_likelihood: Represents the residual risk likelihood of the
    integrity
    :param residual_risk_comment: Comment to add additional information about the
    residual risk of the integrity
    """

    threats: list[DpiaIntegrityRiskThreat] | None = None
    threats_comment: str | None = None
    impacts: list[DpiaIntegrityRiskImpact] | None = None
    impacts_comment: str | None = None
    risk_sources: list[DpiaRiskRiskSource] | None = None
    risk_sources_comment: str | None = None
    implemented_toms: list[str] | None = None
    implemented_toms_comment: str | None = None
    planned_toms: list[str] | None = None
    planned_toms_comment: str | None = None
    baseline_severity: str | None = None
    baseline_likelihood: str | None = None
    baseline_comment: str | None = None
    residual_risk_severity: str | None = None
    residual_risk_likelihood: str | None = None
    residual_risk_comment: str | None = None


@dataclass(kw_only=True)
class DpiaPrivacyFramework:
    """
    :param purpose_limitation: Field to explain the clear, specific and legitimate
    purpose of conducting the processing activity.
    Mandatory if DPIA is saved as
    activated
    :param data_minimisation: Field to explain if the data collected adequate,
    relevant,
    and limited to what is necessary concerning the purposes for which it
    is processed
    Mandatory if DPIA is saved as activated
    :param accuracy: Field to explain if the data processed is accurate, high
    quality and up-to-date
    Mandatory if DPIA is saved as activated
    :param retention: Is the retention period lawful and clearly defined?
    Mandatory
    if DPIA is saved as activated
    :param retention_comment: Field to add comment on the retention period
    :param transparency: Field to describe what kind of notice information is given
    to data subjects about this processing, and how is it provided to the data
    subjects?
    Mandatory if DPIA is saved as activated
    :param consent: Field to describe the measures to ensure that the consent of the
    data subjects has been obtained and how the given
    consent can be
    revoked
    Mandatory if DPIA is saved as activated and the lawfulness
    "consent_person_concerned" selected
    :param data_rights_exercised: Field to describe how do data subjects exercise
    their data subject rights?
    Mandatory if DPIA is saved as activated
    :param additional_comment: Field to add more information related to the privacy
    framework of the DPIA
    """

    purpose_limitation: str | None = None
    data_minimisation: str | None = None
    accuracy: str | None = None
    retention: bool | None = None
    retention_comment: str | None = None
    transparency: str | None = None
    consent: str | None = None
    data_rights_exercised: str | None = None
    additional_comment: str | None = None


class DpiaStatus(StrEnum):
    """The status of the DPIA. If a DPIA is saved as activated, several fields
    are
    required
    """

    DRAFT = "draft"
    ACTIVATED = "activated"


@dataclass(kw_only=True)
class CreateDpiaInput:
    """
    :param processing_activity_id: Identifier of the processing activity for which
    we are creating a DPIA
    :param confidentiality: Represents the confidentiality risk
    :param integrity: Represents the integrity risk
    :param availability: Represents the availability risk
    :param status: The status of the DPIA. If a DPIA is saved as activated, several
    fields are required
    """

    organisation_id: int | None = None
    processing_activity_id: str | None = None
    privacy_framework: DpiaPrivacyFramework | None = None
    confidentiality: DpiaConfidentialityRisk | None = None
    integrity: DpiaIntegrityRisk | None = None
    availability: DpiaAvailabilityRisk | None = None
    additional_information: str | None = None
    additional_information_files: list[str] | None = None
    status: str | None = None
    created_at: datetime | None = None
    updated_at: datetime | None = None
    translations: dict[str, dict[str, str]] | None = None


@dataclass(kw_only=True)
class CreateDpiaOutput:
    """
    :param dpia_id: Identifier of the DPIA
    """

    dpia_id: str


@dataclass(kw_only=True)
class DescribeDpiaInput:
    """
    :param dpia_id: Identifier of the DPIA
    """

    organisation_id: int | None = None
    dpia_id: str | None = None


@dataclass(kw_only=True)
class DescribeDpiaOutput:
    """
    :param confidentiality: Represents the confidentiality risk
    :param integrity: Represents the integrity risk
    :param availability: Represents the availability risk
    :param status: The status of the DPIA. If a DPIA is saved as activated, several
    fields are required
    """

    privacy_framework: DpiaPrivacyFramework | None = None
    confidentiality: DpiaConfidentialityRisk | None = None
    integrity: DpiaIntegrityRisk | None = None
    availability: DpiaAvailabilityRisk | None = None
    additional_information: str | None = None
    additional_information_files: list[str] | None = None
    status: str | None = None
    translations: dict[str, dict[str, str]] | None = None
    uploaded_dpia_file_id: str | None = None
    language: str | None = None


@dataclass(kw_only=True)
class RemoveDpiaInput:
    """
    :param dpia_id: Identifier of the DPIA
    """

    organisation_id: int | None = None
    dpia_id: str | None = None


@dataclass
class RemoveDpiaOutput:
    pass


@dataclass(kw_only=True)
class UpdateDpiaInput:
    """
    :param dpia_id: Identifier of the DPIA
    :param confidentiality: Represents the confidentiality risk
    :param integrity: Represents the integrity risk
    :param availability: Represents the availability risk
    :param status: The status of the DPIA. If a DPIA is saved as activated, several
    fields are required
    """

    organisation_id: int | None = None
    dpia_id: str | None = None
    privacy_framework: DpiaPrivacyFramework | None = None
    confidentiality: DpiaConfidentialityRisk | None = None
    integrity: DpiaIntegrityRisk | None = None
    availability: DpiaAvailabilityRisk | None = None
    additional_information: str | None = None
    additional_information_files: list[str] | None = None
    status: str | None = None
    translations: dict[str, dict[str, str]] | None = None


@dataclass
class UpdateDpiaOutput:
    pass


class VerificationType(StrEnum):
    DSAR_DATA_DOWNLOAD_REQUEST = "dsarDataDownloadRequest"
    DSAR_DATA_DELETION_REQUEST = "dsarDataDeletionRequest"


@dataclass(kw_only=True)
class VerifyEmailInput:

    verification_id: str | None = None
    token: str | None = None


@dataclass(kw_only=True)
class VerifyEmailOutput:
    """
    :param verification_id: Identifier of the employee
    """

    verification_id: str

    email: str | None = None
    token: str | None = None
    type: str | None = None
    is_used: bool | None = None
    expires_at: datetime | None = None
    created_at: datetime | None = None
    updated_at: datetime | None = None


@dataclass(kw_only=True)
class CreateEmployeeInput:
    """
    :param name: The name of the employee
    :param surname: The surname of the employee
    :param position: The position of the employee in the company.
    :param nif: The NIF of the employee
    :param start_date: Date when the employee began to work in your company
    :param end_date: Date when the employee end to work in your company
    :param email: the email of the employee
    :param manager: employeeId of the employee who is manager of the employee
    :param department: the department of the employee
    :param reference_id: Internal identifier to synchronize with external APIS
    """

    organisation_id: int | None = None
    name: str | None = None
    surname: str | None = None
    created_by: str | None = None
    position: str | None = None
    nif: str | None = None
    start_date: str | None = None
    end_date: str | None = None
    email: str | None = None
    manager: str | None = None
    department: str | None = None
    reference_id: str | None = None


@dataclass(kw_only=True)
class CreateEmployeeOutput:
    """
    :param employee_id: Identifier of the employee
    """

    employee_id: str


@dataclass(kw_only=True)
class DepartmentObject:
    """
    :param department_id: Identifier of the department.

    """

    department_id: str

    name: str


@dataclass(kw_only=True)
class DescribeEmployeeInput:
    """
    :param employee_id: Identifier of the employee
    """

    organisation_id: int | None = None
    employee_id: str | None = None


@dataclass(kw_only=True)
class EmployeeSelectFilter:
    """
    :param search: Free-form text search to apply to the employee name.
    """

    search: str | None = None
    department: list[str] | None = None
    employee_ids: list[str] | None = None


@dataclass(kw_only=True)
class ListEmployeesInput:
    """
    :param next_token: The `nextToken` from the last page of results to retrieve the
    next page of results.
    :param page_size: The maximum number of records to return per API call. If more
    records
    are available, the response will be truncated and will contain
    a
    "nextToken" value, which can be used to return additional records.
    :param sort: Specifies how to sort the returned results.
    """

    organisation_id: int | None = None
    filter: EmployeeSelectFilter | None = None
    next_token: str | None = None
    page_size: int | None = None
    sort: SortRecords | None = None


@dataclass(kw_only=True)
class ListEmployeesForFilterInput:

    organisation_id: int | None = None


@dataclass(kw_only=True)
class EmployeeForFilterMember:

    employee_id: str

    name: str

    surname: str | None = None


@dataclass(kw_only=True)
class ListEmployeesForFilterOutput:

    employees: list[EmployeeForFilterMember]


@dataclass(kw_only=True)
class RemoveEmployeeInput:
    """
    :param employee_id: Identifier of the employee
    """

    organisation_id: int | None = None
    employee_id: str | None = None


@dataclass
class RemoveEmployeeOutput:
    pass


@dataclass(kw_only=True)
class UpdateEmployeeInput:
    """
    :param employee_id: Identifier of the employee
    :param name: The name of the employee
    :param surname: The surname of the employee
    :param position: The position in the company of the employee
    :param nif: The NIF (Spanish Tax Identification Number) of the employee
    :param start_date: Date when the employee began to work in your company
    :param end_date: Date when the employee end to work in your company
    :param email: The email of the employee. Has to be unique within the company.
    :param manager: The employee's direct manager.
    :param department: The department of the employee
    """

    organisation_id: int | None = None
    employee_id: str | None = None
    name: str | None = None
    surname: str | None = None
    position: str | None = None
    nif: str | None = None
    start_date: str | None = None
    end_date: str | None = None
    email: str | None = None
    manager: str | None = None
    department: str | None = None


@dataclass(kw_only=True)
class UpdateEmployeeOutput:
    """
    :param employee_id: Identifier of the employee
    """

    employee_id: str


@dataclass(kw_only=True)
class DescribeErrorInput:
    """
    :param error_id: The unique resource ID.
    """

    organisation_id: int | None = None
    error_id: str | None = None


@dataclass(kw_only=True)
class DescribeErrorOutput:
    """
    :param error_id: The unique scan ID.
    """

    error_id: str

    context: list[str] | None = None
    stack_trace: str | None = None
    type: str | None = None
    message: str | None = None
    first_seen: datetime | None = None
    last_seen: datetime | None = None
    count: int | None = None
    component: str | None = None
    component_id: str | None = None
    workflow_id: str | None = None
    workflow_type: str | None = None
    workflow_run_id: str | None = None
    activity_type: str | None = None
    cluster: str | None = None
    hostname: str | None = None
    created_at: datetime | None = None
    updated_at: datetime | None = None


@dataclass(kw_only=True)
class ErrorsFilter:
    """Filter conditions to apply when listing scan iterations."""

    scan_iteration_id: str | None = None
    resource_id: str | None = None
    account_id: str | None = None
    scan_execution_id: str | None = None
    scan_id: str | None = None


@dataclass(kw_only=True)
class ListErrorsInput:
    """
    :param filter: Filter conditions to apply when listing scan iterations.
    :param select: List of column names to include in the response.
    :param next_token: The `nextToken` from the last page of results to retrieve the
    next page of results.
    :param page_size: The maximum number of records to return per API call. If more
    records
    are available, the response will be truncated and will contain
    a
    "nextToken" value, which can be used to return additional records.
    :param sort: Specifies how to sort the returned results.
    """

    filter: ErrorsFilter | None = None
    select: list[str] | None = None
    next_token: str | None = None
    page_size: int | None = None
    sort: SortRecords | None = None


@dataclass(kw_only=True)
class ErrorRecord:
    """
    :param error_id: The unique scan ID.
    """

    error_id: str

    context: list[str] | None = None
    stack_trace: str | None = None
    type: str | None = None
    message: str | None = None
    first_seen: datetime | None = None
    last_seen: datetime | None = None
    count: int | None = None
    component: str | None = None
    component_id: str | None = None
    workflow_id: str | None = None
    workflow_type: str | None = None
    workflow_run_id: str | None = None
    activity_type: str | None = None
    cluster: str | None = None
    hostname: str | None = None
    created_at: datetime | None = None
    updated_at: datetime | None = None


@dataclass(kw_only=True)
class ListErrorsOutput:
    """
    :param errors: The list of scans matching the filter conditions, up to the
    specified page size.
    :param total: The total number of scans matching the filter conditions.
    This
    value can be larger than the number of records returned in the response,
    in
    which case a "nextToken" will be included in the response to retrieve
    the next
    set of records.
    :param next_token: A token that can used in a subsequent API request to retrieve
    the next
    set of records.
    :param sort: Sort order
    """

    errors: list[ErrorRecord] | None = None
    total: int | None = None
    next_token: str | None = None
    sort: SortRecords | None = None


@dataclass(kw_only=True)
class CreateHeadquarterInput:
    """
    :param name: The name of the headquarter
    :param city: The locality of the headquarter
    :param address: The address of the headquarter
    :param country: 2 letter code that identifies a country.
    :param zipcode: The zipcode of the headquarter
    """

    organisation_id: int | None = None
    name: str | None = None
    city: str | None = None
    address: str | None = None
    country: str | None = None
    zipcode: str | None = None
    tom_ids: list[str] | None = None


@dataclass(kw_only=True)
class CreateHeadquarterOutput:
    """
    :param headquarter_id: The identifier of the headquarter
    """

    headquarter_id: str


@dataclass(kw_only=True)
class DescribeHeadquarterInput:
    """
    :param headquarter_id: The identifier of the headquarter
    """

    organisation_id: int | None = None
    headquarter_id: str | None = None


@dataclass(kw_only=True)
class DescribeHeadquarterOutput:
    """
    :param headquarter_id: The identifier of the headquarter
    :param name: The name of the headquarter
    :param city: The locality of the headquarter
    :param address: The address of the headquarter
    :param country: Two letter code that represents the country where the
    headquarter is located
    :param zipcode: The zipcode of the headquarter
    """

    headquarter_id: str

    name: str | None = None
    city: str | None = None
    address: str | None = None
    country: str | None = None
    zipcode: str | None = None
    toms: list[TomListMember] | None = None


@dataclass(kw_only=True)
class HeadquarterFilters:

    headquarter_ids: list[str] | None = None


@dataclass(kw_only=True)
class ListHeadquartersInput:
    """
    :param next_token: The `nextToken` from the last page of results to retrieve the
    next page of results.
    :param page_size: The maximum number of records to return per API call. If more
    records
    are available, the response will be truncated and will contain
    a
    "nextToken" value, which can be used to return additional records.
    :param sort: Specifies how to sort the returned results.
    """

    organisation_id: int | None = None
    next_token: str | None = None
    page_size: int | None = None
    sort: SortRecords | None = None
    filter: HeadquarterFilters | None = None


@dataclass(kw_only=True)
class HeadquarterListRecord:
    """
    :param headquarter_id: The identifier of the headquarter
    :param name: The name of the headquarter
    :param city: The locality of the headquarter
    :param address: The address of the headquarter
    :param country: Two letter code that represents the country where the
    headquarter is located
    :param zipcode: The zipcode of the headquarter
    """

    headquarter_id: str

    name: str | None = None
    city: str | None = None
    address: str | None = None
    country: str | None = None
    zipcode: str | None = None
    toms: list[TomListMember] | None = None


@dataclass(kw_only=True)
class ListHeadquartersOutput:
    """
    :param headquarters: The list of headquarters up to the specified page size.
    :param total: The total number of headquarters. This value can be larger than
    the number of records
     returned in the response, in which case a "nextToken"
    will be included in the response
     to retrieve the next set of records.
    :param next_token: A token that can used in a subsequent API request to retrieve
    the next
    set of records.
    :param sort: The sorting order
    """

    headquarters: list[HeadquarterListRecord]

    total: int

    next_token: str | None = None
    sort: SortRecords | None = None


@dataclass(kw_only=True)
class RemoveHeadquarterInput:
    """
    :param headquarter_id: The identifier of the headquarter
    """

    organisation_id: int | None = None
    headquarter_id: str | None = None


@dataclass
class RemoveHeadquarterOutput:
    pass


@dataclass(kw_only=True)
class UpdateHeadquarterInput:
    """
    :param headquarter_id: The identifier of the headquarter
    :param name: The name of the headquarter
    :param city: The locality of the headquarter
    :param address: The address of the headquarter
    :param country: 2 letter code that identifies a country.
    :param zipcode: The zipcode of the headquarter
    """

    organisation_id: int | None = None
    headquarter_id: str | None = None
    name: str | None = None
    city: str | None = None
    address: str | None = None
    country: str | None = None
    zipcode: str | None = None
    tom_ids: list[str] | None = None


@dataclass
class UpdateHeadquarterOutput:
    pass


@dataclass(kw_only=True)
class CreateCategoryInput:
    """
    :param category_label: The name of the infotype category.
    :param description: Description of the infotype category.
    :param infotypes: The list of infotypes that belong to this category.
    """

    organisation_id: int | None = None
    category_label: str | None = None
    description: str | None = None
    infotypes: list[str] | None = None


@dataclass(kw_only=True)
class CreateCategoryOutput:
    """
    :param category_label: The name of the infotype category.
    """

    category_label: str


@dataclass(kw_only=True)
class DescribeCategoryInput:
    """
    :param category_label: The name of the infotype category.
    """

    organisation_id: int | None = None
    category_label: str | None = None


@dataclass(kw_only=True)
class DescribeCategoryOutput:
    """
    :param category_label: The name of the infotype category.
    :param description: Description of the infotype categories.
    :param created_at: Time when the infotype category was created, as a Unix epoch
    timestamp.
    :param updated_at: Time when the infotype category was last updated, as a Unix
    epoch timestamp.
    """

    category_label: str

    description: str

    created_at: datetime | None = None
    updated_at: datetime | None = None


@dataclass(kw_only=True)
class ListInfotypeCategoriesFilter:

    categories: list[str] | None = None


@dataclass(kw_only=True)
class ListInfotypeCategoriesInput:
    """
    :param sort: Specifies how to sort the returned results.
    """

    organisation_id: int | None = None
    filter: ListInfotypeCategoriesFilter | None = None
    sort: SortRecords | None = None


@dataclass(kw_only=True)
class CategoryListMember:
    """
    :param category_label: The name of the infotype category.
    :param description: Description of the infotype categories.
    :param created_at: Time when the infotype category was created, as a Unix epoch
    timestamp.
    :param updated_at: Time when the infotype category was last updated, as a Unix
    epoch timestamp.
    """

    category_label: str

    description: str

    created_at: datetime | None = None
    updated_at: datetime | None = None


@dataclass(kw_only=True)
class ListInfotypeCategoriesOutput:
    """
    :param categories: The list of configured infotype categories.
    """

    categories: list[CategoryListMember] | None = None


@dataclass(kw_only=True)
class RemoveCategoryInput:
    """
    :param category_label: The name of the infotype category.
    """

    organisation_id: int | None = None
    category_label: str | None = None


@dataclass(kw_only=True)
class RemoveCategoryOutput:
    """
    :param category_label: The name of the infotype category.
    """

    category_label: str


@dataclass(kw_only=True)
class UpdateCategoryInput:
    """
    :param category_label: The name of the infotype category.
    :param description: The description of the infotype category.
    :param infotypes: The list of infotypes that belong to this category.
    """

    organisation_id: int | None = None
    category_label: str | None = None
    description: str | None = None
    infotypes: list[str] | None = None


@dataclass(kw_only=True)
class UpdateCategoryOutput:
    """
    :param category_label: The name of the infotype category.
    """

    category_label: str


@dataclass(kw_only=True)
class PrepareDetailedInspectionResultInput:
    """
    :param scan_id: Scan ID of the scan that produced the inspection result.
    :param scan_iteration_id: ScanIteration ID of the scan that produced the
    inspection result.
    :param page_id: Page ID for one of the pages produced by the scan.
    :param resource_id: Resource ID for the resource for which the page was
    produced.
    """

    scan_id: str | None = None
    scan_iteration_id: str | None = None
    page_id: str | None = None
    resource_id: str | None = None


@dataclass(kw_only=True)
class PrepareDetailedInspectionResultOutput:
    """
    :param url: The signed download URL for the detailed inspection results. The
    signed URL is valid for 7 days.
    :param success: True if the operation was successful; false otherwise.
    """

    url: str | None = None
    success: bool | None = None


class InspectionResultType(StrEnum):
    """Type of inspection result, i.e. scan-level or page-level results."""

    SCAN = "scan"
    PAGE = "page"


@dataclass(kw_only=True)
class DescribeInspectionResultInput:
    """
    :param id: The unique ID of the inspection result to fetch.
    :param type: The type of inspection result to fetch.
    """

    id: str | None = None
    type: str | None = None


@dataclass(kw_only=True)
class ConfidenceSnapshot:

    certain_count: int | None = None
    likely_count: int | None = None
    possible_count: int | None = None
    found: bool | None = None
    columns: list[str] | None = None


@dataclass(kw_only=True)
class InspectionPolicy:
    """The inspection policy specifies the infotypes to scan for as well as the data to
    capture as part
    of the scan results.

    :param collect_tokens: If true, the scan will capture details about every
    infotype match, including the matched
    token, and exact location of the token. If
    false, the scan will capture only aggregate results
    (a.k.a. "snapshot" results).
    :param mask_details: If true, the matched tokens captured as part of the
    detailed scan results will be masked. If
    false, the raw, unmasked tokens will be
    captured. Use with caution. Only applicable if
    `detailed` scan results are
    enabled.
    :param infotypes: List of infotypes to scan for. If empty, all enabled infotypes
    will be included.
    :param compliance: List of infotype categories to scan for. All enabled
    infotypes included in the specified
    categories will be used in the scan. If
    `infotypes` is also specified, this list of infotype
    categories will be ignored.
    """

    collect_tokens: bool | None = None
    mask_details: bool | None = None
    infotypes: list[str] | None = None
    compliance: list[str] | None = None


class TagFilterAction(StrEnum):
    INCLUDE = "include"
    EXCLUDE = "exclude"


@dataclass(kw_only=True)
class TagFilter:

    action: str

    tag_key: str

    tag_value: str | None = None


@dataclass(kw_only=True)
class ScanResources:
    """The set of resources included in a scan. This can either be a static set of one
    or more
    resources identified by their resource ID, or a dynamic set of resources
    identified by one or
    more filter conditions. In the case of a recurring scan,
    the filter conditions will be reevaluated
    each time the scan is executed.

    :param account_id: The account ID of the cloud account to which the resoure
    belongs. E.g. a 12-digit AWS account ID.
    :param region: The region of the cloud account to which the resoure belongs.
    :param regions: List of regions to which the resoure belongs to in that cloud
    account.
    :param search: Free-text search on the resource name.
    :param resource_type: Filter the resources based on the resource type.
    :param resource_ids: One or more resource IDs to return.
    :param parent_id: The parent Id of the resource. E.g. Borneo-specific GCP
    subscription ID for GCP resources
    :param account_ids: Filter the resources which has the specified AWS account
    ids.
    :param parent_ids: Filter the resources which has the specified parent ids.
    :param is_public: Filter the resources which are public.
    :param is_unencrypted: Filter the resources which are un-unencrypted.
    :param tags: Filter the resources which have teh tags
    :param database: Filter the resources with the list of databaseses for selected
    connector types
    :param dataset: Filter the resources with the list of datasetss for selected
    connector types
    :param name: Filter list of resources based on name.
    :param schema: Filter the resources with the list of schemas for selected
    connector types
    :param drive_id: Filter the resources with the list of driveIds for gdrive
    connector types
    :param org_unit_id: Filter the resources with the list of orgUnits for gdrive
    connector types
    :param drive_type: Filter the resources with the list of driveTypes for gdrive
    connector types
    :param info_types: Filter results based on the infotypes detected in a resource.
    :param is_archived: Filter the channels marked as archived for Slack connector
    types
    :param is_external: Filter the channels marked as external for Slack connector
    types
    :param team_id: Slack Workspace id in Slack Enterprise Connector
    :param team_name: Slack Workspace name in Slack Enterprise Connector
    :param team_url: Slack Workspace URL in Slack Enterprise Connector
    :param is_private: Private channels, for Slack Enterprise Connector
    :param is_slack_direct_messages: Fetch DMs, for Slack Enterprise Connector
    :param space_status: Filter conlfluences based on status
    :param space_type: Filter conlfluences based on type
    :param all: Set this to `true` to determine the set of resources to scan based
    on the
    filter conditions in the `resources` property. If set to `false`, a
    static
    set of `resourceIds` must be specified.
    """

    account_id: str | None = None
    project_id: str | None = None
    region: str | None = None
    regions: list[str] | None = None
    search: str | None = None
    resource_type: str | None = None
    resource_ids: list[str] | None = None
    parent_id: str | None = None
    account_ids: list[str] | None = None
    parent_ids: list[str] | None = None
    is_public: bool | None = None
    is_unencrypted: bool | None = None
    tags: list[TagFilter] | None = None
    database: list[str] | None = None
    dataset: list[str] | None = None
    name: list[str] | None = None
    schema: list[str] | None = None
    drive_id: list[str] | None = None
    zendesk_group_id: list[int] | None = None
    google_groups: list[str] | None = None
    org_unit_id: list[str] | None = None
    drive_type: list[str] | None = None
    info_types: InfoTypesCombinationFilter | None = None
    is_archived: bool | None = None
    is_external: bool | None = None
    team_id: str | None = None
    team_name: str | None = None
    team_url: str | None = None
    is_private: bool | None = None
    is_slack_direct_messages: bool | None = None
    space_status: list[str] | None = None
    space_type: list[str] | None = None
    excluded_resources: list[str] | None = None
    namespace: list[str] | None = None
    set: list[str] | None = None
    all: bool | None = None


@dataclass(kw_only=True)
class ResourceBasedFilter:

    values: list[str] | None = None
    resource_id: str | None = None


class ScanFilterTypes(StrEnum):
    """The type of filter to apply. Not all connector types support all filter types."""

    LAST_MODIFIED_GREATER_THAN = "lastModifiedGreaterThan"
    LAST_MODIFIED_LESS_THAN = "lastModifiedLessThan"
    PREFIX = "prefix"
    FILE_EXTENSIONS = "fileExtensions"
    ONLY_INCLUDE_KEYS = "onlyIncludeKeys"
    VISIBILITY_FILTER = "visibilityFilter"
    INTERNAL_DOMAINS = "internalDomains"
    SCAN_ATTACHMENTS = "scanAttachments"
    ZENDESK_GROUPS = "zendeskGroups"
    JIRA_PROJECTS = "jiraProjects"
    EXCLUDE_COLUMNS = "excludeColumns"
    INCLUDE_NAMESPACES = "includeNamespaces"


@dataclass(kw_only=True)
class ScanFilter:
    """
    :param type: The type of filter to apply. Not all connector types support all
    filter types.
    :param filters: One or more filter values to apply. The number and type of
    values depends on the filter type.
    """

    type: str | None = None
    filters: list[str] | None = None
    resource_based_filters: list[ResourceBasedFilter] | None = None


@dataclass(kw_only=True)
class ScanParameters:
    """Scan configuration that was used to produce the inspection results.
    Only
    applicable to scan-level results.

    :param resources: The set of resources included in a scan. This can either be a
    static set of one or more
    resources identified by their resource ID, or a
    dynamic set of resources identified by one or
    more filter conditions. In the
    case of a recurring scan, the filter conditions will be reevaluated
    each time
    the scan is executed.
    :param resource_type: Resource type.
    :param scan_filter: A list of scan filters to apply. The filters are applied as
    a logical AND.
    :param inspection_policy: The inspection policy specifies the infotypes to scan
    for as well as the data to capture as part
    of the scan results.
    """

    resources: ScanResources | None = None
    resource_type: str | None = None
    scan_filter: list[ScanFilter] | None = None
    inspection_policy: InspectionPolicy | None = None


class InsightStatus(StrEnum):
    """Indicates whether a page of data was inspected successfully
    (status
    `success`)
    or not (status `failed`).
    """

    PAUSED = "paused"
    TERMINATED = "terminated"
    SCANNING = "scanning"
    SUCCESS = "success"
    FAILED = "failed"
    DELETED = "deleted"


@dataclass(kw_only=True)
class DescribeInspectionResultOutput:
    """
    :param id: Unique ID of the inspection result.
    :param scan_id: Scan ID of the scan that produced the inspection result.
    :param scan_iteration_id: Scan iteration ID of the scan that produced the
    inspection result.
    :param resource_id: Resource ID of the resource that was scanned. Only
    applicable to page-level results.
    :param resource_name: Name of the resource that was scanned. Only applicable to
    page-level results.
    :param resource_type: Type of the resource that was scanned. Only applicable to
    page-level results.
    :param file_name: Name of the file that was scanned. Only applicable to
    file-based data
    sources like S3.
    :param snapshot: Inspection "snapshot" result, providing a count of matched
    infotypes in
    the scanned data.
    :param compliance: Information about the classification of a data source based
    on the detected
    infotypes.
    :param parent_id: ID of the parent resource. Only applicable to page-level
    results.
    :param tokens: Sample tokens collected during a scan. Only available if the
    "Collect
    Tokens" option was enabled for the scan. Page-level results return
    sample
    tokens in the `tokens` property, while scan-level results return
    sample
    tokens in the `sampleTokens` property.
    :param sample_tokens: Sample tokens collected during a scan. Only available if
    the "Collect
    Tokens" option was enabled for the scan. Page-level results return
    sample
    tokens in the `tokens` property, while scan-level results return
    sample
    tokens in the `sampleTokens` property.
    :param scan_parameters: Scan configuration that was used to produce the
    inspection results. Only
    applicable to scan-level results.
    :param created_at: Timestamp when the inspection result was created, in Unix
    epoch time.
    :param updated_at: Timestamp when the inspection result was update, in Unix
    epoch time.
    :param has_finding: Whether the inspection result contains any findings.
    :param status: Indicates whether a page of data was inspected successfully
    (status
    `success`) or not (status `failed`).
    :param categories: The categories of the detected infotypes
    """

    id: str

    scan_id: str | None = None
    scan_iteration_id: str | None = None
    resource_id: str | None = None
    resource_name: str | None = None
    resource_type: str | None = None
    file_name: str | None = None
    snapshot: dict[str, InfotypeSnapshot] | None = None
    confidence_snapshot: dict[str, ConfidenceSnapshot] | None = None
    compliance: list[ComplianceDetail] | None = None
    parent_id: str | None = None
    meta: dict[str, Document] | None = None
    stats: dict[str, str] | None = None
    tokens: dict[str, list[SampleTokens]] | None = None
    sample_tokens: dict[str, list[SampleTokens]] | None = None
    scan_parameters: ScanParameters | None = None
    created_at: datetime | None = None
    updated_at: datetime | None = None
    has_finding: bool | None = None
    status: str | None = None
    user_name: str | None = None
    user_email: str | None = None
    categories: list[str] | None = None


class ListInsightsFilterType(StrEnum):
    FILE_EXTENSION = "fileExtension"


@dataclass(kw_only=True)
class ListInsightsFilterInput:

    scan_id: str | None = None
    filter_type: str | None = None


@dataclass(kw_only=True)
class ListInsightsFilterValueParameter:

    id: str | None = None
    name: str | None = None


@dataclass(kw_only=True)
class ListInsightsFilterOutput:

    entries: list[ListInsightsFilterValueParameter] | None = None


class InfotypeConfidence(StrEnum):
    CERTAIN = "certain"
    POTENTIAL = "potential"
    LIKELY = "likely"


@dataclass(kw_only=True)
class InspectionResultFilter:
    """A filter used to specify which inspection results to return.

    :param search: Free-text search on the resource name.
    :param scan_id: Unique scan ID.
    :param page_id: Unique page ID. Only applicable to page-level results.
    :param resource_ids: One or more resource IDs for which to retrieve results.
    Only applicable
    to page-level results.
    :param resource_type: Resource type to filter results by.
    :param scan_iteration_id: Unique scan iteration ID to fetch results for a
    specific run of
    :param info_types: Filter results based on the infotypes detected in a resource.
    :param categories: infotype categories
    """

    search: str | None = None
    scan_id: str | None = None
    page_id: str | None = None
    resource_ids: list[str] | None = None
    resource_type: str | None = None
    scan_iteration_id: str | None = None
    info_types: InfoTypesCombinationFilter | None = None
    user_emails: list[str] | None = None
    status: list[str] | None = None
    file_extension: list[str] | None = None
    categories: list[str] | None = None
    infotype_confidence: list[str] | None = None


@dataclass(kw_only=True)
class ListInspectionResultsInput:
    """
    :param type: Type of inspection result, i.e. scan-level or page-level results.
    :param filter: A filter used to specify which inspection results to return.
    :param next_token: The `nextToken` from the last page of results to retrieve the
    next page of results.
    :param page_size: The maximum number of records to return per API call. If more
    records
    are available, the response will be truncated and will contain
    a
    "nextToken" value, which can be used to return additional records.
    :param sort: Specifies how to sort the returned results.
    """

    type: str | None = None
    filter: InspectionResultFilter | None = None
    next_token: str | None = None
    page_size: int | None = None
    sort: SortRecords | None = None


@dataclass(kw_only=True)
class InspectionResultRecord:
    """
    :param id: Unique ID of the inspection result.
    :param scan_id: Scan ID of the scan that produced the inspection result.
    :param scan_iteration_id: Scan iteration ID of the scan that produced the
    inspection result.
    :param resource_id: Resource ID of the resource that was scanned. Only
    applicable to page-level results.
    :param resource_name: Name of the resource that was scanned. Only applicable to
    page-level results.
    :param resource_type: Type of the resource that was scanned. Only applicable to
    page-level results.
    :param file_name: Name of the file that was scanned. Only applicable to
    file-based data
    sources like S3.
    :param snapshot: Inspection "snapshot" result, providing a count of matched
    infotypes in
    the scanned data.
    :param compliance: Information about the classification of a data source based
    on the detected
    infotypes.
    :param parent_id: ID of the parent resource. Only applicable to page-level
    results.
    :param tokens: Sample tokens collected during a scan. Only available if the
    "Collect
    Tokens" option was enabled for the scan. Page-level results return
    sample
    tokens in the `tokens` property, while scan-level results return
    sample
    tokens in the `sampleTokens` property.
    :param sample_tokens: Sample tokens collected during a scan. Only available if
    the "Collect
    Tokens" option was enabled for the scan. Page-level results return
    sample
    tokens in the `tokens` property, while scan-level results return
    sample
    tokens in the `sampleTokens` property.
    :param scan_parameters: Scan configuration that was used to produce the
    inspection results. Only
    applicable to scan-level results.
    :param created_at: Timestamp when the inspection result was created, in Unix
    epoch time.
    :param updated_at: Timestamp when the inspection result was update, in Unix
    epoch time.
    :param has_finding: Whether the inspection result contains any findings.
    :param status: Indicates whether a page of data was inspected successfully
    (status
    `success`) or not (status `failed`).
    :param categories: The categories of the detected infotypes
    """

    id: str

    scan_id: str | None = None
    scan_iteration_id: str | None = None
    resource_id: str | None = None
    resource_name: str | None = None
    resource_type: str | None = None
    file_name: str | None = None
    snapshot: dict[str, InfotypeSnapshot] | None = None
    confidence_snapshot: dict[str, ConfidenceSnapshot] | None = None
    compliance: list[ComplianceDetail] | None = None
    parent_id: str | None = None
    meta: dict[str, Document] | None = None
    stats: dict[str, str] | None = None
    tokens: dict[str, list[SampleTokens]] | None = None
    sample_tokens: dict[str, list[SampleTokens]] | None = None
    scan_parameters: ScanParameters | None = None
    created_at: datetime | None = None
    updated_at: datetime | None = None
    has_finding: bool | None = None
    status: str | None = None
    user_name: str | None = None
    user_email: str | None = None
    categories: list[str] | None = None


@dataclass(kw_only=True)
class ListInspectionResultsOutput:
    """
    :param inspection_results: The list of inspection results matching the filter
    conditions, up to
    the specified page size.
    :param count: The total number of results matching the filter conditions.
    This
    value can be larger than the number of records returned in the response,
    in
    which case a "nextToken" will be included in the response to retrieve
    the next
    set of records.
    :param next_token: A token that can used in a subsequent API request to retrieve
    the next
    set of records.
    :param sort: The sorting order
    """

    inspection_results: list[InspectionResultRecord] | None = None
    count: int | None = None
    next_token: str | None = None
    sort: SortRecords | None = None


@dataclass(kw_only=True)
class ScanExecutionInsightsListFilter:
    """A filter used to specify which inspection results to return.

    :param search: Free-text search on the resource name.
    :param scan_id: Unique scan ID.
    :param resource_ids: One or more resource IDs for which to retrieve results.
    Only applicable
    to page-level results.
    :param info_types: Filter results based on the infotypes detected in a resource.
    :param infotype_confidence: One or more confidence matches for the scan.
    """

    search: str | None = None
    scan_id: str | None = None
    scan_iteration_id: str | None = None
    resource_ids: list[str] | None = None
    info_types: InfoTypesCombinationFilter | None = None
    statuses: list[str] | None = None
    infotype_confidence: list[str] | None = None


@dataclass(kw_only=True)
class ListScanExecutionInsightsInput:
    """
    :param filter: A filter used to specify which inspection results to return.
    :param page_size: The maximum number of records to return per API call. If more
    records
    are available, the response will be truncated and will contain
    a
    "nextToken" value, which can be used to return additional records.
    :param sort: Specifies how to sort the returned results.
    """

    filter: ScanExecutionInsightsListFilter | None = None
    next_token: str | None = None
    page_size: int | None = None
    sort: SortRecords | None = None


@dataclass(kw_only=True)
class ResourceRecord:

    meta: Document | None = None
    type: str | None = None
    name: str | None = None


class Month(StrEnum):
    JANUARY = "JANUARY"
    FEBRUARY = "FEBRUARY"
    MARCH = "MARCH"
    APRIL = "APRIL"
    MAY = "MAY"
    JUNE = "JUNE"
    JULY = "JULY"
    AUGUST = "AUGUST"
    SEPTEMBER = "SEPTEMBER"
    OCTOBER = "OCTOBER"
    NOVEMBER = "NOVEMBER"
    DECEMBER = "DECEMBER"


@dataclass(kw_only=True)
class CalendarSpec:
    """Schedule that specify when the task should start"""

    second: int | None = None
    minute: int | None = None
    hour: int | None = None
    day_of_month: int | None = None
    month: str | None = None
    year: int | None = None


@dataclass(kw_only=True)
class ScanSchedule:
    """Schedule a one-time scan to be executed at a particular time in the future
    Note
    that to schedule recurring scans, one of the predefined cron schedules needs to
    be specified.

    :param calendars: List of schedules
    :param timezone: time zone to be considered for the schedule
    """

    calendars: list[CalendarSpec] | None = None
    timezone: str | None = None


@dataclass(kw_only=True)
class ScanDetail:
    """
    :param schedule: Schedule a one-time scan to be executed at a particular time in
    the future
    Note that to schedule recurring scans, one of the predefined cron
    schedules needs to be specified.
    :param inspection_policy: The inspection policy specifies the infotypes to scan
    for as well as the data to capture as part
    of the scan results.
    """

    name: str | None = None
    scan_type: str | None = None
    schedule_type: str | None = None
    cron: str | None = None
    schedule: ScanSchedule | None = None
    inspection_policy: InspectionPolicy | None = None
    confidence_snapshot: dict[str, ConfidenceSnapshot] | None = None


@dataclass(kw_only=True)
class ScanDataProcessed:
    """Total amount of data processed by a scan.

    :param read_from_source_bytes: Total number of bytes read from the source.
    :param inspected_bytes: Total number of bytes inspected.
    :param extracted_bytes: Total number of bytes of raw text extracted for
    supported file formats.
    """

    read_from_source_bytes: int | None = None
    inspected_bytes: int | None = None
    extracted_bytes: int | None = None


class ScanStatus(StrEnum):
    SCHEDULED = "scheduled"
    PENDING = "pending"
    INPROGRESS = "inprogress"
    PAUSED = "paused"
    PAUSING = "pausing"
    RESUMING = "resuming"
    COMPLETED = "completed"
    TERMINATED = "terminated"


@dataclass(kw_only=True)
class StateChangeEvents:

    status: str | None = None
    previous_status: str | None = None
    epoch: int | None = None


@dataclass(kw_only=True)
class ScanStats:
    """Scan statistics.

    :param state_change_events: List of state change events for a scan.
    :param data_processed: Total amount of data processed by a scan.
    """

    state_change_events: list[StateChangeEvents] | None = None
    data_processed: ScanDataProcessed | None = None
    scan_duration: float | None = None


@dataclass(kw_only=True)
class ScanExecutionRecord:
    """
    :param scan_id: Unique identifier for the scan
    :param updated_at: Timestamp when the inspection result was last updated
    :param resource_id: Identifier for the resource
    :param resource: The resource object
    :param snapshot: A list of snapshots associated with the inspection result
    :param status: A list of statuses related to the inspection result
    :param sample_tokens: Sample tokens collected during a scan. Only available if
    the "Collect
    Tokens" option was enabled for the scan. Page-level results return
    sample
    tokens in the `tokens` property, while scan-level results return
    sample
    tokens in the `sampleTokens` property.
    :param stats: Scan statistics.
    """

    scan_execution_id: str | None = None
    scan_id: str | None = None
    updated_at: datetime | None = None
    resource_id: str | None = None
    resource: ResourceRecord | None = None
    snapshot: dict[str, InfotypeSnapshot] | None = None
    status: str | None = None
    sample_tokens: dict[str, list[SampleTokens]] | None = None
    confidence_snapshot: dict[str, ConfidenceSnapshot] | None = None
    scan_iteration_id: str | None = None
    scan_start_time: datetime | None = None
    stats: ScanStats | None = None
    scan: ScanDetail | None = None


@dataclass(kw_only=True)
class ListScanExecutionInsightsOutput:
    """
    :param results: The list of inspection results matching the filter conditions,
    up to
    the specified page size.
    :param total: The total number of results matching the filter conditions.
    This
    value can be larger than the number of records returned in the response,
    in
    which case a "nextToken" will be included in the response to retrieve
    the next
    set of records.
    :param next_token: A token that can used in a subsequent API request to retrieve
    the next
    set of records.
    :param sort: Specifies how to sort the returned results.
    """

    results: list[ScanExecutionRecord] | None = None
    total: int | None = None
    next_token: str | None = None
    sort: SortRecords | None = None


class PolicyInfotypeConfidenceLevel(StrEnum):
    POTENTIAL = "potential"
    LIKELY = "likely"
    CERTAIN = "certain"


class ReportingPeriods(StrEnum):
    LAST_DAY = "last_day"
    LAST_WEEK = "last_week"
    LAST_TWO_WEEKS = "last_two_weeks"
    LAST_MONTH = "last_month"
    LAST_3_MONTHS = "last_3_months"
    LAST_YEAR = "last_year"


@dataclass(kw_only=True)
class ListTopResourcesWithSensitiveDataDetailsInput:

    reporting_period: str | None = None
    identifiers: list[str] | None = None
    classifications: list[str] | None = None
    categories: list[str] | None = None
    resource_types: list[str] | None = None
    confidence_levels: list[str] | None = None
    count: int | None = None


@dataclass(kw_only=True)
class ResourceSensitiveDataDetails:

    resource_id: str

    resource_name: str

    resource_type: str

    data_scanned: int

    identifier_count: int

    identifiers_found: list[str]

    confidence_levels: list[str]

    number_of_scans: int


@dataclass(kw_only=True)
class ListTopResourcesWithSensitiveDataDetailsOutput:

    resources: list[ResourceSensitiveDataDetails] | None = None


@dataclass(kw_only=True)
class PageInsightsExportInput:
    """
    :param scan_id: The unique scan ID.
    :param filter: A filter used to specify which inspection results to return.
    :param detailed: Set to `true` if the results exported to have detailed
    column
    level information of the detected infotypes
    with masked tokens if captured.
    """

    scan_id: str | None = None
    filter: InspectionResultFilter | None = None
    detailed: bool | None = None


@dataclass(kw_only=True)
class PageInsightsExportOutput:
    """
    :param url: The exported scan results will be available to download in the url
    with an expiry of 1 hour.
    """

    url: str | None = None


@dataclass(kw_only=True)
class SummarizeDataIdentifierStatsInput:

    reporting_period: str | None = None
    identifiers: list[str] | None = None
    classifications: list[str] | None = None
    categories: list[str] | None = None
    resource_types: list[str] | None = None
    confidence_levels: list[str] | None = None
    count: int | None = None


@dataclass(kw_only=True)
class SummarizeDataIdentifierStatsOutput:

    stats: dict[str, int] | None = None


@dataclass(kw_only=True)
class SummarizeResourceTypeDataIdentifierCountsInput:

    reporting_period: str | None = None
    identifiers: list[str] | None = None
    classifications: list[str] | None = None
    categories: list[str] | None = None
    resource_types: list[str] | None = None
    confidence_levels: list[str] | None = None
    count: int | None = None


@dataclass(kw_only=True)
class SummarizeResourceTypeDataIdentifierCountsOutput:

    stats: dict[str, int] | None = None


@dataclass(kw_only=True)
class ComplianceRisk:
    """Details about the comliance risks associated with the issue.

    :param infotypes: List of infotypes detected for the resource.
    :param classifications: List of data classifications based on the detected
    infotypes.
    :param sensitive: Whether any of the data classifications are considered
    sensitive.
    """

    infotypes: list[str] | None = None
    classifications: list[str] | None = None
    sensitive: bool | None = None


@dataclass(kw_only=True)
class DataSecurityEvent:
    """Details of a data security event that that caused an issue to be created.

    :param event_id: Unique event ID.
    :param issue_id: The issue ID associated with the event.
    :param resource_id: The resource ID associated with the event.
    :param source: The source of the event.
    :param type: The type of the event.
    :param details: Additional details about the event, based on the event source
    and type.
    """

    event_id: str | None = None
    issue_id: str | None = None
    resource_id: str | None = None
    source: str | None = None
    type: str | None = None
    details: dict[str, Document] | None = None


@dataclass(kw_only=True)
class DescribeIssueInput:
    """
    :param issue_id: The unique issue ID.
    """

    issue_id: str | None = None


@dataclass(kw_only=True)
class IssueNotification:
    """Details about a notification that was sent for the issue.

    :param success: Whether the notification was sent successfully.
    :param type: The type of notification.
    :param link: A URL to the notification, where applicable, such as a Slack
    message URL,
    a Jira ticket URL, etc.
    :param time: The time at which the notification was sent, in Unix epoch time.
    """

    success: bool | None = None
    type: str | None = None
    link: str | None = None
    time: str | None = None


@dataclass(kw_only=True)
class IssueResourceDetails:
    """Details of the resource to which the issue applies.

    :param name: The resource name.
    :param type: The resource type.
    :param snapshot: Inspection "snapshot" result, providing a count of matched
    infotypes in
    the scanned data.
    :param compliance: Information about the classification of a data source based
    on the detected
    infotypes.
    :param owner: List of resource owners.
    :param status: Current status of the resource. Only "active" resources can be
    scanned.
    """

    name: str | None = None
    type: str | None = None
    snapshot: dict[str, InfotypeSnapshot] | None = None
    compliance: list[ComplianceDetail] | None = None
    owner: list[OwnerObject] | None = None
    meta: dict[str, Document] | None = None
    status: str | None = None
    aka: str | None = None
    properties: dict[str, Document] | None = None


@dataclass(kw_only=True)
class SecurityRisk:
    """Details about the security risks associated with the issue.

    :param failed_rules: List of failed data security rules for the resource.
    """

    failed_rules: list[str] | None = None


class IssueState(StrEnum):
    """The current state of the issue."""

    OPEN = "open"
    RESOLVED = "resolved"


@dataclass(kw_only=True)
class DescribeIssueOutput:
    """Details of a data security issue detected by Borneo.

    :param issue_id: The unique identifier of the issue.
    :param resource_id: The resource ID of the resource to which the issue applies.
    :param state: The current state of the issue.
    :param severity: Violation & data classification severity
    :param resource: Details of the resource to which the issue applies.
    :param security_risk: Details about the security risks associated with the
    issue.
    :param compliance_risk: Details about the comliance risks associated with the
    issue.
    :param events: List of data security events for the issue.
    :param notifications: List of notifications sent for the issue.
    :param created_at: The time at which the issue was created, in Unix epoch time.
    :param updated_at: The time at which the issue was last updated, in Unix epoch
    time.
    """

    issue_id: str

    resource_id: str | None = None
    state: str | None = None
    severity: str | None = None
    resource: IssueResourceDetails | None = None
    security_risk: SecurityRisk | None = None
    compliance_risk: ComplianceRisk | None = None
    events: list[DataSecurityEvent] | None = None
    notifications: list[IssueNotification] | None = None
    created_at: datetime | None = None
    updated_at: datetime | None = None


@dataclass(kw_only=True)
class EventsFilter:

    event_id: list[str] | None = None
    issue_id: list[str] | None = None
    resource_id: list[str] | None = None
    scan_id: list[str] | None = None
    user_id: list[str] | None = None
    search: str | None = None
    issue_type: list[str] | None = None
    new_infotype_found: bool | None = None


@dataclass(kw_only=True)
class ListEventsInput:
    """
    :param sort: Specifies how to sort the returned results.
    """

    filter: EventsFilter | None = None
    sort: SortRecords | None = None
    next_token: str | None = None
    page_size: int | None = None
    select: list[str] | None = None


@dataclass(kw_only=True)
class Events:
    """
    :param snapshot: Inspection "snapshot" result, providing a count of matched
    infotypes in
    the scanned data.
    :param inspection_policy: The inspection policy specifies the infotypes to scan
    for as well as the data to capture as part
    of the scan results.
    :param tokens: Sample tokens collected during a scan. Only available if the
    "Collect
    Tokens" option was enabled for the scan. Page-level results return
    sample
    tokens in the `tokens` property, while scan-level results return
    sample
    tokens in the `sampleTokens` property.
    """

    event_id: str | None = None
    issue_id: str | None = None
    resource_id: str | None = None
    source: str | None = None
    type: str | None = None
    details: Document | None = None
    created_at: datetime | None = None
    resource_name: str | None = None
    scan_id: str | None = None
    snapshot: dict[str, InfotypeSnapshot] | None = None
    inspection_policy: InspectionPolicy | None = None
    tokens: dict[str, list[SampleTokens]] | None = None
    status: str | None = None
    scan_iteration_id: str | None = None
    scan_execution_id: str | None = None
    meta: Document | None = None
    page_inspection_insight_id: str | None = None
    resource_type: str | None = None
    user_id: str | None = None
    name: str | None = None
    email: str | None = None
    connector_user_id: str | None = None
    connector_username: str | None = None
    external: bool | None = None


@dataclass(kw_only=True)
class ListEventsOutput:
    """
    :param sort: Specifies how to sort the returned results.
    """

    next_token: str | None = None
    total: int | None = None
    events: list[Events] | None = None
    sort: SortRecords | None = None


@dataclass(kw_only=True)
class IssueFilter:
    """Filter conditions for listing issues.

    :param resources: List of resource IDs to filter by.
    :param resource_types: List of resource types to filter by.
    :param cloud_account_types: List of cloud provider account types to filter by.
    :param cloud_account_ids: List of cloud provider account IDs to filter by.
    :param states: List of isssue states to filter by.
    :param severities: List of issue severities to filter by.
    :param search: Free-text search on the resource name.
    :param failed_controls: List of failed controls to filter by.
    """

    resources: list[str] | None = None
    resource_types: list[str] | None = None
    cloud_account_types: list[str] | None = None
    cloud_account_ids: list[str] | None = None
    states: list[str] | None = None
    severities: list[str] | None = None
    search: str | None = None
    failed_controls: list[str] | None = None


@dataclass(kw_only=True)
class ListIssuesInput:
    """
    :param filter: Filter conditions for listing issues.
    :param select: List of column names to include in the response.
    :param include: The set of related resources that should be included in the
    response using a join-query.
    :param next_token: The `nextToken` from the last page of results to retrieve the
    next page of results.
    :param sort: Specifies how to sort the returned results.
    :param page_size: The maximum number of records to return per API call. If more
    records
    are available, the response will be truncated and will contain
    a
    "nextToken" value, which can be used to return additional records.
    """

    filter: IssueFilter | None = None
    select: list[str] | None = None
    include: dict[str, bool] | None = None
    next_token: str | None = None
    sort: SortRecords | None = None
    page_size: int = 10


@dataclass(kw_only=True)
class IssueRecord:
    """Details of a data security issue detected by Borneo.

    :param issue_id: The unique identifier of the issue.
    :param resource_id: The resource ID of the resource to which the issue applies.
    :param state: The current state of the issue.
    :param severity: Violation & data classification severity
    :param resource: Details of the resource to which the issue applies.
    :param security_risk: Details about the security risks associated with the
    issue.
    :param compliance_risk: Details about the comliance risks associated with the
    issue.
    :param events: List of data security events for the issue.
    :param notifications: List of notifications sent for the issue.
    :param created_at: The time at which the issue was created, in Unix epoch time.
    :param updated_at: The time at which the issue was last updated, in Unix epoch
    time.
    """

    issue_id: str

    resource_id: str | None = None
    state: str | None = None
    severity: str | None = None
    resource: IssueResourceDetails | None = None
    security_risk: SecurityRisk | None = None
    compliance_risk: ComplianceRisk | None = None
    events: list[DataSecurityEvent] | None = None
    notifications: list[IssueNotification] | None = None
    created_at: datetime | None = None
    updated_at: datetime | None = None


@dataclass(kw_only=True)
class ListIssuesOutput:
    """
    :param issues: The list of data security issues matching the filter conditions,
    up to the specified page size.
    :param total: The total number of scans matching the filter conditions.
    This
    value can be larger than the number of records returned in the response,
    in
    which case a "nextToken" will be included in the response to retrieve
    the next
    set of records.
    :param next_token: A token that can used in a subsequent API request to retrieve
    the next
    set of records.
    :param sort: The API sort order
    """

    issues: list[IssueRecord] | None = None
    total: int | None = None
    next_token: str | None = None
    sort: SortRecords | None = None


@dataclass(kw_only=True)
class CreateLegalDocumentInput:

    organisation_id: int | None = None
    document_link: str | None = None
    name: str | None = None
    type: str | None = None
    source: str | None = None
    region: str | None = None
    is_discover_infotype: bool | None = None
    from_discovered_document_id: str | None = None


@dataclass(kw_only=True)
class CreateLegalDocumentOutput:

    document_id: str


@dataclass(kw_only=True)
class DescribeLegalDocumentInput:

    organisation_id: int | None = None
    document_id: str | None = None


@dataclass(kw_only=True)
class DescribeLegalDocumentOutput:

    document_id: str

    name: str | None = None
    type: str | None = None
    source: str | None = None
    document_link: str | None = None
    bucket_uri: str | None = None
    discovered_infotypes: list[str] | None = None
    last_scanned: datetime | None = None
    region: str | None = None
    status: str | None = None
    is_discover_infotype: bool | None = None
    from_discovered_document_id: str | None = None
    created_at: datetime | None = None
    updated_at: datetime | None = None


@dataclass(kw_only=True)
class LegalDocumentSelectFilter:
    """
    :param search: Free-form text search to apply to the scan name.
    """

    search: str | None = None
    status: str | None = None


@dataclass(kw_only=True)
class ListLegalDocumentsInput:
    """
    :param next_token: The `nextToken` from the last page of results to retrieve the
    next page of results.
    :param page_size: The maximum number of records to return per API call. If more
    records
    are available, the response will be truncated and will contain
    a
    "nextToken" value, which can be used to return additional records.
    :param sort: Specifies how to sort the returned results.
    """

    organisation_id: int | None = None
    filter: LegalDocumentSelectFilter | None = None
    next_token: str | None = None
    page_size: int | None = None
    sort: SortRecords | None = None


@dataclass(kw_only=True)
class ListLegalDocumentsOutput:
    """
    :param legal_documents: The list of document results matching the filter
    conditions, up to
    the specified page size.
    :param count: The total number of results matching the filter conditions.
    This
    value can be larger than the number of records returned in the response,
    in
    which case a "nextToken" will be included in the response to retrieve
    the next
    set of records.
    :param next_token: A token that can used in a subsequent API request to retrieve
    the next
    set of records.
    :param is_borneo_ai_scanning: Boolean value indicating if any document is
    currently being scanned.
    """

    legal_documents: list[LegalDocumentListMember] | None = None
    count: int | None = None
    next_token: str | None = None
    is_borneo_ai_scanning: bool | None = None


@dataclass(kw_only=True)
class RemoveLegalDocumentInput:

    organisation_id: int | None = None
    document_id: str | None = None


@dataclass(kw_only=True)
class RemoveLegalDocumentOutput:

    document_id: str


@dataclass(kw_only=True)
class ScanLegalDocumentInput:

    document_id: str | None = None


@dataclass
class ScanLegalDocumentOutput:
    pass


class LogType(StrEnum):
    API = "API"


@dataclass(kw_only=True)
class ListAccessLogsFilter:
    """Filters resources based on the specified filter criteria.

    :param search: Free-text search on the logs.
    :param log_type: Filter logs based on type of service logs eg. "API".
    :param email: Filters all logs with user email eg. "user@example.com".
    :param operation_name: List logs based on operation type eg. "ListConnectors",
    "CreateOktaConnection".
    :param request_id: List logs from a specific requestId eg.
    "clvuywyoq009407rj61sxcrpc"
    :param start: List logs starting in between a specific timestamps with
    nonoseconds eg. 1715076388657800827.
    :param end: List logs ending in between a specific timestamps with nonoseconds
    eg. 1715076399359944184.
    """

    search: str | None = None
    log_type: str = "API"
    email: str | None = None
    operation_name: str | None = None
    request_id: str | None = None
    start: str | None = None
    end: str | None = None


@dataclass(kw_only=True)
class ListAccessLogsInput:
    """
    :param filter: Filters resources based on the specified filter criteria.
    :param page_size: The maximum number of logs to return per API call.
    :param next_token: The `nextToken` from the last page of results to retrieve the
    next page of results.
    """

    organisation_id: int | None = None
    filter: ListAccessLogsFilter | None = None
    page_size: int | None = None
    next_token: str | None = None


@dataclass(kw_only=True)
class ListAccessLogsOutput:
    """
    :param logs: The list of all logs matching the filters.
    :param size: Size of logs fetched.
    :param next_token: A token that can used in a subsequent API request to retrieve
    the next
    set of records.
    """

    logs: list[AccessLogMember] | None = None
    size: int | None = None
    next_token: str | None = None


class LogCategory(StrEnum):
    SCAN = "scan"
    CONNECTOR = "connector"
    DATA_PLANE = "dataPlane"
    CLOUD_AWS = "cloudAWS"
    CLOUD_GCP = "cloudGCP"
    CLOUD_AZURE = "cloudAzure"
    NOTIFICATION = "notification"


@dataclass(kw_only=True)
class ListAuditLogsFilter:
    """Filters resources based on the specified filter criteria.

    :param search: Free-text search on the logs.
    :param scan_id: List logs for a specific scan
    :param connector_id: List logs for a specific connector
    :param data_plane_id: List logs for a specific dataPlane
    :param account_id: List logs for a specific AWS account
    :param gcp_connection_id: List logs for a specific GCP connection
    :param gcp_project_id: List logs for a specific GCP project
    :param azure_connection_id: List logs for a specific Azure connection
    :param azure_subscription_id: List logs for a specific Azure project
    :param category: List logs for a specific category. eg: "scan", "connector",
    "dataPlane"
    :param start: List logs starting in between a specific timestamps with
    nonoseconds eg. 1715076388657800827.
    :param end: List logs ending in between a specific timestamps with nonoseconds
    eg. 1715076399359944184.
    """

    search: str | None = None
    scan_id: str | None = None
    connector_id: str | None = None
    data_plane_id: str | None = None
    account_id: str | None = None
    gcp_connection_id: str | None = None
    gcp_project_id: str | None = None
    azure_connection_id: str | None = None
    azure_subscription_id: str | None = None
    category: str | None = None
    start: str | None = None
    end: str | None = None


@dataclass(kw_only=True)
class ListAuditLogsInput:
    """
    :param filter: Filters resources based on the specified filter criteria.
    :param page_size: The maximum number of logs to return per API call.
    :param next_token: The `nextToken` from the last page of results to retrieve the
    next page of results.
    """

    filter: ListAuditLogsFilter | None = None
    page_size: int | None = None
    next_token: str | None = None


@dataclass(kw_only=True)
class ListAuditLogsOutput:
    """
    :param logs: The list of all logs matching the filters.
    :param size: Size of logs fetched.
    :param next_token: A token that can used in a subsequent API request to retrieve
    the next
    set of records.
    """

    logs: list[Document] | None = None
    size: int | None = None
    next_token: str | None = None


class ThresholdLopdpStatus(StrEnum):
    """Status of the threshold. Can be draft or activated."""

    DRAFT = "draft"
    ACTIVATED = "activated"


@dataclass(kw_only=True)
class CreateLopdpThresholdInput:
    """
    :param processing_activity_id: Identifier of the processing activity for which
    the threshold will be created
    :param comment: Additional information related to the Threshold
    :param status: Status of the threshold. Can be draft or activated.
    """

    organisation_id: int | None = None
    processing_activity_id: str | None = None
    comment: str | None = None
    systematic_personal_assessment: bool | None = None
    large_scale_observation: bool | None = None
    processing_personal_data_risk: bool | None = None
    special_category_data_processed: bool | None = None
    sensitive_or_special_data: bool | None = None
    rights_risk_processing_data: bool | None = None
    freedom_risk_processing_data: bool | None = None
    innovative_technologies_used: bool | None = None
    processing_vulnerable_data_subject: bool | None = None
    additional_comment: bool | None = None
    status: str | None = None


@dataclass(kw_only=True)
class CreateLopdpThresholdOutput:
    """
    :param lopdp_threshold_id: Identifier of the Threshold
    """

    lopdp_threshold_id: str


@dataclass(kw_only=True)
class DescribeLopdpThresholdInput:
    """
    :param lopdp_threshold_id: Identifier of the Threshold
    """

    organisation_id: int | None = None
    lopdp_threshold_id: str | None = None


class ThresholdLopdpDpiaStatus(StrEnum):
    NECESSARY = "necessary"
    RECOMMENDED = "recommended"
    OPTIONAL = "optional"


@dataclass(kw_only=True)
class DescribeLopdpThresholdOutput:
    """
    :param comment: Additional information related to the Threshold
    :param status: Status of the threshold. Can be draft or activated.
    """

    comment: str | None = None
    systematic_personal_assessment: bool | None = None
    large_scale_observation: bool | None = None
    processing_personal_data_risk: bool | None = None
    special_category_data_processed: bool | None = None
    sensitive_or_special_data: bool | None = None
    rights_risk_processing_data: bool | None = None
    freedom_risk_processing_data: bool | None = None
    innovative_technologies_used: bool | None = None
    processing_vulnerable_data_subject: bool | None = None
    additional_comment: bool | None = None
    status: str | None = None
    dpia_status: str | None = None
    created_at: datetime | None = None
    updated_at: datetime | None = None


@dataclass(kw_only=True)
class RemoveLopdpThresholdInput:
    """
    :param lopdp_threshold_id: Identifier of the Threshold
    """

    organisation_id: int | None = None
    lopdp_threshold_id: str | None = None


@dataclass
class RemoveLopdpThresholdOutput:
    pass


@dataclass(kw_only=True)
class UpdateLopdpThresholdInput:
    """
    :param lopdp_threshold_id: Identifier of the Threshold
    :param comment: Additional information related to the Threshold
    :param status: Status of the threshold. Can be draft or activated.
    """

    organisation_id: int | None = None
    lopdp_threshold_id: str | None = None
    comment: str | None = None
    systematic_personal_assessment: bool | None = None
    large_scale_observation: bool | None = None
    processing_personal_data_risk: bool | None = None
    special_category_data_processed: bool | None = None
    sensitive_or_special_data: bool | None = None
    rights_risk_processing_data: bool | None = None
    freedom_risk_processing_data: bool | None = None
    innovative_technologies_used: bool | None = None
    processing_vulnerable_data_subject: bool | None = None
    additional_comment: bool | None = None
    status: str | None = None


@dataclass
class UpdateLopdpThresholdOutput:
    pass


@dataclass(kw_only=True)
class MissingObject:

    id: str

    name: str | None = None


class PrivacyOpsFieldOptionType(StrEnum):
    THREAT = "threat"
    IMPACT = "impact"
    RISK_SOURCE = "riskSource"
    DATA_TYPE = "dataType"
    DATA_SOURCE = "dataSource"
    DATA_SUBJECT = "dataSubject"
    RECIPIENT_LAWFUL_BASIS = "recipientLawfulBasis"
    CONFIDENTIALITY_THREAT = "confidentialityThreat"
    AVAILABILITY_THREAT = "availabilityThreat"
    INTEGRITY_THREAT = "integrityThreat"
    CONFIDENTIALITY_IMPACT = "confidentialityImpact"
    AVAILABILITY_IMPACT = "availabilityImpact"
    INTEGRITY_IMPACT = "integrityImpact"


@dataclass(kw_only=True)
class MissingPrivacyOpsFieldOptions:

    type: str | None = None
    missing_options: list[MissingObject] | None = None


@dataclass(kw_only=True)
class MissingDpiaFieldOptions:

    missing_privacy_ops_field_options: list[MissingPrivacyOpsFieldOptions] | None = None


@dataclass(kw_only=True)
class MissingDpiaObjects:

    availability: MissingDpiaFieldOptions | None = None
    integrity: MissingDpiaFieldOptions | None = None
    confidentiality: MissingDpiaFieldOptions | None = None


@dataclass(kw_only=True)
class MissingProcessingActivityObjects:

    missing_departments: list[MissingObject]

    missing_recipients: list[MissingObject]

    missing_assets: list[MissingObject]

    missing_privacy_ops_field_options: list[MissingPrivacyOpsFieldOptions]

    missing_info_types: list[MissingObject]


@dataclass(kw_only=True)
class ClonePaInTargetOrgInput:

    organisation_id: int | None = None
    source_pa_id: str | None = None
    target_organisation_id: int | None = None
    name: str | None = None
    clone_ta: bool | None = None
    clone_dpia: bool | None = None
    missing_processing_activity_objects: MissingProcessingActivityObjects | None = None
    missing_dpia_objects: MissingDpiaObjects | None = None
    owner: str | None = None


@dataclass(kw_only=True)
class ClonePaInTargetOrgOutput:

    cloned_pa_id: str


class CompanyRole(StrEnum):
    """Role of the company for a processing activity"""

    CONTROLLER = "controller"
    PROCESSOR = "processor"
    JOINT_CONTROLLER = "joint_controller"
    SUB_PROCESSOR = "sub_processor"
    INDEPENDENT_CONTROLLER = "independent_controller"


class DataFlowRelationshipOptionType(StrEnum):
    MY_ORGANISATION = "MyOrganisation"
    DATA_SOURCE = "dataSource"
    SPECIFIC_PROCESSING_ACTIVITY = "specificProcessingActivity"
    RECIPIENT = "recipient"


@dataclass(kw_only=True)
class DataFlowRelationshipOption:

    type: str

    value: str | None = None


@dataclass(kw_only=True)
class DataFlowRelationship:

    from_: DataFlowRelationshipOption

    to: DataFlowRelationshipOption


class InfotypeVolume(StrEnum):
    """Ranges of the processed infotype volume."""

    VOLUME_0_1000 = "0-1000"
    VOLUME_1000_10000 = "1000-10000"
    VOLUME_10000_100000 = "10000-100000"
    VOLUME_100000_PLUS = "100000+"


class UploadedFileCategory(StrEnum):
    """Category of the file to upload"""

    PROCESSING_ACTIVITY_ADDITIONAL_INFO = "processing-activity-additional-info"
    RECIPIENT_DPA = "recipient_dpa"
    TOM_DOCUMENT = "tom_document"
    PRIDATECT_EXPORT = "pridatect_export"
    ORGANISATION_LOGO = "organisation_logo"
    DSAR_REQUEST = "dsar_request"
    FALSE_POSITIVE_REPORT = "false-positive-report"
    DATA_BREACH_DOCUMENT = "data_breach_document"
    TA_DPIA_DOCUMENT = "ta_dpia_document"
    LIA_DOCUMENT = "lia_document"
    CUSTOM_IDENTIFIER_KEYWORD_DICTIONARY = "custom_identifier_keyword_dictionary"


@dataclass(kw_only=True)
class FileInfo:
    """
    :param name: Name of the file to upload
    :param category: Category of the file to upload
    """

    uploaded_file_id: str | None = None
    name: str | None = None
    category: str | None = None
    url: str | None = None


class LawfulnessType(StrEnum):
    """Represents a Lawful Basis"""

    CONSENT_PERSON_CONCERNED = "consent_person_concerned"
    CONTRACT = "contract"
    STAKEHOLDER_VITAL_INTEREST = "stakeholder_vital_interest"
    LEGITIMATE_INTEREST = "legitimate_interest"
    PUBLIC_INTEREST = "public_interest"
    LEGAL_OBLIGATION = "legal_obligation"


@dataclass(kw_only=True)
class LawfulBasis:
    """
    :param lawfulness_type: Represents a Lawful Basis
    """

    lawfulness_type: str

    comment: str | None = None
    additional_info_file: str | None = None
    additional_info_file_object: FileInfo | None = None


class ManagementMethodType(StrEnum):
    """Management method type of data subject access requests."""

    EMAIL = "email"
    POSTAL = "postal"


@dataclass(kw_only=True)
class PostalAddress:
    """
    :param country: 2 letter code that identifies a country.
    :param zipcode: The zipcode of the headquarter
    """

    street: str

    city: str

    country: str

    zipcode: str


@dataclass(kw_only=True)
class ManagementMethod:
    """
    :param method_type: Management method type of data subject access requests.
    """

    method_type: str

    email: str | None = None
    postal_address: PostalAddress | None = None


class DataProcessingFrequency(StrEnum):
    """Data processing frequency."""

    IS_SYSTEMATIC = "is_systematic"
    IS_NOT_SYSTEMATIC = "not_systematic"


@dataclass(kw_only=True)
class ProcessingActivityRecipient:
    """Represents a Recipient affected by the processing activity

    :param recipient_id: Identifier of the recipient
    :param role: Role of the recipient for this processing activity. The role of a
    recipient can
    be different between processing activities
    """

    recipient_id: str

    role: list[str]

    comment: str | None = None


class RetentionPeriodUnit(StrEnum):
    """Unit of time that is used for retention period"""

    DAY = "day"
    WEEK = "week"
    MONTH = "month"
    YEAR = "year"


@dataclass(kw_only=True)
class RetentionPeriod:
    """Represents the legal retention period of the data stored.

    :param unit: Unit of time that is used for retention period
    """

    unit: str | None = None
    value: int | None = None


@dataclass(kw_only=True)
class CreateProcessingActivityInput:
    """
    :param active: Flag to create the processing activity as activated or draft
    :param additional_info: Text to add more information about the processing
    activity
    :param additional_info_files: List of uploaded file ids.
    :param assets: List assets ids related to the processing activity.
    :param contact_person: Contact person for the processing activity.
    :param data_subjects: List of Data Subjects affected by the processing activity
    :param departments: List departments related with the processing activity.
    :param lawful_basis: List of Lawfulness types affected by a processing activity
    :param name: Name of the processing activity
    :param recipients: List of recipients related with the processing activity.
    :param retention_period: Represents the legal retention period of the data
    stored.
    :param infotypes: List of info types related with the processing activity.
    :param infotype_categories: List of info types categories related with the
    processing activity.
    :param infotype_volume: Ranges of the processed infotype volume.
    :param processing_frequency: Data processing frequency.
    :param is_data_stored: Indicates if you store the data.
    :param are_access_requests_managed: Indicates if the data subject access
    requests are managed.
    """

    organisation_id: int | None = None
    active: bool | None = None
    additional_info: str | None = None
    additional_info_files: list[str] | None = None
    assets: list[str] | None = None
    employees: list[str] | None = None
    company_role: list[str] | None = None
    contact_person: str | None = None
    data_sources: list[str] | None = None
    processing_activities_as_data_sources: list[str] | None = None
    data_subjects: list[str] | None = None
    data_types: list[str] | None = None
    departments: list[str] | None = None
    lawful_basis: list[LawfulBasis] | None = None
    model_id: str | None = None
    name: str | None = None
    purpose: str | None = None
    recipients: list[ProcessingActivityRecipient] | None = None
    retention_period: RetentionPeriod | None = None
    retention_period_comment: str | None = None
    infotypes: list[str] | None = None
    infotype_categories: list[str] | None = None
    infotype_volume: str | None = None
    processing_frequency: str | None = None
    processing_frequency_comment: str | None = None
    is_data_stored: bool | None = None
    are_access_requests_managed: bool | None = None
    management_methods: list[ManagementMethod] | None = None
    language: str | None = None
    created_at: datetime | None = None
    updated_at: datetime | None = None
    translations: dict[str, dict[str, str]] | None = None
    owner: str | None = None
    data_flow_relationships: list[DataFlowRelationship] | None = None
    show_on_ropa_document: bool | None = None


@dataclass(kw_only=True)
class CreateProcessingActivityOutput:
    """
    :param processing_activity_id: Identifier of the Processing Activity
    """

    processing_activity_id: str


@dataclass(kw_only=True)
class DescribeProcessingActivityInput:
    """
    :param processing_activity_id: Identifier of the Processing Activity
    """

    organisation_id: int | None = None
    processing_activity_id: str | None = None


@dataclass(kw_only=True)
class ProcessingActivityEmployee:
    """
    :param employee_id: Identifier of the employee
    """

    employee_id: str

    name: str | None = None
    surname: str | None = None


@dataclass(kw_only=True)
class ProcessingActivityDepartment:
    """
    :param department_id: Identifier of the department.

    """

    department_id: str

    name: str


class FrameworkType(StrEnum):
    GDPR = "gdpr"
    LOPDP = "lopdp"


class RecipientCategory(StrEnum):
    """The category of the recipient. It can be one of several options."""

    ACCOUNTING_SOFTWARE = "accountingSoftware"
    CLOUD_COMPUTING = "cloudComputing"
    CLOUD_STORAGE = "cloudStorage"
    CRM_SOFTWARE = "crmSoftware"
    CUSTOMER_SERVICE_PROVIDER = "customerServiceProvider"
    CUSTOMER_SUPPORT = "customerSupport"
    DATA_STORAGE = "dataStorage"
    ECOMMERCE = "eCommerce"
    EMAIL_SERVICES = "emailServices"
    ERP_SOFTWARE = "erpSoftware"
    EVENTS_SOFTWARE = "eventsSoftware"
    HOSTING = "hosting"
    INTERNAL_DEPARTMENT = "internalDepartment"
    IT_DEPARTMENT = "itDepartment"
    LAW_ENFORCEMENT = "lawEnforcement"
    LAW_SERVICES = "lawServices"
    LEGAL_DEPARTMENT = "legalDepartment"
    LOGISTICS = "logistics"
    MARKETING_DEPARTMENT = "marketingDepartment"
    MARKETING_SOFTWARE = "marketingSoftware"
    MARKETING_TOOLS = "marketingTools"
    OFFICES_APPS = "officesApps"
    OTHER = "other"
    PASSWORD_MANAGEMENT = "passwordManagement"
    PAYMENT_PLATFORM = "paymentPlatform"
    PREVENTION_RISKS = "preventionRisks"
    PRODUCTION_DEPARTMENT = "productionDepartment"
    PROPERTY_ADMINISTRATION = "propertyAdministration"
    PUBLICA_DMINISTRATION = "publicAdministration"
    RRHH_DEPARTMENT = "rrhhDepartment"
    RRHH_MANAGEMENT = "rrhhManagement"
    RRHH_SOFTWARE = "rrhhSoftware"
    PRDEPARTMENT = "prDepartment"
    SECURITY_SERVICES = "securityServices"
    SELL_DEPARTMENT = "sellDepartment"
    SERVICES_PLATFORM = "servicesPlatform"
    TAX_MANAGEMENT = "taxManagement"
    IT_INFRASTRUCTURE = "ITInfrastructure"
    OFFICE_APPLICATIONS = "officeApplications"
    TIC_SERVICES = "ticServices"
    TRACKING = "tracking"
    PHYSICAL_SECURITY = "physicalSecurity"
    CYBER_SECURITY = "cyberSecurity"
    FINANCIAL_CRIME = "financialCrime"
    PHYSICAL_STORAGE = "physicalStorage"
    ADMIN_DEPARTMENT = "adminDepartment"
    MANAGEMENT = "management"
    MESSAGING_SERVICES = "messagingServices"
    ORDERING_SOFTWARE = "orderingSoftware"
    MOBILITY_EQUIPMENT = "mobilityEquipment"
    AUDIT = "audit"
    INFORMATION_TECHNOLOGY = "informationTechnology"
    SAAS = "saas"
    ENTERPRISE_SOFTWARE = "enterpriseSoftware"
    FINANCIAL_SERVICES = "financialServices"
    HEALTH_CARE = "healthCare"
    ADVERTISING = "advertising"
    SOCIAL_MEDIA = "socialMedia"
    ARTIFICIAL_INTELLIGENCE_AI = "artificialIntelligenceAi"
    TELECOMMUNICATIONS = "telecommunications"
    EDUCATION = "education"
    HOSPITALITY = "hospitality"
    VIDEO_STREAMING = "videoStreaming"
    IDENTITY_MANAGEMENT = "identityManagement"
    ANALYTICS = "analytics"
    TRAVEL = "travel"
    PHARMECEUTICALS = "pharmaceuticals"
    INSURANCE = "insurance"
    EVENTS = "events"
    TOURISM = "tourism"
    PAYROLL_SERVICES = "payrollServices"
    CRYPTO_CURRENCY = "cryptoCurrency"
    CONTENT = "content"
    CORE_BANKING_SYSTEM = "coreBankingSystem"
    REGULATORY_REPORTING = "regulatoryReporting"
    BANKCARDS = "bankCards"
    APPS = "apps"
    FINTECH = "fintech"
    NETWORK_SECURITY = "networkSecurity"
    MOBILE_APPS = "mobileApps"
    BIG_DATA = "bigData"
    DEVELOPER_TOOLS = "developerTools"
    BUSINESS_INTELLIGENCE = "businessIntelligence"
    B2_B = "b2b"
    MACHINE_LEARNING = "machineLearning"
    CLOUD_SECURITY = "cloudSecurity"
    TRAINING = "training"
    SECURITY = "security"
    CONSULTING = "consulting"
    CLOUD_DATA_SERVICES = "cloudDataServices"
    RETAIL = "retail"
    PROJECT_MANAGEMENT = "projectManagement"
    PROFESSIONAL_SERVICES = "professionalServices"
    PUBLISHING = "publishing"
    ELEARNING = "e-learning"
    REAL_ESTATE = "realEstate"
    BUSINESS_DEVELOPMENT = "businessDevelopment"
    RISK_MANAGEMENT = "riskManagement"
    VIDEO = "video"
    NON_PROFIT = "nonProfit"
    TRANSPORTATION = "transportation"
    COMPLIANCE = "compliance"
    MARKETING_AUTOMATION = "marketingAutomation"
    DIGITAL_MEDIA = "digitalMedia"
    CLOUD_MANAGEMENT = "cloudManagement"
    DATA_MANAGEMENT = "dataManagement"
    PRODUCTIVITY_TOOLS = "productivityTools"
    SMALL_AND_MEDIUM_BUSINESSES = "smallAndMediumBusinesses"
    MEDICAL = "medical"
    AUTOMOTIVE = "automotive"
    WEB_DESIGN = "webDesign"
    DOCUMENT_MANAGEMENT = "documentManagement"
    DEVOPS = "devops"
    SEARCH_ENGINE = "searchEngine"
    COMMUNITIES = "communities"
    EDTECH = "edtech"
    MARKETPLACE = "marketplace"
    WELLNESS = "wellness"
    MARKET_RESEARCH = "marketResearch"
    DATA_INTEGRATION = "dataIntegration"
    ONLINE_PORTALS = "onlinePortals"
    DATABASE = "database"
    OUTSOURCING = "outsourcing"
    ASSET_MANAGEMENT = "assetManagement"
    ELECTRONICS = "electronics"
    INTERNET_OF_THINGS = "internetOfThings"
    EMAIL_MARKETING = "emailMarketing"
    DATA_VISUALIZATION = "dataVisualization"
    VENTURE_CAPITAL = "ventureCapital"
    CONSUMER_ELECTRONICS = "consumerElectronics"
    ENTERPRISE = "enterprise"
    ENERGY = "energy"
    CONSTRUCTION = "construction"
    INSURTECH = "insurtech"
    FILE_SHARING = "fileSharing"
    FOOD_AND_BEVERAGE = "foodAndBeverage"
    VOIP = "voip"
    SUPPLY_CHAIN_MANAGEMENT = "supplyChainManagement"
    FITNESS = "fitness"
    AIRLINES = "airlines"
    GOVERNMENT = "government"
    BUSINESS_MANAGEMENT = "businessManagement"
    NEWS = "news"
    TRADING = "trading"
    CHAT = "chat"


class RecipientDpaStatus(StrEnum):
    """The status of the DPA of the recipient.
    Attached if the DPA is
    provided.
    Not
    required when it's not necessary to provide the
    information.
    Requested when we
    ask for the DPA and we are waiting for it.
    """

    ATTACHED = "attached"
    NOT_REQUIRED = "notRequired"
    REQUESTED = "requested"


class RecipientState(StrEnum):
    ACTIVE = "active"
    ASSESSMENT = "assessment"


class State(StrEnum):
    """2 letter code that identifies the state of the recipient. It only applies
    when
    the
    recipient country is US
    """

    AL = "AL"
    AK = "AK"
    AR = "AR"
    AZ = "AZ"
    CA = "CA"
    CO = "CO"
    CT = "CT"
    DC = "DC"
    DE = "DE"
    FL = "FL"
    GA = "GA"
    HI = "HI"
    IA = "IA"
    ID = "ID"
    IL = "IL"
    IN_ = "IN"
    KS = "KS"
    KY = "KY"
    LA = "LA"
    MA = "MA"
    MD = "MD"
    ME = "ME"
    MI = "MI"
    MN = "MN"
    MO = "MO"
    MS = "MS"
    MT = "MT"
    NC = "NC"
    ND = "ND"
    NE = "NE"
    NH = "NH"
    NJ = "NJ"
    NM = "NM"
    NV = "NV"
    NY = "NY"
    OH = "OH"
    OK = "OK"
    OR_ = "OR"
    PA = "PA"
    RI = "RI"
    SC = "SC"
    SD = "SD"
    TN = "TN"
    TX = "TX"
    UT = "UT"
    VA = "VA"
    VT = "VT"
    WA = "WA"
    WI = "WI"
    WV = "WV"
    WY = "WY"


class RecipientStatus(StrEnum):
    """The status of the recipient. Can be archived or validated."""

    ARCHIVED = "archived"
    VALIDATED = "validated"


@dataclass(kw_only=True)
class ProcessingActivityRecipientMember:
    """
    :param name: Name of the Recipient
    :param business_name: Business name of the recipient
    :param status: The status of the recipient. Can be archived or validated.
    :param categories: list of recipient category
    :param country: 2 letter code that identifies a country.
    :param state: 2 letter code that identifies the state of the recipient. It only
    applies when the
    recipient country is US
    :param dpa: The url to the DPA of the recipient
    :param dpa_status: The status of the DPA of the recipient.
    Attached if the DPA
    is provided.
    Not required when it's not necessary to provide the
    information.
    Requested when we ask for the DPA and we are waiting for it.
    :param recipient_warranties: List of lawful basis types that applies to the
    recipient.
    :param data_storage_location: List of countries where the data related to this
    recipient are stored
    :param discovery_source: List of sources where the recipient was discovered.
    """

    name: str | None = None
    business_name: str | None = None
    status: str | None = None
    categories: list[str] | None = None
    role: list[str] | None = None
    country: str | None = None
    state: str | None = None
    dpa: str | None = None
    dpa_files: list[str] | None = None
    dpa_status: str | None = None
    recipient_model_id: str | None = None
    recipient_warranties: list[str] | None = None
    data_storage_location: list[str] | None = None
    discovery_source: list[str] | None = None
    discovered_date: datetime | None = None
    automation_status: str | None = None
    recipient_state: str | None = None
    contact_email: str | None = None
    privacy_policy_link: str | None = None
    recipient_id: str | None = None
    comment: str | None = None


class ProcessingActivityStatus(StrEnum):
    """Status of the processing activity."""

    PA_IN_DRAFT = "paInDraft"
    PENDING_TA = "pendingTA"
    TA_IN_DRAFT = "taInDraft"
    DPIA_OPTIONAL = "dpiaOptional"
    DPIA_RECOMMENDED = "dpiaRecommended"
    DPIA_REQUIRED = "dpiaRequired"
    DPIA_IN_DRAFT = "dpiaInDraft"
    DPIA_COMPLETED = "dpiaCompleted"


@dataclass(kw_only=True)
class DescribeProcessingActivityOutput:
    """
    :param active: Indicates whether the processing activity is active or a draft
    :param additional_info: Text to add more information about the processing
    activity
    :param additional_info_files: List of uploaded file ids.
    :param data_subjects: List of Data Subjects affected by the processing activity
    :param lawful_basis: List of Lawfulness types affected by a processing activity
    :param name: Name of the processing activity
    :param purpose: Purpose of the processing activity
    :param retention_period: Represents the legal retention period of the data
    stored.
    :param retention_period_comment: Additional information related to the retention
    period
    :param status: Status of the processing activity.
    :param infotype_volume: Ranges of the processed infotype volume.
    :param processing_frequency: Data processing frequency.
    """

    processing_activity_id: str

    active: bool | None = None
    additional_info: str | None = None
    additional_info_files: list[str] | None = None
    company_role: list[str] | None = None
    created_by: str | None = None
    data_sources: list[str] | None = None
    processing_activities_as_data_sources: list[str] | None = None
    data_subjects: list[str] | None = None
    data_types: list[str] | None = None
    lawful_basis: list[LawfulBasis] | None = None
    model_id: str | None = None
    name: str | None = None
    purpose: str | None = None
    recipient_objects: list[ProcessingActivityRecipientMember] | None = None
    employee_objects: list[ProcessingActivityEmployee] | None = None
    retention_period: RetentionPeriod | None = None
    retention_period_comment: str | None = None
    status: str | None = None
    department_objects: list[ProcessingActivityDepartment] | None = None
    asset_objects: list[AssetRecord] | None = None
    contact_person_employee: ProcessingActivityEmployee | None = None
    infotypes: list[str] | None = None
    infotype_categories: list[str] | None = None
    infotype_volume: str | None = None
    processing_frequency: str | None = None
    processing_frequency_comment: str | None = None
    is_data_stored: bool | None = None
    are_access_requests_managed: bool | None = None
    management_methods: list[ManagementMethod] | None = None
    updated_at: datetime | None = None
    created_at: datetime | None = None
    language: str | None = None
    framework: str | None = None
    translations: dict[str, dict[str, str]] | None = None
    owner: str | None = None
    data_flow_relationships: list[DataFlowRelationship] | None = None
    show_on_ropa_document: bool | None = None
    uploaded_ta_file_id: str | None = None
    uploaded_dpia_file_id: str | None = None
    uploaded_ta_dpia_file_id: str | None = None


@dataclass(kw_only=True)
class ProcessingActivitySelectFilter:
    """Filter conditions to apply when listing processing activities.

    :param search: Free-form text search to apply to processing activity name.
    """

    search: str | None = None
    departments: list[str] | None = None
    assets: list[str] | None = None
    owners: list[str] | None = None
    status: list[str] | None = None
    recipients: list[str] | None = None
    data_types: list[str] | None = None
    infotypes: list[str] | None = None
    infotype_categories: list[str] | None = None
    employees: list[str] | None = None
    data_subjects: list[str] | None = None
    data_sources: list[str] | None = None
    languages: list[str] | None = None
    company_roles: list[str] | None = None
    pa_as_data_source: list[str] | None = None


@dataclass(kw_only=True)
class ListProcessingActivitiesInput:
    """
    :param filter: Filter conditions to apply when listing processing activities.
    :param next_token: The `nextToken` from the last page of results to retrieve the
    next page of results.
    :param page_size: The maximum number of records to return per API call. If more
    records
    are available, the response will be truncated and will contain
    a
    "nextToken" value, which can be used to return additional records.
    :param sort: Specifies how to sort the returned results.
    """

    organisation_id: int | None = None
    filter: ProcessingActivitySelectFilter | None = None
    next_token: str | None = None
    page_size: int | None = None
    sort: SortRecords | None = None


@dataclass(kw_only=True)
class ProcessingActivityListRecord:
    """
    :param status: Status of the processing activity.
    """

    processing_activity_id: str

    active: bool | None = None
    department_objects: list[ProcessingActivityDepartment] | None = None
    name: str | None = None
    recipient_objects: list[ProcessingActivityRecipientMember] | None = None
    employee_objects: list[ProcessingActivityEmployee] | None = None
    status: str | None = None
    created_by: str | None = None
    owner: str | None = None
    updated_at: datetime | None = None
    language: str | None = None
    translations: dict[str, dict[str, str]] | None = None
    framework: str | None = None
    company_role: list[str] | None = None
    uploaded_ta_file_id: str | None = None
    uploaded_dpia_file_id: str | None = None
    uploaded_ta_dpia_file_id: str | None = None
    related_processing_activities: int | None = None


@dataclass(kw_only=True)
class ListProcessingActivitiesOutput:
    """
    :param processing_activities: The list of processing activities up to the
    specified page size.
    :param total: The total number of processing activities. This value can be
    larger than the number of records
     returned in the response, in which case a
    "nextToken" will be included in the response
     to retrieve the next set of
    records.
    :param next_token: A token that can used in a subsequent API request to retrieve
    the next
    set of records.
    :param sort: The sorting order
    """

    processing_activities: list[ProcessingActivityListRecord]

    total: int

    next_token: str | None = None
    sort: SortRecords | None = None


class ExportType(StrEnum):
    CSV = "csv"
    PDF = "pdf"
    DOC = "doc"


@dataclass(kw_only=True)
class ProcessingActivityExportFilters:

    processing_activity_id: str | None = None
    status: list[str] | None = None
    departments: list[str] | None = None
    data_subjects: list[str] | None = None
    employees: list[str] | None = None
    infotypes: list[str] | None = None
    owners: list[str] | None = None
    recipients: list[str] | None = None
    search: str | None = None


@dataclass(kw_only=True)
class ListProcessingActivitiesExportInput:

    organisation_id: int | None = None
    export_types: list[str] | None = None
    language: str | None = None
    filter: ProcessingActivityExportFilters | None = None


@dataclass(kw_only=True)
class ExportedDataUrl:

    url: str | None = None
    type: str | None = None


@dataclass(kw_only=True)
class ListProcessingActivitiesExportOutput:

    url_list: list[ExportedDataUrl] | None = None


class ListProcessingActivityFilterType(StrEnum):
    OWNER = "owner"
    RECIPIENT = "recipient"
    STATUS = "status"
    DEPARTMENT = "department"
    DATA_SUBJECT = "dataSubject"
    EMPLOYEE = "employee"
    COMPANY_ROLE = "companyRole"
    ASSET = "asset"


@dataclass(kw_only=True)
class ListProcessingActivityFilterInput:

    organisation_id: int | None = None
    filter_type: str | None = None


@dataclass(kw_only=True)
class ListProcessingActivityFilterMember:

    id: str | None = None
    name: str | None = None


@dataclass(kw_only=True)
class ListProcessingActivityFilterOutput:

    enteries: list[ListProcessingActivityFilterMember] | None = None


@dataclass(kw_only=True)
class PaStatsTimeSeriesInput:

    organisation_id: int | None = None
    reporting_period: str | None = None


@dataclass(kw_only=True)
class ChangeInProcessingActivityStatsOutput:

    pa_in_draft_change: int | None = None
    pending_ta_change: int | None = None
    ta_in_draft_change: int | None = None
    dpia_optional_change: int | None = None
    dpia_recommended_change: int | None = None
    dpia_required_change: int | None = None
    dpia_in_draft_change: int | None = None
    dpia_completed_change: int | None = None
    total_pa_change: int | None = None
    complete_ta_change: int | None = None
    readiness_score_change: int | None = None
    required_dpias_in_draft_change: int | None = None
    all_required_dpia_change: int | None = None
    previous_reading_date: datetime | None = None
    current_reading_date: datetime | None = None


@dataclass(kw_only=True)
class SummarizeProcessingActivityStatsOutput:

    pa_in_draft: int | None = None
    pending_ta: int | None = None
    ta_in_draft: int | None = None
    dpia_optional: int | None = None
    dpia_recommended: int | None = None
    dpia_required: int | None = None
    dpia_in_draft: int | None = None
    dpia_completed: int | None = None
    total_pa: int | None = None
    complete_ta: int | None = None
    readiness_score: int | None = None
    required_dpias_in_draft: int | None = None
    all_required_dpia: int | None = None
    framework: str | None = None
    organisation_id: int | None = None
    resolution_period_for_p_as: int | None = None
    changes: ChangeInProcessingActivityStatsOutput | None = None


@dataclass(kw_only=True)
class PaStatsTimeSeriesPoint:

    timestamp: str

    data: SummarizeProcessingActivityStatsOutput


@dataclass(kw_only=True)
class PaStatsTimeSeriesOutput:

    result: list[PaStatsTimeSeriesPoint]


@dataclass(kw_only=True)
class RemoveProcessingActivityInput:
    """
    :param processing_activity_id: Identifier of the Processing Activity
    """

    organisation_id: int | None = None
    processing_activity_id: str | None = None


@dataclass
class RemoveProcessingActivityOutput:
    pass


@dataclass(kw_only=True)
class RemoveTaDpiaFileInput:

    organisation_id: int | None = None
    processing_activity_id: str | None = None
    doc_type: str | None = None


@dataclass
class RemoveTaDpiaFileOutput:
    pass


@dataclass(kw_only=True)
class SummarizePaStatsForOwnersInput:

    organisation_id: int | None = None
    reporting_period: str | None = None


@dataclass(kw_only=True)
class SummarizePaStatsForOwnersOutput:

    result: list[dict[str, SummarizeProcessingActivityStatsOutput]] | None = None


@dataclass(kw_only=True)
class UpdateProcessingActivityInput:
    """
    :param processing_activity_id: Identifier of the Processing Activity
    :param active: Flag to create the processing activity as activated or draft
    :param additional_info: Text to add more information about the processing
    activity
    :param additional_info_files: List of uploaded file ids.
    :param assets: List assets ids related to the processing activity.
    :param contact_person: Contact person for the processing activity.
    :param data_subjects: List of Data Subjects affected by the processing activity
    :param departments: List departments related with the processing activity.
    :param lawful_basis: List of Lawfulness types affected by a processing activity
    :param name: Name of the processing activity
    :param purpose: Purpose of the processing activity
    :param recipients: List of recipients related with the processing activity.
    :param retention_period: Represents the legal retention period of the data
    stored.
    :param retention_period_comment: Additional information related to the retention
    period
    :param infotypes: List of info types related with the processing activity.
    :param infotype_categories: List of info types categories related with the
    processing activity.
    :param infotype_volume: Ranges of the processed infotype volume.
    :param processing_frequency: Data processing frequency.
    :param is_data_stored: Indicates if you store the data.
    :param are_access_requests_managed: Indicates if the data subject access
    requests are managed.
    """

    organisation_id: int | None = None
    processing_activity_id: str | None = None
    active: bool | None = None
    additional_info: str | None = None
    additional_info_files: list[str] | None = None
    assets: list[str] | None = None
    employees: list[str] | None = None
    company_role: list[str] | None = None
    contact_person: str | None = None
    data_sources: list[str] | None = None
    processing_activities_as_data_sources: list[str] | None = None
    data_subjects: list[str] | None = None
    data_types: list[str] | None = None
    departments: list[str] | None = None
    lawful_basis: list[LawfulBasis] | None = None
    model_id: str | None = None
    name: str | None = None
    purpose: str | None = None
    recipients: list[ProcessingActivityRecipient] | None = None
    retention_period: RetentionPeriod | None = None
    retention_period_comment: str | None = None
    infotypes: list[str] | None = None
    infotype_categories: list[str] | None = None
    infotype_volume: str | None = None
    processing_frequency: str | None = None
    processing_frequency_comment: str | None = None
    is_data_stored: bool | None = None
    are_access_requests_managed: bool | None = None
    management_methods: list[ManagementMethod] | None = None
    translations: dict[str, dict[str, str]] | None = None
    owner: str | None = None
    data_flow_relationships: list[DataFlowRelationship] | None = None
    show_on_ropa_document: bool | None = None


@dataclass
class UpdateProcessingActivityOutput:
    pass


@dataclass(kw_only=True)
class UpdateTaDpiaFileInput:

    organisation_id: int | None = None
    processing_activity_id: str | None = None
    uploaded_file_id: str | None = None
    doc_type: str | None = None


@dataclass
class UpdateTaDpiaFileOutput:
    pass


@dataclass(kw_only=True)
class ValidateClonePaForTargetOrgInput:

    organisation_id: int | None = None
    source_processing_activity_id: str | None = None
    target_organisation_id: int | None = None


@dataclass(kw_only=True)
class ValidateClonePaForTargetOrgOutput:

    missing_processing_activity_objects: MissingProcessingActivityObjects

    missing_dpia_objects: MissingDpiaObjects

    missing_owner: bool


@dataclass(kw_only=True)
class CreateRecipientInput:
    """
    :param name: Name of the recipient. Has to be unique, 2 different recipients
    can't have the same name.
    :param business_name: Business name of the recipient
    :param status: The status of the recipient. Can be archived or validated.
    :param categories: list of recipient category
    :param country: 2 letter code that identifies a country.
    :param state: 2 letter code that identifies the state of the recipient. It only
    applies when the
    recipient country is US
    :param dpa: The url to the DPA of the recipient
    :param dpa_files: List of uploaded file ids.
    :param dpa_status: The status of the DPA of the recipient.
    Attached if the DPA
    is provided.
    Not required when it's not necessary to provide the
    information.
    Requested when we ask for the DPA and we are waiting for it.
    :param recipient_model_id: Identifier of the Recipient Model in case that the
    Recipient is created bases in a Recipient Model
    :param data_storage_location: List of countries where the data related to this
    recipient are stored
    :param recipient_warranties: List of lawful basis types that applies to the
    recipient.
    """

    organisation_id: int | None = None
    name: str | None = None
    business_name: str | None = None
    status: str | None = None
    categories: list[str] | None = None
    role: list[str] | None = None
    country: str | None = None
    state: str | None = None
    dpa: str | None = None
    dpa_files: list[str] | None = None
    dpa_status: str | None = None
    recipient_model_id: str | None = None
    data_storage_location: list[str] | None = None
    recipient_warranties: list[str] | None = None
    from_discovered_recipient_id: str | None = None
    created_at: datetime | None = None
    updated_at: datetime | None = None
    sub_processor_ids: list[str] | None = None
    recipient_state: str | None = None
    contact_email: str | None = None
    privacy_policy_link: str | None = None


@dataclass(kw_only=True)
class CreateRecipientOutput:
    """
    :param recipient_id: Identifier of the Recipient
    """

    recipient_id: str


@dataclass(kw_only=True)
class DescribeRecipientInput:
    """
    :param recipient_id: Identifier of the Recipient
    """

    organisation_id: int | None = None
    recipient_id: str | None = None


@dataclass(kw_only=True)
class RecipientForFilterMember:
    """
    :param name: Name of the Recipient
    """

    recipient_id: str

    name: str


@dataclass(kw_only=True)
class DescribeRecipientOutput:
    """
    :param name: Name of the Recipient
    :param business_name: Business name of the recipient
    :param status: The status of the recipient. Can be archived or validated.
    :param categories: list of recipient category
    :param country: 2 letter code that identifies a country.
    :param state: 2 letter code that identifies the state of the recipient. It only
    applies when the
    recipient country is US
    :param dpa: The url to the DPA of the recipient
    :param dpa_status: The status of the DPA of the recipient.
    Attached if the DPA
    is provided.
    Not required when it's not necessary to provide the
    information.
    Requested when we ask for the DPA and we are waiting for it.
    :param recipient_warranties: List of lawful basis types that applies to the
    recipient.
    :param data_storage_location: List of countries where the data related to this
    recipient are stored
    :param discovery_source: List of sources where the recipient was discovered.
    """

    name: str | None = None
    business_name: str | None = None
    status: str | None = None
    categories: list[str] | None = None
    role: list[str] | None = None
    country: str | None = None
    state: str | None = None
    dpa: str | None = None
    dpa_files: list[str] | None = None
    dpa_status: str | None = None
    recipient_model_id: str | None = None
    recipient_warranties: list[str] | None = None
    data_storage_location: list[str] | None = None
    discovery_source: list[str] | None = None
    discovered_date: datetime | None = None
    automation_status: str | None = None
    recipient_state: str | None = None
    contact_email: str | None = None
    privacy_policy_link: str | None = None
    sub_processors: list[RecipientForFilterMember] | None = None


@dataclass(kw_only=True)
class ListProcessingActivitiesOfRecipientInput:
    """
    :param recipient_id: Identifier of the Recipient
    :param next_token: The `nextToken` from the last page of results to retrieve the
    next page of results.
    :param page_size: The maximum number of records to return per API call. If more
    records
    are available, the response will be truncated and will contain
    a
    "nextToken" value, which can be used to return additional records.
    :param sort: Specifies how to sort the returned results.
    """

    organisation_id: int | None = None
    recipient_id: str | None = None
    next_token: str | None = None
    page_size: int | None = None
    sort: SortRecords | None = None


@dataclass(kw_only=True)
class ProcessingActivityOfRecipientMember:
    """
    :param processing_activity_id: The Id of the processing activity
    :param name: The name of the processing activity
    :param active: Indicates if processing activity is active or not
    """

    processing_activity_id: str

    name: str

    active: bool

    updated_at: datetime

    created_by: str


@dataclass(kw_only=True)
class ListProcessingActivitiesOfRecipientOutput:
    """
    :param processing_activities_of_recipient: The list of processing activities
    related with the recipient up to the specified page size.
    :param next_token: A token that can used in a subsequent API request to retrieve
    the next
    set of records.
    :param total: The total number of processing activities related with the
    recipient. This value can be larger than the number of records
     returned in the
    response, in which case a "nextToken" will be included in the response
     to
    retrieve the next set of records.
    :param sort: The sorting order
    """

    processing_activities_of_recipient: (
        list[ProcessingActivityOfRecipientMember] | None
    ) = None
    next_token: str | None = None
    total: int | None = None
    sort: SortRecords | None = None


class ListRecipientFilterType(StrEnum):
    CATEGORIES = "categories"
    ROLE = "role"


@dataclass(kw_only=True)
class ListRecipientFilterInput:

    organisation_id: int | None = None
    filter_type: str | None = None


@dataclass(kw_only=True)
class RecipientFilterOutputListMember:

    id: str | None = None
    name: str | None = None


@dataclass(kw_only=True)
class ListRecipientFilterOutput:

    entries: list[RecipientFilterOutputListMember] | None = None


@dataclass
class UsedInFilterRecipientsWithoutCompletedPA:

    value: bool


@dataclass
class UsedInFilterRecipientsWithAtleastOnePA:

    value: bool


@dataclass
class UsedInFilterUnknown:
    """Represents an unknown variant.

    If you receive this value, you will need to update your library to receive the
    parsed value.

    This value may not be deliberately sent.
    """

    tag: str


UsedInFilter = Union[
    UsedInFilterRecipientsWithoutCompletedPA,
    UsedInFilterRecipientsWithAtleastOnePA,
    UsedInFilterUnknown,
]


@dataclass(kw_only=True)
class RecipientFilters:
    """Filter conditions to apply when listing Recipients.

    :param search: Free-form text search to apply to the Recipient name.
    :param categories: list of recipient category
    :param status: The status of the recipient. Can be archived or validated.
    """

    search: str | None = None
    discovery_source: list[str] | None = None
    categories: list[str] | None = None
    role: list[str] | None = None
    used_in: UsedInFilter | None = None
    recipient_ids: list[str] | None = None
    sub_processor_ids: list[str] | None = None
    automation_status: list[str] | None = None
    with_no_processing_activity: bool | None = None
    departments: list[str] | None = None
    status: str | None = None
    recipient_warranties: list[str] | None = None
    recipient_state: list[str] | None = None


@dataclass(kw_only=True)
class ListRecipientsInput:
    """
    :param next_token: The `nextToken` from the last page of results to retrieve the
    next page of results.
    :param page_size: The maximum number of records to return per API call. If more
    records
    are available, the response will be truncated and will contain
    a
    "nextToken" value, which can be used to return additional records.
    :param sort: Specifies how to sort the returned results.
    :param filter: Filter conditions to apply when listing Recipients.
    """

    organisation_id: int | None = None
    next_token: str | None = None
    page_size: int | None = None
    sort: SortRecords | None = None
    filter: RecipientFilters | None = None


@dataclass(kw_only=True)
class RecipientListMember:
    """
    :param recipient_id: Identifier of the Recipient
    :param name: Name of the Recipient
    :param status: The status of the recipient. Can be archived or validated.
    :param categories: list of recipient category
    :param discovery_source: List of sources where the recipient was discovered.
    :param data_storage_location: List of countries where the data related to this
    recipient are stored
    :param recipient_warranties: List of lawful basis types that applies to the
    recipient.
    :param last_modification: Last modification of the recipient
    :param processing_activities: number of processing activities related to the
    recipient
    :param key: key of the recipient model
    """

    recipient_id: str | None = None
    name: str | None = None
    status: str | None = None
    categories: list[str] | None = None
    role: list[str] | None = None
    discovery_source: list[str] | None = None
    automation_status: str | None = None
    recipient_model_id: str | None = None
    created_at: datetime | None = None
    data_storage_location: list[str] | None = None
    recipient_warranties: list[str] | None = None
    recipient_state: str | None = None
    contact_email: str | None = None
    last_modification: datetime | None = None
    processing_activities: int | None = None
    departments: list[str] | None = None
    archived_at: datetime | None = None
    key: str | None = None


@dataclass(kw_only=True)
class ListRecipientsOutput:
    """
    :param recipients: The list of recipients up to the specified page size.
    :param next_token: A token that can used in a subsequent API request to retrieve
    the next
    set of records.
    :param total: The total number of recipients. This value can be larger than the
    number of records
     returned in the response, in which case a "nextToken" will be
    included in the response
     to retrieve the next set of records.
    :param sort: The sorting order
    """

    recipients: list[RecipientListMember] | None = None
    next_token: str | None = None
    total: int | None = None
    sort: SortRecords | None = None


@dataclass(kw_only=True)
class ListRecipientsExportInput:
    """
    :param filter: Filter conditions to apply when listing Recipients.
    """

    organisation_id: int | None = None
    export_types: list[str] | None = None
    filter: RecipientFilters | None = None


@dataclass(kw_only=True)
class ListRecipientsExportOutput:

    url_list: list[ExportedDataUrl] | None = None


@dataclass(kw_only=True)
class ListRecipientsForFilterInput:

    organisation_id: int | None = None


@dataclass(kw_only=True)
class ListRecipientsForFilterOutput:

    recipients: list[RecipientForFilterMember] | None = None


@dataclass(kw_only=True)
class RemoveRecipientInput:
    """
    :param recipient_id: Identifier of the Recipient
    """

    organisation_id: int | None = None
    recipient_id: str | None = None


@dataclass
class RemoveRecipientOutput:
    pass


@dataclass(kw_only=True)
class UpdateRecipientInput:
    """
    :param recipient_id: Identifier of the Recipient
    :param name: Name of the recipient. Has to be unique, 2 different recipients
    can't have the same name.
    :param business_name: Business name of the recipient
    :param status: The status of the recipient. Can be archived or validated.
    :param categories: list of recipient category
    :param country: 2 letter code that identifies a country.
    :param state: 2 letter code that identifies the state of the recipient. It only
    applies when the
    recipient country is US
    :param dpa: The url to the DPA of the recipient
    :param dpa_files: List of uploaded file ids.
    :param dpa_status: The status of the DPA of the recipient.
    Attached if the DPA
    is provided.
    Not required when it's not necessary to provide the
    information.
    Requested when we ask for the DPA and we are waiting for it.
    :param data_storage_location: List of countries where the data related to this
    recipient are stored
    :param recipient_warranties: List of lawful basis types that applies to the
    recipient.
    """

    organisation_id: int | None = None
    recipient_id: str | None = None
    name: str | None = None
    business_name: str | None = None
    status: str | None = None
    categories: list[str] | None = None
    role: list[str] | None = None
    country: str | None = None
    state: str | None = None
    dpa: str | None = None
    dpa_files: list[str] | None = None
    dpa_status: str | None = None
    data_storage_location: list[str] | None = None
    recipient_warranties: list[str] | None = None
    automation_status: str | None = None
    sub_processor_ids: list[str] | None = None
    recipient_state: str | None = None
    contact_email: str | None = None
    privacy_policy_link: str | None = None


@dataclass
class UpdateRecipientOutput:
    pass


@dataclass(kw_only=True)
class UpdateRecipientStatusInput:
    """
    :param recipient_id: Identifier of the Recipient
    :param status: The status of the recipient. Can be archived or validated.
    """

    organisation_id: int | None = None
    recipient_id: str | None = None
    status: str | None = None
    automation_status: str | None = None


@dataclass
class UpdateRecipientStatusOutput:
    pass


@dataclass(kw_only=True)
class CloudAccount:
    """
    :param cloud_provider: The type of account.
    """

    cloud_provider: str | None = None
    cloud_connection_name: str | None = None


@dataclass(kw_only=True)
class DescribeInventoryResourceInput:
    """
    :param resource_id: The unique resource ID.
    """

    organisation_id: int | None = None
    resource_id: str | None = None


class ScanType(StrEnum):
    """The type of scan to perform, i.e. either full scan or sample scan."""

    SAMPLE = "sample"
    FULL = "full"


@dataclass(kw_only=True)
class ScanInformation:
    """Information about when the resource was last scanned, if at all.

    :param type: The type of scan that was performed.
    :param status: The status of the scan.
    :param last_scan: Start time of the last scan that was performed on the
    resource, in Unix epoch time.
    """

    type: str | None = None
    status: str | None = None
    last_scan: datetime | None = None


@dataclass(kw_only=True)
class DataSize:
    """Approximate data size of the data store. For child resources, e.g. table or
    buckets, this is the
    size of the resource itself. For instance or account level
    resources, this is the aggregate size
    of all child resources. The data size is
    being returned as bytes + rows for data stores like
    BigQuer, MS SQL, RDS, etc.;
    it is being returned as bytes + objects for data stores like S3 and
    OneDrive.

    :param bytes_: The approximate size of the data in bytes.
    :param rows: The approximate number of rows in the data store.
    :param objects: The number of objects in the data store.
    """

    bytes_: int | None = None
    rows: int | None = None
    objects: int | None = None


@dataclass(kw_only=True)
class ResourceStatsData:
    """Aggregate stats about the child resources of a resource.

    :param full_scan_inspected_bytes: Data volume processed in full scans (in
    bytes).
    :param sample_scan_inspected_bytes: Data volume processed in sample scans (in
    bytes).
    :param infotypes_count: Number of distinct data identifiers discovered.
    :param infotype_tokens_count: Number of identifier sample tokens collected.
    :param scanned_resources: Number of instance resources that have been scanned at
    least once.
    :param unscanned_resources: Number of instance resources that have not been
    scanned yet.
    :param scanned_child_resource_count: Number of child resources scanned that have
    been scanned at least once.
    :param unscanned_child_resource_count: Number of child resources that have not
    been scanned yet.
    :param total_resources: Total number of child resources.
    :param sample_scan_count: Number of sample scans performed.
    :param full_scan_count: Number of full scans performed.
    :param data_size: Aggregate data size of all child resources.
    :param resources_with_data_size: Number of resources for which the data size is
    known.
    :param violation_count: Count of open violations per resource type
    :param applicable_policy_count: Count of distinct policies applicable across all
    resource of resource type
    :param failed_policy_count: Count of distinct policies violated across all
    resource of resource type
    :param deployed_connectors_count: Count of connectors in deployed state for
    source corresponding to the instance type.
    """

    full_scan_inspected_bytes: int | None = None
    sample_scan_inspected_bytes: int | None = None
    infotypes_count: int | None = None
    infotype_tokens_count: int | None = None
    scanned_resources: int | None = None
    unscanned_resources: int | None = None
    scanned_child_resource_count: int | None = None
    unscanned_child_resource_count: int | None = None
    total_resources: int | None = None
    sample_scan_count: int | None = None
    full_scan_count: int | None = None
    data_size: DataSize | None = None
    resources_with_data_size: int | None = None
    violation_count: int | None = None
    applicable_policy_count: int | None = None
    failed_policy_count: int | None = None
    deployed_connectors_count: int | None = None


@dataclass(kw_only=True)
class DescribeInventoryResourceOutput:
    """
    :param resource_id: Unique identifier of the resource.
    :param name: Resource name.
    :param type: Resource type.
    :param meta: Additonal resource metadata.
    :param owner: List of resource owners.
    :param status: Current status of the resource. Only "active" resources can be
    scanned.
    :param source: How the resource was added to the catalog, either through
    automatic data
    source discovery or manually added by the user. Catalog "leaf"
    resources,
    like database tables, are always added through automatic discovery;
    the
    "source" property is not set for these resources.
    :param failed_rules: List of failed data security rules.
    :param data_classification: List of data classifications based on the detected
    infotypes for the resource.
    :param data_categories: List of potential data categories based on the resource
    metadata.
    :param scan: Information about when the resource was last scanned, if at all.
    :param first_seen: Time when the resource was first discovered by Borneo, as a
    ISO-8601 timestamp.
    :param last_updated: Time when the resource was last updated, as a ISO-8601
    timestamp.
    :param severity_score: Data risk severity score for the resource, based on the
    failed data security rules.
    :param properties: Properties sepcific to the resource
    :param aka: The unique identifier for the resource
    :param issue_id: The open issue linked with the resource
    :param compliance: Information about the classification of a data source based
    on the detected
    infotypes.
    :param stats: Aggregate stats about the child resources of a resource.
    """

    resource_id: str

    name: str | None = None
    type: str | None = None
    meta: dict[str, Document] | None = None
    owner: list[OwnerObject] | None = None
    owner_email: str | None = None
    status: str | None = None
    source: str | None = None
    parent_id: str | None = None
    failed_rules: list[str] | None = None
    data_classification: list[str] | None = None
    data_categories: list[str] | None = None
    scan: ScanInformation | None = None
    first_seen: str | None = None
    last_updated: str | None = None
    severity_score: int | None = None
    properties: dict[str, Document] | None = None
    aka: str | None = None
    issue_id: str | None = None
    compliance: list[ComplianceDetail] | None = None
    failed_policies: list[str] | None = None
    stats: ResourceStatsData | None = None
    violation_count: list[SeverityCount] | None = None
    framework_exceptions_count: int | None = None
    cloud_account: CloudAccount | None = None


@dataclass(kw_only=True)
class ResourceLineageFilter:

    resource_id: str | None = None
    upstream_depth: int | None = None
    downstream_depth: int | None = None


@dataclass(kw_only=True)
class DescribeResourceLineageInput:

    filter: ResourceLineageFilter | None = None


@dataclass(kw_only=True)
class ListActiveResourceTimelineInput:

    reporting_period: str | None = None
    resource_types: list[str] | None = None


@dataclass(kw_only=True)
class ListActiveResourceTimelineOutput:

    result: list[ActiveResourcesStats] | None = None


@dataclass(kw_only=True)
class ListColumnsForResourcesInput:

    organisation_id: int | None = None
    parent_resource_id: str | None = None
    search_key: str | None = None
    source_type: str | None = None
    resource_ids: list[str] | None = None
    data_spaces: list[str] | None = None


@dataclass(kw_only=True)
class ResourceColumns:

    resource_id: str | None = None
    resource_name: str | None = None
    columns: list[str] | None = None
    properties: dict[str, str] | None = None


@dataclass(kw_only=True)
class ListColumnsForResourcesOutput:

    result: list[ResourceColumns] | None = None


class DataSourceCategory(StrEnum):
    AWS_DATA_STORES = "AWSDataStores"
    GCP_DATA_STORES = "GCPDataStores"
    STANDALONE_DATA_STORES = "StandaloneDataStores"
    CLOUD_APPLICATIONS = "CloudApplications"
    DISCOVERED_APPLICATIONS = "DiscoveredApplications"
    AZURE_DATA_STORES = "AzureDataStores"


@dataclass(kw_only=True)
class InventoryListFilter:
    """Filter conditions for the list of resources.

    :param account_id: The account ID of the cloud account to which the resoure
    belongs. E.g. a 12-digit AWS account ID.
    :param region: The region of the cloud account to which the resoure belongs.
    :param regions: List of regions to which the resoure belongs to in that cloud
    account.
    :param search: Free-text search on the resource name.
    :param resource_type: Filter the resources based on the resource type.
    :param resource_ids: One or more resource IDs to return.
    :param parent_id: The parent Id of the resource. E.g. Borneo-specific GCP
    subscription ID for GCP resources
    :param first_seen: Set of conditions for comparing two timestamps.
    :param no_owner: Include only resources that have not been assigned an owner.
    :param has_owner: Include only resources that have been assigned an owner.
    :param has_pii: Include only resources that have a high likelihood of containing
    PII
    based on the resource metadata.
    :param data_risks: Filter the resources that has data risks.
    :param severity_score: Filter the resources based on the assigned risk severity
    score; "critical" = 4, "high" = 3, "medium" = 2, "low" = 1.
    :param hide_borneo_resources: Whether to hide resources that are part of the
    Borneo data plane.
    :param data_source_categories: Filter the resources based on the data source
    category
    Current supported values: AWS_DATA_STORES, GCP_DATA_STORES,
    STANDALONE_DATA_STORES, CLOUD_APPLICATIONS, DISCOVERED_APPLICATIONS
    :param classification: Filter the resources based on classification and are
    non-compliant. eg "PII_L1", "PII_L2", "PII_L3".
    Custom added classifications is
    also supported.
    :param scannable_resource_types: Filter the resources that are scannable
    :param resource_tags: Filter the resources based on tags
    :param azure_connection_ids: Filter by Azure connection Ids
    :param gcp_connection_ids: Filter by GCP connection Ids
    """

    account_id: str | None = None
    project_id: str | None = None
    region: str | None = None
    regions: list[str] | None = None
    search: str | None = None
    resource_type: str | None = None
    resource_ids: list[str] | None = None
    parent_id: str | None = None
    first_seen: dict[str, datetime] | None = None
    no_owner: bool | None = None
    has_owner: bool | None = None
    has_pii: bool | None = None
    data_risks: list[str] | None = None
    severity_score: list[int] | None = None
    hide_borneo_resources: bool = False
    data_source_categories: list[str] | None = None
    classification: list[str] | None = None
    scannable_resource_types: bool | None = None
    resource_tags: list[InventoryTagFilter] | None = None
    azure_connection_ids: list[str] | None = None
    gcp_connection_ids: list[str] | None = None


@dataclass(kw_only=True)
class ListInventoryResourcesInput:
    """
    :param page_size: The maximum number of records to return per API call. If more
    records
    are available, the response will be truncated and will contain
    a
    "nextToken" value, which can be used to return additional records.
    :param next_token: Optional "nextToken" value from the last API response.
    :param select: A list of property names to return in the response. If
    not
    specified, all resource properties will be returned.
    :param sort: Specifies how to sort the returned results.
    :param filter: Filter conditions for the list of resources.
    """

    page_size: int | None = None
    next_token: str | None = None
    select: list[str] | None = None
    sort: SortRecords | None = None
    organisation_id: int | None = None
    filter: InventoryListFilter | None = None
    include: AdditionalInventoryDataOptions | None = None


@dataclass(kw_only=True)
class ResourceInventoryListMember:
    """
    :param resource_id: Unique identifier of the resource.
    :param name: Resource name.
    :param type: Resource type.
    :param meta: Additonal resource metadata.
    :param owner: List of resource owners.
    :param status: Current status of the resource. Only "active" resources can be
    scanned.
    :param source: How the resource was added to the catalog, either through
    automatic data
    source discovery or manually added by the user. Catalog "leaf"
    resources,
    like database tables, are always added through automatic discovery;
    the
    "source" property is not set for these resources.
    :param failed_rules: List of failed data security rules.
    :param data_classification: List of data classifications based on the detected
    infotypes for the resource.
    :param data_categories: List of potential data categories based on the resource
    metadata.
    :param scan: Information about when the resource was last scanned, if at all.
    :param first_seen: Time when the resource was first discovered by Borneo, as a
    ISO-8601 timestamp.
    :param last_updated: Time when the resource was last updated, as a ISO-8601
    timestamp.
    :param severity_score: Data risk severity score for the resource, based on the
    failed data security rules.
    :param properties: Properties sepcific to the resource
    :param aka: The unique identifier for the resource
    :param issue_id: The open issue linked with the resource
    :param compliance: Information about the classification of a data source based
    on the detected
    infotypes.
    :param stats: Aggregate stats about the child resources of a resource.
    """

    resource_id: str

    name: str | None = None
    type: str | None = None
    meta: dict[str, Document] | None = None
    owner: list[OwnerObject] | None = None
    owner_email: str | None = None
    status: str | None = None
    source: str | None = None
    parent_id: str | None = None
    failed_rules: list[str] | None = None
    data_classification: list[str] | None = None
    data_categories: list[str] | None = None
    scan: ScanInformation | None = None
    first_seen: str | None = None
    last_updated: str | None = None
    severity_score: int | None = None
    properties: dict[str, Document] | None = None
    aka: str | None = None
    issue_id: str | None = None
    compliance: list[ComplianceDetail] | None = None
    failed_policies: list[str] | None = None
    stats: ResourceStatsData | None = None
    violation_count: list[SeverityCount] | None = None
    framework_exceptions_count: int | None = None
    cloud_account: CloudAccount | None = None


@dataclass(kw_only=True)
class ListInventoryResourcesOutput:
    """
    :param resources: The list of resources matching the filter conditions, up to
    the specified page size.
    :param count: The total number of resources matching the filter condition.
    This
    value can be larger than the number of records returned in the response,
    in
    which case a "nextToken" will be included in the response to retrieve
    the next
    set of records.
    :param next_token: A token that can used in a subsequent API request to retrieve
    the next set of records.
    :param sort: The API sort order
    """

    resources: list[ResourceInventoryListMember] | None = None
    count: int | None = None
    next_token: str | None = None
    sort: SortRecords | None = None


@dataclass(kw_only=True)
class ListInventoryResourcesExportInput:
    """
    :param page_size: The maximum number of records to return per API call. If more
    records
    are available, the response will be truncated and will contain
    a
    "nextToken" value, which can be used to return additional records.
    :param next_token: Optional "nextToken" value from the last API response.
    :param select: A list of property names to return in the response. If
    not
    specified, all resource properties will be returned.
    :param sort: Specifies how to sort the returned results.
    :param filter: Filter conditions for the list of resources.
    """

    page_size: int | None = None
    next_token: str | None = None
    select: list[str] | None = None
    sort: SortRecords | None = None
    organisation_id: int | None = None
    filter: InventoryListFilter | None = None
    include: AdditionalInventoryDataOptions | None = None


@dataclass(kw_only=True)
class ListInventoryResourcesExportOutput:

    url: str | None = None


@dataclass(kw_only=True)
class ClassificationStatsFilter:

    classification: str | None = None


@dataclass(kw_only=True)
class SummarizeClassificationStatsInput:

    organisation_id: int | None = None
    filter: ClassificationStatsFilter | None = None


@dataclass(kw_only=True)
class ClassificationStatsData:

    count: int | None = None
    type: str | None = None
    classification: str | None = None


@dataclass(kw_only=True)
class SummarizeClassificationStatsOutput:

    result: dict[str, list[ClassificationStatsData]] | None = None


@dataclass(kw_only=True)
class SummarizeDataStatsInput:

    organisation_id: int | None = None
    source_type: str | None = None


@dataclass(kw_only=True)
class ResourceDataStats:

    size_in_bytes: str | None = None
    entity_count: str | None = None
    entity_unit: str | None = None


@dataclass(kw_only=True)
class SummarizeDataStatsOutput:

    result: ResourceDataStats | None = None


@dataclass(kw_only=True)
class SummarizeResourceStatsInput:

    organisation_id: int | None = None
    include_deleted_resources: bool | None = None


@dataclass(kw_only=True)
class SummarizeResourceStatsOutput:

    total: int | None = None
    result: dict[str, ResourceStatsData] | None = None


@dataclass(kw_only=True)
class SummarizeResourceTrendsInput:

    reporting_period: str | None = None
    resource_types: list[str] | None = None


@dataclass(kw_only=True)
class ResourceTrends:

    type: str | None = None
    discovered: int | None = None
    removed: int | None = None
    last_updated: datetime | None = None
    previous_discovered: int | None = None
    previous_removed: int | None = None
    net_change: int | None = None


@dataclass(kw_only=True)
class SummarizeResourceTrendsOutput:

    result: list[ResourceTrends] | None = None
    total: int | None = None


class ResourceEntityType(StrEnum):
    RESOURCE = "resource"
    RESOURCE_OBJECT = "resource_object"
    ENTITY_ATTRIBUTE = "entity_attribute"


@dataclass(kw_only=True)
class TagEntitiesFilter:

    account_id: str | None = None
    region: str | None = None
    regions: list[str] | None = None
    search: str | None = None
    resource_type: list[str] | None = None


@dataclass
class TagEntityUnionFilter:

    value: TagEntitiesFilter


@dataclass
class TagEntityUnionEntityIds:

    value: list[str]


@dataclass
class TagEntityUnionUnknown:
    """Represents an unknown variant.

    If you receive this value, you will need to update your library to receive the
    parsed value.

    This value may not be deliberately sent.
    """

    tag: str


TagEntityUnion = Union[
    TagEntityUnionFilter, TagEntityUnionEntityIds, TagEntityUnionUnknown
]


@dataclass(kw_only=True)
class UntagEntitiesInput:

    organisation_id: int | None = None
    tag_key: str | None = None
    tag_value: str | None = None
    tag_entities: TagEntityUnion | None = None
    entity_type: str | None = None


@dataclass(kw_only=True)
class TaggingResult:

    entity_id: str | None = None
    status: str | None = None


@dataclass(kw_only=True)
class UntagEntitiesOutput:

    results: list[TaggingResult] | None = None


@dataclass(kw_only=True)
class CreateFalsePositiveReportInput:
    """
    :param scan_id: The unique scan ID.
    """

    organisation_id: int | None = None
    scan_id: str | None = None
    reports: list[str] | None = None


@dataclass(kw_only=True)
class FalsePositiveReport:

    id: str | None = None
    created_by: str | None = None
    created_at: datetime | None = None
    false_positive_count: int | None = None
    hash: str | None = None


@dataclass(kw_only=True)
class CreateFalsePositiveReportOutput:

    false_positive_reports: list[FalsePositiveReport] | None = None


@dataclass(kw_only=True)
class ScanLimits:
    """Scan limits specify the maximum amount of data to scan per resource.

    :param sample_percentage: Percentage of data to scan per resource. Supported for
    full scans on the following resource
    types: S3, BigQuery.
    :param max_cumulative_data_size_mb: Maximum data size to scan per resource in
    MB. Supported for full scans on the following
    resource types: PostgreSQL, MySQL.
    :param items_per_batch: Maximum number of item (records, objects, etc.) to scan
    per resource. Supported for sample
    scans on the following resource types: S3,
    DynamoDB, PostgreSQL, MySQL, Presto, MongoDB,
    BigQuery, Cassandra.
    """

    sample_percentage: float | None = None
    max_cumulative_data_size_mb: int | None = None
    items_per_batch: int | None = None
    sample_duration_minutes: int | None = None


class ScheduleType(StrEnum):
    """A schedule type of "once" indicates that the scan will be executed
    once
    immediately at the time
    it is created or once as per the scheduled
    calendar
    time. A schedule type of "cron" creates a
    recurring scan that will be
    executed
    at the specified cron schedule.
    """

    ONCE = "once"
    CRON = "cron"


@dataclass(kw_only=True)
class CreateScanInput:
    """
    :param name: The name of the scan.
    :param scan_type: The type of scan to perform, i.e. either full scan or sample
    scan.
    :param resource_type: The type of resource to scan.
    :param resources: The set of resources included in a scan. This can either be a
    static set of one or more
    resources identified by their resource ID, or a
    dynamic set of resources identified by one or
    more filter conditions. In the
    case of a recurring scan, the filter conditions will be reevaluated
    each time
    the scan is executed.
    :param connector_id: The ID of the connector to use for the scan. The connector
    type must match the resource type.
    :param schedule_type: A schedule type of "once" indicates that the scan will be
    executed once immediately at the time
    it is created or once as per the scheduled
    calendar time. A schedule type of "cron" creates a
    recurring scan that will be
    executed at the specified cron schedule.
    :param cron: For recurring scans, the cron expression that specifies the
    schedule.
    :param scan_filter: Filter conditions to apply to the scan.
    :param inspection_policy: The inspection policy specifies the infotypes to scan
    for as well as the data to capture as part
    of the scan results.
    :param scan_limits: Scan limits specify the maximum amount of data to scan per
    resource.
    :param schedule: The time at which the scan should start
    """

    organisation_id: int | None = None
    name: str | None = None
    scan_type: str | None = None
    resource_type: str | None = None
    resources: ScanResources | None = None
    connector_id: str | None = None
    schedule_type: str | None = None
    cron: str | None = None
    scan_filter: list[ScanFilter] | None = None
    inspection_policy: InspectionPolicy | None = None
    scan_limits: ScanLimits | None = None
    schedule: ScanSchedule | None = None


@dataclass(kw_only=True)
class CreateScanOutput:
    """
    :param scan_id: The unique scan ID.
    """

    scan_id: str


@dataclass(kw_only=True)
class DescribeScanInput:

    organisation_id: int | None = None
    scan_id: str | None = None


@dataclass(kw_only=True)
class ScanStatusCount:

    paused: int | None = None
    terminated: int | None = None
    scanning: int | None = None
    success: int | None = None
    failed: int | None = None
    deleted: int | None = None


@dataclass(kw_only=True)
class ScanIterationStats:
    """Structure for ScanIterationStats - include total, successful, failed, unknown"""

    status_count: ScanStatusCount | None = None
    resources: int | None = None


@dataclass(kw_only=True)
class ScanMeta:
    """Additional metadata about the scan."""


@dataclass(kw_only=True)
class DescribeScanOutput:
    """
    :param scan_id: The unique scan ID.
    :param status: The current status of the scan.
    :param scan_type: The type of scan to perform, i.e. either full scan or sample
    scan.
    :param resource_type: The type of resource scanned.
    :param resources: The set of resources included in a scan. This can either be a
    static set of one or more
    resources identified by their resource ID, or a
    dynamic set of resources identified by one or
    more filter conditions. In the
    case of a recurring scan, the filter conditions will be reevaluated
    each time
    the scan is executed.
    :param connector_id: The ID of the connector used for the scan.
    :param connector_type: The type of connector used for the scan.
    :param data_plane_id: The ID of the data plane used for the scan.
    :param data_plane_name: The name of the data plane used for the scan.
    :param data_plane_slug: A shortened version of the data plane name.
    :param schedule_type: A schedule type of "once" indicates that the scan will be
    executed once immediately at the time
    it is created or once as per the scheduled
    calendar time. A schedule type of "cron" creates a
    recurring scan that will be
    executed at the specified cron schedule.
    :param cron: The cron schedule expression to use for a recurring scan. Only a
    fixed set of cron expressions
    can be used to run scans at 30 minute, 1 hour, 1
    day, or 1 week intervals.
    :param scan_filter: A list of scan filters to apply. The filters are applied as
    a logical AND.
    :param scan_limits: Scan limits specify the maximum amount of data to scan per
    resource.
    :param inspection_policy: The inspection policy specifies the infotypes to scan
    for as well as the data to capture as part
    of the scan results.
    :param snapshot: Inspection "snapshot" result, providing a count of matched
    infotypes in
    the scanned data.
    :param meta: Additional metadata about the scan.
    :param stats: Scan statistics.
    :param elapsed_time_ms: The total time the scan took to complete, in
    milliseconds.
    :param created_at: The time the scan was created, in Unix epoch time.
    :param updated_at: The time the scan was created, in Unix epoch time.
    :param schedule: The time at which the scan should start
    :param next_execution: upcoming scan iteration time
    :param created_by: Email of the user who created scan
    :param latest_iteration_stats: The latest iteration stats of the scan
    :param false_positive_reports: List of false positive reports for the scan
    """

    scan_id: str

    name: str | None = None
    status: str | None = None
    scan_type: str | None = None
    resource_type: str | None = None
    resources: ScanResources | None = None
    connector_id: str | None = None
    connector_type: str | None = None
    data_plane_id: str | None = None
    data_plane_name: str | None = None
    data_plane_slug: str | None = None
    schedule_type: str | None = None
    cron: str | None = None
    scan_filter: list[ScanFilter] | None = None
    scan_limits: ScanLimits | None = None
    inspection_policy: InspectionPolicy | None = None
    snapshot: dict[str, InfotypeSnapshot] | None = None
    confidence_snapshot: dict[str, ConfidenceSnapshot] | None = None
    meta: ScanMeta | None = None
    stats: ScanStats | None = None
    elapsed_time_ms: int | None = None
    created_at: datetime | None = None
    updated_at: datetime | None = None
    schedule: ScanSchedule | None = None
    next_execution: datetime | None = None
    created_by: str | None = None
    latest_iteration_stats: ScanIterationStats | None = None
    false_positive_reports: list[FalsePositiveReport] | None = None


@dataclass(kw_only=True)
class ScanSelectFilter:
    """Filter conditions to apply when listing scans.

    :param search: Free-form text search to apply to the scan name.
    :param scan_type: One or more scan types (i.e. "full" or "sample") to filter
    results by.
    :param connector_id: One or more connector IDs to filter results by.
    :param resources: One or more resource IDs to filter results by.
    :param resource_type: One or moreresource types to filter results by.
    :param data_plane_name: One or more data plane names to filter results by.
    :param data_plane_id: One or more data plane IDs to filter results by.
    :param status: One or more scan statuses (e.g. `inprogress`, `completed`, etc.)
    to filter results by.
    :param account_id: One or more AWS accounts to filter results by.
    :param gcp_project_id: One or more GCP projects to filter results by.
    :param info_types: Filter results based on the infotypes detected in a resource.
    """

    search: str | None = None
    scan_type: list[str] | None = None
    connector_id: list[str] | None = None
    resources: list[str] | None = None
    resource_type: list[str] | None = None
    data_plane_name: list[str] | None = None
    data_plane_id: list[str] | None = None
    status: list[str] | None = None
    account_id: list[str] | None = None
    gcp_project_id: list[str] | None = None
    info_types: InfoTypesCombinationFilter | None = None


@dataclass(kw_only=True)
class ListScansInput:
    """
    :param filter: Filter conditions to apply when listing scans.
    :param select: List of column names to include in the response.
    :param next_token: The `nextToken` from the last page of results to retrieve the
    next page of results.
    :param page_size: The maximum number of records to return per API call. If more
    records
    are available, the response will be truncated and will contain
    a
    "nextToken" value, which can be used to return additional records.
    :param get_next_execution: IF true, nextExecution will be populated for
    postponed and repeated scans
    :param sort: Specifies how to sort the returned results.
    """

    organisation_id: int | None = None
    filter: ScanSelectFilter | None = None
    select: list[str] | None = None
    next_token: str | None = None
    page_size: int | None = None
    get_next_execution: bool | None = None
    sort: SortRecords | None = None


@dataclass(kw_only=True)
class ScanRecord:
    """
    :param scan_id: The unique scan ID.
    :param status: The current status of the scan.
    :param scan_type: The type of scan to perform, i.e. either full scan or sample
    scan.
    :param resource_type: The type of resource scanned.
    :param resources: The set of resources included in a scan. This can either be a
    static set of one or more
    resources identified by their resource ID, or a
    dynamic set of resources identified by one or
    more filter conditions. In the
    case of a recurring scan, the filter conditions will be reevaluated
    each time
    the scan is executed.
    :param connector_id: The ID of the connector used for the scan.
    :param connector_type: The type of connector used for the scan.
    :param data_plane_id: The ID of the data plane used for the scan.
    :param data_plane_name: The name of the data plane used for the scan.
    :param data_plane_slug: A shortened version of the data plane name.
    :param schedule_type: A schedule type of "once" indicates that the scan will be
    executed once immediately at the time
    it is created or once as per the scheduled
    calendar time. A schedule type of "cron" creates a
    recurring scan that will be
    executed at the specified cron schedule.
    :param cron: The cron schedule expression to use for a recurring scan. Only a
    fixed set of cron expressions
    can be used to run scans at 30 minute, 1 hour, 1
    day, or 1 week intervals.
    :param scan_filter: A list of scan filters to apply. The filters are applied as
    a logical AND.
    :param scan_limits: Scan limits specify the maximum amount of data to scan per
    resource.
    :param inspection_policy: The inspection policy specifies the infotypes to scan
    for as well as the data to capture as part
    of the scan results.
    :param snapshot: Inspection "snapshot" result, providing a count of matched
    infotypes in
    the scanned data.
    :param meta: Additional metadata about the scan.
    :param stats: Scan statistics.
    :param elapsed_time_ms: The total time the scan took to complete, in
    milliseconds.
    :param created_at: The time the scan was created, in Unix epoch time.
    :param updated_at: The time the scan was created, in Unix epoch time.
    :param schedule: The time at which the scan should start
    :param next_execution: upcoming scan iteration time
    :param created_by: Email of the user who created scan
    :param latest_iteration_stats: The latest iteration stats of the scan
    :param false_positive_reports: List of false positive reports for the scan
    """

    scan_id: str

    name: str | None = None
    status: str | None = None
    scan_type: str | None = None
    resource_type: str | None = None
    resources: ScanResources | None = None
    connector_id: str | None = None
    connector_type: str | None = None
    data_plane_id: str | None = None
    data_plane_name: str | None = None
    data_plane_slug: str | None = None
    schedule_type: str | None = None
    cron: str | None = None
    scan_filter: list[ScanFilter] | None = None
    scan_limits: ScanLimits | None = None
    inspection_policy: InspectionPolicy | None = None
    snapshot: dict[str, InfotypeSnapshot] | None = None
    confidence_snapshot: dict[str, ConfidenceSnapshot] | None = None
    meta: ScanMeta | None = None
    stats: ScanStats | None = None
    elapsed_time_ms: int | None = None
    created_at: datetime | None = None
    updated_at: datetime | None = None
    schedule: ScanSchedule | None = None
    next_execution: datetime | None = None
    created_by: str | None = None
    latest_iteration_stats: ScanIterationStats | None = None
    false_positive_reports: list[FalsePositiveReport] | None = None


@dataclass(kw_only=True)
class ListScansOutput:
    """
    :param scans: The list of scans matching the filter conditions, up to the
    specified page size.
    :param total: The total number of scans matching the filter conditions.
    This
    value can be larger than the number of records returned in the response,
    in
    which case a "nextToken" will be included in the response to retrieve
    the next
    set of records.
    :param next_token: A token that can used in a subsequent API request to retrieve
    the next
    set of records.
    :param sort: The API sort order
    """

    scans: list[ScanRecord] | None = None
    total: int | None = None
    next_token: str | None = None
    sort: SortRecords | None = None


@dataclass(kw_only=True)
class PauseScanInput:
    """
    :param scan_id: The unique scan ID.
    """

    organisation_id: int | None = None
    scan_id: str | None = None


@dataclass(kw_only=True)
class PauseScanOutput:
    """
    :param scan_id: The unique scan ID.
    """

    scan_id: str


@dataclass(kw_only=True)
class ResumeScanInput:
    """
    :param scan_id: The unique scan ID.
    """

    organisation_id: int | None = None
    scan_id: str | None = None


@dataclass(kw_only=True)
class ResumeScanOutput:
    """
    :param scan_id: The unique scan ID.
    """

    scan_id: str


@dataclass(kw_only=True)
class StopScanInput:
    """
    :param scan_id: The unique scan ID.
    """

    organisation_id: int | None = None
    scan_id: str | None = None


@dataclass(kw_only=True)
class StopScanOutput:
    """
    :param scan_id: The unique scan ID.
    """

    scan_id: str


@dataclass(kw_only=True)
class SummarizeScanStatsInput:

    organisation_id: int | None = None
    reporting_period: str | None = None
    resource_types: list[str] | None = None


@dataclass(kw_only=True)
class ResourceTypeScanStats:

    scan_durationin_ms: float | None = None
    data_scanned: float | None = None
    identifiers_matched: int | None = None
    scanned_resources: int | None = None
    total_resource_count: int | None = None
    failed_scans: int | None = None
    total_scans: int | None = None
    successful_scans: int | None = None


@dataclass(kw_only=True)
class SummaryScanStats:

    resource_types: dict[str, ResourceTypeScanStats] | None = None
    aggregate: AggregateScanStats | None = None


@dataclass(kw_only=True)
class SummarizeScanStatsOutput:

    result: SummaryScanStats | None = None


@dataclass(kw_only=True)
class DescribeScanIterationInput:
    """
    :param scan_iteration_id: The unique resource ID.
    """

    organisation_id: int | None = None
    scan_iteration_id: str | None = None


class IterationResourceStatus(StrEnum):
    SUCCESS = "success"
    FAILURE = "failure"
    DELETED = "deleted"
    UNKNOWN = "unknown"


@dataclass(kw_only=True)
class ResourceWithName:

    resource_id: str | None = None
    name: str | None = None
    parent_name: str | None = None
    resource_status: str | None = None


@dataclass(kw_only=True)
class DescribeScanIterationOutput:
    """
    :param scan_iteration_id: The unique scan iteration ID.
    """

    scan_iteration_id: str

    resources: list[ResourceWithName] | None = None
    created_at: datetime | None = None
    updated_at: datetime | None = None
    failed_resources: list[ResourceWithName] | None = None
    successful_resources: list[ResourceWithName] | None = None
    deleted_resources: list[ResourceWithName] | None = None
    scan_id: str | None = None


@dataclass(kw_only=True)
class ScanIterationsFilter:
    """Filter conditions to apply when listing scan iterations."""

    scan_id: str | None = None
    resource_id: str | None = None
    scan_iteration_id: str | None = None


@dataclass(kw_only=True)
class ListScanIterationsInput:
    """
    :param filter: Filter conditions to apply when listing scan iterations.
    :param select: List of column names to include in the response.
    :param next_token: The `nextToken` from the last page of results to retrieve the
    next page of results.
    :param page_size: The maximum number of records to return per API call. If more
    records
    are available, the response will be truncated and will contain
    a
    "nextToken" value, which can be used to return additional records.
    :param sort: Specifies how to sort the returned results.
    """

    organisation_id: int | None = None
    filter: ScanIterationsFilter | None = None
    select: list[str] | None = None
    next_token: str | None = None
    page_size: int | None = None
    sort: SortRecords | None = None


@dataclass(kw_only=True)
class ScanIterationRecord:
    """
    :param scan_iteration_id: The unique scan iteration ID.
    """

    scan_iteration_id: str

    resources: list[ResourceWithName] | None = None
    created_at: datetime | None = None
    updated_at: datetime | None = None
    failed_resources: list[ResourceWithName] | None = None
    successful_resources: list[ResourceWithName] | None = None
    deleted_resources: list[ResourceWithName] | None = None
    scan_id: str | None = None


@dataclass(kw_only=True)
class ListScanIterationsOutput:
    """
    :param scan_iterations: The list of scan iterations matching the filter
    conditions, up to the specified page size.
    :param total: The total number of scan iterations matching the filter
    conditions. This
    value can be larger than the number of records returned in the
    response,
    in which case a "nextToken" will be included in the response to
    retrieve
    the next set of records.
    :param next_token: A token that can used in a subsequent API request to retrieve
    the next
    set of records.
    """

    scan_iterations: list[ScanIterationRecord] | None = None
    total: int | None = None
    next_token: str | None = None


@dataclass(kw_only=True)
class ScanResourceStatusFilter:
    """Filter conditions to apply when listing scan reesource status."""

    name: str | None = None


@dataclass(kw_only=True)
class ListScanResourceStatusInput:
    """
    :param scan_id: The unique scan ID.
    :param filter: Filter conditions to apply when listing scan reesource status.
    :param next_token: The `nextToken` from the last page of results to retrieve the
    next page of results.
    :param page_size: The maximum number of records to return per API call. If more
    records
    are available, the response will be truncated and will contain
    a
    "nextToken" value, which can be used to return additional records.
    """

    organisation_id: int | None = None
    scan_id: str | None = None
    filter: ScanResourceStatusFilter | None = None
    next_token: str | None = None
    page_size: int | None = None


@dataclass(kw_only=True)
class ListScanResourceStatusOutput:
    """
    :param scan_resource_status: The list of scan resource status matching the scan
    ID, up to the specified page size.
    :param total: The total number of scan iterations matching the scan ID.
    This
    value can be larger than the number of records returned in the response,
    in
    which case a "nextToken" will be included in the response to retrieve
    the next
    set of records.
    :param next_token: A token that can used in a subsequent API request to retrieve
    the next
    set of records.
    """

    scan_resource_status: list[ResourceWithName] | None = None
    total: int | None = None
    next_token: str | None = None


class ThresholdStatus(StrEnum):
    """Status of the threshold. Can be draft or activated."""

    DRAFT = "draft"
    ACTIVATED = "activated"


@dataclass(kw_only=True)
class CreateThresholdInput:
    """
    :param processing_activity_id: Identifier of the processing activity for which
    the threshold will be created
    :param comment: Additional information related to the Threshold
    :param extensive_automated_evaluation_characteristics: Indicates if the data
    processing involve any systematic, extensive and automated evaluation of
    personal
    characteristics with effect for the data subjects.
    :param large_scale_processing_sensitive_data: Indicates if the data processing
    is large scale processing of sensitive data.
    :param monitoring_publicly_accessible_areas: Indicates if the data processing is
    systematic and large scale monitoring of publicly accessible areas involved.
    :param blacklist: Indicates if the data processing is included in a black list
    :param classifying_data_subject: Indicates if this data processing is assessing
    or classifying data subjects
    :param automated_decision_making: Indicates if there is automated
    decision-making with legal effect, or similarly significant effect involved
    :param systematic_monitoring_data_subject: Indicates if there is systematic
    monitoring of data subjects involved
    :param processing_confidential_sensitive_data: Indicates if there is processing
    of confidential or sensitive data
    :param large_scale_data_processing: Indicates if is a large scale data
    processing
    :param matching_merging_records_involved: Indicates if there is matching or
    merging of the records involved
    :param processing_vulnerable_data_subject: Indicates if there is processing of
    data of vulnerable data subjects
    :param innovative_technologies_used: Indicates if there are innovative
    technologies used
    :param prevent_data_subjects_exercising_their_rights: Indicates if the data
    processing prevents the data subjects from exercising their rights,
    using a
    service or performing a contract
    :param status: Status of the threshold. Can be draft or activated.
    """

    organisation_id: int | None = None
    processing_activity_id: str | None = None
    comment: str | None = None
    extensive_automated_evaluation_characteristics: bool | None = None
    large_scale_processing_sensitive_data: bool | None = None
    monitoring_publicly_accessible_areas: bool | None = None
    blacklist: bool | None = None
    classifying_data_subject: bool | None = None
    automated_decision_making: bool | None = None
    systematic_monitoring_data_subject: bool | None = None
    processing_confidential_sensitive_data: bool | None = None
    large_scale_data_processing: bool | None = None
    matching_merging_records_involved: bool | None = None
    processing_vulnerable_data_subject: bool | None = None
    innovative_technologies_used: bool | None = None
    prevent_data_subjects_exercising_their_rights: bool | None = None
    status: str | None = None
    created_at: datetime | None = None
    updated_at: datetime | None = None
    translations: dict[str, dict[str, str]] | None = None


@dataclass(kw_only=True)
class CreateThresholdOutput:
    """
    :param threshold_id: Identifier of the Threshold
    """

    threshold_id: str


@dataclass(kw_only=True)
class DescribeThresholdInput:
    """
    :param threshold_id: Identifier of the Threshold
    """

    organisation_id: int | None = None
    threshold_id: str | None = None


class ThresholdDpiaStatus(StrEnum):
    NECESSARY = "necessary"
    RECOMMENDED = "recommended"
    OPTIONAL = "optional"


@dataclass(kw_only=True)
class DescribeThresholdOutput:
    """
    :param comment: Additional information related to the Threshold
    :param extensive_automated_evaluation_characteristics: Indicates if the data
    processing involve any systematic, extensive and automated evaluation of
    personal
    characteristics with effect for the data subjects.
    :param large_scale_processing_sensitive_data: Indicates if the data processing
    is large scale processing of sensitive data.
    :param monitoring_publicly_accessible_areas: Indicates if the data processing is
    systematic and large scale monitoring of publicly accessible areas involved.
    :param blacklist: Indicates if the data processing is included in a black list
    :param classifying_data_subject: Indicates if this data processing is assessing
    or classifying data subjects
    :param automated_decision_making: Indicates if there is automated
    decision-making with legal effect, or similarly significant effect involved
    :param systematic_monitoring_data_subject: Indicates if there is systematic
    monitoring of data subjects involved
    :param processing_confidential_sensitive_data: Indicates if there is processing
    of confidential or sensitive data
    :param large_scale_data_processing: Indicates if is a large scale data
    processing
    :param matching_merging_records_involved: Indicates if there is matching or
    merging of the records involved
    :param processing_vulnerable_data_subject: Indicates if there is processing of
    data of vulnerable data subjects
    :param innovative_technologies_used: Indicates if there are innovative
    technologies used
    :param prevent_data_subjects_exercising_their_rights: Indicates if the data
    processing prevents the data subjects from exercising their rights,
    using a
    service or performing a contract
    :param status: Status of the threshold. Can be draft or activated.
    :param dpia_status: Status of the DPIA. Can be necessary, recommended or
    optional.
    """

    comment: str | None = None
    extensive_automated_evaluation_characteristics: bool | None = None
    large_scale_processing_sensitive_data: bool | None = None
    monitoring_publicly_accessible_areas: bool | None = None
    blacklist: bool | None = None
    classifying_data_subject: bool | None = None
    automated_decision_making: bool | None = None
    systematic_monitoring_data_subject: bool | None = None
    processing_confidential_sensitive_data: bool | None = None
    large_scale_data_processing: bool | None = None
    matching_merging_records_involved: bool | None = None
    processing_vulnerable_data_subject: bool | None = None
    innovative_technologies_used: bool | None = None
    prevent_data_subjects_exercising_their_rights: bool | None = None
    status: str | None = None
    dpia_status: str | None = None
    translations: dict[str, dict[str, str]] | None = None
    uploaded_ta_file_id: str | None = None


@dataclass(kw_only=True)
class RemoveThresholdInput:
    """
    :param threshold_id: Identifier of the Threshold
    """

    organisation_id: int | None = None
    threshold_id: str | None = None


@dataclass
class RemoveThresholdOutput:
    pass


@dataclass(kw_only=True)
class UpdateThresholdInput:
    """
    :param threshold_id: Identifier of the Threshold
    :param comment: Additional information related to the Threshold
    :param extensive_automated_evaluation_characteristics: Indicates if the data
    processing involve any systematic, extensive and automated evaluation of
    personal
    characteristics with effect for the data subjects.
    :param large_scale_processing_sensitive_data: Indicates if the data processing
    is large scale processing of sensitive data.
    :param monitoring_publicly_accessible_areas: Indicates if the data processing is
    systematic and large scale monitoring of publicly accessible areas involved.
    :param blacklist: Indicates if the data processing is included in a black list
    :param classifying_data_subject: Indicates if this data processing is assessing
    or classifying data subjects
    :param automated_decision_making: Indicates if there is automated
    decision-making with legal effect, or similarly significant effect involved
    :param systematic_monitoring_data_subject: Indicates if there is systematic
    monitoring of data subjects involved
    :param processing_confidential_sensitive_data: Indicates if there is processing
    of confidential or sensitive data
    :param large_scale_data_processing: Indicates if is a large scale data
    processing
    :param matching_merging_records_involved: Indicates if there is matching or
    merging of the records involved
    :param processing_vulnerable_data_subject: Indicates if there is processing of
    data of vulnerable data subjects
    :param innovative_technologies_used: Indicates if there are innovative
    technologies used
    :param prevent_data_subjects_exercising_their_rights: Indicates if the data
    processing prevents the data subjects from exercising their rights,
    using a
    service or performing a contract
    :param status: Status of the threshold. Can be draft or activated.
    """

    organisation_id: int | None = None
    threshold_id: str | None = None
    comment: str | None = None
    extensive_automated_evaluation_characteristics: bool | None = None
    large_scale_processing_sensitive_data: bool | None = None
    monitoring_publicly_accessible_areas: bool | None = None
    blacklist: bool | None = None
    classifying_data_subject: bool | None = None
    automated_decision_making: bool | None = None
    systematic_monitoring_data_subject: bool | None = None
    processing_confidential_sensitive_data: bool | None = None
    large_scale_data_processing: bool | None = None
    matching_merging_records_involved: bool | None = None
    processing_vulnerable_data_subject: bool | None = None
    innovative_technologies_used: bool | None = None
    prevent_data_subjects_exercising_their_rights: bool | None = None
    status: str | None = None
    translations: dict[str, dict[str, str]] | None = None


@dataclass
class UpdateThresholdOutput:
    pass


@dataclass(kw_only=True)
class DescribeTomInput:
    """
    :param tom_id: Identifier of the TOM
    """

    organisation_id: int | None = None
    tom_id: str | None = None


class TomObjectCategory(StrEnum):
    ASSET = "asset"
    LOCATION = "location"


@dataclass(kw_only=True)
class DescribeTomOutput:
    """
    :param name: Key that represents the name of the TOM
    :param description: Key that represents the description of the TOM
    :param list_: Standard to which the TOM belongs, i.e. HIPAA
    :param category: key that represents the category of the TOM
    :param type: Type of the TOM
    :param reference_code: The reference code of the TOM
    :param status: Status of the TOM, i.e. whether the TOM is already implemented,
    implementation is pending, or the TOM is not implemented.
    :param note: Additional information related to the TOM
    :param document_files: Uploaded file id list.
    """

    name: str | None = None
    description: str | None = None
    list_: str | None = None
    category: str | None = None
    type: str | None = None
    reference_code: str | None = None
    status: str | None = None
    note: str | None = None
    object_category: str | None = None
    document_files: list[str] | None = None


@dataclass(kw_only=True)
class TomSelectFilter:
    """Filter conditions to apply when listing toms.

    :param search: Free-form text search to apply to the toms name.
    """

    search: str | None = None
    category: list[str] | None = None
    list_: list[str] | None = None
    type: list[str] | None = None
    status: list[str] | None = None
    object_category: list[str] | None = None
    tom_id: list[str] | None = None


@dataclass(kw_only=True)
class ListTomsInput:
    """
    :param filter: Filter conditions to apply when listing toms.
    :param next_token: The `nextToken` from the last page of results to retrieve the
    next page of results.
    :param page_size: The maximum number of records to return per API call. If more
    records
    are available, the response will be truncated and will contain
    a
    "nextToken" value, which can be used to return additional records.
    :param sort: Specifies how to sort the returned results.
    """

    organisation_id: int | None = None
    filter: TomSelectFilter | None = None
    next_token: str | None = None
    page_size: int | None = None
    sort: SortRecords | None = None


@dataclass(kw_only=True)
class ListTomsOutput:
    """
    :param toms: The list of TOMs up to the specified page size.
    :param next_token: A token that can used in a subsequent API request to retrieve
    the next
    set of records.
    :param total: The total number of TOMs. This value can be larger than the number
    of records
     returned in the response, in which case a "nextToken" will be
    included in the response
     to retrieve the next set of records.
    :param sort: Specifies how to sort the returned results.
    """

    toms: list[TomListMember] | None = None
    next_token: str | None = None
    total: int | None = None
    sort: SortRecords | None = None


@dataclass(kw_only=True)
class UpdateTomInput:
    """
    :param status: Status of the TOM, i.e. whether the TOM is already implemented,
    implementation is pending, or the TOM is not implemented.
    :param document_files: Uploaded file id list.
    """

    organisation_id: int | None = None
    tom_id: str | None = None
    status: str | None = None
    note: str | None = None
    document_files: list[str] | None = None


@dataclass
class UpdateTomOutput:
    pass


@dataclass(kw_only=True)
class DescribeUserProfileInput:

    user_id: str | None = None


@dataclass(kw_only=True)
class DescribeUserProfileOutput:

    user_id: str

    name: str | None = None
    connector_id: str | None = None
    email: str | None = None
    connector_user_id: str | None = None
    connector_source_type: str | None = None
    connector_username: str | None = None
    external: bool | None = None
    deleted_at: datetime | None = None
    created_at: datetime | None = None
    updated_at: datetime | None = None


@dataclass(kw_only=True)
class UserProfileFilter:

    search: str | None = None


@dataclass(kw_only=True)
class ListUserProfilesInput:
    """
    :param sort: Specifies how to sort the returned results.
    """

    filter: UserProfileFilter | None = None
    select: list[str] | None = None
    next_token: str | None = None
    page_size: int | None = None
    sort: SortRecords | None = None


@dataclass(kw_only=True)
class UserProfileRecord:

    user_id: str

    name: str | None = None
    connector_id: str | None = None
    email: str | None = None
    connector_user_id: str | None = None
    connector_source_type: str | None = None
    connector_username: str | None = None
    external: bool | None = None
    deleted_at: datetime | None = None
    created_at: datetime | None = None
    updated_at: datetime | None = None


@dataclass(kw_only=True)
class ListUserProfilesOutput:
    """
    :param sort: Specifies how to sort the returned results.
    """

    next_token: str | None = None
    total: int | None = None
    user_profiles: list[UserProfileRecord] | None = None
    sort: SortRecords | None = None


@dataclass(kw_only=True)
class ManagerObject:
    """
    :param employee_id: Identifier of the employee
    :param start_date: Start date of the employee in the organisation
    :param end_date: Last date of the employee with the organisation
    :param reference_id: Internal identifier to synchronize with external APIs.
    """

    employee_id: str

    name: str

    surname: str

    created_by: str

    position: str | None = None
    nif: str | None = None
    start_date: str | None = None
    end_date: str | None = None
    email: str | None = None
    manager: str | None = None
    department: str | None = None
    reference_id: str | None = None
    department_object: DepartmentObject | None = None
    manager_object: "ManagerObject | None" = None


@dataclass(kw_only=True)
class DescribeEmployeeOutput:
    """
    :param employee_id: Identifier of the employee
    :param start_date: Start date of the employee in the organisation
    :param end_date: Last date of the employee with the organisation
    :param reference_id: Internal identifier to synchronize with external APIs.
    """

    employee_id: str

    name: str

    surname: str

    created_by: str

    position: str | None = None
    nif: str | None = None
    start_date: str | None = None
    end_date: str | None = None
    email: str | None = None
    manager: str | None = None
    department: str | None = None
    reference_id: str | None = None
    department_object: DepartmentObject | None = None
    manager_object: "ManagerObject | None" = None


@dataclass(kw_only=True)
class EmployeeListMember:
    """
    :param employee_id: Identifier of the employee
    :param start_date: Start date of the employee in the organisation
    :param end_date: Last date of the employee with the organisation
    :param reference_id: Internal identifier to synchronize with external APIs.
    """

    employee_id: str

    name: str

    surname: str

    created_by: str

    position: str | None = None
    nif: str | None = None
    start_date: str | None = None
    end_date: str | None = None
    email: str | None = None
    manager: str | None = None
    department: str | None = None
    reference_id: str | None = None
    department_object: DepartmentObject | None = None
    manager_object: "ManagerObject | None" = None
    processing_activities: int | None = None


@dataclass(kw_only=True)
class ListEmployeesOutput:
    """
    :param employees: The list of employees up to the specified page size.
    :param total: The total number of employees. This value can be larger than the
    number of records
    returned in the response, in which case a "nextToken" will be
    included in the response
    to retrieve the next set of records.
    :param next_token: A token that can used in a subsequent API request to retrieve
    the next
    set of records.
    :param sort: The API sort order
    """

    employees: "list[EmployeeListMember]"

    total: int

    next_token: str | None = None
    sort: SortRecords | None = None


@dataclass(kw_only=True)
class ResourceLineageData:
    """
    :param resource_id: Unique identifier of the resource.
    :param name: Resource name.
    :param type: Resource type.
    :param meta: Additonal resource metadata.
    :param owner: List of resource owners.
    :param status: Current status of the resource. Only "active" resources can be
    scanned.
    :param parent_id: Resource ID of the parent resource, e.g. a database instance,
    or a cloud provider account.
    :param source: How the resource was added to the catalog, either through
    automatic data
    source discovery or manually added by the user. Catalog "leaf"
    resources,
    like database tables, are always added through automatic discovery;
    the
    "source" property is not set for these resources.
    :param snapshot: Inspection "snapshot" result, providing a count of matched
    infotypes in
    the scanned data.
    :param sample_tokens: Sample tokens collected during a scan. Only available if
    the "Collect
    Tokens" option was enabled for the scan. Page-level results return
    sample
    tokens in the `tokens` property, while scan-level results return
    sample
    tokens in the `sampleTokens` property.
    :param compliance: Information about the classification of a data source based
    on the detected
    infotypes.
    :param last_scanned: Time when the resource was last scanned, in Unix epoch
    time.
    """

    resource_id: str

    name: str | None = None
    type: str | None = None
    meta: dict[str, Document] | None = None
    owner: list[OwnerObject] | None = None
    owner_email: str | None = None
    status: str | None = None
    parent_id: str | None = None
    source: str | None = None
    snapshot: dict[str, InfotypeSnapshot] | None = None
    sample_tokens: dict[str, list[SampleTokens]] | None = None
    compliance: list[ComplianceDetail] | None = None
    last_scanned: datetime | None = None
    parent: ResourceParent | None = None
    source_edges: "list[ResourceLineageEdge] | None" = None
    destination_edges: "list[ResourceLineageEdge] | None" = None


@dataclass(kw_only=True)
class ResourceLineageEdge:

    sql: str | None = None
    source_resource_id: str | None = None
    destination_resource_id: str | None = None
    source_column: str | None = None
    destination_column: str | None = None
    source: "ResourceLineageData | None" = None
    destination: "ResourceLineageData | None" = None


@dataclass(kw_only=True)
class DescribeResourceLineageOutput:
    """
    :param resource_id: Unique identifier of the resource.
    :param name: Resource name.
    :param type: Resource type.
    :param meta: Additonal resource metadata.
    :param owner: List of resource owners.
    :param status: Current status of the resource. Only "active" resources can be
    scanned.
    :param parent_id: Resource ID of the parent resource, e.g. a database instance,
    or a cloud provider account.
    :param source: How the resource was added to the catalog, either through
    automatic data
    source discovery or manually added by the user. Catalog "leaf"
    resources,
    like database tables, are always added through automatic discovery;
    the
    "source" property is not set for these resources.
    :param snapshot: Inspection "snapshot" result, providing a count of matched
    infotypes in
    the scanned data.
    :param sample_tokens: Sample tokens collected during a scan. Only available if
    the "Collect
    Tokens" option was enabled for the scan. Page-level results return
    sample
    tokens in the `tokens` property, while scan-level results return
    sample
    tokens in the `sampleTokens` property.
    :param compliance: Information about the classification of a data source based
    on the detected
    infotypes.
    :param last_scanned: Time when the resource was last scanned, in Unix epoch
    time.
    """

    resource_id: str

    name: str | None = None
    type: str | None = None
    meta: dict[str, Document] | None = None
    owner: list[OwnerObject] | None = None
    owner_email: str | None = None
    status: str | None = None
    parent_id: str | None = None
    source: str | None = None
    snapshot: dict[str, InfotypeSnapshot] | None = None
    sample_tokens: dict[str, list[SampleTokens]] | None = None
    compliance: list[ComplianceDetail] | None = None
    last_scanned: datetime | None = None
    parent: ResourceParent | None = None
    source_edges: "list[ResourceLineageEdge] | None" = None
    destination_edges: "list[ResourceLineageEdge] | None" = None
