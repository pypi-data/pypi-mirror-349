# Code generated by smithy-python-codegen DO NOT EDIT.

from asyncio import sleep
from copy import deepcopy
import logging
from typing import Any, Awaitable, Callable, TypeVar, cast

from smithy_core import URI
from smithy_core.exceptions import SmithyRetryException
from smithy_core.interceptors import Interceptor, InterceptorContext
from smithy_core.interfaces.exceptions import HasFault
from smithy_core.interfaces.identity import Identity
from smithy_core.interfaces.retries import RetryErrorInfo, RetryErrorType
from smithy_http.aio.interfaces import HTTPRequest, HTTPResponse
from smithy_http.aio.interfaces.auth import HTTPAuthOption, HTTPSigner
from smithy_http.endpoints import StaticEndpointParams
from smithy_http.interfaces import HTTPRequestConfiguration

from .auth import HTTPAuthParams
from .config import Config, Plugin
from .deserialize import (
    _deserialize_add_discovered_recipient_as_recipients,
    _deserialize_add_ta_dpia_file,
    _deserialize_archive_discovered_recipient,
    _deserialize_clone_pa_in_target_org,
    _deserialize_create_and_send_dashboard_report,
    _deserialize_create_asset,
    _deserialize_create_category,
    _deserialize_create_dashboard_report,
    _deserialize_create_dashboard_user,
    _deserialize_create_data_breach,
    _deserialize_create_department,
    _deserialize_create_domain,
    _deserialize_create_dpia,
    _deserialize_create_employee,
    _deserialize_create_false_positive_report,
    _deserialize_create_headquarter,
    _deserialize_create_legal_document,
    _deserialize_create_lopdp_threshold,
    _deserialize_create_processing_activity,
    _deserialize_create_recipient,
    _deserialize_create_scan,
    _deserialize_create_threshold,
    _deserialize_describe_account,
    _deserialize_describe_asset,
    _deserialize_describe_catalog_resource,
    _deserialize_describe_category,
    _deserialize_describe_cloud_account,
    _deserialize_describe_connector,
    _deserialize_describe_current_user,
    _deserialize_describe_dashboard_report,
    _deserialize_describe_dashboard_report_edition,
    _deserialize_describe_data_breach,
    _deserialize_describe_data_breach_evaluation,
    _deserialize_describe_department,
    _deserialize_describe_discovered_document,
    _deserialize_describe_discovered_infotypes,
    _deserialize_describe_discovered_recipient,
    _deserialize_describe_domain,
    _deserialize_describe_dpia,
    _deserialize_describe_employee,
    _deserialize_describe_error,
    _deserialize_describe_headquarter,
    _deserialize_describe_inspection_result,
    _deserialize_describe_inventory_resource,
    _deserialize_describe_issue,
    _deserialize_describe_legal_document,
    _deserialize_describe_lopdp_threshold,
    _deserialize_describe_processing_activity,
    _deserialize_describe_recipient,
    _deserialize_describe_resource_lineage,
    _deserialize_describe_scan,
    _deserialize_describe_scan_iteration,
    _deserialize_describe_threshold,
    _deserialize_describe_tom,
    _deserialize_describe_user_profile,
    _deserialize_disable_dashboard_user,
    _deserialize_download_dashboard_report,
    _deserialize_download_dashboard_report_edition,
    _deserialize_download_dashboard_report_for_super_admin,
    _deserialize_enable_dashboard_user,
    _deserialize_get_chatbot_response,
    _deserialize_list_access_logs,
    _deserialize_list_accounts,
    _deserialize_list_active_resource_timeline,
    _deserialize_list_assets,
    _deserialize_list_audit_logs,
    _deserialize_list_auto_suggestions,
    _deserialize_list_catalog_leaf_resources,
    _deserialize_list_catalog_leaf_resources_export,
    _deserialize_list_columns_for_resources,
    _deserialize_list_connectors,
    _deserialize_list_dashboard_users,
    _deserialize_list_data_breach,
    _deserialize_list_data_breach_filter,
    _deserialize_list_departments,
    _deserialize_list_departments_for_filter,
    _deserialize_list_discovered_documents,
    _deserialize_list_discovered_infotypes,
    _deserialize_list_discovered_recipients,
    _deserialize_list_discovered_recipients_users,
    _deserialize_list_domains,
    _deserialize_list_employees,
    _deserialize_list_employees_for_filter,
    _deserialize_list_errors,
    _deserialize_list_events,
    _deserialize_list_headquarters,
    _deserialize_list_infotype_categories,
    _deserialize_list_insights_filter,
    _deserialize_list_inspection_results,
    _deserialize_list_inventory_resources,
    _deserialize_list_inventory_resources_export,
    _deserialize_list_issues,
    _deserialize_list_legal_documents,
    _deserialize_list_processing_activities,
    _deserialize_list_processing_activities_export,
    _deserialize_list_processing_activities_of_recipient,
    _deserialize_list_processing_activity_filter,
    _deserialize_list_recipient_filter,
    _deserialize_list_recipients,
    _deserialize_list_recipients_export,
    _deserialize_list_recipients_for_filter,
    _deserialize_list_report_schedules,
    _deserialize_list_reports_edition,
    _deserialize_list_scan_execution_insights,
    _deserialize_list_scan_iterations,
    _deserialize_list_scan_resource_status,
    _deserialize_list_scans,
    _deserialize_list_toms,
    _deserialize_list_top_resources_with_sensitive_data_details,
    _deserialize_list_user_profiles,
    _deserialize_pa_stats_time_series,
    _deserialize_page_insights_export,
    _deserialize_pause_scan,
    _deserialize_poll_domain,
    _deserialize_prepare_detailed_inspection_result,
    _deserialize_remove_asset,
    _deserialize_remove_category,
    _deserialize_remove_dashboard_report,
    _deserialize_remove_dashboard_user,
    _deserialize_remove_data_breach,
    _deserialize_remove_data_breach_evaluation,
    _deserialize_remove_department,
    _deserialize_remove_domain,
    _deserialize_remove_dpia,
    _deserialize_remove_employee,
    _deserialize_remove_headquarter,
    _deserialize_remove_legal_document,
    _deserialize_remove_lopdp_threshold,
    _deserialize_remove_processing_activity,
    _deserialize_remove_recipient,
    _deserialize_remove_ta_dpia_file,
    _deserialize_remove_threshold,
    _deserialize_reset_password_dashboard_user,
    _deserialize_resume_scan,
    _deserialize_scan_legal_document,
    _deserialize_stop_scan,
    _deserialize_summarize_classification_stats,
    _deserialize_summarize_data_identifier_stats,
    _deserialize_summarize_data_stats,
    _deserialize_summarize_pa_stats_for_owners,
    _deserialize_summarize_resource_stats,
    _deserialize_summarize_resource_trends,
    _deserialize_summarize_resource_type_data_identifier_counts,
    _deserialize_summarize_scan_stats,
    _deserialize_untag_entities,
    _deserialize_update_asset,
    _deserialize_update_category,
    _deserialize_update_dashboard_report,
    _deserialize_update_dashboard_user,
    _deserialize_update_dashboard_user_roles,
    _deserialize_update_data_breach,
    _deserialize_update_data_breach_evaluation,
    _deserialize_update_department,
    _deserialize_update_discovered_document,
    _deserialize_update_discovered_infotypes,
    _deserialize_update_domain,
    _deserialize_update_dpia,
    _deserialize_update_employee,
    _deserialize_update_headquarter,
    _deserialize_update_lopdp_threshold,
    _deserialize_update_processing_activity,
    _deserialize_update_recipient,
    _deserialize_update_recipient_status,
    _deserialize_update_ta_dpia_file,
    _deserialize_update_threshold,
    _deserialize_update_tom,
    _deserialize_updatefeedback,
    _deserialize_validate_clone_pa_for_target_org,
    _deserialize_verify_email,
)
from .errors import ServiceError
from .models import (
    AddDiscoveredRecipientAsRecipientsInput,
    AddDiscoveredRecipientAsRecipientsOutput,
    AddTaDpiaFileInput,
    AddTaDpiaFileOutput,
    ArchiveDiscoveredRecipientInput,
    ArchiveDiscoveredRecipientOutput,
    ClonePaInTargetOrgInput,
    ClonePaInTargetOrgOutput,
    CreateAndSendDashboardReportInput,
    CreateAndSendDashboardReportOutput,
    CreateAssetInput,
    CreateAssetOutput,
    CreateCategoryInput,
    CreateCategoryOutput,
    CreateDashboardReportInput,
    CreateDashboardReportOutput,
    CreateDashboardUserInput,
    CreateDashboardUserOutput,
    CreateDataBreachInput,
    CreateDataBreachOutput,
    CreateDepartmentInput,
    CreateDepartmentOutput,
    CreateDomainInput,
    CreateDomainOutput,
    CreateDpiaInput,
    CreateDpiaOutput,
    CreateEmployeeInput,
    CreateEmployeeOutput,
    CreateFalsePositiveReportInput,
    CreateFalsePositiveReportOutput,
    CreateHeadquarterInput,
    CreateHeadquarterOutput,
    CreateLegalDocumentInput,
    CreateLegalDocumentOutput,
    CreateLopdpThresholdInput,
    CreateLopdpThresholdOutput,
    CreateProcessingActivityInput,
    CreateProcessingActivityOutput,
    CreateRecipientInput,
    CreateRecipientOutput,
    CreateScanInput,
    CreateScanOutput,
    CreateThresholdInput,
    CreateThresholdOutput,
    DescribeAccountInput,
    DescribeAccountOutput,
    DescribeAssetInput,
    DescribeAssetOutput,
    DescribeCatalogResourceInput,
    DescribeCatalogResourceOutput,
    DescribeCategoryInput,
    DescribeCategoryOutput,
    DescribeCloudAccountInput,
    DescribeCloudAccountOutput,
    DescribeConnectorInput,
    DescribeConnectorOutput,
    DescribeCurrentUserInput,
    DescribeCurrentUserOutput,
    DescribeDashboardReportEditionInput,
    DescribeDashboardReportEditionOutput,
    DescribeDashboardReportInput,
    DescribeDashboardReportOutput,
    DescribeDataBreachEvaluationInput,
    DescribeDataBreachEvaluationOutput,
    DescribeDataBreachInput,
    DescribeDataBreachOutput,
    DescribeDepartmentInput,
    DescribeDepartmentOutput,
    DescribeDiscoveredDocumentInput,
    DescribeDiscoveredDocumentOutput,
    DescribeDiscoveredInfotypesInput,
    DescribeDiscoveredInfotypesOutput,
    DescribeDiscoveredRecipientInput,
    DescribeDiscoveredRecipientOutput,
    DescribeDomainInput,
    DescribeDomainOutput,
    DescribeDpiaInput,
    DescribeDpiaOutput,
    DescribeEmployeeInput,
    DescribeEmployeeOutput,
    DescribeErrorInput,
    DescribeErrorOutput,
    DescribeHeadquarterInput,
    DescribeHeadquarterOutput,
    DescribeInspectionResultInput,
    DescribeInspectionResultOutput,
    DescribeInventoryResourceInput,
    DescribeInventoryResourceOutput,
    DescribeIssueInput,
    DescribeIssueOutput,
    DescribeLegalDocumentInput,
    DescribeLegalDocumentOutput,
    DescribeLopdpThresholdInput,
    DescribeLopdpThresholdOutput,
    DescribeProcessingActivityInput,
    DescribeProcessingActivityOutput,
    DescribeRecipientInput,
    DescribeRecipientOutput,
    DescribeResourceLineageInput,
    DescribeResourceLineageOutput,
    DescribeScanInput,
    DescribeScanIterationInput,
    DescribeScanIterationOutput,
    DescribeScanOutput,
    DescribeThresholdInput,
    DescribeThresholdOutput,
    DescribeTomInput,
    DescribeTomOutput,
    DescribeUserProfileInput,
    DescribeUserProfileOutput,
    DisableDashboardUserInput,
    DisableDashboardUserOutput,
    DownloadDashboardReportEditionInput,
    DownloadDashboardReportEditionOutput,
    DownloadDashboardReportForSuperAdminInput,
    DownloadDashboardReportForSuperAdminOutput,
    DownloadDashboardReportInput,
    DownloadDashboardReportOutput,
    EnableDashboardUserInput,
    EnableDashboardUserOutput,
    GetChatbotResponseInput,
    GetChatbotResponseOutput,
    ListAccessLogsInput,
    ListAccessLogsOutput,
    ListAccountsInput,
    ListAccountsOutput,
    ListActiveResourceTimelineInput,
    ListActiveResourceTimelineOutput,
    ListAssetsInput,
    ListAssetsOutput,
    ListAuditLogsInput,
    ListAuditLogsOutput,
    ListAutoSuggestionsInput,
    ListAutoSuggestionsOutput,
    ListCatalogLeafResourcesExportInput,
    ListCatalogLeafResourcesExportOutput,
    ListCatalogLeafResourcesInput,
    ListCatalogLeafResourcesOutput,
    ListColumnsForResourcesInput,
    ListColumnsForResourcesOutput,
    ListConnectorsInput,
    ListConnectorsOutput,
    ListDashboardUsersInput,
    ListDashboardUsersOutput,
    ListDataBreachFilterInput,
    ListDataBreachFilterOutput,
    ListDataBreachInput,
    ListDataBreachOutput,
    ListDepartmentsForFilterInput,
    ListDepartmentsForFilterOutput,
    ListDepartmentsInput,
    ListDepartmentsOutput,
    ListDiscoveredDocumentsInput,
    ListDiscoveredDocumentsOutput,
    ListDiscoveredInfotypesInput,
    ListDiscoveredInfotypesOutput,
    ListDiscoveredRecipientsInput,
    ListDiscoveredRecipientsOutput,
    ListDiscoveredRecipientsUsersInput,
    ListDiscoveredRecipientsUsersOutput,
    ListDomainsInput,
    ListDomainsOutput,
    ListEmployeesForFilterInput,
    ListEmployeesForFilterOutput,
    ListEmployeesInput,
    ListEmployeesOutput,
    ListErrorsInput,
    ListErrorsOutput,
    ListEventsInput,
    ListEventsOutput,
    ListHeadquartersInput,
    ListHeadquartersOutput,
    ListInfotypeCategoriesInput,
    ListInfotypeCategoriesOutput,
    ListInsightsFilterInput,
    ListInsightsFilterOutput,
    ListInspectionResultsInput,
    ListInspectionResultsOutput,
    ListInventoryResourcesExportInput,
    ListInventoryResourcesExportOutput,
    ListInventoryResourcesInput,
    ListInventoryResourcesOutput,
    ListIssuesInput,
    ListIssuesOutput,
    ListLegalDocumentsInput,
    ListLegalDocumentsOutput,
    ListProcessingActivitiesExportInput,
    ListProcessingActivitiesExportOutput,
    ListProcessingActivitiesInput,
    ListProcessingActivitiesOfRecipientInput,
    ListProcessingActivitiesOfRecipientOutput,
    ListProcessingActivitiesOutput,
    ListProcessingActivityFilterInput,
    ListProcessingActivityFilterOutput,
    ListRecipientFilterInput,
    ListRecipientFilterOutput,
    ListRecipientsExportInput,
    ListRecipientsExportOutput,
    ListRecipientsForFilterInput,
    ListRecipientsForFilterOutput,
    ListRecipientsInput,
    ListRecipientsOutput,
    ListReportSchedulesInput,
    ListReportSchedulesOutput,
    ListReportsEditionInput,
    ListReportsEditionOutput,
    ListScanExecutionInsightsInput,
    ListScanExecutionInsightsOutput,
    ListScanIterationsInput,
    ListScanIterationsOutput,
    ListScanResourceStatusInput,
    ListScanResourceStatusOutput,
    ListScansInput,
    ListScansOutput,
    ListTomsInput,
    ListTomsOutput,
    ListTopResourcesWithSensitiveDataDetailsInput,
    ListTopResourcesWithSensitiveDataDetailsOutput,
    ListUserProfilesInput,
    ListUserProfilesOutput,
    PaStatsTimeSeriesInput,
    PaStatsTimeSeriesOutput,
    PageInsightsExportInput,
    PageInsightsExportOutput,
    PauseScanInput,
    PauseScanOutput,
    PollDomainInput,
    PollDomainOutput,
    PrepareDetailedInspectionResultInput,
    PrepareDetailedInspectionResultOutput,
    RemoveAssetInput,
    RemoveAssetOutput,
    RemoveCategoryInput,
    RemoveCategoryOutput,
    RemoveDashboardReportInput,
    RemoveDashboardReportOutput,
    RemoveDashboardUserInput,
    RemoveDashboardUserOutput,
    RemoveDataBreachEvaluationInput,
    RemoveDataBreachEvaluationOutput,
    RemoveDataBreachInput,
    RemoveDataBreachOutput,
    RemoveDepartmentInput,
    RemoveDepartmentOutput,
    RemoveDomainInput,
    RemoveDomainOutput,
    RemoveDpiaInput,
    RemoveDpiaOutput,
    RemoveEmployeeInput,
    RemoveEmployeeOutput,
    RemoveHeadquarterInput,
    RemoveHeadquarterOutput,
    RemoveLegalDocumentInput,
    RemoveLegalDocumentOutput,
    RemoveLopdpThresholdInput,
    RemoveLopdpThresholdOutput,
    RemoveProcessingActivityInput,
    RemoveProcessingActivityOutput,
    RemoveRecipientInput,
    RemoveRecipientOutput,
    RemoveTaDpiaFileInput,
    RemoveTaDpiaFileOutput,
    RemoveThresholdInput,
    RemoveThresholdOutput,
    ResetPasswordDashboardUserInput,
    ResetPasswordDashboardUserOutput,
    ResumeScanInput,
    ResumeScanOutput,
    ScanLegalDocumentInput,
    ScanLegalDocumentOutput,
    StopScanInput,
    StopScanOutput,
    SummarizeClassificationStatsInput,
    SummarizeClassificationStatsOutput,
    SummarizeDataIdentifierStatsInput,
    SummarizeDataIdentifierStatsOutput,
    SummarizeDataStatsInput,
    SummarizeDataStatsOutput,
    SummarizePaStatsForOwnersInput,
    SummarizePaStatsForOwnersOutput,
    SummarizeResourceStatsInput,
    SummarizeResourceStatsOutput,
    SummarizeResourceTrendsInput,
    SummarizeResourceTrendsOutput,
    SummarizeResourceTypeDataIdentifierCountsInput,
    SummarizeResourceTypeDataIdentifierCountsOutput,
    SummarizeScanStatsInput,
    SummarizeScanStatsOutput,
    UntagEntitiesInput,
    UntagEntitiesOutput,
    UpdateAssetInput,
    UpdateAssetOutput,
    UpdateCategoryInput,
    UpdateCategoryOutput,
    UpdateDashboardReportInput,
    UpdateDashboardReportOutput,
    UpdateDashboardUserInput,
    UpdateDashboardUserOutput,
    UpdateDashboardUserRolesInput,
    UpdateDashboardUserRolesOutput,
    UpdateDataBreachEvaluationInput,
    UpdateDataBreachEvaluationOutput,
    UpdateDataBreachInput,
    UpdateDataBreachOutput,
    UpdateDepartmentInput,
    UpdateDepartmentOutput,
    UpdateDiscoveredDocumentInput,
    UpdateDiscoveredDocumentOutput,
    UpdateDiscoveredInfotypesInput,
    UpdateDiscoveredInfotypesOutput,
    UpdateDomainInput,
    UpdateDomainOutput,
    UpdateDpiaInput,
    UpdateDpiaOutput,
    UpdateEmployeeInput,
    UpdateEmployeeOutput,
    UpdateHeadquarterInput,
    UpdateHeadquarterOutput,
    UpdateLopdpThresholdInput,
    UpdateLopdpThresholdOutput,
    UpdateProcessingActivityInput,
    UpdateProcessingActivityOutput,
    UpdateRecipientInput,
    UpdateRecipientOutput,
    UpdateRecipientStatusInput,
    UpdateRecipientStatusOutput,
    UpdateTaDpiaFileInput,
    UpdateTaDpiaFileOutput,
    UpdateThresholdInput,
    UpdateThresholdOutput,
    UpdateTomInput,
    UpdateTomOutput,
    UpdatefeedbackInput,
    UpdatefeedbackOutput,
    ValidateClonePaForTargetOrgInput,
    ValidateClonePaForTargetOrgOutput,
    VerifyEmailInput,
    VerifyEmailOutput,
)
from .serialize import (
    _serialize_add_discovered_recipient_as_recipients,
    _serialize_add_ta_dpia_file,
    _serialize_archive_discovered_recipient,
    _serialize_clone_pa_in_target_org,
    _serialize_create_and_send_dashboard_report,
    _serialize_create_asset,
    _serialize_create_category,
    _serialize_create_dashboard_report,
    _serialize_create_dashboard_user,
    _serialize_create_data_breach,
    _serialize_create_department,
    _serialize_create_domain,
    _serialize_create_dpia,
    _serialize_create_employee,
    _serialize_create_false_positive_report,
    _serialize_create_headquarter,
    _serialize_create_legal_document,
    _serialize_create_lopdp_threshold,
    _serialize_create_processing_activity,
    _serialize_create_recipient,
    _serialize_create_scan,
    _serialize_create_threshold,
    _serialize_describe_account,
    _serialize_describe_asset,
    _serialize_describe_catalog_resource,
    _serialize_describe_category,
    _serialize_describe_cloud_account,
    _serialize_describe_connector,
    _serialize_describe_current_user,
    _serialize_describe_dashboard_report,
    _serialize_describe_dashboard_report_edition,
    _serialize_describe_data_breach,
    _serialize_describe_data_breach_evaluation,
    _serialize_describe_department,
    _serialize_describe_discovered_document,
    _serialize_describe_discovered_infotypes,
    _serialize_describe_discovered_recipient,
    _serialize_describe_domain,
    _serialize_describe_dpia,
    _serialize_describe_employee,
    _serialize_describe_error,
    _serialize_describe_headquarter,
    _serialize_describe_inspection_result,
    _serialize_describe_inventory_resource,
    _serialize_describe_issue,
    _serialize_describe_legal_document,
    _serialize_describe_lopdp_threshold,
    _serialize_describe_processing_activity,
    _serialize_describe_recipient,
    _serialize_describe_resource_lineage,
    _serialize_describe_scan,
    _serialize_describe_scan_iteration,
    _serialize_describe_threshold,
    _serialize_describe_tom,
    _serialize_describe_user_profile,
    _serialize_disable_dashboard_user,
    _serialize_download_dashboard_report,
    _serialize_download_dashboard_report_edition,
    _serialize_download_dashboard_report_for_super_admin,
    _serialize_enable_dashboard_user,
    _serialize_get_chatbot_response,
    _serialize_list_access_logs,
    _serialize_list_accounts,
    _serialize_list_active_resource_timeline,
    _serialize_list_assets,
    _serialize_list_audit_logs,
    _serialize_list_auto_suggestions,
    _serialize_list_catalog_leaf_resources,
    _serialize_list_catalog_leaf_resources_export,
    _serialize_list_columns_for_resources,
    _serialize_list_connectors,
    _serialize_list_dashboard_users,
    _serialize_list_data_breach,
    _serialize_list_data_breach_filter,
    _serialize_list_departments,
    _serialize_list_departments_for_filter,
    _serialize_list_discovered_documents,
    _serialize_list_discovered_infotypes,
    _serialize_list_discovered_recipients,
    _serialize_list_discovered_recipients_users,
    _serialize_list_domains,
    _serialize_list_employees,
    _serialize_list_employees_for_filter,
    _serialize_list_errors,
    _serialize_list_events,
    _serialize_list_headquarters,
    _serialize_list_infotype_categories,
    _serialize_list_insights_filter,
    _serialize_list_inspection_results,
    _serialize_list_inventory_resources,
    _serialize_list_inventory_resources_export,
    _serialize_list_issues,
    _serialize_list_legal_documents,
    _serialize_list_processing_activities,
    _serialize_list_processing_activities_export,
    _serialize_list_processing_activities_of_recipient,
    _serialize_list_processing_activity_filter,
    _serialize_list_recipient_filter,
    _serialize_list_recipients,
    _serialize_list_recipients_export,
    _serialize_list_recipients_for_filter,
    _serialize_list_report_schedules,
    _serialize_list_reports_edition,
    _serialize_list_scan_execution_insights,
    _serialize_list_scan_iterations,
    _serialize_list_scan_resource_status,
    _serialize_list_scans,
    _serialize_list_toms,
    _serialize_list_top_resources_with_sensitive_data_details,
    _serialize_list_user_profiles,
    _serialize_pa_stats_time_series,
    _serialize_page_insights_export,
    _serialize_pause_scan,
    _serialize_poll_domain,
    _serialize_prepare_detailed_inspection_result,
    _serialize_remove_asset,
    _serialize_remove_category,
    _serialize_remove_dashboard_report,
    _serialize_remove_dashboard_user,
    _serialize_remove_data_breach,
    _serialize_remove_data_breach_evaluation,
    _serialize_remove_department,
    _serialize_remove_domain,
    _serialize_remove_dpia,
    _serialize_remove_employee,
    _serialize_remove_headquarter,
    _serialize_remove_legal_document,
    _serialize_remove_lopdp_threshold,
    _serialize_remove_processing_activity,
    _serialize_remove_recipient,
    _serialize_remove_ta_dpia_file,
    _serialize_remove_threshold,
    _serialize_reset_password_dashboard_user,
    _serialize_resume_scan,
    _serialize_scan_legal_document,
    _serialize_stop_scan,
    _serialize_summarize_classification_stats,
    _serialize_summarize_data_identifier_stats,
    _serialize_summarize_data_stats,
    _serialize_summarize_pa_stats_for_owners,
    _serialize_summarize_resource_stats,
    _serialize_summarize_resource_trends,
    _serialize_summarize_resource_type_data_identifier_counts,
    _serialize_summarize_scan_stats,
    _serialize_untag_entities,
    _serialize_update_asset,
    _serialize_update_category,
    _serialize_update_dashboard_report,
    _serialize_update_dashboard_user,
    _serialize_update_dashboard_user_roles,
    _serialize_update_data_breach,
    _serialize_update_data_breach_evaluation,
    _serialize_update_department,
    _serialize_update_discovered_document,
    _serialize_update_discovered_infotypes,
    _serialize_update_domain,
    _serialize_update_dpia,
    _serialize_update_employee,
    _serialize_update_headquarter,
    _serialize_update_lopdp_threshold,
    _serialize_update_processing_activity,
    _serialize_update_recipient,
    _serialize_update_recipient_status,
    _serialize_update_ta_dpia_file,
    _serialize_update_threshold,
    _serialize_update_tom,
    _serialize_updatefeedback,
    _serialize_validate_clone_pa_for_target_org,
    _serialize_verify_email,
)


logger = logging.getLogger(__name__)

Input = TypeVar("Input")
Output = TypeVar("Output")


class Borneo:
    """
    # Overview

    The Borneo API v3 provides a set of RESTful APIs to query and manage the
    Borneo Inventory and Catalog, and to schedule data scans and retrieve scan
    results. Request and response payloads are JSON documents.

    ## API Endpoint

    The API endpoint for the Borneo API is hosted on the same domain as the Borneo Dashboard, under the `/api/` path.

    ```
    https://demo.app.borneodata.com/api/
    ```

    ## Authentication

    Requests to the Borneo API must be authenticated using an authentication token. The token is passed in the `Authorization` header of the request.

    ```
    Authorization: Bearer <token>
    ```

    This authorization Bearer token can generated using service accounts and Borneo SDK or directly download Borneo token from dashboard for testing.

    ## Pagination

    All list operations support pagination. The `pageSize` parameter can be
    used to control the number of results returned per API request. If there
    are more results available, the API response will contain a `nextToken`
    value that can be used to retrieve the next page of results by passing it
    as the `nextToken` parameter in a subsequent API request.

    :param config: Optional configuration for the client. Here you can set things like the
    endpoint for HTTP services or auth credentials.

    :param plugins: A list of callables that modify the configuration dynamically. These
    can be used to set defaults, for example.
    """

    def __init__(
        self, config: Config | None = None, plugins: list[Plugin] | None = None
    ):
        self._config = config or Config()

        client_plugins: list[Plugin] = []
        if plugins:
            client_plugins.extend(plugins)

        for plugin in client_plugins:
            plugin(self._config)

    async def add_discovered_recipient_as_recipients(
        self,
        input: AddDiscoveredRecipientAsRecipientsInput,
        plugins: list[Plugin] | None = None,
    ) -> AddDiscoveredRecipientAsRecipientsOutput:
        """Invokes the AddDiscoveredRecipientAsRecipients operation.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_add_discovered_recipient_as_recipients,
            deserialize=_deserialize_add_discovered_recipient_as_recipients,
            config=self._config,
            operation_name="AddDiscoveredRecipientAsRecipients",
        )

    async def add_ta_dpia_file(
        self, input: AddTaDpiaFileInput, plugins: list[Plugin] | None = None
    ) -> AddTaDpiaFileOutput:
        """Invokes the AddTaDpiaFile operation.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_add_ta_dpia_file,
            deserialize=_deserialize_add_ta_dpia_file,
            config=self._config,
            operation_name="AddTaDpiaFile",
        )

    async def archive_discovered_recipient(
        self,
        input: ArchiveDiscoveredRecipientInput,
        plugins: list[Plugin] | None = None,
    ) -> ArchiveDiscoveredRecipientOutput:
        """Ignore the discovered recipient. Ignored discovered recipients will not be discovered another time in the
        future. Ignored recipients can be added as recipients in the recipient library.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_archive_discovered_recipient,
            deserialize=_deserialize_archive_discovered_recipient,
            config=self._config,
            operation_name="ArchiveDiscoveredRecipient",
        )

    async def clone_pa_in_target_org(
        self, input: ClonePaInTargetOrgInput, plugins: list[Plugin] | None = None
    ) -> ClonePaInTargetOrgOutput:
        """Invokes the ClonePaInTargetOrg operation.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_clone_pa_in_target_org,
            deserialize=_deserialize_clone_pa_in_target_org,
            config=self._config,
            operation_name="ClonePaInTargetOrg",
        )

    async def create_and_send_dashboard_report(
        self,
        input: CreateAndSendDashboardReportInput,
        plugins: list[Plugin] | None = None,
    ) -> CreateAndSendDashboardReportOutput:
        """Invokes the CreateAndSendDashboardReport operation.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_create_and_send_dashboard_report,
            deserialize=_deserialize_create_and_send_dashboard_report,
            config=self._config,
            operation_name="CreateAndSendDashboardReport",
        )

    async def create_asset(
        self, input: CreateAssetInput, plugins: list[Plugin] | None = None
    ) -> CreateAssetOutput:
        """Creates an asset

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_create_asset,
            deserialize=_deserialize_create_asset,
            config=self._config,
            operation_name="CreateAsset",
        )

    async def create_category(
        self, input: CreateCategoryInput, plugins: list[Plugin] | None = None
    ) -> CreateCategoryOutput:
        """Invokes the CreateCategory operation.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_create_category,
            deserialize=_deserialize_create_category,
            config=self._config,
            operation_name="CreateCategory",
        )

    async def create_dashboard_report(
        self, input: CreateDashboardReportInput, plugins: list[Plugin] | None = None
    ) -> CreateDashboardReportOutput:
        """Invokes the CreateDashboardReport operation.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_create_dashboard_report,
            deserialize=_deserialize_create_dashboard_report,
            config=self._config,
            operation_name="CreateDashboardReport",
        )

    async def create_dashboard_user(
        self, input: CreateDashboardUserInput, plugins: list[Plugin] | None = None
    ) -> CreateDashboardUserOutput:
        """Invokes the CreateDashboardUser operation.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_create_dashboard_user,
            deserialize=_deserialize_create_dashboard_user,
            config=self._config,
            operation_name="CreateDashboardUser",
        )

    async def create_data_breach(
        self, input: CreateDataBreachInput, plugins: list[Plugin] | None = None
    ) -> CreateDataBreachOutput:
        """Create a DataBreach.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_create_data_breach,
            deserialize=_deserialize_create_data_breach,
            config=self._config,
            operation_name="CreateDataBreach",
        )

    async def create_department(
        self, input: CreateDepartmentInput, plugins: list[Plugin] | None = None
    ) -> CreateDepartmentOutput:
        """Creates a department

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_create_department,
            deserialize=_deserialize_create_department,
            config=self._config,
            operation_name="CreateDepartment",
        )

    async def create_domain(
        self, input: CreateDomainInput, plugins: list[Plugin] | None = None
    ) -> CreateDomainOutput:
        """Create a domain.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_create_domain,
            deserialize=_deserialize_create_domain,
            config=self._config,
            operation_name="CreateDomain",
        )

    async def create_dpia(
        self, input: CreateDpiaInput, plugins: list[Plugin] | None = None
    ) -> CreateDpiaOutput:
        """Create a DPIA.

        We can create one DPIA for each processing activity.

        As the processing activity can only have one DPIA, the `dpiaId` generated is the same
        as the identifier of the processing activity to which it belongs.

        You can create a DPIA as activated or draft. When you are saving a DPIA as draft, no question is mandatory.
        If you are saving as activated, then some of the questions are required.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_create_dpia,
            deserialize=_deserialize_create_dpia,
            config=self._config,
            operation_name="CreateDpia",
        )

    async def create_employee(
        self, input: CreateEmployeeInput, plugins: list[Plugin] | None = None
    ) -> CreateEmployeeOutput:
        """Create an employee
        The employee cannot be created if another employee already exists with same email address.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_create_employee,
            deserialize=_deserialize_create_employee,
            config=self._config,
            operation_name="CreateEmployee",
        )

    async def create_false_positive_report(
        self, input: CreateFalsePositiveReportInput, plugins: list[Plugin] | None = None
    ) -> CreateFalsePositiveReportOutput:
        """Invokes the CreateFalsePositiveReport operation.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_create_false_positive_report,
            deserialize=_deserialize_create_false_positive_report,
            config=self._config,
            operation_name="CreateFalsePositiveReport",
        )

    async def create_headquarter(
        self, input: CreateHeadquarterInput, plugins: list[Plugin] | None = None
    ) -> CreateHeadquarterOutput:
        """Create a headquarter

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_create_headquarter,
            deserialize=_deserialize_create_headquarter,
            config=self._config,
            operation_name="CreateHeadquarter",
        )

    async def create_legal_document(
        self, input: CreateLegalDocumentInput, plugins: list[Plugin] | None = None
    ) -> CreateLegalDocumentOutput:
        """Invokes the CreateLegalDocument operation.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_create_legal_document,
            deserialize=_deserialize_create_legal_document,
            config=self._config,
            operation_name="CreateLegalDocument",
        )

    async def create_lopdp_threshold(
        self, input: CreateLopdpThresholdInput, plugins: list[Plugin] | None = None
    ) -> CreateLopdpThresholdOutput:
        """Creates a Threshold

        As the processing activity can only have one threshold, the `thresholdId` generated is the same
        as the identifier of the processing activity to which it belongs.

        You can create a threshold as activated or draft. When you are saving a Threshold as draft, no question is mandatory.
        If you are saving as activated, then all questions are required.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_create_lopdp_threshold,
            deserialize=_deserialize_create_lopdp_threshold,
            config=self._config,
            operation_name="CreateLopdpThreshold",
        )

    async def create_processing_activity(
        self, input: CreateProcessingActivityInput, plugins: list[Plugin] | None = None
    ) -> CreateProcessingActivityOutput:
        """Creates a Processing Activity

        If the boolean active is set to true, then dataSources is required. The following fields are required to create a
        processing activity with the flag active = true:
        departments, lawfulBasis, recipients, dataSubjects, dataSources, companyRole, contactPerson, purpose,
        processingFrequency, isDataStored, infotypeVolume.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_create_processing_activity,
            deserialize=_deserialize_create_processing_activity,
            config=self._config,
            operation_name="CreateProcessingActivity",
        )

    async def create_recipient(
        self, input: CreateRecipientInput, plugins: list[Plugin] | None = None
    ) -> CreateRecipientOutput:
        """Creates a Recipient

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_create_recipient,
            deserialize=_deserialize_create_recipient,
            config=self._config,
            operation_name="CreateRecipient",
        )

    async def create_scan(
        self, input: CreateScanInput, plugins: list[Plugin] | None = None
    ) -> CreateScanOutput:
        """Executes a one-time scan or schedules a recurring scan on one or more resources.

        To specify the list of resources to scan, you must specify the resource type and the resource ID
        of the parent resource. In the case of S3 buckets and DynamoDB tables, the parent resource is
        the AWS account. In the case of other resource types, the parent resource is the database
        instance in the inventory.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_create_scan,
            deserialize=_deserialize_create_scan,
            config=self._config,
            operation_name="CreateScan",
        )

    async def create_threshold(
        self, input: CreateThresholdInput, plugins: list[Plugin] | None = None
    ) -> CreateThresholdOutput:
        """Creates a Threshold

        As the processing activity can only have one threshold, the `thresholdId` generated is the same
        as the identifier of the processing activity to which it belongs.

        You can create a threshold as activated or draft. When you are saving a Threshold as draft, no question is mandatory.
        If you are saving as activated, then all questions are required.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_create_threshold,
            deserialize=_deserialize_create_threshold,
            config=self._config,
            operation_name="CreateThreshold",
        )

    async def describe_account(
        self, input: DescribeAccountInput, plugins: list[Plugin] | None = None
    ) -> DescribeAccountOutput:
        """Retrieve the account details using the internal Borneo account ID.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_describe_account,
            deserialize=_deserialize_describe_account,
            config=self._config,
            operation_name="DescribeAccount",
        )

    async def describe_asset(
        self, input: DescribeAssetInput, plugins: list[Plugin] | None = None
    ) -> DescribeAssetOutput:
        """Get the information of an asset.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_describe_asset,
            deserialize=_deserialize_describe_asset,
            config=self._config,
            operation_name="DescribeAsset",
        )

    async def describe_catalog_resource(
        self, input: DescribeCatalogResourceInput, plugins: list[Plugin] | None = None
    ) -> DescribeCatalogResourceOutput:
        """Returns details about a specific catalog resource, given the unique resource ID.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_describe_catalog_resource,
            deserialize=_deserialize_describe_catalog_resource,
            config=self._config,
            operation_name="DescribeCatalogResource",
        )

    async def describe_category(
        self, input: DescribeCategoryInput, plugins: list[Plugin] | None = None
    ) -> DescribeCategoryOutput:
        """Returns the details of an infotype category.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_describe_category,
            deserialize=_deserialize_describe_category,
            config=self._config,
            operation_name="DescribeCategory",
        )

    async def describe_cloud_account(
        self, input: DescribeCloudAccountInput, plugins: list[Plugin] | None = None
    ) -> DescribeCloudAccountOutput:
        """Retrieve the account details using the cloud-provider specific account ID,
        e.g. a 12-digit AWS account ID.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_describe_cloud_account,
            deserialize=_deserialize_describe_cloud_account,
            config=self._config,
            operation_name="DescribeCloudAccount",
        )

    async def describe_connector(
        self, input: DescribeConnectorInput, plugins: list[Plugin] | None = None
    ) -> DescribeConnectorOutput:
        """Invokes the DescribeConnector operation.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_describe_connector,
            deserialize=_deserialize_describe_connector,
            config=self._config,
            operation_name="DescribeConnector",
        )

    async def describe_current_user(
        self, input: DescribeCurrentUserInput, plugins: list[Plugin] | None = None
    ) -> DescribeCurrentUserOutput:
        """Invokes the DescribeCurrentUser operation.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_describe_current_user,
            deserialize=_deserialize_describe_current_user,
            config=self._config,
            operation_name="DescribeCurrentUser",
        )

    async def describe_dashboard_report(
        self, input: DescribeDashboardReportInput, plugins: list[Plugin] | None = None
    ) -> DescribeDashboardReportOutput:
        """Invokes the DescribeDashboardReport operation.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_describe_dashboard_report,
            deserialize=_deserialize_describe_dashboard_report,
            config=self._config,
            operation_name="DescribeDashboardReport",
        )

    async def describe_dashboard_report_edition(
        self,
        input: DescribeDashboardReportEditionInput,
        plugins: list[Plugin] | None = None,
    ) -> DescribeDashboardReportEditionOutput:
        """Invokes the DescribeDashboardReportEdition operation.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_describe_dashboard_report_edition,
            deserialize=_deserialize_describe_dashboard_report_edition,
            config=self._config,
            operation_name="DescribeDashboardReportEdition",
        )

    async def describe_data_breach(
        self, input: DescribeDataBreachInput, plugins: list[Plugin] | None = None
    ) -> DescribeDataBreachOutput:
        """Get the information of a DataBreach

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_describe_data_breach,
            deserialize=_deserialize_describe_data_breach,
            config=self._config,
            operation_name="DescribeDataBreach",
        )

    async def describe_data_breach_evaluation(
        self,
        input: DescribeDataBreachEvaluationInput,
        plugins: list[Plugin] | None = None,
    ) -> DescribeDataBreachEvaluationOutput:
        """Get the information of a DataBreach evaluation

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_describe_data_breach_evaluation,
            deserialize=_deserialize_describe_data_breach_evaluation,
            config=self._config,
            operation_name="DescribeDataBreachEvaluation",
        )

    async def describe_department(
        self, input: DescribeDepartmentInput, plugins: list[Plugin] | None = None
    ) -> DescribeDepartmentOutput:
        """Returns the information of a department

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_describe_department,
            deserialize=_deserialize_describe_department,
            config=self._config,
            operation_name="DescribeDepartment",
        )

    async def describe_discovered_document(
        self,
        input: DescribeDiscoveredDocumentInput,
        plugins: list[Plugin] | None = None,
    ) -> DescribeDiscoveredDocumentOutput:
        """Invokes the DescribeDiscoveredDocument operation.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_describe_discovered_document,
            deserialize=_deserialize_describe_discovered_document,
            config=self._config,
            operation_name="DescribeDiscoveredDocument",
        )

    async def describe_discovered_infotypes(
        self,
        input: DescribeDiscoveredInfotypesInput,
        plugins: list[Plugin] | None = None,
    ) -> DescribeDiscoveredInfotypesOutput:
        """Invokes the DescribeDiscoveredInfotypes operation.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_describe_discovered_infotypes,
            deserialize=_deserialize_describe_discovered_infotypes,
            config=self._config,
            operation_name="DescribeDiscoveredInfotypes",
        )

    async def describe_discovered_recipient(
        self,
        input: DescribeDiscoveredRecipientInput,
        plugins: list[Plugin] | None = None,
    ) -> DescribeDiscoveredRecipientOutput:
        """Return the information of a discovered recipient.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_describe_discovered_recipient,
            deserialize=_deserialize_describe_discovered_recipient,
            config=self._config,
            operation_name="DescribeDiscoveredRecipient",
        )

    async def describe_domain(
        self, input: DescribeDomainInput, plugins: list[Plugin] | None = None
    ) -> DescribeDomainOutput:
        """Return the information of a domain.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_describe_domain,
            deserialize=_deserialize_describe_domain,
            config=self._config,
            operation_name="DescribeDomain",
        )

    async def describe_dpia(
        self, input: DescribeDpiaInput, plugins: list[Plugin] | None = None
    ) -> DescribeDpiaOutput:
        """Get the information of a DPIA

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_describe_dpia,
            deserialize=_deserialize_describe_dpia,
            config=self._config,
            operation_name="DescribeDpia",
        )

    async def describe_employee(
        self, input: DescribeEmployeeInput, plugins: list[Plugin] | None = None
    ) -> DescribeEmployeeOutput:
        """Return the information of an employee

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_describe_employee,
            deserialize=_deserialize_describe_employee,
            config=self._config,
            operation_name="DescribeEmployee",
        )

    async def describe_error(
        self, input: DescribeErrorInput, plugins: list[Plugin] | None = None
    ) -> DescribeErrorOutput:
        """Returns details for a specific resource in the inventory, given the unique
        resource ID.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_describe_error,
            deserialize=_deserialize_describe_error,
            config=self._config,
            operation_name="DescribeError",
        )

    async def describe_headquarter(
        self, input: DescribeHeadquarterInput, plugins: list[Plugin] | None = None
    ) -> DescribeHeadquarterOutput:
        """Return the information of a headquarter

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_describe_headquarter,
            deserialize=_deserialize_describe_headquarter,
            config=self._config,
            operation_name="DescribeHeadquarter",
        )

    async def describe_inspection_result(
        self, input: DescribeInspectionResultInput, plugins: list[Plugin] | None = None
    ) -> DescribeInspectionResultOutput:
        """Fetches a single inspection result by its unique ID.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_describe_inspection_result,
            deserialize=_deserialize_describe_inspection_result,
            config=self._config,
            operation_name="DescribeInspectionResult",
        )

    async def describe_inventory_resource(
        self, input: DescribeInventoryResourceInput, plugins: list[Plugin] | None = None
    ) -> DescribeInventoryResourceOutput:
        """Returns details for a specific resource in the inventory, given the unique
        resource ID.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_describe_inventory_resource,
            deserialize=_deserialize_describe_inventory_resource,
            config=self._config,
            operation_name="DescribeInventoryResource",
        )

    async def describe_issue(
        self, input: DescribeIssueInput, plugins: list[Plugin] | None = None
    ) -> DescribeIssueOutput:
        """Invokes the DescribeIssue operation.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_describe_issue,
            deserialize=_deserialize_describe_issue,
            config=self._config,
            operation_name="DescribeIssue",
        )

    async def describe_legal_document(
        self, input: DescribeLegalDocumentInput, plugins: list[Plugin] | None = None
    ) -> DescribeLegalDocumentOutput:
        """Invokes the DescribeLegalDocument operation.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_describe_legal_document,
            deserialize=_deserialize_describe_legal_document,
            config=self._config,
            operation_name="DescribeLegalDocument",
        )

    async def describe_lopdp_threshold(
        self, input: DescribeLopdpThresholdInput, plugins: list[Plugin] | None = None
    ) -> DescribeLopdpThresholdOutput:
        """Get the information of a Threshold

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_describe_lopdp_threshold,
            deserialize=_deserialize_describe_lopdp_threshold,
            config=self._config,
            operation_name="DescribeLopdpThreshold",
        )

    async def describe_processing_activity(
        self,
        input: DescribeProcessingActivityInput,
        plugins: list[Plugin] | None = None,
    ) -> DescribeProcessingActivityOutput:
        """Get the information of a processing activity

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_describe_processing_activity,
            deserialize=_deserialize_describe_processing_activity,
            config=self._config,
            operation_name="DescribeProcessingActivity",
        )

    async def describe_recipient(
        self, input: DescribeRecipientInput, plugins: list[Plugin] | None = None
    ) -> DescribeRecipientOutput:
        """Get the recipient information

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_describe_recipient,
            deserialize=_deserialize_describe_recipient,
            config=self._config,
            operation_name="DescribeRecipient",
        )

    async def describe_resource_lineage(
        self, input: DescribeResourceLineageInput, plugins: list[Plugin] | None = None
    ) -> DescribeResourceLineageOutput:
        """Invokes the DescribeResourceLineage operation.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_describe_resource_lineage,
            deserialize=_deserialize_describe_resource_lineage,
            config=self._config,
            operation_name="DescribeResourceLineage",
        )

    async def describe_scan(
        self, input: DescribeScanInput, plugins: list[Plugin] | None = None
    ) -> DescribeScanOutput:
        """Invokes the DescribeScan operation.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_describe_scan,
            deserialize=_deserialize_describe_scan,
            config=self._config,
            operation_name="DescribeScan",
        )

    async def describe_scan_iteration(
        self, input: DescribeScanIterationInput, plugins: list[Plugin] | None = None
    ) -> DescribeScanIterationOutput:
        """Returns details for a specific resource in the inventory, given the unique
        resource ID.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_describe_scan_iteration,
            deserialize=_deserialize_describe_scan_iteration,
            config=self._config,
            operation_name="DescribeScanIteration",
        )

    async def describe_threshold(
        self, input: DescribeThresholdInput, plugins: list[Plugin] | None = None
    ) -> DescribeThresholdOutput:
        """Get the information of a Threshold

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_describe_threshold,
            deserialize=_deserialize_describe_threshold,
            config=self._config,
            operation_name="DescribeThreshold",
        )

    async def describe_tom(
        self, input: DescribeTomInput, plugins: list[Plugin] | None = None
    ) -> DescribeTomOutput:
        """Returns the information of a TOM

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_describe_tom,
            deserialize=_deserialize_describe_tom,
            config=self._config,
            operation_name="DescribeTom",
        )

    async def describe_user_profile(
        self, input: DescribeUserProfileInput, plugins: list[Plugin] | None = None
    ) -> DescribeUserProfileOutput:
        """Invokes the DescribeUserProfile operation.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_describe_user_profile,
            deserialize=_deserialize_describe_user_profile,
            config=self._config,
            operation_name="DescribeUserProfile",
        )

    async def disable_dashboard_user(
        self, input: DisableDashboardUserInput, plugins: list[Plugin] | None = None
    ) -> DisableDashboardUserOutput:
        """Invokes the DisableDashboardUser operation.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_disable_dashboard_user,
            deserialize=_deserialize_disable_dashboard_user,
            config=self._config,
            operation_name="DisableDashboardUser",
        )

    async def download_dashboard_report(
        self, input: DownloadDashboardReportInput, plugins: list[Plugin] | None = None
    ) -> DownloadDashboardReportOutput:
        """Invokes the DownloadDashboardReport operation.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_download_dashboard_report,
            deserialize=_deserialize_download_dashboard_report,
            config=self._config,
            operation_name="DownloadDashboardReport",
        )

    async def download_dashboard_report_edition(
        self,
        input: DownloadDashboardReportEditionInput,
        plugins: list[Plugin] | None = None,
    ) -> DownloadDashboardReportEditionOutput:
        """Invokes the DownloadDashboardReportEdition operation.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_download_dashboard_report_edition,
            deserialize=_deserialize_download_dashboard_report_edition,
            config=self._config,
            operation_name="DownloadDashboardReportEdition",
        )

    async def download_dashboard_report_for_super_admin(
        self,
        input: DownloadDashboardReportForSuperAdminInput,
        plugins: list[Plugin] | None = None,
    ) -> DownloadDashboardReportForSuperAdminOutput:
        """Invokes the DownloadDashboardReportForSuperAdmin operation.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_download_dashboard_report_for_super_admin,
            deserialize=_deserialize_download_dashboard_report_for_super_admin,
            config=self._config,
            operation_name="DownloadDashboardReportForSuperAdmin",
        )

    async def enable_dashboard_user(
        self, input: EnableDashboardUserInput, plugins: list[Plugin] | None = None
    ) -> EnableDashboardUserOutput:
        """Invokes the EnableDashboardUser operation.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_enable_dashboard_user,
            deserialize=_deserialize_enable_dashboard_user,
            config=self._config,
            operation_name="EnableDashboardUser",
        )

    async def get_chatbot_response(
        self, input: GetChatbotResponseInput, plugins: list[Plugin] | None = None
    ) -> GetChatbotResponseOutput:
        """Invokes the GetChatbotResponse operation.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_get_chatbot_response,
            deserialize=_deserialize_get_chatbot_response,
            config=self._config,
            operation_name="GetChatbotResponse",
        )

    async def list_access_logs(
        self, input: ListAccessLogsInput, plugins: list[Plugin] | None = None
    ) -> ListAccessLogsOutput:
        """List all access logs based on supported filters.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_list_access_logs,
            deserialize=_deserialize_list_access_logs,
            config=self._config,
            operation_name="ListAccessLogs",
        )

    async def list_accounts(
        self, input: ListAccountsInput, plugins: list[Plugin] | None = None
    ) -> ListAccountsOutput:
        """Retrieve a list of all accounts that have been connected to Borneo. Use the
        filter parameters, to limit the results to a specific set of accounts.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_list_accounts,
            deserialize=_deserialize_list_accounts,
            config=self._config,
            operation_name="ListAccounts",
        )

    async def list_active_resource_timeline(
        self,
        input: ListActiveResourceTimelineInput,
        plugins: list[Plugin] | None = None,
    ) -> ListActiveResourceTimelineOutput:
        """Invokes the ListActiveResourceTimeline operation.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_list_active_resource_timeline,
            deserialize=_deserialize_list_active_resource_timeline,
            config=self._config,
            operation_name="ListActiveResourceTimeline",
        )

    async def list_assets(
        self, input: ListAssetsInput, plugins: list[Plugin] | None = None
    ) -> ListAssetsOutput:
        """List the assets pagintated.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_list_assets,
            deserialize=_deserialize_list_assets,
            config=self._config,
            operation_name="ListAssets",
        )

    async def list_audit_logs(
        self, input: ListAuditLogsInput, plugins: list[Plugin] | None = None
    ) -> ListAuditLogsOutput:
        """List all audit logs based on supported filters.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_list_audit_logs,
            deserialize=_deserialize_list_audit_logs,
            config=self._config,
            operation_name="ListAuditLogs",
        )

    async def list_auto_suggestions(
        self, input: ListAutoSuggestionsInput, plugins: list[Plugin] | None = None
    ) -> ListAutoSuggestionsOutput:
        """Invokes the ListAutoSuggestions operation.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_list_auto_suggestions,
            deserialize=_deserialize_list_auto_suggestions,
            config=self._config,
            operation_name="ListAutoSuggestions",
        )

    async def list_catalog_leaf_resources(
        self, input: ListCatalogLeafResourcesInput, plugins: list[Plugin] | None = None
    ) -> ListCatalogLeafResourcesOutput:
        """List all Borneo Catalog resources.

        The API supports various filter options to select a specific set of resources to return.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_list_catalog_leaf_resources,
            deserialize=_deserialize_list_catalog_leaf_resources,
            config=self._config,
            operation_name="ListCatalogLeafResources",
        )

    async def list_catalog_leaf_resources_export(
        self,
        input: ListCatalogLeafResourcesExportInput,
        plugins: list[Plugin] | None = None,
    ) -> ListCatalogLeafResourcesExportOutput:
        """Invokes the ListCatalogLeafResourcesExport operation.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_list_catalog_leaf_resources_export,
            deserialize=_deserialize_list_catalog_leaf_resources_export,
            config=self._config,
            operation_name="ListCatalogLeafResourcesExport",
        )

    async def list_columns_for_resources(
        self, input: ListColumnsForResourcesInput, plugins: list[Plugin] | None = None
    ) -> ListColumnsForResourcesOutput:
        """Invokes the ListColumnsForResources operation.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_list_columns_for_resources,
            deserialize=_deserialize_list_columns_for_resources,
            config=self._config,
            operation_name="ListColumnsForResources",
        )

    async def list_connectors(
        self, input: ListConnectorsInput, plugins: list[Plugin] | None = None
    ) -> ListConnectorsOutput:
        """List connectors created in Borneo based on connector
        types like "S3_BUCKET", "MYSQL_INSTANCE", "SNOWFLAKE" etc,
        along with multiple filters and sorting on specific columns.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_list_connectors,
            deserialize=_deserialize_list_connectors,
            config=self._config,
            operation_name="ListConnectors",
        )

    async def list_dashboard_users(
        self, input: ListDashboardUsersInput, plugins: list[Plugin] | None = None
    ) -> ListDashboardUsersOutput:
        """Invokes the ListDashboardUsers operation.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_list_dashboard_users,
            deserialize=_deserialize_list_dashboard_users,
            config=self._config,
            operation_name="ListDashboardUsers",
        )

    async def list_data_breach(
        self, input: ListDataBreachInput, plugins: list[Plugin] | None = None
    ) -> ListDataBreachOutput:
        """Get the information of a DataBreach

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_list_data_breach,
            deserialize=_deserialize_list_data_breach,
            config=self._config,
            operation_name="ListDataBreach",
        )

    async def list_data_breach_filter(
        self, input: ListDataBreachFilterInput, plugins: list[Plugin] | None = None
    ) -> ListDataBreachFilterOutput:
        """List of DataBreach for filter purposes.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_list_data_breach_filter,
            deserialize=_deserialize_list_data_breach_filter,
            config=self._config,
            operation_name="ListDataBreachFilter",
        )

    async def list_departments(
        self, input: ListDepartmentsInput, plugins: list[Plugin] | None = None
    ) -> ListDepartmentsOutput:
        """Return the list of the departments

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_list_departments,
            deserialize=_deserialize_list_departments,
            config=self._config,
            operation_name="ListDepartments",
        )

    async def list_departments_for_filter(
        self, input: ListDepartmentsForFilterInput, plugins: list[Plugin] | None = None
    ) -> ListDepartmentsForFilterOutput:
        """Invokes the ListDepartmentsForFilter operation.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_list_departments_for_filter,
            deserialize=_deserialize_list_departments_for_filter,
            config=self._config,
            operation_name="ListDepartmentsForFilter",
        )

    async def list_discovered_documents(
        self, input: ListDiscoveredDocumentsInput, plugins: list[Plugin] | None = None
    ) -> ListDiscoveredDocumentsOutput:
        """Invokes the ListDiscoveredDocuments operation.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_list_discovered_documents,
            deserialize=_deserialize_list_discovered_documents,
            config=self._config,
            operation_name="ListDiscoveredDocuments",
        )

    async def list_discovered_infotypes(
        self, input: ListDiscoveredInfotypesInput, plugins: list[Plugin] | None = None
    ) -> ListDiscoveredInfotypesOutput:
        """Invokes the ListDiscoveredInfotypes operation.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_list_discovered_infotypes,
            deserialize=_deserialize_list_discovered_infotypes,
            config=self._config,
            operation_name="ListDiscoveredInfotypes",
        )

    async def list_discovered_recipients(
        self, input: ListDiscoveredRecipientsInput, plugins: list[Plugin] | None = None
    ) -> ListDiscoveredRecipientsOutput:
        """Return the list of the discovered recipients.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_list_discovered_recipients,
            deserialize=_deserialize_list_discovered_recipients,
            config=self._config,
            operation_name="ListDiscoveredRecipients",
        )

    async def list_discovered_recipients_users(
        self,
        input: ListDiscoveredRecipientsUsersInput,
        plugins: list[Plugin] | None = None,
    ) -> ListDiscoveredRecipientsUsersOutput:
        """Add a list of discovered recipients as recipients in the recipient library using the information of the recipient
        model matched. Only those items will be added to recipients where recipientModelId is not null in discovered recipient.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_list_discovered_recipients_users,
            deserialize=_deserialize_list_discovered_recipients_users,
            config=self._config,
            operation_name="ListDiscoveredRecipientsUsers",
        )

    async def list_domains(
        self, input: ListDomainsInput, plugins: list[Plugin] | None = None
    ) -> ListDomainsOutput:
        """Return the list of the domains.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_list_domains,
            deserialize=_deserialize_list_domains,
            config=self._config,
            operation_name="ListDomains",
        )

    async def list_employees(
        self, input: ListEmployeesInput, plugins: list[Plugin] | None = None
    ) -> ListEmployeesOutput:
        """List the employees paginated

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_list_employees,
            deserialize=_deserialize_list_employees,
            config=self._config,
            operation_name="ListEmployees",
        )

    async def list_employees_for_filter(
        self, input: ListEmployeesForFilterInput, plugins: list[Plugin] | None = None
    ) -> ListEmployeesForFilterOutput:
        """List the employees for filter purposes.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_list_employees_for_filter,
            deserialize=_deserialize_list_employees_for_filter,
            config=self._config,
            operation_name="ListEmployeesForFilter",
        )

    async def list_errors(
        self, input: ListErrorsInput, plugins: list[Plugin] | None = None
    ) -> ListErrorsOutput:
        """Lists all scans that match the specified filter conditions.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_list_errors,
            deserialize=_deserialize_list_errors,
            config=self._config,
            operation_name="ListErrors",
        )

    async def list_events(
        self, input: ListEventsInput, plugins: list[Plugin] | None = None
    ) -> ListEventsOutput:
        """Invokes the ListEvents operation.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_list_events,
            deserialize=_deserialize_list_events,
            config=self._config,
            operation_name="ListEvents",
        )

    async def list_headquarters(
        self, input: ListHeadquartersInput, plugins: list[Plugin] | None = None
    ) -> ListHeadquartersOutput:
        """Return the list of headquarters paginated

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_list_headquarters,
            deserialize=_deserialize_list_headquarters,
            config=self._config,
            operation_name="ListHeadquarters",
        )

    async def list_infotype_categories(
        self, input: ListInfotypeCategoriesInput, plugins: list[Plugin] | None = None
    ) -> ListInfotypeCategoriesOutput:
        """Lists the configured infotype categories.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_list_infotype_categories,
            deserialize=_deserialize_list_infotype_categories,
            config=self._config,
            operation_name="ListInfotypeCategories",
        )

    async def list_insights_filter(
        self, input: ListInsightsFilterInput, plugins: list[Plugin] | None = None
    ) -> ListInsightsFilterOutput:
        """Invokes the ListInsightsFilter operation.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_list_insights_filter,
            deserialize=_deserialize_list_insights_filter,
            config=self._config,
            operation_name="ListInsightsFilter",
        )

    async def list_inspection_results(
        self, input: ListInspectionResultsInput, plugins: list[Plugin] | None = None
    ) -> ListInspectionResultsOutput:
        """Fetches the inspection results produced by a scan.

        Scans produce inspection results at the page level. What constitutes
        a "page" of data varies from data source to data source. For row-based
        databases (incl. columnar data stores), a page consists of a fixed number of
        rows. The max. number of rows per page depends on the data source, but can
        also be specified when a scan is scheduled. Typically, it varies between
        1,000 to 10,000 rows. For S3 buckets on the other hand, each S3 object in the
        bucket is considered a separate "page".

        Sample scans typically produce a single page of results per resource. For
        S3 bucket scans, sample scans produce multiple pages of results, one for each
        S3 object scanned. Full scans can generate many pages of results depending on
        the size of the data set and any scan limits configured for the scan.

        At the end of the scan, all page-level results are aggregated into a single
        scan-level result. While page-level results are specific to a particular
        resource, the scan-level results combine the results from all of the
        resources covered by the scan.

        Each inspection results – both at the page level and the scan level – may
        contain one or more parts. The main part included in every result is the
        so-called "snapshot". The snapshot includes the number of matching tokens for
        each infotype enabled for the scan. If the "Collect Tokens" option was
        enabled for the scan, then the inspection results also include a sample of
        the matching tokens found in the data.

        If a scan was started with the "Collect Tokens" option, then detailed
        inspection results may also be available at the page-level. The detailed
        inspection result contains the full list of matching tokens found in the page
        data and the exact location at which each matching token was found. The
        location is specified either as a column name and row number, or as a byte
        offset, depending on the type of data scanned. To retrieve the detailed
        results, use the PrepareDetailedInspectionResult API and specify the
        scan ID, as well as the page ID.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_list_inspection_results,
            deserialize=_deserialize_list_inspection_results,
            config=self._config,
            operation_name="ListInspectionResults",
        )

    async def list_inventory_resources(
        self, input: ListInventoryResourcesInput, plugins: list[Plugin] | None = None
    ) -> ListInventoryResourcesOutput:
        """List all Borneo Inventory resources.

        The API supports various filter options to select a specific set of resources to return.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_list_inventory_resources,
            deserialize=_deserialize_list_inventory_resources,
            config=self._config,
            operation_name="ListInventoryResources",
        )

    async def list_inventory_resources_export(
        self,
        input: ListInventoryResourcesExportInput,
        plugins: list[Plugin] | None = None,
    ) -> ListInventoryResourcesExportOutput:
        """List all Borneo Inventory resources.

        The API supports various filter options to select a specific set of resources to return.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_list_inventory_resources_export,
            deserialize=_deserialize_list_inventory_resources_export,
            config=self._config,
            operation_name="ListInventoryResourcesExport",
        )

    async def list_issues(
        self, input: ListIssuesInput, plugins: list[Plugin] | None = None
    ) -> ListIssuesOutput:
        """List data security issues detected by Borneo.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_list_issues,
            deserialize=_deserialize_list_issues,
            config=self._config,
            operation_name="ListIssues",
        )

    async def list_legal_documents(
        self, input: ListLegalDocumentsInput, plugins: list[Plugin] | None = None
    ) -> ListLegalDocumentsOutput:
        """Invokes the ListLegalDocuments operation.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_list_legal_documents,
            deserialize=_deserialize_list_legal_documents,
            config=self._config,
            operation_name="ListLegalDocuments",
        )

    async def list_processing_activities(
        self, input: ListProcessingActivitiesInput, plugins: list[Plugin] | None = None
    ) -> ListProcessingActivitiesOutput:
        """List processing activities paginated

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_list_processing_activities,
            deserialize=_deserialize_list_processing_activities,
            config=self._config,
            operation_name="ListProcessingActivities",
        )

    async def list_processing_activities_export(
        self,
        input: ListProcessingActivitiesExportInput,
        plugins: list[Plugin] | None = None,
    ) -> ListProcessingActivitiesExportOutput:
        """Export of the report of processing activities document.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_list_processing_activities_export,
            deserialize=_deserialize_list_processing_activities_export,
            config=self._config,
            operation_name="ListProcessingActivitiesExport",
        )

    async def list_processing_activities_of_recipient(
        self,
        input: ListProcessingActivitiesOfRecipientInput,
        plugins: list[Plugin] | None = None,
    ) -> ListProcessingActivitiesOfRecipientOutput:
        """Returns the list of the processing activities related with this recipient

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_list_processing_activities_of_recipient,
            deserialize=_deserialize_list_processing_activities_of_recipient,
            config=self._config,
            operation_name="ListProcessingActivitiesOfRecipient",
        )

    async def list_processing_activity_filter(
        self,
        input: ListProcessingActivityFilterInput,
        plugins: list[Plugin] | None = None,
    ) -> ListProcessingActivityFilterOutput:
        """List of processing activities for filter purposes.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_list_processing_activity_filter,
            deserialize=_deserialize_list_processing_activity_filter,
            config=self._config,
            operation_name="ListProcessingActivityFilter",
        )

    async def list_recipient_filter(
        self, input: ListRecipientFilterInput, plugins: list[Plugin] | None = None
    ) -> ListRecipientFilterOutput:
        """List of recipients for filter purposes.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_list_recipient_filter,
            deserialize=_deserialize_list_recipient_filter,
            config=self._config,
            operation_name="ListRecipientFilter",
        )

    async def list_recipients(
        self, input: ListRecipientsInput, plugins: list[Plugin] | None = None
    ) -> ListRecipientsOutput:
        """List of recipients paginated

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_list_recipients,
            deserialize=_deserialize_list_recipients,
            config=self._config,
            operation_name="ListRecipients",
        )

    async def list_recipients_export(
        self, input: ListRecipientsExportInput, plugins: list[Plugin] | None = None
    ) -> ListRecipientsExportOutput:
        """export the list of recipients document.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_list_recipients_export,
            deserialize=_deserialize_list_recipients_export,
            config=self._config,
            operation_name="ListRecipientsExport",
        )

    async def list_recipients_for_filter(
        self, input: ListRecipientsForFilterInput, plugins: list[Plugin] | None = None
    ) -> ListRecipientsForFilterOutput:
        """List recipients for filter purposes.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_list_recipients_for_filter,
            deserialize=_deserialize_list_recipients_for_filter,
            config=self._config,
            operation_name="ListRecipientsForFilter",
        )

    async def list_report_schedules(
        self, input: ListReportSchedulesInput, plugins: list[Plugin] | None = None
    ) -> ListReportSchedulesOutput:
        """Invokes the ListReportSchedules operation.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_list_report_schedules,
            deserialize=_deserialize_list_report_schedules,
            config=self._config,
            operation_name="ListReportSchedules",
        )

    async def list_reports_edition(
        self, input: ListReportsEditionInput, plugins: list[Plugin] | None = None
    ) -> ListReportsEditionOutput:
        """Invokes the ListReportsEdition operation.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_list_reports_edition,
            deserialize=_deserialize_list_reports_edition,
            config=self._config,
            operation_name="ListReportsEdition",
        )

    async def list_scan_execution_insights(
        self, input: ListScanExecutionInsightsInput, plugins: list[Plugin] | None = None
    ) -> ListScanExecutionInsightsOutput:
        """Invokes the ListScanExecutionInsights operation.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_list_scan_execution_insights,
            deserialize=_deserialize_list_scan_execution_insights,
            config=self._config,
            operation_name="ListScanExecutionInsights",
        )

    async def list_scan_iterations(
        self, input: ListScanIterationsInput, plugins: list[Plugin] | None = None
    ) -> ListScanIterationsOutput:
        """Lists all scans that match the specified filter conditions.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_list_scan_iterations,
            deserialize=_deserialize_list_scan_iterations,
            config=self._config,
            operation_name="ListScanIterations",
        )

    async def list_scan_resource_status(
        self, input: ListScanResourceStatusInput, plugins: list[Plugin] | None = None
    ) -> ListScanResourceStatusOutput:
        """Lists all resource status that match the specified scan ID.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_list_scan_resource_status,
            deserialize=_deserialize_list_scan_resource_status,
            config=self._config,
            operation_name="ListScanResourceStatus",
        )

    async def list_scans(
        self, input: ListScansInput, plugins: list[Plugin] | None = None
    ) -> ListScansOutput:
        """Lists all scans that match the specified filter conditions.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_list_scans,
            deserialize=_deserialize_list_scans,
            config=self._config,
            operation_name="ListScans",
        )

    async def list_toms(
        self, input: ListTomsInput, plugins: list[Plugin] | None = None
    ) -> ListTomsOutput:
        """Returns a paginated list of all TOMs.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_list_toms,
            deserialize=_deserialize_list_toms,
            config=self._config,
            operation_name="ListToms",
        )

    async def list_top_resources_with_sensitive_data_details(
        self,
        input: ListTopResourcesWithSensitiveDataDetailsInput,
        plugins: list[Plugin] | None = None,
    ) -> ListTopResourcesWithSensitiveDataDetailsOutput:
        """Invokes the ListTopResourcesWithSensitiveDataDetails operation.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_list_top_resources_with_sensitive_data_details,
            deserialize=_deserialize_list_top_resources_with_sensitive_data_details,
            config=self._config,
            operation_name="ListTopResourcesWithSensitiveDataDetails",
        )

    async def list_user_profiles(
        self, input: ListUserProfilesInput, plugins: list[Plugin] | None = None
    ) -> ListUserProfilesOutput:
        """Invokes the ListUserProfiles operation.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_list_user_profiles,
            deserialize=_deserialize_list_user_profiles,
            config=self._config,
            operation_name="ListUserProfiles",
        )

    async def page_insights_export(
        self, input: PageInsightsExportInput, plugins: list[Plugin] | None = None
    ) -> PageInsightsExportOutput:
        """Invokes the PageInsightsExport operation.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_page_insights_export,
            deserialize=_deserialize_page_insights_export,
            config=self._config,
            operation_name="PageInsightsExport",
        )

    async def pa_stats_time_series(
        self, input: PaStatsTimeSeriesInput, plugins: list[Plugin] | None = None
    ) -> PaStatsTimeSeriesOutput:
        """Invokes the PaStatsTimeSeries operation.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_pa_stats_time_series,
            deserialize=_deserialize_pa_stats_time_series,
            config=self._config,
            operation_name="PaStatsTimeSeries",
        )

    async def pause_scan(
        self, input: PauseScanInput, plugins: list[Plugin] | None = None
    ) -> PauseScanOutput:
        """Pauses a scan that is currently in progress.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_pause_scan,
            deserialize=_deserialize_pause_scan,
            config=self._config,
            operation_name="PauseScan",
        )

    async def poll_domain(
        self, input: PollDomainInput, plugins: list[Plugin] | None = None
    ) -> PollDomainOutput:
        """Poll a domain manually to discover recipients.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_poll_domain,
            deserialize=_deserialize_poll_domain,
            config=self._config,
            operation_name="PollDomain",
        )

    async def prepare_detailed_inspection_result(
        self,
        input: PrepareDetailedInspectionResultInput,
        plugins: list[Plugin] | None = None,
    ) -> PrepareDetailedInspectionResultOutput:
        """Creates a zip archive of detailed scan results and returns a signed
        download URL.

        Detailed inspection results are only available if the "Collect Tokens"
        option was enabled for the scan. Please refer to the
        ListInspectionResults API for details on how to list the available
        page-level inspection results for a given scan.

        Detailed results are stored for 30 days in the data plane where the scan
        was executed. After that time, detailed results can no longer be
        donwloaded. The download URLs generated by this command are valid for
        7 days. If the URL expires, you can generate a new URL by using this
        API again.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_prepare_detailed_inspection_result,
            deserialize=_deserialize_prepare_detailed_inspection_result,
            config=self._config,
            operation_name="PrepareDetailedInspectionResult",
        )

    async def remove_asset(
        self, input: RemoveAssetInput, plugins: list[Plugin] | None = None
    ) -> RemoveAssetOutput:
        """Delete an asset.
        An asset that belongs to some Processing Activity or DPIA can't be removed.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_remove_asset,
            deserialize=_deserialize_remove_asset,
            config=self._config,
            operation_name="RemoveAsset",
        )

    async def remove_category(
        self, input: RemoveCategoryInput, plugins: list[Plugin] | None = None
    ) -> RemoveCategoryOutput:
        """Removes an infotype category.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_remove_category,
            deserialize=_deserialize_remove_category,
            config=self._config,
            operation_name="RemoveCategory",
        )

    async def remove_dashboard_report(
        self, input: RemoveDashboardReportInput, plugins: list[Plugin] | None = None
    ) -> RemoveDashboardReportOutput:
        """Invokes the RemoveDashboardReport operation.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_remove_dashboard_report,
            deserialize=_deserialize_remove_dashboard_report,
            config=self._config,
            operation_name="RemoveDashboardReport",
        )

    async def remove_dashboard_user(
        self, input: RemoveDashboardUserInput, plugins: list[Plugin] | None = None
    ) -> RemoveDashboardUserOutput:
        """Invokes the RemoveDashboardUser operation.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_remove_dashboard_user,
            deserialize=_deserialize_remove_dashboard_user,
            config=self._config,
            operation_name="RemoveDashboardUser",
        )

    async def remove_data_breach(
        self, input: RemoveDataBreachInput, plugins: list[Plugin] | None = None
    ) -> RemoveDataBreachOutput:
        """Delete a DataBreach

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_remove_data_breach,
            deserialize=_deserialize_remove_data_breach,
            config=self._config,
            operation_name="RemoveDataBreach",
        )

    async def remove_data_breach_evaluation(
        self,
        input: RemoveDataBreachEvaluationInput,
        plugins: list[Plugin] | None = None,
    ) -> RemoveDataBreachEvaluationOutput:
        """Remove the evaluation of a DataBreach

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_remove_data_breach_evaluation,
            deserialize=_deserialize_remove_data_breach_evaluation,
            config=self._config,
            operation_name="RemoveDataBreachEvaluation",
        )

    async def remove_department(
        self, input: RemoveDepartmentInput, plugins: list[Plugin] | None = None
    ) -> RemoveDepartmentOutput:
        """Removes a department.
        A department can be deleted only if there is no employee or processing activity with that department

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_remove_department,
            deserialize=_deserialize_remove_department,
            config=self._config,
            operation_name="RemoveDepartment",
        )

    async def remove_domain(
        self, input: RemoveDomainInput, plugins: list[Plugin] | None = None
    ) -> RemoveDomainOutput:
        """Remove a domain.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_remove_domain,
            deserialize=_deserialize_remove_domain,
            config=self._config,
            operation_name="RemoveDomain",
        )

    async def remove_dpia(
        self, input: RemoveDpiaInput, plugins: list[Plugin] | None = None
    ) -> RemoveDpiaOutput:
        """Delete a DPIA

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_remove_dpia,
            deserialize=_deserialize_remove_dpia,
            config=self._config,
            operation_name="RemoveDpia",
        )

    async def remove_employee(
        self, input: RemoveEmployeeInput, plugins: list[Plugin] | None = None
    ) -> RemoveEmployeeOutput:
        """Delete an employee

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_remove_employee,
            deserialize=_deserialize_remove_employee,
            config=self._config,
            operation_name="RemoveEmployee",
        )

    async def remove_headquarter(
        self, input: RemoveHeadquarterInput, plugins: list[Plugin] | None = None
    ) -> RemoveHeadquarterOutput:
        """Delete a headquarter

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_remove_headquarter,
            deserialize=_deserialize_remove_headquarter,
            config=self._config,
            operation_name="RemoveHeadquarter",
        )

    async def remove_legal_document(
        self, input: RemoveLegalDocumentInput, plugins: list[Plugin] | None = None
    ) -> RemoveLegalDocumentOutput:
        """Invokes the RemoveLegalDocument operation.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_remove_legal_document,
            deserialize=_deserialize_remove_legal_document,
            config=self._config,
            operation_name="RemoveLegalDocument",
        )

    async def remove_lopdp_threshold(
        self, input: RemoveLopdpThresholdInput, plugins: list[Plugin] | None = None
    ) -> RemoveLopdpThresholdOutput:
        """Delete the threshold

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_remove_lopdp_threshold,
            deserialize=_deserialize_remove_lopdp_threshold,
            config=self._config,
            operation_name="RemoveLopdpThreshold",
        )

    async def remove_processing_activity(
        self, input: RemoveProcessingActivityInput, plugins: list[Plugin] | None = None
    ) -> RemoveProcessingActivityOutput:
        """Deletes a processing activity. If the processing activity has a Threshold or DPIA created, also are removed.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_remove_processing_activity,
            deserialize=_deserialize_remove_processing_activity,
            config=self._config,
            operation_name="RemoveProcessingActivity",
        )

    async def remove_recipient(
        self, input: RemoveRecipientInput, plugins: list[Plugin] | None = None
    ) -> RemoveRecipientOutput:
        """Removes a recipient
        A recipient can't be removed if it's related to some Processing Activity

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_remove_recipient,
            deserialize=_deserialize_remove_recipient,
            config=self._config,
            operation_name="RemoveRecipient",
        )

    async def remove_ta_dpia_file(
        self, input: RemoveTaDpiaFileInput, plugins: list[Plugin] | None = None
    ) -> RemoveTaDpiaFileOutput:
        """Invokes the RemoveTaDpiaFile operation.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_remove_ta_dpia_file,
            deserialize=_deserialize_remove_ta_dpia_file,
            config=self._config,
            operation_name="RemoveTaDpiaFile",
        )

    async def remove_threshold(
        self, input: RemoveThresholdInput, plugins: list[Plugin] | None = None
    ) -> RemoveThresholdOutput:
        """Delete the threshold

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_remove_threshold,
            deserialize=_deserialize_remove_threshold,
            config=self._config,
            operation_name="RemoveThreshold",
        )

    async def reset_password_dashboard_user(
        self,
        input: ResetPasswordDashboardUserInput,
        plugins: list[Plugin] | None = None,
    ) -> ResetPasswordDashboardUserOutput:
        """Invokes the ResetPasswordDashboardUser operation.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_reset_password_dashboard_user,
            deserialize=_deserialize_reset_password_dashboard_user,
            config=self._config,
            operation_name="ResetPasswordDashboardUser",
        )

    async def resume_scan(
        self, input: ResumeScanInput, plugins: list[Plugin] | None = None
    ) -> ResumeScanOutput:
        """Resumes a paused scan.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_resume_scan,
            deserialize=_deserialize_resume_scan,
            config=self._config,
            operation_name="ResumeScan",
        )

    async def scan_legal_document(
        self, input: ScanLegalDocumentInput, plugins: list[Plugin] | None = None
    ) -> ScanLegalDocumentOutput:
        """Invokes the ScanLegalDocument operation.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_scan_legal_document,
            deserialize=_deserialize_scan_legal_document,
            config=self._config,
            operation_name="ScanLegalDocument",
        )

    async def stop_scan(
        self, input: StopScanInput, plugins: list[Plugin] | None = None
    ) -> StopScanOutput:
        """Stops a scan that is currently in progress.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_stop_scan,
            deserialize=_deserialize_stop_scan,
            config=self._config,
            operation_name="StopScan",
        )

    async def summarize_classification_stats(
        self,
        input: SummarizeClassificationStatsInput,
        plugins: list[Plugin] | None = None,
    ) -> SummarizeClassificationStatsOutput:
        """Invokes the SummarizeClassificationStats operation.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_summarize_classification_stats,
            deserialize=_deserialize_summarize_classification_stats,
            config=self._config,
            operation_name="SummarizeClassificationStats",
        )

    async def summarize_data_identifier_stats(
        self,
        input: SummarizeDataIdentifierStatsInput,
        plugins: list[Plugin] | None = None,
    ) -> SummarizeDataIdentifierStatsOutput:
        """Invokes the SummarizeDataIdentifierStats operation.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_summarize_data_identifier_stats,
            deserialize=_deserialize_summarize_data_identifier_stats,
            config=self._config,
            operation_name="SummarizeDataIdentifierStats",
        )

    async def summarize_data_stats(
        self, input: SummarizeDataStatsInput, plugins: list[Plugin] | None = None
    ) -> SummarizeDataStatsOutput:
        """Invokes the SummarizeDataStats operation.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_summarize_data_stats,
            deserialize=_deserialize_summarize_data_stats,
            config=self._config,
            operation_name="SummarizeDataStats",
        )

    async def summarize_pa_stats_for_owners(
        self, input: SummarizePaStatsForOwnersInput, plugins: list[Plugin] | None = None
    ) -> SummarizePaStatsForOwnersOutput:
        """Invokes the SummarizePaStatsForOwners operation.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_summarize_pa_stats_for_owners,
            deserialize=_deserialize_summarize_pa_stats_for_owners,
            config=self._config,
            operation_name="SummarizePaStatsForOwners",
        )

    async def summarize_resource_stats(
        self, input: SummarizeResourceStatsInput, plugins: list[Plugin] | None = None
    ) -> SummarizeResourceStatsOutput:
        """Invokes the SummarizeResourceStats operation.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_summarize_resource_stats,
            deserialize=_deserialize_summarize_resource_stats,
            config=self._config,
            operation_name="SummarizeResourceStats",
        )

    async def summarize_resource_trends(
        self, input: SummarizeResourceTrendsInput, plugins: list[Plugin] | None = None
    ) -> SummarizeResourceTrendsOutput:
        """Invokes the SummarizeResourceTrends operation.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_summarize_resource_trends,
            deserialize=_deserialize_summarize_resource_trends,
            config=self._config,
            operation_name="SummarizeResourceTrends",
        )

    async def summarize_resource_type_data_identifier_counts(
        self,
        input: SummarizeResourceTypeDataIdentifierCountsInput,
        plugins: list[Plugin] | None = None,
    ) -> SummarizeResourceTypeDataIdentifierCountsOutput:
        """Invokes the SummarizeResourceTypeDataIdentifierCounts operation.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_summarize_resource_type_data_identifier_counts,
            deserialize=_deserialize_summarize_resource_type_data_identifier_counts,
            config=self._config,
            operation_name="SummarizeResourceTypeDataIdentifierCounts",
        )

    async def summarize_scan_stats(
        self, input: SummarizeScanStatsInput, plugins: list[Plugin] | None = None
    ) -> SummarizeScanStatsOutput:
        """Invokes the SummarizeScanStats operation.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_summarize_scan_stats,
            deserialize=_deserialize_summarize_scan_stats,
            config=self._config,
            operation_name="SummarizeScanStats",
        )

    async def untag_entities(
        self, input: UntagEntitiesInput, plugins: list[Plugin] | None = None
    ) -> UntagEntitiesOutput:
        """Invokes the UntagEntities operation.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_untag_entities,
            deserialize=_deserialize_untag_entities,
            config=self._config,
            operation_name="UntagEntities",
        )

    async def update_asset(
        self, input: UpdateAssetInput, plugins: list[Plugin] | None = None
    ) -> UpdateAssetOutput:
        """Updates an asset

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_update_asset,
            deserialize=_deserialize_update_asset,
            config=self._config,
            operation_name="UpdateAsset",
        )

    async def update_category(
        self, input: UpdateCategoryInput, plugins: list[Plugin] | None = None
    ) -> UpdateCategoryOutput:
        """Updates an infotype category.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_update_category,
            deserialize=_deserialize_update_category,
            config=self._config,
            operation_name="UpdateCategory",
        )

    async def update_dashboard_report(
        self, input: UpdateDashboardReportInput, plugins: list[Plugin] | None = None
    ) -> UpdateDashboardReportOutput:
        """Invokes the UpdateDashboardReport operation.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_update_dashboard_report,
            deserialize=_deserialize_update_dashboard_report,
            config=self._config,
            operation_name="UpdateDashboardReport",
        )

    async def update_dashboard_user(
        self, input: UpdateDashboardUserInput, plugins: list[Plugin] | None = None
    ) -> UpdateDashboardUserOutput:
        """Invokes the UpdateDashboardUser operation.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_update_dashboard_user,
            deserialize=_deserialize_update_dashboard_user,
            config=self._config,
            operation_name="UpdateDashboardUser",
        )

    async def update_dashboard_user_roles(
        self, input: UpdateDashboardUserRolesInput, plugins: list[Plugin] | None = None
    ) -> UpdateDashboardUserRolesOutput:
        """Invokes the UpdateDashboardUserRoles operation.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_update_dashboard_user_roles,
            deserialize=_deserialize_update_dashboard_user_roles,
            config=self._config,
            operation_name="UpdateDashboardUserRoles",
        )

    async def update_data_breach(
        self, input: UpdateDataBreachInput, plugins: list[Plugin] | None = None
    ) -> UpdateDataBreachOutput:
        """Updates a DataBreach

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_update_data_breach,
            deserialize=_deserialize_update_data_breach,
            config=self._config,
            operation_name="UpdateDataBreach",
        )

    async def update_data_breach_evaluation(
        self,
        input: UpdateDataBreachEvaluationInput,
        plugins: list[Plugin] | None = None,
    ) -> UpdateDataBreachEvaluationOutput:
        """Update a DataBreach with the evaluation information

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_update_data_breach_evaluation,
            deserialize=_deserialize_update_data_breach_evaluation,
            config=self._config,
            operation_name="UpdateDataBreachEvaluation",
        )

    async def update_department(
        self, input: UpdateDepartmentInput, plugins: list[Plugin] | None = None
    ) -> UpdateDepartmentOutput:
        """Updates a department

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_update_department,
            deserialize=_deserialize_update_department,
            config=self._config,
            operation_name="UpdateDepartment",
        )

    async def update_discovered_document(
        self, input: UpdateDiscoveredDocumentInput, plugins: list[Plugin] | None = None
    ) -> UpdateDiscoveredDocumentOutput:
        """Invokes the UpdateDiscoveredDocument operation.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_update_discovered_document,
            deserialize=_deserialize_update_discovered_document,
            config=self._config,
            operation_name="UpdateDiscoveredDocument",
        )

    async def update_discovered_infotypes(
        self, input: UpdateDiscoveredInfotypesInput, plugins: list[Plugin] | None = None
    ) -> UpdateDiscoveredInfotypesOutput:
        """Invokes the UpdateDiscoveredInfotypes operation.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_update_discovered_infotypes,
            deserialize=_deserialize_update_discovered_infotypes,
            config=self._config,
            operation_name="UpdateDiscoveredInfotypes",
        )

    async def update_domain(
        self, input: UpdateDomainInput, plugins: list[Plugin] | None = None
    ) -> UpdateDomainOutput:
        """Update a domain.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_update_domain,
            deserialize=_deserialize_update_domain,
            config=self._config,
            operation_name="UpdateDomain",
        )

    async def update_dpia(
        self, input: UpdateDpiaInput, plugins: list[Plugin] | None = None
    ) -> UpdateDpiaOutput:
        """Updates a DPIA

        You can update a DPIA as activated or draft. When you are saving a DPIA as draft, no question is mandatory.
        If you are saving as activated, then some of the questions are required.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_update_dpia,
            deserialize=_deserialize_update_dpia,
            config=self._config,
            operation_name="UpdateDpia",
        )

    async def update_employee(
        self, input: UpdateEmployeeInput, plugins: list[Plugin] | None = None
    ) -> UpdateEmployeeOutput:
        """Updates an employee. If you change the email address, the new address has to be unique.
        The employee cannot be updated if another employee has the same email address.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_update_employee,
            deserialize=_deserialize_update_employee,
            config=self._config,
            operation_name="UpdateEmployee",
        )

    async def updatefeedback(
        self, input: UpdatefeedbackInput, plugins: list[Plugin] | None = None
    ) -> UpdatefeedbackOutput:
        """Invokes the Updatefeedback operation.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_updatefeedback,
            deserialize=_deserialize_updatefeedback,
            config=self._config,
            operation_name="Updatefeedback",
        )

    async def update_headquarter(
        self, input: UpdateHeadquarterInput, plugins: list[Plugin] | None = None
    ) -> UpdateHeadquarterOutput:
        """Update a headquarter

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_update_headquarter,
            deserialize=_deserialize_update_headquarter,
            config=self._config,
            operation_name="UpdateHeadquarter",
        )

    async def update_lopdp_threshold(
        self, input: UpdateLopdpThresholdInput, plugins: list[Plugin] | None = None
    ) -> UpdateLopdpThresholdOutput:
        """Updates the threshold

        You can update a threshold as activated or draft. When you are saving a Threshold as draft, no question is mandatory.
        If you are saving as activated, then all questions are required.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_update_lopdp_threshold,
            deserialize=_deserialize_update_lopdp_threshold,
            config=self._config,
            operation_name="UpdateLopdpThreshold",
        )

    async def update_processing_activity(
        self, input: UpdateProcessingActivityInput, plugins: list[Plugin] | None = None
    ) -> UpdateProcessingActivityOutput:
        """Updates a processing activity

        If the boolean active is set to true, then dataSources is required. The following fields are required to update a
        processing activity with the flag active = true:
        departments, lawfulBasis, recipients, dataSubjects, dataSources, companyRole, contactPerson, purpose,
        processingFrequency, isDataStored, infotypeVolume.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_update_processing_activity,
            deserialize=_deserialize_update_processing_activity,
            config=self._config,
            operation_name="UpdateProcessingActivity",
        )

    async def update_recipient(
        self, input: UpdateRecipientInput, plugins: list[Plugin] | None = None
    ) -> UpdateRecipientOutput:
        """Updates a recipient

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_update_recipient,
            deserialize=_deserialize_update_recipient,
            config=self._config,
            operation_name="UpdateRecipient",
        )

    async def update_recipient_status(
        self, input: UpdateRecipientStatusInput, plugins: list[Plugin] | None = None
    ) -> UpdateRecipientStatusOutput:
        """Updates a recipient's status

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_update_recipient_status,
            deserialize=_deserialize_update_recipient_status,
            config=self._config,
            operation_name="UpdateRecipientStatus",
        )

    async def update_ta_dpia_file(
        self, input: UpdateTaDpiaFileInput, plugins: list[Plugin] | None = None
    ) -> UpdateTaDpiaFileOutput:
        """Invokes the UpdateTaDpiaFile operation.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_update_ta_dpia_file,
            deserialize=_deserialize_update_ta_dpia_file,
            config=self._config,
            operation_name="UpdateTaDpiaFile",
        )

    async def update_threshold(
        self, input: UpdateThresholdInput, plugins: list[Plugin] | None = None
    ) -> UpdateThresholdOutput:
        """Updates the threshold

        You can update a threshold as activated or draft. When you are saving a Threshold as draft, no question is mandatory.
        If you are saving as activated, then all questions are required.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_update_threshold,
            deserialize=_deserialize_update_threshold,
            config=self._config,
            operation_name="UpdateThreshold",
        )

    async def update_tom(
        self, input: UpdateTomInput, plugins: list[Plugin] | None = None
    ) -> UpdateTomOutput:
        """Updates a TOM. Only the status and the note can be modified.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_update_tom,
            deserialize=_deserialize_update_tom,
            config=self._config,
            operation_name="UpdateTom",
        )

    async def validate_clone_pa_for_target_org(
        self,
        input: ValidateClonePaForTargetOrgInput,
        plugins: list[Plugin] | None = None,
    ) -> ValidateClonePaForTargetOrgOutput:
        """Invokes the ValidateClonePaForTargetOrg operation.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_validate_clone_pa_for_target_org,
            deserialize=_deserialize_validate_clone_pa_for_target_org,
            config=self._config,
            operation_name="ValidateClonePaForTargetOrg",
        )

    async def verify_email(
        self, input: VerifyEmailInput, plugins: list[Plugin] | None = None
    ) -> VerifyEmailOutput:
        """Invokes the VerifyEmail operation.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins: list[Plugin] = []
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_verify_email,
            deserialize=_deserialize_verify_email,
            config=self._config,
            operation_name="VerifyEmail",
        )

    def _classify_error(
        self,
        *,
        error: Exception,
        context: InterceptorContext[Input, Output, HTTPRequest, HTTPResponse | None],
    ) -> RetryErrorInfo:

        if not isinstance(error, HasFault) and not context.transport_response:
            return RetryErrorInfo(error_type=RetryErrorType.TRANSIENT)

        if context.transport_response:
            if context.transport_response.status in [429, 503]:
                retry_after = None
                retry_header = context.transport_response.fields["retry-after"]
                if retry_header and retry_header.values:
                    retry_after = float(retry_header.values[0])
                return RetryErrorInfo(
                    error_type=RetryErrorType.THROTTLING, retry_after_hint=retry_after
                )

            if context.transport_response.status >= 500:
                return RetryErrorInfo(error_type=RetryErrorType.SERVER_ERROR)

        error_type = RetryErrorType.CLIENT_ERROR
        if isinstance(error, HasFault) and error.fault == "server":
            error_type = RetryErrorType.SERVER_ERROR

        return RetryErrorInfo(error_type=error_type)

    async def _execute_operation(
        self,
        input: Input,
        plugins: list[Plugin],
        serialize: Callable[[Input, Config], Awaitable[HTTPRequest]],
        deserialize: Callable[[HTTPResponse, Config], Awaitable[Output]],
        config: Config,
        operation_name: str,
    ) -> Output:
        try:
            return await self._handle_execution(
                input, plugins, serialize, deserialize, config, operation_name
            )
        except Exception as e:
            # Make sure every exception that we throw is an instance of ServiceError so
            # customers can reliably catch everything we throw.
            if not isinstance(e, ServiceError):
                raise ServiceError(e) from e
            raise e

    async def _handle_execution(
        self,
        input: Input,
        plugins: list[Plugin],
        serialize: Callable[[Input, Config], Awaitable[HTTPRequest]],
        deserialize: Callable[[HTTPResponse, Config], Awaitable[Output]],
        config: Config,
        operation_name: str,
    ) -> Output:
        logger.debug(
            f"Making request for operation {operation_name} with parameters: {input}"
        )
        context: InterceptorContext[Input, None, None, None] = InterceptorContext(
            request=input,
            response=None,
            transport_request=None,
            transport_response=None,
        )
        _client_interceptors = config.interceptors
        client_interceptors = cast(
            list[Interceptor[Input, Output, HTTPRequest, HTTPResponse]],
            _client_interceptors,
        )
        interceptors = client_interceptors

        try:
            # Step 1a: Invoke read_before_execution on client-level interceptors
            for interceptor in client_interceptors:
                interceptor.read_before_execution(context)

            # Step 1b: Run operation-level plugins
            config = deepcopy(config)
            for plugin in plugins:
                plugin(config)

            _client_interceptors = config.interceptors
            interceptors = cast(
                list[Interceptor[Input, Output, HTTPRequest, HTTPResponse]],
                _client_interceptors,
            )

            # Step 1c: Invoke the read_before_execution hooks on newly added
            # interceptors.
            for interceptor in interceptors:
                if interceptor not in client_interceptors:
                    interceptor.read_before_execution(context)

            # Step 2: Invoke the modify_before_serialization hooks
            for interceptor in interceptors:
                context._request = interceptor.modify_before_serialization(context)

            # Step 3: Invoke the read_before_serialization hooks
            for interceptor in interceptors:
                interceptor.read_before_serialization(context)

            # Step 4: Serialize the request
            context_with_transport_request = cast(
                InterceptorContext[Input, None, HTTPRequest, None], context
            )
            context_with_transport_request._transport_request = await serialize(
                context_with_transport_request.request, config
            )

            # Step 5: Invoke read_after_serialization
            for interceptor in interceptors:
                interceptor.read_after_serialization(context_with_transport_request)

            # Step 6: Invoke modify_before_retry_loop
            for interceptor in interceptors:
                context_with_transport_request._transport_request = (
                    interceptor.modify_before_retry_loop(context_with_transport_request)
                )

            # Step 7: Acquire the retry token.
            retry_strategy = config.retry_strategy
            retry_token = retry_strategy.acquire_initial_retry_token()

            while True:
                # Make an attempt, creating a copy of the context so we don't pass
                # around old data.
                context_with_response = await self._handle_attempt(
                    deserialize,
                    interceptors,
                    context_with_transport_request.copy(),
                    config,
                    operation_name,
                )

                # We perform this type-ignored re-assignment because `context` needs
                # to point at the latest context so it can be generically handled
                # later on. This is only an issue here because we've created a copy,
                # so we're no longer simply pointing at the same object in memory
                # with different names and type hints. It is possible to address this
                # without having to fall back to the type ignore, but it would impose
                # unnecessary runtime costs.
                context = context_with_response  # type: ignore

                if isinstance(context_with_response.response, Exception):
                    # Step 7u: Reacquire retry token if the attempt failed
                    try:
                        retry_token = retry_strategy.refresh_retry_token_for_retry(
                            token_to_renew=retry_token,
                            error_info=self._classify_error(
                                error=context_with_response.response,
                                context=context_with_response,
                            ),
                        )
                    except SmithyRetryException:
                        raise context_with_response.response
                    await sleep(retry_token.retry_delay)
                else:
                    # Step 8: Invoke record_success
                    retry_strategy.record_success(token=retry_token)
                    break
        except Exception as e:
            if context.response is not None:
                logger.exception(
                    f"Exception occurred while handling: {context.response}"
                )
                pass
            context._response = e

        # At this point, the context's request will have been definitively set, and
        # The response will be set either with the modeled output or an exception. The
        # transport_request and transport_response may be set or None.
        execution_context = cast(
            InterceptorContext[Input, Output, HTTPRequest | None, HTTPResponse | None],
            context,
        )
        return await self._finalize_execution(interceptors, execution_context)

    async def _handle_attempt(
        self,
        deserialize: Callable[[HTTPResponse, Config], Awaitable[Output]],
        interceptors: list[Interceptor[Input, Output, HTTPRequest, HTTPResponse]],
        context: InterceptorContext[Input, None, HTTPRequest, None],
        config: Config,
        operation_name: str,
    ) -> InterceptorContext[Input, Output, HTTPRequest, HTTPResponse | None]:
        try:
            # assert config.interceptors is not None
            # Step 7a: Invoke read_before_attempt
            for interceptor in interceptors:
                interceptor.read_before_attempt(context)

            # Step 7b: Invoke service_auth_scheme_resolver.resolve_auth_scheme
            auth_parameters: HTTPAuthParams = HTTPAuthParams(
                operation=operation_name,
            )

            auth_options = config.http_auth_scheme_resolver.resolve_auth_scheme(
                auth_parameters=auth_parameters
            )
            auth_option: HTTPAuthOption | None = None
            for option in auth_options:
                if option.scheme_id in config.http_auth_schemes:
                    auth_option = option

            signer: HTTPSigner[Any, Any] | None = None
            identity: Identity | None = None

            if auth_option:
                auth_scheme = config.http_auth_schemes[auth_option.scheme_id]

                # Step 7c: Invoke auth_scheme.identity_resolver
                identity_resolver = auth_scheme.identity_resolver(config=config)

                # Step 7d: Invoke auth_scheme.signer
                signer = auth_scheme.signer

                # Step 7e: Invoke identity_resolver.get_identity
                identity = await identity_resolver.get_identity(
                    identity_properties=auth_option.identity_properties
                )

            # Step 7f: Invoke endpoint_resolver.resolve_endpoint
            if config.endpoint_uri is None:
                raise ServiceError("No endpoint_uri found on the operation config.")

            endpoint = await config.endpoint_resolver.resolve_endpoint(
                StaticEndpointParams(uri=config.endpoint_uri)
            )
            if not endpoint.uri.path:
                path = ""
            elif endpoint.uri.path.endswith("/"):
                path = endpoint.uri.path[:-1]
            else:
                path = endpoint.uri.path
            if context.transport_request.destination.path:
                path += context.transport_request.destination.path
            context._transport_request.destination = URI(
                scheme=endpoint.uri.scheme,
                host=context.transport_request.destination.host + endpoint.uri.host,
                path=path,
                port=endpoint.uri.port,
                query=context.transport_request.destination.query,
            )
            context._transport_request.fields.extend(endpoint.headers)

            # Step 7g: Invoke modify_before_signing
            for interceptor in interceptors:
                context._transport_request = interceptor.modify_before_signing(context)

            # Step 7h: Invoke read_before_signing
            for interceptor in interceptors:
                interceptor.read_before_signing(context)

            # Step 7i: sign the request
            if auth_option and signer:
                context._transport_request = await signer.sign(
                    http_request=context.transport_request,
                    identity=identity,
                    signing_properties=auth_option.signer_properties,
                )

            # Step 7j: Invoke read_after_signing
            for interceptor in interceptors:
                interceptor.read_after_signing(context)

            # Step 7k: Invoke modify_before_transmit
            for interceptor in interceptors:
                context._transport_request = interceptor.modify_before_transmit(context)

            # Step 7l: Invoke read_before_transmit
            for interceptor in interceptors:
                interceptor.read_before_transmit(context)

            # Step 7m: Invoke http_client.send
            request_config = config.http_request_config or HTTPRequestConfiguration()
            context_with_response = cast(
                InterceptorContext[Input, None, HTTPRequest, HTTPResponse], context
            )
            context_with_response._transport_response = await config.http_client.send(
                request=context_with_response.transport_request,
                request_config=request_config,
            )

            # Step 7n: Invoke read_after_transmit
            for interceptor in interceptors:
                interceptor.read_after_transmit(context_with_response)

            # Step 7o: Invoke modify_before_deserialization
            for interceptor in interceptors:
                context_with_response._transport_response = (
                    interceptor.modify_before_deserialization(context_with_response)
                )

            # Step 7p: Invoke read_before_deserialization
            for interceptor in interceptors:
                interceptor.read_before_deserialization(context_with_response)

            # Step 7q: deserialize
            context_with_output = cast(
                InterceptorContext[Input, Output, HTTPRequest, HTTPResponse],
                context_with_response,
            )
            context_with_output._response = await deserialize(
                context_with_output._transport_response, config
            )

            # Step 7r: Invoke read_after_deserialization
            for interceptor in interceptors:
                interceptor.read_after_deserialization(context_with_output)
        except Exception as e:
            if context.response is not None:
                logger.exception(
                    f"Exception occurred while handling: {context.response}"
                )
                pass
            context._response = e

        # At this point, the context's request and transport_request have definitively been set,
        # the response is either set or an exception, and the transport_resposne is either set or
        # None. This will also be true after _finalize_attempt because there is no opportunity
        # there to set the transport_response.
        attempt_context = cast(
            InterceptorContext[Input, Output, HTTPRequest, HTTPResponse | None], context
        )
        return await self._finalize_attempt(interceptors, attempt_context)

    async def _finalize_attempt(
        self,
        interceptors: list[Interceptor[Input, Output, HTTPRequest, HTTPResponse]],
        context: InterceptorContext[Input, Output, HTTPRequest, HTTPResponse | None],
    ) -> InterceptorContext[Input, Output, HTTPRequest, HTTPResponse | None]:
        # Step 7s: Invoke modify_before_attempt_completion
        try:
            for interceptor in interceptors:
                context._response = interceptor.modify_before_attempt_completion(
                    context
                )
        except Exception as e:
            if context.response is not None:
                logger.exception(
                    f"Exception occurred while handling: {context.response}"
                )
                pass
            context._response = e

        # Step 7t: Invoke read_after_attempt
        for interceptor in interceptors:
            try:
                interceptor.read_after_attempt(context)
            except Exception as e:
                if context.response is not None:
                    logger.exception(
                        f"Exception occurred while handling: {context.response}"
                    )
                    pass
                context._response = e

        return context

    async def _finalize_execution(
        self,
        interceptors: list[Interceptor[Input, Output, HTTPRequest, HTTPResponse]],
        context: InterceptorContext[
            Input, Output, HTTPRequest | None, HTTPResponse | None
        ],
    ) -> Output:
        try:
            # Step 9: Invoke modify_before_completion
            for interceptor in interceptors:
                context._response = interceptor.modify_before_completion(context)

            # Step 10: Invoke trace_probe.dispatch_events
            try:
                pass
            except Exception as e:
                # log and ignore exceptions
                logger.exception(
                    f"Exception occurred while dispatching trace events: {e}"
                )
                pass
        except Exception as e:
            if context.response is not None:
                logger.exception(
                    f"Exception occurred while handling: {context.response}"
                )
                pass
            context._response = e

        # Step 11: Invoke read_after_execution
        for interceptor in interceptors:
            try:
                interceptor.read_after_execution(context)
            except Exception as e:
                if context.response is not None:
                    logger.exception(
                        f"Exception occurred while handling: {context.response}"
                    )
                    pass
                context._response = e

        # Step 12: Return / throw
        if isinstance(context.response, Exception):
            raise context.response

        # We may want to add some aspects of this context to the output types so we can
        # return it to the end-users.
        return context.response
