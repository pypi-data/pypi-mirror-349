[project]
name = "adalib-auth"
version = "1.2.6"
description = "The programmatic tool to authenticate with AdaLab."
keywords = [ "authentication", "keycloak"]

[[project.authors]]
name = "Adamatics ApS"
email = "info@adamatics.com"

[tool.poetry]
name = "adalib-auth"
version = "1.2.6"
description = "The programmatic tool to authenticate with AdaLab."
authors = ["Adamatics ApS <info@adamatics.com>"]
readme = "README.md"
homepage = "https://adamatics.com"
repository = "https://gitlab.com/adamatics/python/adalib-auth"
classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.10",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Typing :: Typed",
]
packages = [
    { include = "adalib_auth" }
]

[tool.poetry.dependencies]
python = "^3.10.0"
python-keycloak = ">=3.3.0"
requests-oauthlib = ">=1.3.1"

[tool.poetry.group.dev.dependencies]
black = ">=23.9.1"
flake8 = ">=6.1.0"
interrogate = ">=1.5.0"
isort = ">=5.12.0"
pre-commit = ">=3.4.0"
pytest = ">=7.4.2"
pytest-cov = ">=4.1.0"
pyproject-flake8 = ">=6.1.0"
requests-mock = ">=1.11.0"
tox = ">=4.11.3"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.isort]
profile = "black"
src_paths = ["adalib_auth", "tests"]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
line_length = 79

[tool.black]
target-version = ["py310"]
include = '\.pyi?$'
line-length = 79

[tool.flake8]
ignore = ["F401", "E203", "E266", "E501", "W503"]
max-complexity = 18
select = ["B","C","E","F","W","T4"]
exclude = [".git",".venv",".tox"]
max-line-length = 79

[tool.pytest]
testpaths = "tests/"

[tool.pytest.ini_options]
addopts = """\
    --cov adalib_auth \
    --cov tests \
    --cov-report term-missing \
    --no-cov-on-fail \
"""

[tool.coverage.report]
fail_under = 100
exclude_lines = [
    'if TYPE_CHECKING:',
    'pragma: no cover'
]

[tool.mypy]
disallow_any_unimported = true
disallow_untyped_defs = true
no_implicit_optional = true
strict_equality = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_return_any = true
check_untyped_defs = true
show_error_codes = true
files = "src/"
ignore_missing_imports = true
