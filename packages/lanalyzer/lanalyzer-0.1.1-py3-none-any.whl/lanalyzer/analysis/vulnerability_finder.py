"""
Vulnerability finder module for enhanced taint analysis.
"""

from typing import Any, Dict, List

from lanalyzer.analysis.visitor import EnhancedTaintAnalysisVisitor


class VulnerabilityFinder:
    """
    Finds vulnerabilities by analyzing taint propagation.
    """

    def __init__(self, tracker):
        """
        Initialize the vulnerability finder.

        Args:
            tracker: The parent tracker instance
        """
        self.tracker = tracker
        self.debug = tracker.debug
        self.config = tracker.config

    def find_vulnerabilities(
        self, visitor: EnhancedTaintAnalysisVisitor, file_path: str
    ) -> List[Dict[str, Any]]:
        """
        Find vulnerabilities using enhanced tracking information.

        Args:
            visitor: EnhancedTaintAnalysisVisitor instance
            file_path: Path to the analyzed file

        Returns:
            List of enhanced vulnerability dictionaries
        """
        vulnerabilities = []

        for sink in visitor.found_sinks:
            for tainted_arg in sink.get("tainted_args", []):
                arg_name, source_info = tainted_arg

                # Find matching rule
                for rule in self.config.get("rules", []):
                    source_name = source_info["name"]
                    sink_name = sink["name"]

                    if self._source_matches_rule(
                        source_name, rule
                    ) and self._sink_matches_rule(sink_name, rule):
                        # Get detailed call chain
                        call_chain = (
                            self.tracker.call_chain_builder.get_detailed_call_chain(
                                visitor, sink, source_info
                            )
                        )

                        # Format message with the actual source name
                        message = rule.get(
                            "message",
                            f"Tainted data from {source_name} flows to {sink_name}",
                        )
                        message = message.replace("{source}", source_name)
                        message = message.replace("{sink}", sink_name)

                        # Build enhanced vulnerability info
                        vulnerability = {
                            "rule": rule.get("name", "UnnamedRule"),
                            "message": message,
                            "file": file_path,
                            "source": {
                                "name": source_name,
                                "line": source_info.get("line", 0),
                                "col": source_info.get("col", 0),
                            },
                            "sink": {
                                "name": sink_name,
                                "line": sink.get("line", 0),
                                "col": sink.get("col", 0),
                            },
                            "tainted_variable": arg_name,
                            "call_chain": call_chain,
                        }

                        vulnerabilities.append(vulnerability)

        return vulnerabilities

    def _source_matches_rule(self, source_name: str, rule: Dict[str, Any]) -> bool:
        """
        Check if a source matches a rule.

        Args:
            source_name: Name of the source
            rule: Rule dictionary

        Returns:
            True if the source matches the rule, False otherwise
        """
        sources = rule.get("sources", [])
        return source_name in sources or "any" in sources

    def _sink_matches_rule(self, sink_name: str, rule: Dict[str, Any]) -> bool:
        """
        Check if a sink matches a rule.

        Args:
            sink_name: Name of the sink
            rule: Rule dictionary

        Returns:
            True if the sink matches the rule, False otherwise
        """
        sinks = rule.get("sinks", [])
        return sink_name in sinks or "any" in sinks
