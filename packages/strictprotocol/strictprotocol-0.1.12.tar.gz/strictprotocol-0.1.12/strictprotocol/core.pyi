from typing import Any
from enum import Enum

class ProtocolError(TypeError): ...
class CheckMode(str, Enum):
    STRICT = ...
    LENIENT = ...
    LOOSE = ...

class StrictProtocol:
    def __init_subclass__(cls, *, mode: CheckMode = ..., raise_exception: bool = ..., **kwargs: Any) -> None: ...

def is_signature_compatible(proto_func, impl_func, *,  mode: CheckMode, class_name: str, method_name: str)->bool: ...
def get_best_effort_annotations(func: Any) -> dict[str, Any]: ...
def is_type_object(obj: Any) -> bool: ...
def is_service_class(obj: Any) -> bool: ...
def safe_subtype(sub: Any, super: Any) -> bool: ...
def safe_isinstance(obj: Any, cls: Any) -> bool: ...
def get_callable_signature(func: Any) -> tuple[tuple[str, ...], dict[str, Any]]: ...


