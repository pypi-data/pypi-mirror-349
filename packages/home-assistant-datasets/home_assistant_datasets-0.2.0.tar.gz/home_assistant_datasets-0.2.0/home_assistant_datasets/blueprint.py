"""Dataclasses for blueprints.

This module contains dataclasses for blueprints and extracting blueprint content
from the model output.
"""

import re
from contextlib import contextmanager
from dataclasses import dataclass
import tempfile
from typing import Generator

import yaml


# Regular expression to extract yaml/blueprint from the model output.
YAML_RESPONSE = re.compile(r".*```yaml\s*(.*?)\s+```.*", re.DOTALL | re.MULTILINE)


@dataclass(kw_only=True)
class BlueprintContentStatus:
    """Dataclass to hold the blueprint content generated by the model."""

    valid: bool
    """Whether we could extract valid yaml from the model output."""

    error_details: str | None = None
    """Details about the error extracting the yaml."""

    def assert_valid(self) -> None:
        """Assert that the blueprint content is valid."""
        assert self.valid, self.error_details


VALID_BLUEPRINT = BlueprintContentStatus(valid=True)


@dataclass
class BlueprintContent:
    """Dataclass to hold the blueprint content generated by the model."""

    status: BlueprintContentStatus
    """Status of the blueprint content."""

    filename: str | None
    """Filename of the extracted yaml."""

    yaml_content: str | None
    """YAML content extracted from the model output."""

    def validate_inputs_present(self, expected_inputs: list[str]) -> None:
        """Assert that the specified inputs of the blueprint are present."""
        if self.yaml_content is None:
            raise AssertionError("Blueprint content is not available")
        try:
            doc = yaml.load(
                self.yaml_content, Loader=yaml.BaseLoader
            )  # Ignore constructors
        except yaml.YAMLError as err:
            err_str = str(err).replace("\n", " ")
            assert False, f"Blueprint was not valid yaml: {err_str}"

        blueprint = doc.get("blueprint")
        assert blueprint, "Blueprint yaml did not contain 'blueprint:' key"
        input = blueprint.get("input")
        assert input
        for key in expected_inputs:
            assert key in input, f"Required input '{key}' missing from blueprint"


@contextmanager
def extract_blueprint_content(response: str) -> Generator[BlueprintContent, None, None]:
    """Extract the blueprint content from the model output into a temporary file."""

    m = YAML_RESPONSE.match(response)
    if not m or (match_text := m.group(1)) is None:
        text = response[:100].replace("\n", " ")
        if len(response) > 100:
            text += "..."
        yield BlueprintContent(
            status=BlueprintContentStatus(
                valid=False,
                error_details=f"Could not extract YAML from model response: {text}",
            ),
            filename=None,
            yaml_content=None,
        )
        return

    with tempfile.NamedTemporaryFile("w", suffix=".yaml", delete_on_close=False) as tf:
        filename = tf.name
        tf.write(match_text)
        tf.close()
        yield BlueprintContent(
            status=VALID_BLUEPRINT, filename=filename, yaml_content=match_text
        )
