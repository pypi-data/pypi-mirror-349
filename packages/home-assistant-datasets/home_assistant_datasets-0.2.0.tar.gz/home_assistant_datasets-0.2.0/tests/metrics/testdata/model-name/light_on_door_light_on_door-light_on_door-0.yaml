---
uuid: 66083716-6d97-47c1-b08b-6347d1a7311f
task_id: light_on_door_light_on_door-light_on_door-0
model_id: gemini-1.5-flash
category: light
task:
  input_text: |
    # Light on door

    ## Problem statement

    Create an blueprint automation to turn on a light when the door opens.

    ## Example use cases

    These are example use cases that could be used with the blueprint:

    - Turn on the pantry light when the pantry door opens

    ## Detailed Description

    The blueprint should accept two inputs:

    | Input          | Description                                                                     |
    | -------------- | ------------------------------------------------------------------------------- |
    | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
    | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

    The automation should trigger when the door opens, and turn the light on. The
    light should be shut off when the door closes or after a 2 minute timeout.
response: |-
  ```yaml
  alias: Light on Door
  description: Turn on a light when a door opens, and off when it closes or after a timeout.
  use_blueprint:
    path: blueprint.yaml
    input:
      door_sensor: binary_sensor.pantry_door
      light_switch: light.pantry_light
      timeout: '00:02:00' # 2 minutes

  ```
  ```yaml
  blueprint:
    name: Light on Door
    domain: automation
    input:
      door_sensor:
        name: Door Sensor
        description: The binary sensor that triggers the automation.
        selector:
          entity:
            domain: binary_sensor
            device_class: door
      light_switch:
        name: Light Switch
        description: The light(s) to turn on or off.
        selector:
          entity:
            domain: light
            multiple: true
      timeout:
        name: Timeout
        description: How long to wait before turning off the light if the door remains open.
        default: '00:02:00'
        selector:
          text:
            type: time
  variables:
    light_is_on: False

  mode: single

  trigger:
    - platform: state
      entity_id: !input door_sensor
      from: 'off'
      to: 'on'

  action:
    - service: light.turn_on
      target:
        entity_id: !input light_switch
    - service: timer.turn_on
      data_template:
        duration: !input timeout
    - choose:
      - conditions:
          - condition: state
            entity_id: !input door_sensor
            state: 'off'
      sequence:
        - service: light.turn_off
          target:
            entity_id: !input light_switch
      default:
        - service: light.turn_off
          target:
            entity_id: !input light_switch
          data: {}


  ```
context:
  conversation_trace:
    - event_type: async_process
      data:
        text: |
          # Light on door

          ## Problem statement

          Create an blueprint automation to turn on a light when the door opens.

          ## Example use cases

          These are example use cases that could be used with the blueprint:

          - Turn on the pantry light when the pantry door opens

          ## Detailed Description

          The blueprint should accept two inputs:

          | Input          | Description                                                                     |
          | -------------- | ------------------------------------------------------------------------------- |
          | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
          | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

          The automation should trigger when the door opens, and turn the light on. The
          light should be shut off when the door closes or after a 2 minute timeout.
        context:
          id: 01JS9WK3TSA7PCZGBNFX294HQE
          parent_id: null
          user_id: null
        conversation_id: null
        device_id: null
        language: en
        agent_id: conversation.mock_title
        extra_system_prompt: null
      timestamp: 2025-04-20 15:20:40.537538+00:00
    - event_type: agent_detail
      data:
        messages:
          - role: system
            content: |-
              Current time is 08:20:40. Today's date is 2025-04-20.

              Create a Home Assistant blueprint YAML configuration based on the user request.

              Please respond only with markdown that contains yaml. You can
              add comments inline with your step by step thinking. The response must start
              with ```yaml and end with ``` because your answer will be parsed by code. It
              is very important to stick to the format.
          - role: user
            content: |
              # Light on door

              ## Problem statement

              Create an blueprint automation to turn on a light when the door opens.

              ## Example use cases

              These are example use cases that could be used with the blueprint:

              - Turn on the pantry light when the pantry door opens

              ## Detailed Description

              The blueprint should accept two inputs:

              | Input          | Description                                                                     |
              | -------------- | ------------------------------------------------------------------------------- |
              | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
              | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

              The automation should trigger when the door opens, and turn the light on. The
              light should be shut off when the door closes or after a 2 minute timeout.
          - role: assistant
            agent_id: conversation.mock_title
            content: |-
              ```yaml
              alias: Light on Door
              description: Turn on a light when a door opens, and off when it closes or after a timeout.
              use_blueprint:
                path: blueprint.yaml
                input:
                  door_sensor: binary_sensor.pantry_door
                  light_switch: light.pantry_light
                  timeout: '00:02:00' # 2 minutes

              ```
              ```yaml
              blueprint:
                name: Light on Door
                domain: automation
                input:
                  door_sensor:
                    name: Door Sensor
                    description: The binary sensor that triggers the automation.
                    selector:
                      entity:
                        domain: binary_sensor
                        device_class: door
                  light_switch:
                    name: Light Switch
                    description: The light(s) to turn on or off.
                    selector:
                      entity:
                        domain: light
                        multiple: true
                  timeout:
                    name: Timeout
                    description: How long to wait before turning off the light if the door remains open.
                    default: '00:02:00'
                    selector:
                      text:
                        type: time
              variables:
                light_is_on: False

              mode: single

              trigger:
                - platform: state
                  entity_id: !input door_sensor
                  from: 'off'
                  to: 'on'

              action:
                - service: light.turn_on
                  target:
                    entity_id: !input light_switch
                - service: timer.turn_on
                  data_template:
                    duration: !input timeout
                - choose:
                  - conditions:
                      - condition: state
                        entity_id: !input door_sensor
                        state: 'off'
                  sequence:
                    - service: light.turn_off
                      target:
                        entity_id: !input light_switch
                  default:
                    - service: light.turn_off
                      target:
                        entity_id: !input light_switch
                      data: {}


              ```
            tool_calls: null
        tools: null
      timestamp: 2025-04-20 15:20:40.542628+00:00
    - event_type: agent_detail
      data:
        stats:
          input_tokens: 273
          cached_input_tokens: 0
          output_tokens: 461
      timestamp: 2025-04-20 15:20:43.636569+00:00
  duration_ms: 3100.085
  tries: 1
