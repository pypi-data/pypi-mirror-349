---
uuid: 524cd932-61c3-4af3-a999-c37b123aff53
task_id: humidity_fan_humidity_fan-humidity_fan-0
model_id: gemini-1.5-flash
category: fan
task:
  input_text: |
    # Humidity Fan

    ## Problem statement

    Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

    ## Example use cases

    These are example use cases that could be used with the blueprint:

    - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
    - Make sure the garage does not get too humid

    ## Detailed Description

    The blueprint should accept two inputs:

    | Input               | Description                                                           |
    | ------------------- | --------------------------------------------------------------------- |
    | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
    | `humidity_level` | A `number` selector to set the value used as the trigger. |
    | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

    The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
    triggered, the fan should be turned off. The fan should also be stopped when the
    sensor goes back down below the desired level. The automation should not try to
    turn the fan on if it is already on, and should not turn the fan off when it is
    already off.
response: |-
  ```yaml
  blueprint:
    name: Humidity Fan
    description: Turn on a fan when humidity goes above a threshold.
    domain: automation
    input:
      humidity_sensor:
        name: Humidity Sensor
        description: The humidity sensor to monitor.
        selector:
          entity:
            domain: sensor
            device_class: humidity
      humidity_level:
        name: Humidity Threshold (%)
        description: Turn on the fan when humidity exceeds this level.
        selector:
          number:
            min: 0
            max: 100
            unit_of_measurement: "%"
      fan_entity:
        name: Fan Entity
        description: The fan to turn on/off.
        selector:
          entity:
            domain: fan
    variables:
      fan_is_on: "{{ is_state(fan_entity, 'on') }}"  #check current state of the fan

  mode: single

  trigger:
    - platform: state
      entity_id: !input humidity_sensor
      attribute: state
      from: "{{ states(humidity_sensor)|float < humidity_level }}"
      to: "{{ states(humidity_sensor)|float >= humidity_level }}" #Triggers when humidity goes above threshold

  action:
    - choose:
        - conditions:
            - condition: state
              entity_id: !input fan_entity
              state: 'off'
          sequence:
            - service: fan.turn_on
              target:
                entity_id: !input fan_entity
        - conditions:
            - condition: state
              entity_id: !input fan_entity
              state: 'on'
          sequence: [] # Do nothing if fan is already on

    - trigger:
        - platform: state
          entity_id: !input humidity_sensor
          attribute: state
          from: "{{ states(humidity_sensor)|float >= humidity_level }}"
          to: "{{ states(humidity_sensor)|float < humidity_level }}" #Triggers when humidity goes below threshold

    - choose:
      - conditions:
          - condition: state
            entity_id: !input fan_entity
            state: 'on'
        sequence:
          - service: fan.turn_off
            target:
              entity_id: !input fan_entity
      - conditions:
          - condition: state
            entity_id: !input fan_entity
            state: 'off'
        sequence: []  # Do nothing if fan is already off

  ```
context:
  conversation_trace:
    - event_type: async_process
      data:
        text: |
          # Humidity Fan

          ## Problem statement

          Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

          ## Example use cases

          These are example use cases that could be used with the blueprint:

          - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
          - Make sure the garage does not get too humid

          ## Detailed Description

          The blueprint should accept two inputs:

          | Input               | Description                                                           |
          | ------------------- | --------------------------------------------------------------------- |
          | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
          | `humidity_level` | A `number` selector to set the value used as the trigger. |
          | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

          The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
          triggered, the fan should be turned off. The fan should also be stopped when the
          sensor goes back down below the desired level. The automation should not try to
          turn the fan on if it is already on, and should not turn the fan off when it is
          already off.
        context:
          id: 01JS9WJZRSE582ZG1HFX5S0PFB
          parent_id: null
          user_id: null
        conversation_id: null
        device_id: null
        language: en
        agent_id: conversation.mock_title
        extra_system_prompt: null
      timestamp: 2025-04-20 15:20:36.377616+00:00
    - event_type: agent_detail
      data:
        messages:
          - role: system
            content: |-
              Current time is 08:20:36. Today's date is 2025-04-20.

              Create a Home Assistant blueprint YAML configuration based on the user request.

              Please respond only with markdown that contains yaml. You can
              add comments inline with your step by step thinking. The response must start
              with ```yaml and end with ``` because your answer will be parsed by code. It
              is very important to stick to the format.
          - role: user
            content: |
              # Humidity Fan

              ## Problem statement

              Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

              ## Example use cases

              These are example use cases that could be used with the blueprint:

              - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
              - Make sure the garage does not get too humid

              ## Detailed Description

              The blueprint should accept two inputs:

              | Input               | Description                                                           |
              | ------------------- | --------------------------------------------------------------------- |
              | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
              | `humidity_level` | A `number` selector to set the value used as the trigger. |
              | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

              The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
              triggered, the fan should be turned off. The fan should also be stopped when the
              sensor goes back down below the desired level. The automation should not try to
              turn the fan on if it is already on, and should not turn the fan off when it is
              already off.
          - role: assistant
            agent_id: conversation.mock_title
            content: |-
              ```yaml
              blueprint:
                name: Humidity Fan
                description: Turn on a fan when humidity goes above a threshold.
                domain: automation
                input:
                  humidity_sensor:
                    name: Humidity Sensor
                    description: The humidity sensor to monitor.
                    selector:
                      entity:
                        domain: sensor
                        device_class: humidity
                  humidity_level:
                    name: Humidity Threshold (%)
                    description: Turn on the fan when humidity exceeds this level.
                    selector:
                      number:
                        min: 0
                        max: 100
                        unit_of_measurement: "%"
                  fan_entity:
                    name: Fan Entity
                    description: The fan to turn on/off.
                    selector:
                      entity:
                        domain: fan
                variables:
                  fan_is_on: "{{ is_state(fan_entity, 'on') }}"  #check current state of the fan

              mode: single

              trigger:
                - platform: state
                  entity_id: !input humidity_sensor
                  attribute: state
                  from: "{{ states(humidity_sensor)|float < humidity_level }}"
                  to: "{{ states(humidity_sensor)|float >= humidity_level }}" #Triggers when humidity goes above threshold

              action:
                - choose:
                    - conditions:
                        - condition: state
                          entity_id: !input fan_entity
                          state: 'off'
                      sequence:
                        - service: fan.turn_on
                          target:
                            entity_id: !input fan_entity
                    - conditions:
                        - condition: state
                          entity_id: !input fan_entity
                          state: 'on'
                      sequence: [] # Do nothing if fan is already on

                - trigger:
                    - platform: state
                      entity_id: !input humidity_sensor
                      attribute: state
                      from: "{{ states(humidity_sensor)|float >= humidity_level }}"
                      to: "{{ states(humidity_sensor)|float < humidity_level }}" #Triggers when humidity goes below threshold

                - choose:
                  - conditions:
                      - condition: state
                        entity_id: !input fan_entity
                        state: 'on'
                    sequence:
                      - service: fan.turn_off
                        target:
                          entity_id: !input fan_entity
                  - conditions:
                      - condition: state
                        entity_id: !input fan_entity
                        state: 'off'
                    sequence: []  # Do nothing if fan is already off

              ```
            tool_calls: null
        tools: null
      timestamp: 2025-04-20 15:20:36.379179+00:00
    - event_type: agent_detail
      data:
        stats:
          input_tokens: 360
          cached_input_tokens: 0
          output_tokens: 560
      timestamp: 2025-04-20 15:20:40.261857+00:00
  duration_ms: 3884.616
  tries: 1
