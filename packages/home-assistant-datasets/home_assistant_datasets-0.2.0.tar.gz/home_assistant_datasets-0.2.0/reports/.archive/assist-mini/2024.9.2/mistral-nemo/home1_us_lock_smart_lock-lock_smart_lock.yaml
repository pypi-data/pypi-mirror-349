---
uuid: 5a72c985-6a7b-4120-821b-e2ef1f8786aa
task_id: home1_us_lock_smart_lock-lock_smart_lock
category: lock
task:
  input_text: Lock smart lock
  expect_changes:
    lock.smart_lock:
      state: locked
      attributes: null
response: "```yaml\nfrom home_assistant.helpers import (\n    entity_registry as er,\n\
  \    validate_color,\n    validate_duration,\n    validate_float,\n    validate_positive_integer,\n\
  )\n\nimport voluptuous as vol\n\nDOMAIN = \"lock\"\nDOMAIN piratedb=piratedb\n\n\
  async def async_setup_entry(hass, config_entry):\n    \"\"\"Set up the PirateDB\
  \ lock platform.\"\"\"\n    await hass.data[DOMAIN][config_entry.entry_id] = MyPirateLock(\n\
  \        hass, config_entry\n    )"
context:
  unexpected_states:
    lock.smart_lock:
      expected:
        state: locked
      got:
        state: unlocked
  conversation_trace:
  - event_type: async_process
    data:
      text: Lock smart lock
      context:
        id: 01J8KJ3BWT6HRZS1P2W5CM1XZ3
        parent_id: null
        user_id: null
      conversation_id: null
      device_id: null
      language: en
      agent_id: conversation.mock_title
  - event_type: agent_detail
    data:
      messages:
      - role: system
        content: "Current time is 20:02:52. Today's date is 2024-09-24.\nYou are a\
          \ voice assistant for Home Assistant.\nAnswer questions about the world\
          \ truthfully.\nAnswer in plain text. Keep it simple and to the point.\n\
          When controlling Home Assistant always call the intent tools. Use HassTurnOn\
          \ to lock and HassTurnOff to unlock a lock. When controlling a device, prefer\
          \ passing just name and domain. When controlling an area, prefer passing\
          \ just area name and domain.\nWhen a user asks to turn on all devices of\
          \ a specific type, ask user to specify an area, unless there is only one\
          \ device of that type.\nThis device is not able to start timers.\nAn overview\
          \ of the areas and the devices in this smart home:\n- names: Smart Lock\n\
          \  domain: binary_sensor\n  state: 'off'\n  areas: Entry\n  attributes:\n\
          \    device_class: lock\n- names: Smart Lock Tamper\n  domain: binary_sensor\n\
          \  state: 'off'\n  areas: Entry\n  attributes:\n    device_class: tamper\n\
          - names: Smart Lock Battery\n  domain: binary_sensor\n  state: 'off'\n \
          \ areas: Entry\n  attributes:\n    device_class: battery\n- names: Smart\
          \ Lock\n  domain: lock\n  state: unlocked\n  areas: Entry\n- names: Smart\
          \ Lock Battery\n  domain: sensor\n  state: '90'\n  areas: Entry\n  attributes:\n\
          \    unit_of_measurement: '%'\n    device_class: battery\n"
      - role: user
        content: Lock smart lock
      - role: assistant
        content: ''
        tool_calls:
        - function:
            name: HassTurnOff
            arguments:
              domain:
              - lock
              name:
              - Smart Lock
      - role: tool
        content: '{"error": "InvalidSlotInfo", "error_text": "Received invalid slot
          info for HassTurnOff"}'
      - role: assistant
        content: "```yaml\nfrom home_assistant.helpers import (\n    entity_registry\
          \ as er,\n    validate_color,\n    validate_duration,\n    validate_float,\n\
          \    validate_positive_integer,\n)\n\nimport voluptuous as vol\n\nDOMAIN\
          \ = \"lock\"\nDOMAIN piratedb=piratedb\n\nasync def async_setup_entry(hass,\
          \ config_entry):\n    \"\"\"Set up the PirateDB lock platform.\"\"\"\n \
          \   await hass.data[DOMAIN][config_entry.entry_id] = MyPirateLock(\n   \
          \     hass, config_entry\n    )"
        tool_calls: null
  - event_type: tool_call
    data:
      tool_name: HassTurnOff
      tool_args:
        domain:
        - lock
        name:
        - Smart Lock
  tries: 0
