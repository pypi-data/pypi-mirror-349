---
uuid: 4b582e15-5aaf-4854-8d59-6ff8eacb1eeb
task_id: humidity_fan_humidity_fan-humidity_fan-1
model_id: null
category: fan
task:
  input_text: |
    # Humidity Fan

    ## Problem statement

    Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

    ## Example use cases

    These are example use cases that could be used with the blueprint:

    - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
    - Make sure the garage does not get too humid

    ## Detailed Description

    The blueprint should accept two inputs:

    | Input               | Description                                                           |
    | ------------------- | --------------------------------------------------------------------- |
    | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
    | `humidity_level` | A `number` selector to set the value used as the trigger. |
    | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

    The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
    triggered, the fan should be turned off. The fan should also be stopped when the
    sensor goes back down below the desired level. The automation should not try to
    turn the fan on if it is already on, and should not turn the fan off when it is
    already off.
response: "```yaml\nblueprint:\n  name: Humidity Fan\n  description: Turn on a fan\
  \ when humidity is too high.\n  domain: automation\n  input:\n    humidity_sensor:\n\
  \      name: Humidity Sensor\n      description: The humidity sensor to monitor.\n\
  \      selector:\n        entity:\n          domain: sensor\n    humidity_level:\n\
  \      name: Humidity Level\n      description: The humidity level to trigger the\
  \ fan at.\n      selector:\n        number:\n          min: 0\n          max: 100\n\
  \          step: 1\n          unit_of_measurement: '%'\n    fan_entity:\n      name:\
  \ Fan Entity\n      description: The fan to turn on when humidity is too high.\n\
  \      selector:\n        entity:\n          domain: fan\n\ntrigger:\n  platform:\
  \ numeric_state\n  entity_id: !input humidity_sensor\n  above: !input humidity_level\n\
  \naction:\n  - choose:\n      # If the fan is off, turn it on\n      - conditions:\n\
  \          - condition: state\n            entity_id: !input fan_entity\n      \
  \      state: 'off'\n        sequence:\n          - service: fan.turn_on\n     \
  \       target:\n              entity_id: !input fan_entity\n      # If the fan\
  \ is on, do nothing\n      - conditions:\n          - condition: state\n       \
  \     entity_id: !input fan_entity\n            state: 'on'\n        sequence: []\n\
  \      \n  # Turn the fan off when the humidity drops below the set level  \n  -\
  \ wait_for_trigger:\n      platform: numeric_state\n      entity_id: !input humidity_sensor\n\
  \      below: !input humidity_level\n    sequence:\n      - service: fan.turn_off\n\
  \        target:\n          entity_id: !input fan_entity\n        \nmode: single\n\
  ```\n\nIn this blueprint, we define three input variables:\n\n1. `humidity_sensor`:\
  \ The sensor entity that will be used to monitor the humidity level.\n2. `humidity_level`:\
  \ The humidity level threshold that will trigger the fan to turn on.\n3. `fan_entity`:\
  \ The fan entity that will be turned on when the humidity is too high.\n\nThe blueprint\
  \ uses the `numeric_state` trigger to monitor the `humidity_sensor` entity. When\
  \ the sensor value goes above the `humidity_level`, the automation will run.\n\n\
  The action section first checks the state of the `fan_entity`. If the fan is off,\
  \ it will turn the fan on. If the fan is already on, it will do nothing.\n\nThe\
  \ automation then waits for the `humidity_sensor` to go back below the `humidity_level`,\
  \ and then turns the fan off.\n\nThe `mode: single` setting ensures that the automation\
  \ will only run once per trigger, and will not continuously run as long as the humidity\
  \ is above the set level."
context:
  conversation_trace:
  - event_type: async_process
    data:
      text: |
        # Humidity Fan

        ## Problem statement

        Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

        ## Example use cases

        These are example use cases that could be used with the blueprint:

        - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
        - Make sure the garage does not get too humid

        ## Detailed Description

        The blueprint should accept two inputs:

        | Input               | Description                                                           |
        | ------------------- | --------------------------------------------------------------------- |
        | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
        | `humidity_level` | A `number` selector to set the value used as the trigger. |
        | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

        The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
        triggered, the fan should be turned off. The fan should also be stopped when the
        sensor goes back down below the desired level. The automation should not try to
        turn the fan on if it is already on, and should not turn the fan off when it is
        already off.
      context:
        id: 01JMTN8YGB9729V8D9HN7ZCBW8
        parent_id: null
        user_id: null
      conversation_id: null
      device_id: null
      language: en
      agent_id: conversation.mock_title
      extra_system_prompt: null
  - event_type: agent_detail
    data:
      system: |-
        Current time is 16:21:23. Today's date is 2025-02-23.

        Create a Home Assistant blueprint YAML configuration based on the user request.

        Please respond only with markdown that contains yaml. You can
        add comments inline with your step by step thinking. The response must start
        with ```yaml and end with ``` because your answer will be parsed by code. It
        is very important to stick to the format.
      messages:
      - role: user
        content: |
          # Humidity Fan

          ## Problem statement

          Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

          ## Example use cases

          These are example use cases that could be used with the blueprint:

          - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
          - Make sure the garage does not get too humid

          ## Detailed Description

          The blueprint should accept two inputs:

          | Input               | Description                                                           |
          | ------------------- | --------------------------------------------------------------------- |
          | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
          | `humidity_level` | A `number` selector to set the value used as the trigger. |
          | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

          The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
          triggered, the fan should be turned off. The fan should also be stopped when the
          sensor goes back down below the desired level. The automation should not try to
          turn the fan on if it is already on, and should not turn the fan off when it is
          already off.
      - role: assistant
        content:
        - type: text
          text: "```yaml\nblueprint:\n  name: Humidity Fan\n  description: Turn on\
            \ a fan when humidity is too high.\n  domain: automation\n  input:\n \
            \   humidity_sensor:\n      name: Humidity Sensor\n      description:\
            \ The humidity sensor to monitor.\n      selector:\n        entity:\n\
            \          domain: sensor\n    humidity_level:\n      name: Humidity Level\n\
            \      description: The humidity level to trigger the fan at.\n      selector:\n\
            \        number:\n          min: 0\n          max: 100\n          step:\
            \ 1\n          unit_of_measurement: '%'\n    fan_entity:\n      name:\
            \ Fan Entity\n      description: The fan to turn on when humidity is too\
            \ high.\n      selector:\n        entity:\n          domain: fan\n\ntrigger:\n\
            \  platform: numeric_state\n  entity_id: !input humidity_sensor\n  above:\
            \ !input humidity_level\n\naction:\n  - choose:\n      # If the fan is\
            \ off, turn it on\n      - conditions:\n          - condition: state\n\
            \            entity_id: !input fan_entity\n            state: 'off'\n\
            \        sequence:\n          - service: fan.turn_on\n            target:\n\
            \              entity_id: !input fan_entity\n      # If the fan is on,\
            \ do nothing\n      - conditions:\n          - condition: state\n    \
            \        entity_id: !input fan_entity\n            state: 'on'\n     \
            \   sequence: []\n      \n  # Turn the fan off when the humidity drops\
            \ below the set level  \n  - wait_for_trigger:\n      platform: numeric_state\n\
            \      entity_id: !input humidity_sensor\n      below: !input humidity_level\n\
            \    sequence:\n      - service: fan.turn_off\n        target:\n     \
            \     entity_id: !input fan_entity\n        \nmode: single\n```\n\nIn\
            \ this blueprint, we define three input variables:\n\n1. `humidity_sensor`:\
            \ The sensor entity that will be used to monitor the humidity level.\n\
            2. `humidity_level`: The humidity level threshold that will trigger the\
            \ fan to turn on.\n3. `fan_entity`: The fan entity that will be turned\
            \ on when the humidity is too high.\n\nThe blueprint uses the `numeric_state`\
            \ trigger to monitor the `humidity_sensor` entity. When the sensor value\
            \ goes above the `humidity_level`, the automation will run.\n\nThe action\
            \ section first checks the state of the `fan_entity`. If the fan is off,\
            \ it will turn the fan on. If the fan is already on, it will do nothing.\n\
            \nThe automation then waits for the `humidity_sensor` to go back below\
            \ the `humidity_level`, and then turns the fan off.\n\nThe `mode: single`\
            \ setting ensures that the automation will only run once per trigger,\
            \ and will not continuously run as long as the humidity is above the set\
            \ level."
  tries: 0
