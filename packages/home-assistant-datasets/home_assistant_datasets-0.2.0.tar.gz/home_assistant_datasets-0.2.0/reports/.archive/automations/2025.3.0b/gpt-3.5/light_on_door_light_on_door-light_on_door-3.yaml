---
uuid: b83302ae-c3e7-4283-a542-f2c9d9923df9
task_id: light_on_door_light_on_door-light_on_door-3
model_id: null
category: light
task:
  input_text: |
    # Light on door

    ## Problem statement

    Create an blueprint automation to turn on a light when the door opens.

    ## Example use cases

    These are example use cases that could be used with the blueprint:

    - Turn on the pantry light when the pantry door opens

    ## Detailed Description

    The blueprint should accept two inputs:

    | Input          | Description                                                                     |
    | -------------- | ------------------------------------------------------------------------------- |
    | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
    | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

    The automation should trigger when the door opens, and turn the light on. The
    light should be shut off when the door closes or after a 2 minute timeout.
response: |-
  ```yaml
  blueprint:
    name: Light on Door
    description: Turn on a light when the door opens and turn it off when the door closes or after a timeout.
    domain: automation
    input:
      door_sensor:
        name: Door Sensor
        description: The binary sensor that triggers the automation.
        selector:
          entity:
            domain: binary_sensor
      light_switch:
        name: Light Switch
        description: The light entities to turn on or off.
        selector:
          target:
            entity:
              domain: light

  mode: restart
  max_exceeded: silent

  trigger:
    platform: state
    entity_id: !input 'door_sensor'
    to: 'on'

  action:
    - service: light.turn_on
      target: !input 'light_switch'

  # Turn off light when the door is closed or after a 2 minute timeout
  # This is achieved by setting up additional triggers
  # If the door closes, turn off the light immediately
  # If the light is on for 2 minutes, turn it off
  # If the door opens again during the 2 minutes, reset the timeout
  # Multiple conditions are used to handle these cases

  condition: []

  # Timeout to turn off the light after 2 minutes of the door opening
  timeout: '00:02:00'

  # Additional triggers for turning off the light
  cleanup:
    - service: light.turn_off
      target: !input 'light_switch'
    - service: automation.turn_off
  ```
context:
  conversation_trace:
  - event_type: async_process
    data:
      text: |
        # Light on door

        ## Problem statement

        Create an blueprint automation to turn on a light when the door opens.

        ## Example use cases

        These are example use cases that could be used with the blueprint:

        - Turn on the pantry light when the pantry door opens

        ## Detailed Description

        The blueprint should accept two inputs:

        | Input          | Description                                                                     |
        | -------------- | ------------------------------------------------------------------------------- |
        | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
        | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

        The automation should trigger when the door opens, and turn the light on. The
        light should be shut off when the door closes or after a 2 minute timeout.
      context:
        id: 01JMTP9RG47SDW3G8TERVHYJ70
        parent_id: null
        user_id: null
      conversation_id: null
      device_id: null
      language: en
      agent_id: conversation.mock_title
      extra_system_prompt: null
  - event_type: agent_detail
    data:
      messages:
      - role: system
        agent_id: conversation.mock_title
        content: |-
          Current time is 16:39:18. Today's date is 2025-02-23.

          Create a Home Assistant blueprint YAML configuration based on the user request.

          Please respond only with markdown that contains yaml. You can
          add comments inline with your step by step thinking. The response must start
          with ```yaml and end with ``` because your answer will be parsed by code. It
          is very important to stick to the format.
      - role: user
        agent_id: conversation.mock_title
        content: |
          # Light on door

          ## Problem statement

          Create an blueprint automation to turn on a light when the door opens.

          ## Example use cases

          These are example use cases that could be used with the blueprint:

          - Turn on the pantry light when the pantry door opens

          ## Detailed Description

          The blueprint should accept two inputs:

          | Input          | Description                                                                     |
          | -------------- | ------------------------------------------------------------------------------- |
          | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
          | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

          The automation should trigger when the door opens, and turn the light on. The
          light should be shut off when the door closes or after a 2 minute timeout.
      - role: assistant
        agent_id: conversation.mock_title
        content: |-
          ```yaml
          blueprint:
            name: Light on Door
            description: Turn on a light when the door opens and turn it off when the door closes or after a timeout.
            domain: automation
            input:
              door_sensor:
                name: Door Sensor
                description: The binary sensor that triggers the automation.
                selector:
                  entity:
                    domain: binary_sensor
              light_switch:
                name: Light Switch
                description: The light entities to turn on or off.
                selector:
                  target:
                    entity:
                      domain: light

          mode: restart
          max_exceeded: silent

          trigger:
            platform: state
            entity_id: !input 'door_sensor'
            to: 'on'

          action:
            - service: light.turn_on
              target: !input 'light_switch'

          # Turn off light when the door is closed or after a 2 minute timeout
          # This is achieved by setting up additional triggers
          # If the door closes, turn off the light immediately
          # If the light is on for 2 minutes, turn it off
          # If the door opens again during the 2 minutes, reset the timeout
          # Multiple conditions are used to handle these cases

          condition: []

          # Timeout to turn off the light after 2 minutes of the door opening
          timeout: '00:02:00'

          # Additional triggers for turning off the light
          cleanup:
            - service: light.turn_off
              target: !input 'light_switch'
            - service: automation.turn_off
          ```
      tools: null
  tries: 0
