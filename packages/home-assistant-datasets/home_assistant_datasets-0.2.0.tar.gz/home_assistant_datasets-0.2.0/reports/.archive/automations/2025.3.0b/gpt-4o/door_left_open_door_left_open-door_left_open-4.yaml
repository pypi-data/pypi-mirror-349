---
uuid: bb86eaed-ea20-4e39-b631-3618c758b7be
task_id: door_left_open_door_left_open-door_left_open-4
model_id: null
category: media_player
task:
  input_text: |
    # Door left open

    ## Problem statement

    Create an blueprint automation to play an alert on the speaker when the door is
    left open.

    ## Example use cases

    These are example use cases that could be used with the blueprint:

    - Play an message on the living room speaker if the garage door has been left open for more than 30 minutes
    - When the front door is ajar for 5 minutes, play a sound on the kitchen bluetooth speaker.

    ## Detailed Description

    The blueprint should accept two inputs:

    | Input           | Selector Type | Description                                                                           |
    | --------------- | ------------- | ------------------------------------------------------------------------------------- |
    | `door_sensor`   | `entity`      | A `binary_sensor` entity selector door sensor that is the target of the automation.   |
    | `alert_media`   | `media`       | The target for the `media` selector for the media player and media id with the alter. |
    | `open_duration` | `duration`    | A `duration` selector, the amount of time before playing the alert.                   |

    The automation should play the selected media when the door has been open for the specified duration.
response: "```yaml\nblueprint:\n  name: Door Left Open Alert\n  description: Play\
  \ an alert on a speaker when a door is left open for a specified duration.\n  domain:\
  \ automation\n  input:\n    door_sensor:\n      name: Door Sensor\n      description:\
  \ The binary sensor that indicates if the door is open or closed.\n      selector:\n\
  \        entity:\n          domain: binary_sensor\n    \n    alert_media:\n    \
  \  name: Alert Media\n      description: The media player to use and the media to\
  \ play when the door is left open.\n      selector:\n        media:\n    \n    open_duration:\n\
  \      name: Open Duration\n      description: The amount of time the door should\
  \ be left open before the alert is triggered.\n      selector:\n        duration:\n\
  \nmode: single\n\ntrigger:\n  # Trigger when the door sensor state goes from 'off'\
  \ to 'on', indicating the door is opened\n  - platform: state\n    entity_id: !input\
  \ door_sensor\n    to: 'on'\n    for: !input open_duration\n\naction:\n  # Play\
  \ the selected alert on the media player\n  - service: media_player.play_media\n\
  \    data:\n      entity_id: !input alert_media\n      media_content_id: \"{{ state_attr(alert_media,\
  \ 'media_content_id') }}\"\n      media_content_type: \"{{ state_attr(alert_media,\
  \ 'media_content_type') }}\"\n\n# Ensure the action only occurs if the door is still\
  \ open after the specified duration\ncondition:\n  - condition: state\n    entity_id:\
  \ !input door_sensor\n    state: 'on'\n```\n\nHere's a step-by-step explanation\
  \ of the automation:\n\n1. **Blueprint Definition**: The blueprint approach allows\
  \ for reusable automations that can be adapted with different inputs.\n2. **Inputs**:\n\
  \   - `door_sensor`: Allows users to select the binary sensor representing the door's\
  \ status.\n   - `alert_media`: Allows users to choose a media player and the media\
  \ content to play the alert.\n   - `open_duration`: A customizable duration after\
  \ which the alert is triggered if the door remains open.\n3. **Trigger**: The automation\
  \ is triggered when the `door_sensor` changes to 'on' (indicating an open state)\
  \ and remains open for the specified `open_duration`.\n4. **Action**: It uses the\
  \ `media_player.play_media` service to play the selected media content.\n5. **Condition**:\
  \ Checks if the door is still open after the specified duration before executing\
  \ the action, preventing unnecessary alerts if the door is closed within the timeframe.\n\
  ```"
context:
  conversation_trace:
  - event_type: async_process
    data:
      text: |
        # Door left open

        ## Problem statement

        Create an blueprint automation to play an alert on the speaker when the door is
        left open.

        ## Example use cases

        These are example use cases that could be used with the blueprint:

        - Play an message on the living room speaker if the garage door has been left open for more than 30 minutes
        - When the front door is ajar for 5 minutes, play a sound on the kitchen bluetooth speaker.

        ## Detailed Description

        The blueprint should accept two inputs:

        | Input           | Selector Type | Description                                                                           |
        | --------------- | ------------- | ------------------------------------------------------------------------------------- |
        | `door_sensor`   | `entity`      | A `binary_sensor` entity selector door sensor that is the target of the automation.   |
        | `alert_media`   | `media`       | The target for the `media` selector for the media player and media id with the alter. |
        | `open_duration` | `duration`    | A `duration` selector, the amount of time before playing the alert.                   |

        The automation should play the selected media when the door has been open for the specified duration.
      context:
        id: 01JMTPG3QWQZ27F8H7PG7ND0YM
        parent_id: null
        user_id: null
      conversation_id: null
      device_id: null
      language: en
      agent_id: conversation.mock_title
      extra_system_prompt: null
  - event_type: agent_detail
    data:
      messages:
      - role: system
        agent_id: conversation.mock_title
        content: |-
          Current time is 16:42:46. Today's date is 2025-02-23.

          Create a Home Assistant blueprint YAML configuration based on the user request.

          Please respond only with markdown that contains yaml. You can
          add comments inline with your step by step thinking. The response must start
          with ```yaml and end with ``` because your answer will be parsed by code. It
          is very important to stick to the format.
      - role: user
        agent_id: conversation.mock_title
        content: |
          # Door left open

          ## Problem statement

          Create an blueprint automation to play an alert on the speaker when the door is
          left open.

          ## Example use cases

          These are example use cases that could be used with the blueprint:

          - Play an message on the living room speaker if the garage door has been left open for more than 30 minutes
          - When the front door is ajar for 5 minutes, play a sound on the kitchen bluetooth speaker.

          ## Detailed Description

          The blueprint should accept two inputs:

          | Input           | Selector Type | Description                                                                           |
          | --------------- | ------------- | ------------------------------------------------------------------------------------- |
          | `door_sensor`   | `entity`      | A `binary_sensor` entity selector door sensor that is the target of the automation.   |
          | `alert_media`   | `media`       | The target for the `media` selector for the media player and media id with the alter. |
          | `open_duration` | `duration`    | A `duration` selector, the amount of time before playing the alert.                   |

          The automation should play the selected media when the door has been open for the specified duration.
      - role: assistant
        agent_id: conversation.mock_title
        content: "```yaml\nblueprint:\n  name: Door Left Open Alert\n  description:\
          \ Play an alert on a speaker when a door is left open for a specified duration.\n\
          \  domain: automation\n  input:\n    door_sensor:\n      name: Door Sensor\n\
          \      description: The binary sensor that indicates if the door is open\
          \ or closed.\n      selector:\n        entity:\n          domain: binary_sensor\n\
          \    \n    alert_media:\n      name: Alert Media\n      description: The\
          \ media player to use and the media to play when the door is left open.\n\
          \      selector:\n        media:\n    \n    open_duration:\n      name:\
          \ Open Duration\n      description: The amount of time the door should be\
          \ left open before the alert is triggered.\n      selector:\n        duration:\n\
          \nmode: single\n\ntrigger:\n  # Trigger when the door sensor state goes\
          \ from 'off' to 'on', indicating the door is opened\n  - platform: state\n\
          \    entity_id: !input door_sensor\n    to: 'on'\n    for: !input open_duration\n\
          \naction:\n  # Play the selected alert on the media player\n  - service:\
          \ media_player.play_media\n    data:\n      entity_id: !input alert_media\n\
          \      media_content_id: \"{{ state_attr(alert_media, 'media_content_id')\
          \ }}\"\n      media_content_type: \"{{ state_attr(alert_media, 'media_content_type')\
          \ }}\"\n\n# Ensure the action only occurs if the door is still open after\
          \ the specified duration\ncondition:\n  - condition: state\n    entity_id:\
          \ !input door_sensor\n    state: 'on'\n```\n\nHere's a step-by-step explanation\
          \ of the automation:\n\n1. **Blueprint Definition**: The blueprint approach\
          \ allows for reusable automations that can be adapted with different inputs.\n\
          2. **Inputs**:\n   - `door_sensor`: Allows users to select the binary sensor\
          \ representing the door's status.\n   - `alert_media`: Allows users to choose\
          \ a media player and the media content to play the alert.\n   - `open_duration`:\
          \ A customizable duration after which the alert is triggered if the door\
          \ remains open.\n3. **Trigger**: The automation is triggered when the `door_sensor`\
          \ changes to 'on' (indicating an open state) and remains open for the specified\
          \ `open_duration`.\n4. **Action**: It uses the `media_player.play_media`\
          \ service to play the selected media content.\n5. **Condition**: Checks\
          \ if the door is still open after the specified duration before executing\
          \ the action, preventing unnecessary alerts if the door is closed within\
          \ the timeframe.\n```"
      tools: null
  tries: 0
