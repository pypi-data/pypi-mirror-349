---
uuid: 72d48ee4-940c-48e2-b760-b90e629332cf
task_id: light_on_door_light_on_door-light_on_door-0
model_id: null
category: light
task:
  input_text: |
    # Light on door

    ## Problem statement

    Create an blueprint automation to turn on a light when the door opens.

    ## Example use cases

    These are example use cases that could be used with the blueprint:

    - Turn on the pantry light when the pantry door opens

    ## Detailed Description

    The blueprint should accept two inputs:

    | Input          | Description                                                                     |
    | -------------- | ------------------------------------------------------------------------------- |
    | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
    | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

    The automation should trigger when the door opens, and turn the light on. The
    light should be shut off when the door closes or after a 2 minute timeout.
response: |-
  ```yaml
  blueprint:
    name: Door Light Control
    description: Turn on a light when a door opens, with automatic shut-off
    domain: automation
    input:
      door_sensor:
        name: Door Sensor
        description: Binary sensor for door state
        selector:
          entity:
            domain: binary_sensor
      light_switch:
        name: Light(s) to Control
        description: Light(s) to turn on when door opens
        selector:
          target:
            entity:
              domain: light

  trigger:
    # Trigger when door opens (changes from closed to open)
    - platform: state
      entity_id: !input door_sensor
      from: 'off'
      to: 'on'

  action:
    # Turn on the specified light(s)
    - service: light.turn_on
      target: !input light_switch

    # Create a timer to turn off lights after 2 minutes
    - delay:
        minutes: 2

    # Check if door is still open before turning off
    - condition: state
      entity_id: !input door_sensor
      state: 'on'

    # Turn off the light if door is still open after 2 minutes
    - service: light.turn_off
      target: !input light_switch

  # Optional: Also turn off light when door closes
  mode: restart
  max_exceeded: silent
  ```
context:
  conversation_trace:
  - event_type: async_process
    data:
      text: |
        # Light on door

        ## Problem statement

        Create an blueprint automation to turn on a light when the door opens.

        ## Example use cases

        These are example use cases that could be used with the blueprint:

        - Turn on the pantry light when the pantry door opens

        ## Detailed Description

        The blueprint should accept two inputs:

        | Input          | Description                                                                     |
        | -------------- | ------------------------------------------------------------------------------- |
        | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
        | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

        The automation should trigger when the door opens, and turn the light on. The
        light should be shut off when the door closes or after a 2 minute timeout.
      context:
        id: 01JMTMV9JKXGBD3XM104R4K822
        parent_id: null
        user_id: null
      conversation_id: null
      device_id: null
      language: en
      agent_id: conversation.mock_title
      extra_system_prompt: null
  - event_type: agent_detail
    data:
      system: |-
        Current time is 16:13:56. Today's date is 2025-02-23.

        Create a Home Assistant blueprint YAML configuration based on the user request.

        Please respond only with markdown that contains yaml. You can
        add comments inline with your step by step thinking. The response must start
        with ```yaml and end with ``` because your answer will be parsed by code. It
        is very important to stick to the format.
      messages:
      - role: user
        content: |
          # Light on door

          ## Problem statement

          Create an blueprint automation to turn on a light when the door opens.

          ## Example use cases

          These are example use cases that could be used with the blueprint:

          - Turn on the pantry light when the pantry door opens

          ## Detailed Description

          The blueprint should accept two inputs:

          | Input          | Description                                                                     |
          | -------------- | ------------------------------------------------------------------------------- |
          | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
          | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

          The automation should trigger when the door opens, and turn the light on. The
          light should be shut off when the door closes or after a 2 minute timeout.
      - role: assistant
        content:
        - type: text
          text: |-
            ```yaml
            blueprint:
              name: Door Light Control
              description: Turn on a light when a door opens, with automatic shut-off
              domain: automation
              input:
                door_sensor:
                  name: Door Sensor
                  description: Binary sensor for door state
                  selector:
                    entity:
                      domain: binary_sensor
                light_switch:
                  name: Light(s) to Control
                  description: Light(s) to turn on when door opens
                  selector:
                    target:
                      entity:
                        domain: light

            trigger:
              # Trigger when door opens (changes from closed to open)
              - platform: state
                entity_id: !input door_sensor
                from: 'off'
                to: 'on'

            action:
              # Turn on the specified light(s)
              - service: light.turn_on
                target: !input light_switch

              # Create a timer to turn off lights after 2 minutes
              - delay:
                  minutes: 2

              # Check if door is still open before turning off
              - condition: state
                entity_id: !input door_sensor
                state: 'on'

              # Turn off the light if door is still open after 2 minutes
              - service: light.turn_off
                target: !input light_switch

            # Optional: Also turn off light when door closes
            mode: restart
            max_exceeded: silent
            ```
  tries: 0
