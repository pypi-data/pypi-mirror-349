---
uuid: 2be20dc4-d288-432a-bc91-77a0df5b9266
task_id: light_on_door_light_on_door-light_on_door-4
model_id: null
category: light
task:
  input_text: |
    # Light on door

    ## Problem statement

    Create an blueprint automation to turn on a light when the door opens.

    ## Example use cases

    These are example use cases that could be used with the blueprint:

    - Turn on the pantry light when the pantry door opens

    ## Detailed Description

    The blueprint should accept two inputs:

    | Input          | Description                                                                     |
    | -------------- | ------------------------------------------------------------------------------- |
    | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
    | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

    The automation should trigger when the door opens, and turn the light on. The
    light should be shut off when the door closes or after a 2 minute timeout.
response: |-
  ```yaml
  blueprint:
    name: Light on Door
    description: Turn on a light when the door opens and turn it off when the door closes or after a timeout.
    domain: automation
    source_url: https://github.com/home-assistant/core

  input:
    door_sensor:
      name: Door Sensor
      description: "The binary sensor that triggers the automation."
      selector:
        entity:
          domain: binary_sensor

    light_switch:
      name: Light Switch
      description: "The light entity to turn on/off."
      selector:
        target:
          entity:
            domain: light

  mode: restart

  trigger:
    platform: state
    entity_id: !input door_sensor
    to: "on"

  action:
    - choose:
        - conditions:
            - condition: state
              entity_id: !input door_sensor
              state: "off"
          sequence:
            - service: light.turn_off
              target: !input light_switch
        - conditions:
            - condition: state
              entity_id: !input door_sensor
              state: "on"
            - condition: template
              value_template: "{{ not is_state(input_datetime.timer, 'idle') }}"
          sequence:
            - service: light.turn_on
              target: !input light_switch
            - service: input_datetime.set_datetime
              target:
                entity_id: input_datetime.timer
              data:
                timestamp: "{{ as_timestamp(now()) + 120 }}"
    - delay: "00:02:00"
    - condition: state
      entity_id: !input door_sensor
      state: "off"
    - service: light.turn_off
      target: !input light_switch
  ```
context:
  conversation_trace:
  - event_type: async_process
    data:
      text: |
        # Light on door

        ## Problem statement

        Create an blueprint automation to turn on a light when the door opens.

        ## Example use cases

        These are example use cases that could be used with the blueprint:

        - Turn on the pantry light when the pantry door opens

        ## Detailed Description

        The blueprint should accept two inputs:

        | Input          | Description                                                                     |
        | -------------- | ------------------------------------------------------------------------------- |
        | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
        | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

        The automation should trigger when the door opens, and turn the light on. The
        light should be shut off when the door closes or after a 2 minute timeout.
      context:
        id: 01JMTP9TQVP1QPFZ3DWBY3M6NP
        parent_id: null
        user_id: null
      conversation_id: null
      device_id: null
      language: en
      agent_id: conversation.mock_title
      extra_system_prompt: null
  - event_type: agent_detail
    data:
      messages:
      - role: system
        agent_id: conversation.mock_title
        content: |-
          Current time is 16:39:21. Today's date is 2025-02-23.

          Create a Home Assistant blueprint YAML configuration based on the user request.

          Please respond only with markdown that contains yaml. You can
          add comments inline with your step by step thinking. The response must start
          with ```yaml and end with ``` because your answer will be parsed by code. It
          is very important to stick to the format.
      - role: user
        agent_id: conversation.mock_title
        content: |
          # Light on door

          ## Problem statement

          Create an blueprint automation to turn on a light when the door opens.

          ## Example use cases

          These are example use cases that could be used with the blueprint:

          - Turn on the pantry light when the pantry door opens

          ## Detailed Description

          The blueprint should accept two inputs:

          | Input          | Description                                                                     |
          | -------------- | ------------------------------------------------------------------------------- |
          | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
          | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

          The automation should trigger when the door opens, and turn the light on. The
          light should be shut off when the door closes or after a 2 minute timeout.
      - role: assistant
        agent_id: conversation.mock_title
        content: |-
          ```yaml
          blueprint:
            name: Light on Door
            description: Turn on a light when the door opens and turn it off when the door closes or after a timeout.
            domain: automation
            source_url: https://github.com/home-assistant/core

          input:
            door_sensor:
              name: Door Sensor
              description: "The binary sensor that triggers the automation."
              selector:
                entity:
                  domain: binary_sensor

            light_switch:
              name: Light Switch
              description: "The light entity to turn on/off."
              selector:
                target:
                  entity:
                    domain: light

          mode: restart

          trigger:
            platform: state
            entity_id: !input door_sensor
            to: "on"

          action:
            - choose:
                - conditions:
                    - condition: state
                      entity_id: !input door_sensor
                      state: "off"
                  sequence:
                    - service: light.turn_off
                      target: !input light_switch
                - conditions:
                    - condition: state
                      entity_id: !input door_sensor
                      state: "on"
                    - condition: template
                      value_template: "{{ not is_state(input_datetime.timer, 'idle') }}"
                  sequence:
                    - service: light.turn_on
                      target: !input light_switch
                    - service: input_datetime.set_datetime
                      target:
                        entity_id: input_datetime.timer
                      data:
                        timestamp: "{{ as_timestamp(now()) + 120 }}"
            - delay: "00:02:00"
            - condition: state
              entity_id: !input door_sensor
              state: "off"
            - service: light.turn_off
              target: !input light_switch
          ```
      tools: null
  tries: 0
