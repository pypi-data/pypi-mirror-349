---
uuid: 855855be-0432-4121-9627-4aaa830298ee
task_id: humidity_fan_humidity_fan-humidity_fan-3
model_id: null
category: fan
task:
  input_text: |
    # Humidity Fan

    ## Problem statement

    Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

    ## Example use cases

    These are example use cases that could be used with the blueprint:

    - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
    - Make sure the garage does not get too humid

    ## Detailed Description

    The blueprint should accept two inputs:

    | Input               | Description                                                           |
    | ------------------- | --------------------------------------------------------------------- |
    | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
    | `humidity_level` | A `number` selector to set the value used as the trigger. |
    | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

    The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
    triggered, the fan should be turned off. The fan should also be stopped when the
    sensor goes back down below the desired level. The automation should not try to
    turn the fan on if it is already on, and should not turn the fan off when it is
    already off.
response: "```yaml\nblueprint:\n  name: Humidity Controlled Fan\n  description: >-\n\
  \    Turn on a fan when the humidity exceeds a specified threshold from a \n   \
  \ humidity sensor, and turn it off when humidity falls below the threshold.\n  domain:\
  \ automation\n  input:\n    humidity_sensor:\n      name: Humidity Sensor\n    \
  \  description: A sensor entity that provides the humidity level.\n      selector:\n\
  \        entity:\n          domain: sensor\n    humidity_level:\n      name: Humidity\
  \ Level\n      description: The humidity threshold to trigger the fan.\n      selector:\n\
  \        number:\n          min: 0\n          max: 100\n          unit_of_measurement:\
  \ \"%\"\n          mode: slider\n    fan_entity:\n      name: Fan\n      description:\
  \ The fan entity to turn on or off based on the humidity level.\n      selector:\n\
  \        entity:\n          domain: fan\n\ntrigger:\n  # Trigger when humidity goes\
  \ above the threshold\n  - platform: numeric_state\n    entity_id: !input humidity_sensor\n\
  \    above: !input humidity_level\n\n  # Trigger when humidity goes below the threshold\n\
  \  - platform: numeric_state\n    entity_id: !input humidity_sensor\n    below:\
  \ !input humidity_level\n\ncondition: []\n\naction:\n  - choose:\n      # Condition\
  \ to check if the humidity is above the threshold\n      - conditions:\n       \
  \   - condition: numeric_state\n            entity_id: !input humidity_sensor\n\
  \            above: !input humidity_level\n        sequence:\n          - condition:\
  \ state\n            entity_id: !input fan_entity\n            state: 'off'\n  \
  \        - service: fan.turn_on\n            target:\n              entity_id: !input\
  \ fan_entity\n      \n      # Condition to check if the humidity is below the threshold\n\
  \      - conditions:\n          - condition: numeric_state\n            entity_id:\
  \ !input humidity_sensor\n            below: !input humidity_level\n        sequence:\n\
  \          - condition: state\n            entity_id: !input fan_entity\n      \
  \      state: 'on'\n          - service: fan.turn_off\n            target:\n   \
  \           entity_id: !input fan_entity\n\nmode: single\n```\n"
context:
  conversation_trace:
  - event_type: async_process
    data:
      text: |
        # Humidity Fan

        ## Problem statement

        Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

        ## Example use cases

        These are example use cases that could be used with the blueprint:

        - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
        - Make sure the garage does not get too humid

        ## Detailed Description

        The blueprint should accept two inputs:

        | Input               | Description                                                           |
        | ------------------- | --------------------------------------------------------------------- |
        | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
        | `humidity_level` | A `number` selector to set the value used as the trigger. |
        | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

        The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
        triggered, the fan should be turned off. The fan should also be stopped when the
        sensor goes back down below the desired level. The automation should not try to
        turn the fan on if it is already on, and should not turn the fan off when it is
        already off.
      context:
        id: 01JMTPJ6SPMRQJN6KGV79ZH74G
        parent_id: null
        user_id: null
      conversation_id: null
      device_id: null
      language: en
      agent_id: conversation.mock_title
      extra_system_prompt: null
  - event_type: agent_detail
    data:
      messages:
      - role: system
        agent_id: conversation.mock_title
        content: |-
          Current time is 16:43:55. Today's date is 2025-02-23.

          Create a Home Assistant blueprint YAML configuration based on the user request.

          Please respond only with markdown that contains yaml. You can
          add comments inline with your step by step thinking. The response must start
          with ```yaml and end with ``` because your answer will be parsed by code. It
          is very important to stick to the format.
      - role: user
        agent_id: conversation.mock_title
        content: |
          # Humidity Fan

          ## Problem statement

          Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

          ## Example use cases

          These are example use cases that could be used with the blueprint:

          - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
          - Make sure the garage does not get too humid

          ## Detailed Description

          The blueprint should accept two inputs:

          | Input               | Description                                                           |
          | ------------------- | --------------------------------------------------------------------- |
          | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
          | `humidity_level` | A `number` selector to set the value used as the trigger. |
          | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

          The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
          triggered, the fan should be turned off. The fan should also be stopped when the
          sensor goes back down below the desired level. The automation should not try to
          turn the fan on if it is already on, and should not turn the fan off when it is
          already off.
      - role: assistant
        agent_id: conversation.mock_title
        content: "```yaml\nblueprint:\n  name: Humidity Controlled Fan\n  description:\
          \ >-\n    Turn on a fan when the humidity exceeds a specified threshold\
          \ from a \n    humidity sensor, and turn it off when humidity falls below\
          \ the threshold.\n  domain: automation\n  input:\n    humidity_sensor:\n\
          \      name: Humidity Sensor\n      description: A sensor entity that provides\
          \ the humidity level.\n      selector:\n        entity:\n          domain:\
          \ sensor\n    humidity_level:\n      name: Humidity Level\n      description:\
          \ The humidity threshold to trigger the fan.\n      selector:\n        number:\n\
          \          min: 0\n          max: 100\n          unit_of_measurement: \"\
          %\"\n          mode: slider\n    fan_entity:\n      name: Fan\n      description:\
          \ The fan entity to turn on or off based on the humidity level.\n      selector:\n\
          \        entity:\n          domain: fan\n\ntrigger:\n  # Trigger when humidity\
          \ goes above the threshold\n  - platform: numeric_state\n    entity_id:\
          \ !input humidity_sensor\n    above: !input humidity_level\n\n  # Trigger\
          \ when humidity goes below the threshold\n  - platform: numeric_state\n\
          \    entity_id: !input humidity_sensor\n    below: !input humidity_level\n\
          \ncondition: []\n\naction:\n  - choose:\n      # Condition to check if the\
          \ humidity is above the threshold\n      - conditions:\n          - condition:\
          \ numeric_state\n            entity_id: !input humidity_sensor\n       \
          \     above: !input humidity_level\n        sequence:\n          - condition:\
          \ state\n            entity_id: !input fan_entity\n            state: 'off'\n\
          \          - service: fan.turn_on\n            target:\n              entity_id:\
          \ !input fan_entity\n      \n      # Condition to check if the humidity\
          \ is below the threshold\n      - conditions:\n          - condition: numeric_state\n\
          \            entity_id: !input humidity_sensor\n            below: !input\
          \ humidity_level\n        sequence:\n          - condition: state\n    \
          \        entity_id: !input fan_entity\n            state: 'on'\n       \
          \   - service: fan.turn_off\n            target:\n              entity_id:\
          \ !input fan_entity\n\nmode: single\n```\n"
      tools: null
  tries: 0
