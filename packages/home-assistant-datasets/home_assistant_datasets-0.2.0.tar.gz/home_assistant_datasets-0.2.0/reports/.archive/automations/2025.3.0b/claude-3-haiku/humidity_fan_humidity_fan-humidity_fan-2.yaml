---
uuid: f345794b-c5e6-4b2b-b780-cd85dfad93f0
task_id: humidity_fan_humidity_fan-humidity_fan-2
model_id: null
category: fan
task:
  input_text: |
    # Humidity Fan

    ## Problem statement

    Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

    ## Example use cases

    These are example use cases that could be used with the blueprint:

    - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
    - Make sure the garage does not get too humid

    ## Detailed Description

    The blueprint should accept two inputs:

    | Input               | Description                                                           |
    | ------------------- | --------------------------------------------------------------------- |
    | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
    | `humidity_level` | A `number` selector to set the value used as the trigger. |
    | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

    The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
    triggered, the fan should be turned off. The fan should also be stopped when the
    sensor goes back down below the desired level. The automation should not try to
    turn the fan on if it is already on, and should not turn the fan off when it is
    already off.
response: "```yaml\nblueprint:\n  name: Humidity Fan\n  description: Turn on a fan\
  \ based on humidity level\n  domain: automation\n  input:\n    humidity_sensor:\n\
  \      name: Humidity Sensor\n      description: Sensor to monitor humidity\n  \
  \    selector:\n        entity:\n          domain: sensor\n    humidity_level:\n\
  \      name: Humidity Level\n      description: Humidity level to trigger fan\n\
  \      selector:\n        number:\n          min: 0\n          max: 100\n      \
  \    step: 1\n    fan_entity:\n      name: Fan\n      description: Fan entity to\
  \ control\n      selector:\n        entity:\n          domain: fan\n\ntrigger:\n\
  \  platform: numeric_state\n  entity_id: !input humidity_sensor\n  above: !input\
  \ humidity_level\n\naction:\n  - choose:\n      # If the fan is not on, turn it\
  \ on\n      - conditions:\n          - condition: state\n            entity_id:\
  \ !input fan_entity\n            state: 'off'\n        sequence:\n          - service:\
  \ fan.turn_on\n            target:\n              entity_id: !input fan_entity\n\
  \      # If the fan is on, do nothing\n      - conditions:\n          - condition:\
  \ state \n            entity_id: !input fan_entity\n            state: 'on'\n  \
  \      sequence: []\n    default:\n      # Should never get here\n\n  # Turn off\
  \ the fan when the humidity drops back below the set level  \n  - wait_for_trigger:\n\
  \      platform: numeric_state\n      entity_id: !input humidity_sensor \n     \
  \ below: !input humidity_level\n  - service: fan.turn_off\n    target:\n      entity_id:\
  \ !input fan_entity\n\n```\n\nComments:\n\n1. The blueprint defines the necessary\
  \ inputs: `humidity_sensor`, `humidity_level`, and `fan_entity`.\n2. The trigger\
  \ is set to monitor the `humidity_sensor` and fire when the value goes above the\
  \ `humidity_level`.\n3. The action section first checks the state of the `fan_entity`\
  \ to determine if it needs to be turned on. If the fan is off, it turns it on. If\
  \ the fan is already on, it does nothing.\n4. After the fan is turned on, the automation\
  \ waits for the `humidity_sensor` to drop back below the `humidity_level`, then\
  \ turns the fan off.\n5. This ensures the fan is only turned on when needed and\
  \ turned off when the humidity drops back to the desired level."
context:
  conversation_trace:
  - event_type: async_process
    data:
      text: |
        # Humidity Fan

        ## Problem statement

        Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

        ## Example use cases

        These are example use cases that could be used with the blueprint:

        - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
        - Make sure the garage does not get too humid

        ## Detailed Description

        The blueprint should accept two inputs:

        | Input               | Description                                                           |
        | ------------------- | --------------------------------------------------------------------- |
        | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
        | `humidity_level` | A `number` selector to set the value used as the trigger. |
        | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

        The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
        triggered, the fan should be turned off. The fan should also be stopped when the
        sensor goes back down below the desired level. The automation should not try to
        turn the fan on if it is already on, and should not turn the fan off when it is
        already off.
      context:
        id: 01JMTN93JBF0NC6WVRMEM9H911
        parent_id: null
        user_id: null
      conversation_id: null
      device_id: null
      language: en
      agent_id: conversation.mock_title
      extra_system_prompt: null
  - event_type: agent_detail
    data:
      system: |-
        Current time is 16:21:28. Today's date is 2025-02-23.

        Create a Home Assistant blueprint YAML configuration based on the user request.

        Please respond only with markdown that contains yaml. You can
        add comments inline with your step by step thinking. The response must start
        with ```yaml and end with ``` because your answer will be parsed by code. It
        is very important to stick to the format.
      messages:
      - role: user
        content: |
          # Humidity Fan

          ## Problem statement

          Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

          ## Example use cases

          These are example use cases that could be used with the blueprint:

          - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
          - Make sure the garage does not get too humid

          ## Detailed Description

          The blueprint should accept two inputs:

          | Input               | Description                                                           |
          | ------------------- | --------------------------------------------------------------------- |
          | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
          | `humidity_level` | A `number` selector to set the value used as the trigger. |
          | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

          The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
          triggered, the fan should be turned off. The fan should also be stopped when the
          sensor goes back down below the desired level. The automation should not try to
          turn the fan on if it is already on, and should not turn the fan off when it is
          already off.
      - role: assistant
        content:
        - type: text
          text: "```yaml\nblueprint:\n  name: Humidity Fan\n  description: Turn on\
            \ a fan based on humidity level\n  domain: automation\n  input:\n    humidity_sensor:\n\
            \      name: Humidity Sensor\n      description: Sensor to monitor humidity\n\
            \      selector:\n        entity:\n          domain: sensor\n    humidity_level:\n\
            \      name: Humidity Level\n      description: Humidity level to trigger\
            \ fan\n      selector:\n        number:\n          min: 0\n          max:\
            \ 100\n          step: 1\n    fan_entity:\n      name: Fan\n      description:\
            \ Fan entity to control\n      selector:\n        entity:\n          domain:\
            \ fan\n\ntrigger:\n  platform: numeric_state\n  entity_id: !input humidity_sensor\n\
            \  above: !input humidity_level\n\naction:\n  - choose:\n      # If the\
            \ fan is not on, turn it on\n      - conditions:\n          - condition:\
            \ state\n            entity_id: !input fan_entity\n            state:\
            \ 'off'\n        sequence:\n          - service: fan.turn_on\n       \
            \     target:\n              entity_id: !input fan_entity\n      # If\
            \ the fan is on, do nothing\n      - conditions:\n          - condition:\
            \ state \n            entity_id: !input fan_entity\n            state:\
            \ 'on'\n        sequence: []\n    default:\n      # Should never get here\n\
            \n  # Turn off the fan when the humidity drops back below the set level\
            \  \n  - wait_for_trigger:\n      platform: numeric_state\n      entity_id:\
            \ !input humidity_sensor \n      below: !input humidity_level\n  - service:\
            \ fan.turn_off\n    target:\n      entity_id: !input fan_entity\n\n```\n\
            \nComments:\n\n1. The blueprint defines the necessary inputs: `humidity_sensor`,\
            \ `humidity_level`, and `fan_entity`.\n2. The trigger is set to monitor\
            \ the `humidity_sensor` and fire when the value goes above the `humidity_level`.\n\
            3. The action section first checks the state of the `fan_entity` to determine\
            \ if it needs to be turned on. If the fan is off, it turns it on. If the\
            \ fan is already on, it does nothing.\n4. After the fan is turned on,\
            \ the automation waits for the `humidity_sensor` to drop back below the\
            \ `humidity_level`, then turns the fan off.\n5. This ensures the fan is\
            \ only turned on when needed and turned off when the humidity drops back\
            \ to the desired level."
  tries: 0
