---
uuid: d4deb390-5b28-40c4-91c8-66069140297e
task_id: door_left_open_door_left_open-door_left_open-2
model_id: null
category: media_player
task:
  input_text: |
    # Door left open

    ## Problem statement

    Create an blueprint automation to play an alert on the speaker when the door is
    left open.

    ## Example use cases

    These are example use cases that could be used with the blueprint:

    - Play an message on the living room speaker if the garage door has been left open for more than 30 minutes
    - When the front door is ajar for 5 minutes, play a sound on the kitchen bluetooth speaker.

    ## Detailed Description

    The blueprint should accept two inputs:

    | Input           | Selector Type | Description                                                                           |
    | --------------- | ------------- | ------------------------------------------------------------------------------------- |
    | `door_sensor`   | `entity`      | A `binary_sensor` entity selector door sensor that is the target of the automation.   |
    | `alert_media`   | `media`       | The target for the `media` selector for the media player and media id with the alter. |
    | `open_duration` | `duration`    | A `duration` selector, the amount of time before playing the alert.                   |

    The automation should play the selected media when the door has been open for the specified duration.
response: |-
  ```yaml
  blueprint:
    name: Door Left Open Alert
    description: Play an alert on a speaker when a door is left open for a specified duration
    domain: automation
    input:
      door_sensor:
        name: Door Sensor
        description: Binary sensor to detect door state
        selector:
          entity:
            domain: binary_sensor
      alert_media:
        name: Alert Media Player
        description: Media player to play the alert
        selector:
          target:
            entity:
              domain: media_player
      open_duration:
        name: Open Duration
        description: Time door can be open before alert plays
        selector:
          duration:
            # Default to 30 minutes
            default: "00:30:00"
      alert_message:
        name: Alert Message
        description: Message to play when door is left open
        default: "Warning: The door has been left open"
        selector:
          text:

  trigger:
    - platform: state
      entity_id: !input door_sensor
      to: 'on'
      for: !input open_duration

  condition:
    # Ensure door is still open when condition is checked
    - condition: state
      entity_id: !input door_sensor
      state: 'on'

  action:
    - service: tts.speak
      target: !input alert_media
      data:
        message: !input alert_message

  mode: single
  max_exceeded: silent
  ```
context:
  conversation_trace:
  - event_type: async_process
    data:
      text: |
        # Door left open

        ## Problem statement

        Create an blueprint automation to play an alert on the speaker when the door is
        left open.

        ## Example use cases

        These are example use cases that could be used with the blueprint:

        - Play an message on the living room speaker if the garage door has been left open for more than 30 minutes
        - When the front door is ajar for 5 minutes, play a sound on the kitchen bluetooth speaker.

        ## Detailed Description

        The blueprint should accept two inputs:

        | Input           | Selector Type | Description                                                                           |
        | --------------- | ------------- | ------------------------------------------------------------------------------------- |
        | `door_sensor`   | `entity`      | A `binary_sensor` entity selector door sensor that is the target of the automation.   |
        | `alert_media`   | `media`       | The target for the `media` selector for the media player and media id with the alter. |
        | `open_duration` | `duration`    | A `duration` selector, the amount of time before playing the alert.                   |

        The automation should play the selected media when the door has been open for the specified duration.
      context:
        id: 01JMTMX0W959VSHWZ2TDGFA6FN
        parent_id: null
        user_id: null
      conversation_id: null
      device_id: null
      language: en
      agent_id: conversation.mock_title
      extra_system_prompt: null
  - event_type: agent_detail
    data:
      system: |-
        Current time is 16:14:52. Today's date is 2025-02-23.

        Create a Home Assistant blueprint YAML configuration based on the user request.

        Please respond only with markdown that contains yaml. You can
        add comments inline with your step by step thinking. The response must start
        with ```yaml and end with ``` because your answer will be parsed by code. It
        is very important to stick to the format.
      messages:
      - role: user
        content: |
          # Door left open

          ## Problem statement

          Create an blueprint automation to play an alert on the speaker when the door is
          left open.

          ## Example use cases

          These are example use cases that could be used with the blueprint:

          - Play an message on the living room speaker if the garage door has been left open for more than 30 minutes
          - When the front door is ajar for 5 minutes, play a sound on the kitchen bluetooth speaker.

          ## Detailed Description

          The blueprint should accept two inputs:

          | Input           | Selector Type | Description                                                                           |
          | --------------- | ------------- | ------------------------------------------------------------------------------------- |
          | `door_sensor`   | `entity`      | A `binary_sensor` entity selector door sensor that is the target of the automation.   |
          | `alert_media`   | `media`       | The target for the `media` selector for the media player and media id with the alter. |
          | `open_duration` | `duration`    | A `duration` selector, the amount of time before playing the alert.                   |

          The automation should play the selected media when the door has been open for the specified duration.
      - role: assistant
        content:
        - type: text
          text: |-
            ```yaml
            blueprint:
              name: Door Left Open Alert
              description: Play an alert on a speaker when a door is left open for a specified duration
              domain: automation
              input:
                door_sensor:
                  name: Door Sensor
                  description: Binary sensor to detect door state
                  selector:
                    entity:
                      domain: binary_sensor
                alert_media:
                  name: Alert Media Player
                  description: Media player to play the alert
                  selector:
                    target:
                      entity:
                        domain: media_player
                open_duration:
                  name: Open Duration
                  description: Time door can be open before alert plays
                  selector:
                    duration:
                      # Default to 30 minutes
                      default: "00:30:00"
                alert_message:
                  name: Alert Message
                  description: Message to play when door is left open
                  default: "Warning: The door has been left open"
                  selector:
                    text:

            trigger:
              - platform: state
                entity_id: !input door_sensor
                to: 'on'
                for: !input open_duration

            condition:
              # Ensure door is still open when condition is checked
              - condition: state
                entity_id: !input door_sensor
                state: 'on'

            action:
              - service: tts.speak
                target: !input alert_media
                data:
                  message: !input alert_message

            mode: single
            max_exceeded: silent
            ```
  tries: 0
