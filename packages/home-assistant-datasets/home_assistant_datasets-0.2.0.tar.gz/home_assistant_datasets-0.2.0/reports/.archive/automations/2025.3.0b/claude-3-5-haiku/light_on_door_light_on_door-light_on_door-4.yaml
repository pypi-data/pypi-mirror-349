---
uuid: e946df37-6930-46fd-9e9d-6378bd01ee1a
task_id: light_on_door_light_on_door-light_on_door-4
model_id: null
category: light
task:
  input_text: |
    # Light on door

    ## Problem statement

    Create an blueprint automation to turn on a light when the door opens.

    ## Example use cases

    These are example use cases that could be used with the blueprint:

    - Turn on the pantry light when the pantry door opens

    ## Detailed Description

    The blueprint should accept two inputs:

    | Input          | Description                                                                     |
    | -------------- | ------------------------------------------------------------------------------- |
    | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
    | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

    The automation should trigger when the door opens, and turn the light on. The
    light should be shut off when the door closes or after a 2 minute timeout.
response: "```yaml\nblueprint:\n  name: Door Open Light Automation\n  description:\
  \ Turn on a light when a door opens, with automatic timeout\n  domain: automation\n\
  \  input:\n    door_sensor:\n      name: Door Sensor\n      description: Binary\
  \ sensor that detects door open/closed state\n      selector:\n        entity:\n\
  \          domain: binary_sensor\n    \n    light_switch:\n      name: Light(s)\
  \ to Control\n      description: Light entity or group to turn on when door opens\n\
  \      selector:\n        target:\n          entity:\n            domain: light\n\
  \ntrigger:\n  - platform: state\n    entity_id: !input door_sensor\n    from: 'off'\n\
  \    to: 'on'\n\naction:\n  # Turn on the specified light(s) when door opens\n \
  \ - service: light.turn_on\n    target: !input light_switch\n\n  # Start a 2-minute\
  \ timeout timer to turn off the light\n  - service: timer.start\n    target:\n \
  \     entity_id: timer.door_light_timeout\n    data:\n      duration: '00:02:00'\n\
  \n# Optional timer to automatically turn off light\ntimer:\n  door_light_timeout:\n\
  \    name: Door Light Timeout\n\n# Additional actions to turn off light\nvariables:\n\
  \  door_sensor: !input door_sensor\n  light_switch: !input light_switch\n\n# Combine\
  \ conditions for turning off light\nmode: restart\nmax_exceeded: silent\n\n# Turn\
  \ off light when door closes or timer expires\ntrigger:\n  - platform: state\n \
  \   entity_id: !input door_sensor\n    to: 'off'\n  \n  - platform: event\n    event_type:\
  \ timer.finished\n    event_data:\n      entity_id: timer.door_light_timeout\n\n\
  action:\n  - service: light.turn_off\n    target: !input light_switch\n```"
context:
  conversation_trace:
  - event_type: async_process
    data:
      text: |
        # Light on door

        ## Problem statement

        Create an blueprint automation to turn on a light when the door opens.

        ## Example use cases

        These are example use cases that could be used with the blueprint:

        - Turn on the pantry light when the pantry door opens

        ## Detailed Description

        The blueprint should accept two inputs:

        | Input          | Description                                                                     |
        | -------------- | ------------------------------------------------------------------------------- |
        | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
        | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

        The automation should trigger when the door opens, and turn the light on. The
        light should be shut off when the door closes or after a 2 minute timeout.
      context:
        id: 01JMTMW4KZ8ZASV7071SJV98W9
        parent_id: null
        user_id: null
      conversation_id: null
      device_id: null
      language: en
      agent_id: conversation.mock_title
      extra_system_prompt: null
  - event_type: agent_detail
    data:
      system: |-
        Current time is 16:14:23. Today's date is 2025-02-23.

        Create a Home Assistant blueprint YAML configuration based on the user request.

        Please respond only with markdown that contains yaml. You can
        add comments inline with your step by step thinking. The response must start
        with ```yaml and end with ``` because your answer will be parsed by code. It
        is very important to stick to the format.
      messages:
      - role: user
        content: |
          # Light on door

          ## Problem statement

          Create an blueprint automation to turn on a light when the door opens.

          ## Example use cases

          These are example use cases that could be used with the blueprint:

          - Turn on the pantry light when the pantry door opens

          ## Detailed Description

          The blueprint should accept two inputs:

          | Input          | Description                                                                     |
          | -------------- | ------------------------------------------------------------------------------- |
          | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
          | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

          The automation should trigger when the door opens, and turn the light on. The
          light should be shut off when the door closes or after a 2 minute timeout.
      - role: assistant
        content:
        - type: text
          text: "```yaml\nblueprint:\n  name: Door Open Light Automation\n  description:\
            \ Turn on a light when a door opens, with automatic timeout\n  domain:\
            \ automation\n  input:\n    door_sensor:\n      name: Door Sensor\n  \
            \    description: Binary sensor that detects door open/closed state\n\
            \      selector:\n        entity:\n          domain: binary_sensor\n \
            \   \n    light_switch:\n      name: Light(s) to Control\n      description:\
            \ Light entity or group to turn on when door opens\n      selector:\n\
            \        target:\n          entity:\n            domain: light\n\ntrigger:\n\
            \  - platform: state\n    entity_id: !input door_sensor\n    from: 'off'\n\
            \    to: 'on'\n\naction:\n  # Turn on the specified light(s) when door\
            \ opens\n  - service: light.turn_on\n    target: !input light_switch\n\
            \n  # Start a 2-minute timeout timer to turn off the light\n  - service:\
            \ timer.start\n    target:\n      entity_id: timer.door_light_timeout\n\
            \    data:\n      duration: '00:02:00'\n\n# Optional timer to automatically\
            \ turn off light\ntimer:\n  door_light_timeout:\n    name: Door Light\
            \ Timeout\n\n# Additional actions to turn off light\nvariables:\n  door_sensor:\
            \ !input door_sensor\n  light_switch: !input light_switch\n\n# Combine\
            \ conditions for turning off light\nmode: restart\nmax_exceeded: silent\n\
            \n# Turn off light when door closes or timer expires\ntrigger:\n  - platform:\
            \ state\n    entity_id: !input door_sensor\n    to: 'off'\n  \n  - platform:\
            \ event\n    event_type: timer.finished\n    event_data:\n      entity_id:\
            \ timer.door_light_timeout\n\naction:\n  - service: light.turn_off\n \
            \   target: !input light_switch\n```"
  tries: 0
