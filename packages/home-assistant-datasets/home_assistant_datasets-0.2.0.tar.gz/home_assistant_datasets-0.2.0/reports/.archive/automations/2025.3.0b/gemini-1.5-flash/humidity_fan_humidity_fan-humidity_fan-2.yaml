---
uuid: e040bd20-25cb-48b2-b489-ce869dabef4a
task_id: humidity_fan_humidity_fan-humidity_fan-2
model_id: null
category: fan
task:
  input_text: |
    # Humidity Fan

    ## Problem statement

    Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

    ## Example use cases

    These are example use cases that could be used with the blueprint:

    - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
    - Make sure the garage does not get too humid

    ## Detailed Description

    The blueprint should accept two inputs:

    | Input               | Description                                                           |
    | ------------------- | --------------------------------------------------------------------- |
    | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
    | `humidity_level` | A `number` selector to set the value used as the trigger. |
    | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

    The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
    triggered, the fan should be turned off. The fan should also be stopped when the
    sensor goes back down below the desired level. The automation should not try to
    turn the fan on if it is already on, and should not turn the fan off when it is
    already off.
response: |-
  ```yaml
  alias: Humidity Fan
  description: Turn on a fan when humidity goes above a specified level.
  inputs:
    humidity_sensor:
      description: The humidity sensor to monitor.
      selector:
        entity:
          domain: sensor
          device_class: humidity
    humidity_level:
      description: The humidity level (%).
      selector:
        number:
          min: 0
          max: 100
          unit_of_measurement: "%"
    fan_entity:
      description: The fan to control.
      selector:
        entity:
          domain: fan
  mode: restart
  variables:
    fan_is_on: false
  trigger:
    - platform: state
      entity_id: !input humidity_sensor
  condition:
    - condition: numeric_state
      entity_id: !input humidity_sensor
      above: !input humidity_level
      for: 00:05:00 #Added a small delay to prevent rapid on/off cycling.  Adjust as needed.
    - condition: template
      value_template: "{{ is_state(states.fan.fan_entity.state,'off') }}"
  action:
    - service: fan.turn_on
      target:
        entity_id: !input fan_entity
      data: {}
    - variables:
        fan_is_on: true
    - delay: 00:00:05 #Added a small delay to prevent rapid on/off cycling.  Adjust as needed.
    - choose:
        - conditions:
            - condition: state
              entity_id: !input humidity_sensor
              state: >-
                {{ states(input.humidity_sensor).state|float <
                  states(input.humidity_level).state|float }}
          sequence:
            - service: fan.turn_off
              target:
                entity_id: !input fan_entity
            - variables:
                fan_is_on: false
  mode: restart

  ```
context:
  conversation_trace:
  - event_type: async_process
    data:
      text: |
        # Humidity Fan

        ## Problem statement

        Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

        ## Example use cases

        These are example use cases that could be used with the blueprint:

        - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
        - Make sure the garage does not get too humid

        ## Detailed Description

        The blueprint should accept two inputs:

        | Input               | Description                                                           |
        | ------------------- | --------------------------------------------------------------------- |
        | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
        | `humidity_level` | A `number` selector to set the value used as the trigger. |
        | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

        The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
        triggered, the fan should be turned off. The fan should also be stopped when the
        sensor goes back down below the desired level. The automation should not try to
        turn the fan on if it is already on, and should not turn the fan off when it is
        already off.
      context:
        id: 01JMTNB6MX5D3Y3M8VHAKSTBRH
        parent_id: null
        user_id: null
      conversation_id: null
      device_id: null
      language: en
      agent_id: conversation.mock_title
      extra_system_prompt: null
  - event_type: agent_detail
    data:
      messages:
      - role: system
        agent_id: conversation.mock_title
        content: |-
          Current time is 16:22:37. Today's date is 2025-02-23.

          Create a Home Assistant blueprint YAML configuration based on the user request.

          Please respond only with markdown that contains yaml. You can
          add comments inline with your step by step thinking. The response must start
          with ```yaml and end with ``` because your answer will be parsed by code. It
          is very important to stick to the format.
      - role: user
        agent_id: conversation.mock_title
        content: |
          # Humidity Fan

          ## Problem statement

          Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

          ## Example use cases

          These are example use cases that could be used with the blueprint:

          - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
          - Make sure the garage does not get too humid

          ## Detailed Description

          The blueprint should accept two inputs:

          | Input               | Description                                                           |
          | ------------------- | --------------------------------------------------------------------- |
          | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
          | `humidity_level` | A `number` selector to set the value used as the trigger. |
          | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

          The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
          triggered, the fan should be turned off. The fan should also be stopped when the
          sensor goes back down below the desired level. The automation should not try to
          turn the fan on if it is already on, and should not turn the fan off when it is
          already off.
      - role: assistant
        agent_id: conversation.mock_title
        content: |-
          ```yaml
          alias: Humidity Fan
          description: Turn on a fan when humidity goes above a specified level.
          inputs:
            humidity_sensor:
              description: The humidity sensor to monitor.
              selector:
                entity:
                  domain: sensor
                  device_class: humidity
            humidity_level:
              description: The humidity level (%).
              selector:
                number:
                  min: 0
                  max: 100
                  unit_of_measurement: "%"
            fan_entity:
              description: The fan to control.
              selector:
                entity:
                  domain: fan
          mode: restart
          variables:
            fan_is_on: false
          trigger:
            - platform: state
              entity_id: !input humidity_sensor
          condition:
            - condition: numeric_state
              entity_id: !input humidity_sensor
              above: !input humidity_level
              for: 00:05:00 #Added a small delay to prevent rapid on/off cycling.  Adjust as needed.
            - condition: template
              value_template: "{{ is_state(states.fan.fan_entity.state,'off') }}"
          action:
            - service: fan.turn_on
              target:
                entity_id: !input fan_entity
              data: {}
            - variables:
                fan_is_on: true
            - delay: 00:00:05 #Added a small delay to prevent rapid on/off cycling.  Adjust as needed.
            - choose:
                - conditions:
                    - condition: state
                      entity_id: !input humidity_sensor
                      state: >-
                        {{ states(input.humidity_sensor).state|float <
                          states(input.humidity_level).state|float }}
                  sequence:
                    - service: fan.turn_off
                      target:
                        entity_id: !input fan_entity
                    - variables:
                        fan_is_on: false
          mode: restart

          ```
      tools: null
  tries: 0
