---
uuid: c9ec1153-718d-4dd0-8a9e-392f74235ef1
task_id: humidity_fan_humidity_fan-humidity_fan-4
model_id: null
category: fan
task:
  input_text: |
    # Humidity Fan

    ## Problem statement

    Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

    ## Example use cases

    These are example use cases that could be used with the blueprint:

    - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
    - Make sure the garage does not get too humid

    ## Detailed Description

    The blueprint should accept two inputs:

    | Input               | Description                                                           |
    | ------------------- | --------------------------------------------------------------------- |
    | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
    | `humidity_level` | A `number` selector to set the value used as the trigger. |
    | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

    The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
    triggered, the fan should be turned off. The fan should also be stopped when the
    sensor goes back down below the desired level. The automation should not try to
    turn the fan on if it is already on, and should not turn the fan off when it is
    already off.
response: |-
  ```yaml
  blueprint:
    name: Humidity Fan
    description: Turn on a fan when humidity goes above a threshold.
    domain: automation
    input:
      humidity_sensor:
        name: Humidity Sensor
        description: The humidity sensor to monitor.
        selector:
          entity:
            domain: sensor
            device_class: humidity
      humidity_level:
        name: Humidity Level
        description: The humidity level (percent) to trigger the fan.
        selector:
          number:
            min: 0
            max: 100
            unit_of_measurement: "%"
            mode: slider
      fan_entity:
        name: Fan Entity
        description: The fan to turn on/off.
        selector:
          entity:
            domain: fan
    variables:
      #Added a variable to make the code easier to read.
      fan_is_on: "{{ is_state(fan_entity, 'on') }}"

    mode: restart
    trigger:
    - platform: state
      entity_id: !input humidity_sensor
      from: "{{ states[humidity_sensor].state | float < humidity_level }}"
      to: "{{ states[humidity_sensor].state | float >= humidity_level }}"

    action:
    - choose:
      - conditions:
        - condition: template
          value_template: "{{ not fan_is_on }}" #Only turn on the fan if it is off.
        sequence:
        - service: fan.turn_on
          target:
            entity_id: !input fan_entity
      - conditions:
        - condition: template
          value_template: "{{ fan_is_on }}" #Only turn off the fan if it is on.
        sequence:
        - service: fan.turn_off
          target:
            entity_id: !input fan_entity

  ```
context:
  conversation_trace:
  - event_type: async_process
    data:
      text: |
        # Humidity Fan

        ## Problem statement

        Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

        ## Example use cases

        These are example use cases that could be used with the blueprint:

        - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
        - Make sure the garage does not get too humid

        ## Detailed Description

        The blueprint should accept two inputs:

        | Input               | Description                                                           |
        | ------------------- | --------------------------------------------------------------------- |
        | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
        | `humidity_level` | A `number` selector to set the value used as the trigger. |
        | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

        The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
        triggered, the fan should be turned off. The fan should also be stopped when the
        sensor goes back down below the desired level. The automation should not try to
        turn the fan on if it is already on, and should not turn the fan off when it is
        already off.
      context:
        id: 01JMTNBDRCEA1BKNP8VVKG0RGJ
        parent_id: null
        user_id: null
      conversation_id: null
      device_id: null
      language: en
      agent_id: conversation.mock_title
      extra_system_prompt: null
  - event_type: agent_detail
    data:
      messages:
      - role: system
        agent_id: conversation.mock_title
        content: |-
          Current time is 16:22:44. Today's date is 2025-02-23.

          Create a Home Assistant blueprint YAML configuration based on the user request.

          Please respond only with markdown that contains yaml. You can
          add comments inline with your step by step thinking. The response must start
          with ```yaml and end with ``` because your answer will be parsed by code. It
          is very important to stick to the format.
      - role: user
        agent_id: conversation.mock_title
        content: |
          # Humidity Fan

          ## Problem statement

          Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

          ## Example use cases

          These are example use cases that could be used with the blueprint:

          - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
          - Make sure the garage does not get too humid

          ## Detailed Description

          The blueprint should accept two inputs:

          | Input               | Description                                                           |
          | ------------------- | --------------------------------------------------------------------- |
          | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
          | `humidity_level` | A `number` selector to set the value used as the trigger. |
          | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

          The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
          triggered, the fan should be turned off. The fan should also be stopped when the
          sensor goes back down below the desired level. The automation should not try to
          turn the fan on if it is already on, and should not turn the fan off when it is
          already off.
      - role: assistant
        agent_id: conversation.mock_title
        content: |-
          ```yaml
          blueprint:
            name: Humidity Fan
            description: Turn on a fan when humidity goes above a threshold.
            domain: automation
            input:
              humidity_sensor:
                name: Humidity Sensor
                description: The humidity sensor to monitor.
                selector:
                  entity:
                    domain: sensor
                    device_class: humidity
              humidity_level:
                name: Humidity Level
                description: The humidity level (percent) to trigger the fan.
                selector:
                  number:
                    min: 0
                    max: 100
                    unit_of_measurement: "%"
                    mode: slider
              fan_entity:
                name: Fan Entity
                description: The fan to turn on/off.
                selector:
                  entity:
                    domain: fan
            variables:
              #Added a variable to make the code easier to read.
              fan_is_on: "{{ is_state(fan_entity, 'on') }}"

            mode: restart
            trigger:
            - platform: state
              entity_id: !input humidity_sensor
              from: "{{ states[humidity_sensor].state | float < humidity_level }}"
              to: "{{ states[humidity_sensor].state | float >= humidity_level }}"

            action:
            - choose:
              - conditions:
                - condition: template
                  value_template: "{{ not fan_is_on }}" #Only turn on the fan if it is off.
                sequence:
                - service: fan.turn_on
                  target:
                    entity_id: !input fan_entity
              - conditions:
                - condition: template
                  value_template: "{{ fan_is_on }}" #Only turn off the fan if it is on.
                sequence:
                - service: fan.turn_off
                  target:
                    entity_id: !input fan_entity

          ```
      tools: null
  tries: 0
