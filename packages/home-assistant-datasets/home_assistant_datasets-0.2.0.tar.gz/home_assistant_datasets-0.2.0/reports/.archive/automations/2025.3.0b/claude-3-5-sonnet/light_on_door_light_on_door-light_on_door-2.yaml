---
uuid: fc6dfd73-cd09-4235-98f8-18b57b1f9e6f
task_id: light_on_door_light_on_door-light_on_door-2
model_id: null
category: light
task:
  input_text: |
    # Light on door

    ## Problem statement

    Create an blueprint automation to turn on a light when the door opens.

    ## Example use cases

    These are example use cases that could be used with the blueprint:

    - Turn on the pantry light when the pantry door opens

    ## Detailed Description

    The blueprint should accept two inputs:

    | Input          | Description                                                                     |
    | -------------- | ------------------------------------------------------------------------------- |
    | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
    | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

    The automation should trigger when the door opens, and turn the light on. The
    light should be shut off when the door closes or after a 2 minute timeout.
response: "Here's a Home Assistant blueprint YAML configuration based on your request:\n\
  \n```yaml\n# This blueprint creates an automation to turn on a light when a door\
  \ opens\n# and turn it off when the door closes or after a 2-minute timeout.\n\n\
  blueprint:\n  name: \"Light on Door Open\"\n  description: \"Turn on a light when\
  \ a door opens and off when it closes or after a timeout.\"\n  domain: automation\n\
  \  input:\n    door_sensor:\n      name: Door Sensor\n      description: \"The door\
  \ sensor that triggers the automation\"\n      selector:\n        entity:\n    \
  \      domain: binary_sensor\n    light_switch:\n      name: Light\n      description:\
  \ \"The light(s) to control\"\n      selector:\n        target:\n          entity:\n\
  \            domain: light\n\n# Define the triggers for the automation\ntrigger:\n\
  \  - platform: state\n    entity_id: !input door_sensor\n    to: \"on\"\n  - platform:\
  \ state\n    entity_id: !input door_sensor\n    to: \"off\"\n\n# Define the actions\
  \ to take when the triggers fire\naction:\n  - choose:\n      # When the door opens\n\
  \      - conditions:\n          - condition: state\n            entity_id: !input\
  \ door_sensor\n            state: \"on\"\n        sequence:\n          - service:\
  \ light.turn_on\n            target: !input light_switch\n          # Set up a 2-minute\
  \ timer to turn off the light\n          - wait_for_trigger:\n              - platform:\
  \ state\n                entity_id: !input door_sensor\n                to: \"off\"\
  \n              - platform: numeric_state\n                entity_id: timer.door_light_timer\n\
  \                attribute: remaining\n                below: 1\n            timeout:\n\
  \              hours: 0\n              minutes: 2\n              seconds: 0\n  \
  \        # Turn off the light after the wait\n          - service: light.turn_off\n\
  \            target: !input light_switch\n      \n      # When the door closes\n\
  \      - conditions:\n          - condition: state\n            entity_id: !input\
  \ door_sensor\n            state: \"off\"\n        sequence:\n          - service:\
  \ light.turn_off\n            target: !input light_switch\n\n# Define a mode to\
  \ handle overlapping triggers\nmode: restart\n```\n\nThis blueprint creates an automation\
  \ that turns on a light when a door opens and turns it off when the door closes\
  \ or after a 2-minute timeout. Here's a breakdown of the configuration:\n\n1. The\
  \ blueprint accepts two inputs: `door_sensor` (a binary sensor) and `light_switch`\
  \ (one or more light entities).\n\n2. The trigger section defines two triggers:\
  \ when the door sensor state changes to \"on\" (door opens) and when it changes\
  \ to \"off\" (door closes).\n\n3. The action section uses a choose block to handle\
  \ different scenarios:\n   - When the door opens:\n     - Turn on the light\n  \
  \   - Wait for either the door to close or a 2-minute timeout\n     - Turn off the\
  \ light after the wait\n   - When the door closes:\n     - Turn off the light immediately\n\
  \n4. The mode is set to \"restart\" to handle overlapping triggers, ensuring that\
  \ the automation restarts if the door is opened again while the previous instance\
  \ is still running.\n\nThis blueprint provides a flexible solution for controlling\
  \ lights based on door sensors, with a built-in timeout to conserve energy if the\
  \ door is left open."
context:
  conversation_trace:
  - event_type: async_process
    data:
      text: |
        # Light on door

        ## Problem statement

        Create an blueprint automation to turn on a light when the door opens.

        ## Example use cases

        These are example use cases that could be used with the blueprint:

        - Turn on the pantry light when the pantry door opens

        ## Detailed Description

        The blueprint should accept two inputs:

        | Input          | Description                                                                     |
        | -------------- | ------------------------------------------------------------------------------- |
        | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
        | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

        The automation should trigger when the door opens, and turn the light on. The
        light should be shut off when the door closes or after a 2 minute timeout.
      context:
        id: 01JMTN0H0SJZSGFQKRA2Z7BWSA
        parent_id: null
        user_id: null
      conversation_id: null
      device_id: null
      language: en
      agent_id: conversation.mock_title
      extra_system_prompt: null
  - event_type: agent_detail
    data:
      system: |-
        Current time is 16:16:47. Today's date is 2025-02-23.

        Create a Home Assistant blueprint YAML configuration based on the user request.

        Please respond only with markdown that contains yaml. You can
        add comments inline with your step by step thinking. The response must start
        with ```yaml and end with ``` because your answer will be parsed by code. It
        is very important to stick to the format.
      messages:
      - role: user
        content: |
          # Light on door

          ## Problem statement

          Create an blueprint automation to turn on a light when the door opens.

          ## Example use cases

          These are example use cases that could be used with the blueprint:

          - Turn on the pantry light when the pantry door opens

          ## Detailed Description

          The blueprint should accept two inputs:

          | Input          | Description                                                                     |
          | -------------- | ------------------------------------------------------------------------------- |
          | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
          | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

          The automation should trigger when the door opens, and turn the light on. The
          light should be shut off when the door closes or after a 2 minute timeout.
      - role: assistant
        content:
        - type: text
          text: "Here's a Home Assistant blueprint YAML configuration based on your\
            \ request:\n\n```yaml\n# This blueprint creates an automation to turn\
            \ on a light when a door opens\n# and turn it off when the door closes\
            \ or after a 2-minute timeout.\n\nblueprint:\n  name: \"Light on Door\
            \ Open\"\n  description: \"Turn on a light when a door opens and off when\
            \ it closes or after a timeout.\"\n  domain: automation\n  input:\n  \
            \  door_sensor:\n      name: Door Sensor\n      description: \"The door\
            \ sensor that triggers the automation\"\n      selector:\n        entity:\n\
            \          domain: binary_sensor\n    light_switch:\n      name: Light\n\
            \      description: \"The light(s) to control\"\n      selector:\n   \
            \     target:\n          entity:\n            domain: light\n\n# Define\
            \ the triggers for the automation\ntrigger:\n  - platform: state\n   \
            \ entity_id: !input door_sensor\n    to: \"on\"\n  - platform: state\n\
            \    entity_id: !input door_sensor\n    to: \"off\"\n\n# Define the actions\
            \ to take when the triggers fire\naction:\n  - choose:\n      # When the\
            \ door opens\n      - conditions:\n          - condition: state\n    \
            \        entity_id: !input door_sensor\n            state: \"on\"\n  \
            \      sequence:\n          - service: light.turn_on\n            target:\
            \ !input light_switch\n          # Set up a 2-minute timer to turn off\
            \ the light\n          - wait_for_trigger:\n              - platform:\
            \ state\n                entity_id: !input door_sensor\n             \
            \   to: \"off\"\n              - platform: numeric_state\n           \
            \     entity_id: timer.door_light_timer\n                attribute: remaining\n\
            \                below: 1\n            timeout:\n              hours:\
            \ 0\n              minutes: 2\n              seconds: 0\n          # Turn\
            \ off the light after the wait\n          - service: light.turn_off\n\
            \            target: !input light_switch\n      \n      # When the door\
            \ closes\n      - conditions:\n          - condition: state\n        \
            \    entity_id: !input door_sensor\n            state: \"off\"\n     \
            \   sequence:\n          - service: light.turn_off\n            target:\
            \ !input light_switch\n\n# Define a mode to handle overlapping triggers\n\
            mode: restart\n```\n\nThis blueprint creates an automation that turns\
            \ on a light when a door opens and turns it off when the door closes or\
            \ after a 2-minute timeout. Here's a breakdown of the configuration:\n\
            \n1. The blueprint accepts two inputs: `door_sensor` (a binary sensor)\
            \ and `light_switch` (one or more light entities).\n\n2. The trigger section\
            \ defines two triggers: when the door sensor state changes to \"on\" (door\
            \ opens) and when it changes to \"off\" (door closes).\n\n3. The action\
            \ section uses a choose block to handle different scenarios:\n   - When\
            \ the door opens:\n     - Turn on the light\n     - Wait for either the\
            \ door to close or a 2-minute timeout\n     - Turn off the light after\
            \ the wait\n   - When the door closes:\n     - Turn off the light immediately\n\
            \n4. The mode is set to \"restart\" to handle overlapping triggers, ensuring\
            \ that the automation restarts if the door is opened again while the previous\
            \ instance is still running.\n\nThis blueprint provides a flexible solution\
            \ for controlling lights based on door sensors, with a built-in timeout\
            \ to conserve energy if the door is left open."
  tries: 0
