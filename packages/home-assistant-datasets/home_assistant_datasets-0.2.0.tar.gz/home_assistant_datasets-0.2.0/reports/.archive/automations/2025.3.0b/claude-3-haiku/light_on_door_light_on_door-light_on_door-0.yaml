---
uuid: 342906e3-2f87-4621-a15d-21c3f7d545de
task_id: light_on_door_light_on_door-light_on_door-0
model_id: null
category: light
task:
  input_text: |
    # Light on door

    ## Problem statement

    Create an blueprint automation to turn on a light when the door opens.

    ## Example use cases

    These are example use cases that could be used with the blueprint:

    - Turn on the pantry light when the pantry door opens

    ## Detailed Description

    The blueprint should accept two inputs:

    | Input          | Description                                                                     |
    | -------------- | ------------------------------------------------------------------------------- |
    | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
    | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

    The automation should trigger when the door opens, and turn the light on. The
    light should be shut off when the door closes or after a 2 minute timeout.
response: "```yaml\nblueprint:\n  name: Turn on light when door opens\n  description:\
  \ Automatically turn on a light when a door is opened.\n  input:\n    door_sensor:\n\
  \      name: Door Sensor\n      description: Binary sensor to detect when the door\
  \ opens\n      selector:\n        entity:\n          domain: binary_sensor\n   \
  \ light_switch:\n      name: Light(s) to control\n      description: Light(s) to\
  \ turn on/off when the door opens/closes\n      selector:\n        target:\n   \
  \       entity:\n            domain: light\n  \ntrigger:\n  - platform: state\n\
  \    entity_id: !input door_sensor\n    to: 'open'\n\naction:\n  - service: light.turn_on\n\
  \    target:\n      entity_id: !input light_switch\n  - wait_for_trigger:\n    \
  \  - platform: state\n        entity_id: !input door_sensor\n        to: 'closed'\n\
  \      - platform: time\n        after: '00:02:00'\n  - service: light.turn_off\n\
  \    target:\n      entity_id: !input light_switch\n```\n\nExplanation:\n1. The\
  \ blueprint accepts two input variables: `door_sensor` (a binary sensor that detects\
  \ the door opening/closing) and `light_switch` (one or more light entities to control).\n\
  2. The automation is triggered when the `door_sensor` transitions to the `open`\
  \ state.\n3. When the trigger fires, the specified `light_switch` entities are turned\
  \ on.\n4. The automation then waits for either the `door_sensor` to transition to\
  \ the `closed` state, or a 2-minute timeout to occur.\n5. Once one of those conditions\
  \ is met, the `light_switch` entities are turned off.\n\nThis blueprint provides\
  \ a flexible way to automatically turn on a light when a door is opened, and turn\
  \ it off when the door is closed or after a timeout."
context:
  conversation_trace:
  - event_type: async_process
    data:
      text: |
        # Light on door

        ## Problem statement

        Create an blueprint automation to turn on a light when the door opens.

        ## Example use cases

        These are example use cases that could be used with the blueprint:

        - Turn on the pantry light when the pantry door opens

        ## Detailed Description

        The blueprint should accept two inputs:

        | Input          | Description                                                                     |
        | -------------- | ------------------------------------------------------------------------------- |
        | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
        | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

        The automation should trigger when the door opens, and turn the light on. The
        light should be shut off when the door closes or after a 2 minute timeout.
      context:
        id: 01JMTN6WVF81GEGC8FEQK4GTBN
        parent_id: null
        user_id: null
      conversation_id: null
      device_id: null
      language: en
      agent_id: conversation.mock_title
      extra_system_prompt: null
  - event_type: agent_detail
    data:
      system: |-
        Current time is 16:20:16. Today's date is 2025-02-23.

        Create a Home Assistant blueprint YAML configuration based on the user request.

        Please respond only with markdown that contains yaml. You can
        add comments inline with your step by step thinking. The response must start
        with ```yaml and end with ``` because your answer will be parsed by code. It
        is very important to stick to the format.
      messages:
      - role: user
        content: |
          # Light on door

          ## Problem statement

          Create an blueprint automation to turn on a light when the door opens.

          ## Example use cases

          These are example use cases that could be used with the blueprint:

          - Turn on the pantry light when the pantry door opens

          ## Detailed Description

          The blueprint should accept two inputs:

          | Input          | Description                                                                     |
          | -------------- | ------------------------------------------------------------------------------- |
          | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
          | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

          The automation should trigger when the door opens, and turn the light on. The
          light should be shut off when the door closes or after a 2 minute timeout.
      - role: assistant
        content:
        - type: text
          text: "```yaml\nblueprint:\n  name: Turn on light when door opens\n  description:\
            \ Automatically turn on a light when a door is opened.\n  input:\n   \
            \ door_sensor:\n      name: Door Sensor\n      description: Binary sensor\
            \ to detect when the door opens\n      selector:\n        entity:\n  \
            \        domain: binary_sensor\n    light_switch:\n      name: Light(s)\
            \ to control\n      description: Light(s) to turn on/off when the door\
            \ opens/closes\n      selector:\n        target:\n          entity:\n\
            \            domain: light\n  \ntrigger:\n  - platform: state\n    entity_id:\
            \ !input door_sensor\n    to: 'open'\n\naction:\n  - service: light.turn_on\n\
            \    target:\n      entity_id: !input light_switch\n  - wait_for_trigger:\n\
            \      - platform: state\n        entity_id: !input door_sensor\n    \
            \    to: 'closed'\n      - platform: time\n        after: '00:02:00'\n\
            \  - service: light.turn_off\n    target:\n      entity_id: !input light_switch\n\
            ```\n\nExplanation:\n1. The blueprint accepts two input variables: `door_sensor`\
            \ (a binary sensor that detects the door opening/closing) and `light_switch`\
            \ (one or more light entities to control).\n2. The automation is triggered\
            \ when the `door_sensor` transitions to the `open` state.\n3. When the\
            \ trigger fires, the specified `light_switch` entities are turned on.\n\
            4. The automation then waits for either the `door_sensor` to transition\
            \ to the `closed` state, or a 2-minute timeout to occur.\n5. Once one\
            \ of those conditions is met, the `light_switch` entities are turned off.\n\
            \nThis blueprint provides a flexible way to automatically turn on a light\
            \ when a door is opened, and turn it off when the door is closed or after\
            \ a timeout."
  tries: 0
