---
uuid: d612c35a-7f24-460b-af7c-0f49415b81da
task_id: humidity_fan_humidity_fan-humidity_fan-3
model_id: null
category: fan
task:
  input_text: |
    # Humidity Fan

    ## Problem statement

    Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

    ## Example use cases

    These are example use cases that could be used with the blueprint:

    - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
    - Make sure the garage does not get too humid

    ## Detailed Description

    The blueprint should accept two inputs:

    | Input               | Description                                                           |
    | ------------------- | --------------------------------------------------------------------- |
    | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
    | `humidity_level` | A `number` selector to set the value used as the trigger. |
    | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

    The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
    triggered, the fan should be turned off. The fan should also be stopped when the
    sensor goes back down below the desired level. The automation should not try to
    turn the fan on if it is already on, and should not turn the fan off when it is
    already off.
response: |-
  ```yaml
  blueprint:
    name: Humidity Fan
    description: Turn on a fan based on humidity sensor value
    domain: automation
    input:
      humidity_sensor:
        name: Humidity Sensor
        description: Sensor to monitor humidity
        selector:
          entity:
            domain: sensor
      humidity_level:
        name: Humidity Level
        description: Humidity level threshold for turning on the fan
        selector:
          number:
            min: 0
            max: 100
            step: 1
            unit_of_measurement: '%'
      fan_entity:
        name: Fan Entity
        description: Fan to control
        selector:
          entity:
            domain: fan

  trigger:
    platform: numeric_state
    entity_id: !input humidity_sensor
    above: !input humidity_level

  action:
    - choose:
        # Turn fan on when humidity is above threshold
        - conditions:
            - condition: numeric_state
              entity_id: !input humidity_sensor
              above: !input humidity_level
          sequence:
            - service: fan.turn_on
              target:
                entity_id: !input fan_entity
        # Turn fan off when humidity is below threshold
        - conditions:
            - condition: numeric_state
              entity_id: !input humidity_sensor
              below: !input humidity_level
          sequence:
            - service: fan.turn_off
              target:
                entity_id: !input fan_entity
  ```

  Here's a step-by-step breakdown of the blueprint:

  1. The blueprint defines the required inputs:
     - `humidity_sensor`: A sensor entity that provides humidity readings.
     - `humidity_level`: A number selector to set the humidity threshold for turning on the fan.
     - `fan_entity`: A fan entity to control.

  2. The trigger is set to `numeric_state`, which will trigger the automation when the `humidity_sensor` value goes above the `humidity_level` threshold.

  3. The `action` section uses a `choose` statement to handle two different conditions:
     - If the humidity is above the threshold, the fan is turned on.
     - If the humidity is below the threshold, the fan is turned off.

  This blueprint allows the user to set up an automation that turns on a fan based on the humidity level, and turns it off when the humidity drops below the set threshold.
context:
  conversation_trace:
  - event_type: async_process
    data:
      text: |
        # Humidity Fan

        ## Problem statement

        Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

        ## Example use cases

        These are example use cases that could be used with the blueprint:

        - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
        - Make sure the garage does not get too humid

        ## Detailed Description

        The blueprint should accept two inputs:

        | Input               | Description                                                           |
        | ------------------- | --------------------------------------------------------------------- |
        | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
        | `humidity_level` | A `number` selector to set the value used as the trigger. |
        | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

        The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
        triggered, the fan should be turned off. The fan should also be stopped when the
        sensor goes back down below the desired level. The automation should not try to
        turn the fan on if it is already on, and should not turn the fan off when it is
        already off.
      context:
        id: 01JMTN9893NX6YVMP4T3EDK883
        parent_id: null
        user_id: null
      conversation_id: null
      device_id: null
      language: en
      agent_id: conversation.mock_title
      extra_system_prompt: null
  - event_type: agent_detail
    data:
      system: |-
        Current time is 16:21:33. Today's date is 2025-02-23.

        Create a Home Assistant blueprint YAML configuration based on the user request.

        Please respond only with markdown that contains yaml. You can
        add comments inline with your step by step thinking. The response must start
        with ```yaml and end with ``` because your answer will be parsed by code. It
        is very important to stick to the format.
      messages:
      - role: user
        content: |
          # Humidity Fan

          ## Problem statement

          Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

          ## Example use cases

          These are example use cases that could be used with the blueprint:

          - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
          - Make sure the garage does not get too humid

          ## Detailed Description

          The blueprint should accept two inputs:

          | Input               | Description                                                           |
          | ------------------- | --------------------------------------------------------------------- |
          | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
          | `humidity_level` | A `number` selector to set the value used as the trigger. |
          | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

          The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
          triggered, the fan should be turned off. The fan should also be stopped when the
          sensor goes back down below the desired level. The automation should not try to
          turn the fan on if it is already on, and should not turn the fan off when it is
          already off.
      - role: assistant
        content:
        - type: text
          text: |-
            ```yaml
            blueprint:
              name: Humidity Fan
              description: Turn on a fan based on humidity sensor value
              domain: automation
              input:
                humidity_sensor:
                  name: Humidity Sensor
                  description: Sensor to monitor humidity
                  selector:
                    entity:
                      domain: sensor
                humidity_level:
                  name: Humidity Level
                  description: Humidity level threshold for turning on the fan
                  selector:
                    number:
                      min: 0
                      max: 100
                      step: 1
                      unit_of_measurement: '%'
                fan_entity:
                  name: Fan Entity
                  description: Fan to control
                  selector:
                    entity:
                      domain: fan

            trigger:
              platform: numeric_state
              entity_id: !input humidity_sensor
              above: !input humidity_level

            action:
              - choose:
                  # Turn fan on when humidity is above threshold
                  - conditions:
                      - condition: numeric_state
                        entity_id: !input humidity_sensor
                        above: !input humidity_level
                    sequence:
                      - service: fan.turn_on
                        target:
                          entity_id: !input fan_entity
                  # Turn fan off when humidity is below threshold
                  - conditions:
                      - condition: numeric_state
                        entity_id: !input humidity_sensor
                        below: !input humidity_level
                    sequence:
                      - service: fan.turn_off
                        target:
                          entity_id: !input fan_entity
            ```

            Here's a step-by-step breakdown of the blueprint:

            1. The blueprint defines the required inputs:
               - `humidity_sensor`: A sensor entity that provides humidity readings.
               - `humidity_level`: A number selector to set the humidity threshold for turning on the fan.
               - `fan_entity`: A fan entity to control.

            2. The trigger is set to `numeric_state`, which will trigger the automation when the `humidity_sensor` value goes above the `humidity_level` threshold.

            3. The `action` section uses a `choose` statement to handle two different conditions:
               - If the humidity is above the threshold, the fan is turned on.
               - If the humidity is below the threshold, the fan is turned off.

            This blueprint allows the user to set up an automation that turns on a fan based on the humidity level, and turns it off when the humidity drops below the set threshold.
  tries: 0
