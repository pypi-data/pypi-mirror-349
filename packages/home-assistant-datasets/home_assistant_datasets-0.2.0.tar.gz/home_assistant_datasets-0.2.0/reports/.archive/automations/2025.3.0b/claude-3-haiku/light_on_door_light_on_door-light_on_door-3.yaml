---
uuid: 8051db4f-ed1b-4d46-9d05-376caa2d0903
task_id: light_on_door_light_on_door-light_on_door-3
model_id: null
category: light
task:
  input_text: |
    # Light on door

    ## Problem statement

    Create an blueprint automation to turn on a light when the door opens.

    ## Example use cases

    These are example use cases that could be used with the blueprint:

    - Turn on the pantry light when the pantry door opens

    ## Detailed Description

    The blueprint should accept two inputs:

    | Input          | Description                                                                     |
    | -------------- | ------------------------------------------------------------------------------- |
    | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
    | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

    The automation should trigger when the door opens, and turn the light on. The
    light should be shut off when the door closes or after a 2 minute timeout.
response: "```yaml\nblueprint:\n  name: Turn on light when door opens\n  description:\
  \ Turns on a light when a door opens and turns it off after a timeout or when the\
  \ door closes.\n  domain: automation\n  input:\n    door_sensor:\n      name: Door\
  \ sensor\n      description: The binary sensor that detects when the door opens\
  \ and closes.\n      selector:\n        entity:\n          domain: binary_sensor\n\
  \    light_switch:\n      name: Light(s) to control\n      description: The light\
  \ entity or entities to turn on when the door opens.\n      selector:\n        entity:\n\
  \          domain: light\n            \nautomation:\n\n  # Turn on the light when\
  \ the door opens\n  - trigger:\n      platform: state\n      entity_id: !input door_sensor\n\
  \      to: 'open'\n    action:\n      - service: light.turn_on\n        target:\n\
  \          entity_id: !input light_switch\n\n  # Turn off the light after 2 minutes\
  \ or when the door closes\n  - trigger:\n      - platform: state \n        entity_id:\
  \ !input door_sensor\n        to: 'closed'\n      - platform: time\n        minutes:\
  \ 2\n    action:\n      - service: light.turn_off\n        target:\n          entity_id:\
  \ !input light_switch\n```\n\nExplanation:\n\n1. The blueprint defines two input\
  \ parameters: `door_sensor` (a binary sensor that tracks the door state) and `light_switch`\
  \ (one or more light entities to control).\n2. The first automation rule triggers\
  \ when the `door_sensor` changes to the `open` state, and turns on the specified\
  \ `light_switch` entity or entities.\n3. The second automation rule triggers either\
  \ when the `door_sensor` changes to the `closed` state, or after 2 minutes have\
  \ elapsed, and turns off the `light_switch` entity or entities.\n\nThis blueprint\
  \ allows users to easily set up an automation that turns on a light when a door\
  \ opens, and turns it off after a timeout or when the door closes."
context:
  conversation_trace:
  - event_type: async_process
    data:
      text: |
        # Light on door

        ## Problem statement

        Create an blueprint automation to turn on a light when the door opens.

        ## Example use cases

        These are example use cases that could be used with the blueprint:

        - Turn on the pantry light when the pantry door opens

        ## Detailed Description

        The blueprint should accept two inputs:

        | Input          | Description                                                                     |
        | -------------- | ------------------------------------------------------------------------------- |
        | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
        | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

        The automation should trigger when the door opens, and turn the light on. The
        light should be shut off when the door closes or after a 2 minute timeout.
      context:
        id: 01JMTN7861E0NSVFGGQ38ZCFYM
        parent_id: null
        user_id: null
      conversation_id: null
      device_id: null
      language: en
      agent_id: conversation.mock_title
      extra_system_prompt: null
  - event_type: agent_detail
    data:
      system: |-
        Current time is 16:20:27. Today's date is 2025-02-23.

        Create a Home Assistant blueprint YAML configuration based on the user request.

        Please respond only with markdown that contains yaml. You can
        add comments inline with your step by step thinking. The response must start
        with ```yaml and end with ``` because your answer will be parsed by code. It
        is very important to stick to the format.
      messages:
      - role: user
        content: |
          # Light on door

          ## Problem statement

          Create an blueprint automation to turn on a light when the door opens.

          ## Example use cases

          These are example use cases that could be used with the blueprint:

          - Turn on the pantry light when the pantry door opens

          ## Detailed Description

          The blueprint should accept two inputs:

          | Input          | Description                                                                     |
          | -------------- | ------------------------------------------------------------------------------- |
          | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
          | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

          The automation should trigger when the door opens, and turn the light on. The
          light should be shut off when the door closes or after a 2 minute timeout.
      - role: assistant
        content:
        - type: text
          text: "```yaml\nblueprint:\n  name: Turn on light when door opens\n  description:\
            \ Turns on a light when a door opens and turns it off after a timeout\
            \ or when the door closes.\n  domain: automation\n  input:\n    door_sensor:\n\
            \      name: Door sensor\n      description: The binary sensor that detects\
            \ when the door opens and closes.\n      selector:\n        entity:\n\
            \          domain: binary_sensor\n    light_switch:\n      name: Light(s)\
            \ to control\n      description: The light entity or entities to turn\
            \ on when the door opens.\n      selector:\n        entity:\n        \
            \  domain: light\n            \nautomation:\n\n  # Turn on the light when\
            \ the door opens\n  - trigger:\n      platform: state\n      entity_id:\
            \ !input door_sensor\n      to: 'open'\n    action:\n      - service:\
            \ light.turn_on\n        target:\n          entity_id: !input light_switch\n\
            \n  # Turn off the light after 2 minutes or when the door closes\n  -\
            \ trigger:\n      - platform: state \n        entity_id: !input door_sensor\n\
            \        to: 'closed'\n      - platform: time\n        minutes: 2\n  \
            \  action:\n      - service: light.turn_off\n        target:\n       \
            \   entity_id: !input light_switch\n```\n\nExplanation:\n\n1. The blueprint\
            \ defines two input parameters: `door_sensor` (a binary sensor that tracks\
            \ the door state) and `light_switch` (one or more light entities to control).\n\
            2. The first automation rule triggers when the `door_sensor` changes to\
            \ the `open` state, and turns on the specified `light_switch` entity or\
            \ entities.\n3. The second automation rule triggers either when the `door_sensor`\
            \ changes to the `closed` state, or after 2 minutes have elapsed, and\
            \ turns off the `light_switch` entity or entities.\n\nThis blueprint allows\
            \ users to easily set up an automation that turns on a light when a door\
            \ opens, and turns it off after a timeout or when the door closes."
  tries: 0
