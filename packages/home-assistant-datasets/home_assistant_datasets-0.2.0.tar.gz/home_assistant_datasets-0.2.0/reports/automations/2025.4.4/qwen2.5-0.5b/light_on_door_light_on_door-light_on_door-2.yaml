---
uuid: 77e88d20-075a-446c-8f6c-8ca8e0057765
task_id: light_on_door_light_on_door-light_on_door-2
model_id: qwen2.5-0.5b
category: light
task:
  input_text: |
    # Light on door

    ## Problem statement

    Create an blueprint automation to turn on a light when the door opens.

    ## Example use cases

    These are example use cases that could be used with the blueprint:

    - Turn on the pantry light when the pantry door opens

    ## Detailed Description

    The blueprint should accept two inputs:

    | Input          | Description                                                                     |
    | -------------- | ------------------------------------------------------------------------------- |
    | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
    | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

    The automation should trigger when the door opens, and turn the light on. The
    light should be shut off when the door closes or after a 2 minute timeout.
response: "To implement this blueprint automation for turning on a light based on\
  \ whether the door is open, you can use the `light` component along with some logic\
  \ to handle the timing.\n\nFirst, add a sensor (e.g., a `binary_sensor`) that triggers\
  \ the automation when the door opens. Then, create two components:\n\n1. A light\
  \ (`light`) component connected to the door (`door_sensor`) and controlled by the\
  \ temperature of the room.\n2. An action (`trigger`) that will be triggered on the\
  \ `light` if the door opens.\n\nHere's how you can implement this:\n\n```yaml\n\
  # Home Assistant YAML Blueprint\n\nimport { Light, BinarySensor } from 'home-assistant';\n\
  \nlet door = BinarySensor('door_sensor', { type: 'binary_sensor' });\n\nconst light\
  \ = new Light({\n  name: 'My Door Light',\n  entity_id: `${door.entity_id}`,\n});\n\
  \n// Set up the action that triggers when the door opens\nlight.action.on = async\
  \ () => {\n  // Delay for 2 minutes (adjust as needed)\n  await delay(180);\n  \n\
  \  // Turn on the light component with a temperature of 50°C\n  await light.set_temperature(50,\
  \ true);\n\n  // Optionally, set a timeout to ensure the light is turned off after\
  \ the door closes\n  if (door.is_open) {\n    setTimeout(() => {\n      console.log('Door\
  \ closed. Light will be turned off.');\n    }, 300);\n  }\n};\n\n// Function to\
  \ delay for some time based on room temperature\nfunction delay(ms) {\n  return\
  \ new Promise(resolve => setTimeout(resolve, ms));\n}\n\nasync function main() {\n\
  \  door.entity_id = 'light' + Math.floor(Math.random() * 100); // Random ID for\
  \ each door\n\n  await main();\n}\nawait main();\n\n// Example usage:\ndoor.turn_on();\
  \ // Turn on the light\ndoor.toggle(); // Toggle between on and off\n```\n\n###\
  \ Explanation:\n\n- **Door Sensor**: This sensor triggers the automation to turn\
  \ on the light.\n- **Light Component**: The `light` component is connected to the\
  \ door (`door_sensor`). It will control the temperature of the room with a specific\
  \ value (e.g., 50°C in this example).\n- **Action**: When the door opens, the action\
  \ triggers by setting the temperature of the room to 50°C.\n  \n### Important Notes:\n\
  \n1. **Room Temperature**: The temperature is calculated and set based on the current\
  \ room's temperature. You can adjust this value if needed.\n\n2. **Timeout (Optional)**:\
  \ If you want the light to turn off after a door closes, you can add `setTimeout()`.\n\
  \n3. **Security Note**: This setup assumes that the temperature sensor is within\
  \ your home's electrical system and not connected to any external sensors or devices.\n\
  \n### Running the Automation:\n\n1. Run the main function to start the automation.\n\
  2. Adjust the room temperature as needed.\n3. Set up triggers for light switches\
  \ if you wish to turn off the lights.\n\nThis blueprint can be easily integrated\
  \ into your Home Assistant project by adding more conditions and actions that may\
  \ be necessary depending on your specific needs."
context:
  conversation_trace:
  - event_type: async_process
    data:
      text: |
        # Light on door

        ## Problem statement

        Create an blueprint automation to turn on a light when the door opens.

        ## Example use cases

        These are example use cases that could be used with the blueprint:

        - Turn on the pantry light when the pantry door opens

        ## Detailed Description

        The blueprint should accept two inputs:

        | Input          | Description                                                                     |
        | -------------- | ------------------------------------------------------------------------------- |
        | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
        | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

        The automation should trigger when the door opens, and turn the light on. The
        light should be shut off when the door closes or after a 2 minute timeout.
      context:
        id: 01JTHHNZ92A0TP909T2CTPMSD6
        parent_id: null
        user_id: null
      conversation_id: null
      device_id: null
      language: en
      agent_id: conversation.mock_title
      extra_system_prompt: null
    timestamp: 2025-05-06 00:59:37.122208+00:00
  - event_type: agent_detail
    data:
      messages:
      - role: system
        content: |-
          Current time is 17:59:37. Today's date is 2025-05-05.
          You are a voice assistant for Home Assistant.
          Answer questions about the world truthfully.
          Answer in plain text. Keep it simple and to the point.
      - role: user
        content: |
          # Light on door

          ## Problem statement

          Create an blueprint automation to turn on a light when the door opens.

          ## Example use cases

          These are example use cases that could be used with the blueprint:

          - Turn on the pantry light when the pantry door opens

          ## Detailed Description

          The blueprint should accept two inputs:

          | Input          | Description                                                                     |
          | -------------- | ------------------------------------------------------------------------------- |
          | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
          | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

          The automation should trigger when the door opens, and turn the light on. The
          light should be shut off when the door closes or after a 2 minute timeout.
      - role: assistant
        agent_id: conversation.mock_title
        content: "To implement this blueprint automation for turning on a light based\
          \ on whether the door is open, you can use the `light` component along with\
          \ some logic to handle the timing.\n\nFirst, add a sensor (e.g., a `binary_sensor`)\
          \ that triggers the automation when the door opens. Then, create two components:\n\
          \n1. A light (`light`) component connected to the door (`door_sensor`) and\
          \ controlled by the temperature of the room.\n2. An action (`trigger`) that\
          \ will be triggered on the `light` if the door opens.\n\nHere's how you\
          \ can implement this:\n\n```yaml\n# Home Assistant YAML Blueprint\n\nimport\
          \ { Light, BinarySensor } from 'home-assistant';\n\nlet door = BinarySensor('door_sensor',\
          \ { type: 'binary_sensor' });\n\nconst light = new Light({\n  name: 'My\
          \ Door Light',\n  entity_id: `${door.entity_id}`,\n});\n\n// Set up the\
          \ action that triggers when the door opens\nlight.action.on = async () =>\
          \ {\n  // Delay for 2 minutes (adjust as needed)\n  await delay(180);\n\
          \  \n  // Turn on the light component with a temperature of 50°C\n  await\
          \ light.set_temperature(50, true);\n\n  // Optionally, set a timeout to\
          \ ensure the light is turned off after the door closes\n  if (door.is_open)\
          \ {\n    setTimeout(() => {\n      console.log('Door closed. Light will\
          \ be turned off.');\n    }, 300);\n  }\n};\n\n// Function to delay for some\
          \ time based on room temperature\nfunction delay(ms) {\n  return new Promise(resolve\
          \ => setTimeout(resolve, ms));\n}\n\nasync function main() {\n  door.entity_id\
          \ = 'light' + Math.floor(Math.random() * 100); // Random ID for each door\n\
          \n  await main();\n}\nawait main();\n\n// Example usage:\ndoor.turn_on();\
          \ // Turn on the light\ndoor.toggle(); // Toggle between on and off\n```\n\
          \n### Explanation:\n\n- **Door Sensor**: This sensor triggers the automation\
          \ to turn on the light.\n- **Light Component**: The `light` component is\
          \ connected to the door (`door_sensor`). It will control the temperature\
          \ of the room with a specific value (e.g., 50°C in this example).\n- **Action**:\
          \ When the door opens, the action triggers by setting the temperature of\
          \ the room to 50°C.\n  \n### Important Notes:\n\n1. **Room Temperature**:\
          \ The temperature is calculated and set based on the current room's temperature.\
          \ You can adjust this value if needed.\n\n2. **Timeout (Optional)**: If\
          \ you want the light to turn off after a door closes, you can add `setTimeout()`.\n\
          \n3. **Security Note**: This setup assumes that the temperature sensor is\
          \ within your home's electrical system and not connected to any external\
          \ sensors or devices.\n\n### Running the Automation:\n\n1. Run the main\
          \ function to start the automation.\n2. Adjust the room temperature as needed.\n\
          3. Set up triggers for light switches if you wish to turn off the lights.\n\
          \nThis blueprint can be easily integrated into your Home Assistant project\
          \ by adding more conditions and actions that may be necessary depending\
          \ on your specific needs."
        tool_calls: null
      tools: null
    timestamp: 2025-05-06 00:59:37.123578+00:00
  duration_ms: 13260.244
  tries: 1
