---
uuid: 2ff622f4-db7b-4366-b09f-270b1a5dae58
task_id: humidity_fan_humidity_fan-humidity_fan-1
model_id: qwen2.5-0.5b
category: fan
task:
  input_text: |
    # Humidity Fan

    ## Problem statement

    Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

    ## Example use cases

    These are example use cases that could be used with the blueprint:

    - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
    - Make sure the garage does not get too humid

    ## Detailed Description

    The blueprint should accept two inputs:

    | Input               | Description                                                           |
    | ------------------- | --------------------------------------------------------------------- |
    | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
    | `humidity_level` | A `number` selector to set the value used as the trigger. |
    | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

    The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
    triggered, the fan should be turned off. The fan should also be stopped when the
    sensor goes back down below the desired level. The automation should not try to
    turn the fan on if it is already on, and should not turn the fan off when it is
    already off.
response: "To create a blueprint for turning on a fan based on humidity levels, you\
  \ can use the following:\n\n### Blueprint Structure\n\n1. Import necessary entities:\n\
  ```python\nfrom homeassistant.components.humidity import Sensor, HumidityEntity\n\
  ```\n2. Define the automation logic:\n```python\ndef setup(automation, hass):\n\
  \    sensor = hass.data[humidity_data.id]\n    \n    @automation.on_change(hass,\
  \ {\n        \"humidity_level\": lambda v: on_turn_on(sensor, humidity, v),\n  \
  \      \"fan_entity\": lambda v: turn_off(fan, sensor, v)\n    })\n```\n### Explanation\n\
  \n- **sensor**: A `Sensor` entity that represents the humidty sensor.\n  - The `on_change`\
  \ method ensures that when the value of the sensor changes (e.g., by adding humidity),\
  \ the automation is triggered accordingly.\n  \n  - You can define how to handle\
  \ changes using lambda functions or custom logic.\n\n- **automation.on_change**:\
  \ This allows you to specify callbacks for changes in a blueprint. It updates the\
  \ `automation` variable passed as `automation`.\n\n- **on_turn_on**: When the sensor\
  \ value goes above a specific threshold, turn on the fan.\n  - The variable `_automation`\
  \ is used to store this logic within the automation.\n\n- **turn_off**: When the\
  \ sensor level goes below that threshold, turn off the fan.\n  \n  - This method\
  \ should be placed in the blueprint configuration or as an entity state. \n\n###\
  \ Example Configuration\n\nFor example, if you want to automate turning on the bathroom\
  \ exhaust fan when the humidity is above 60%:\n\n```python\nautomation = hass.config_entries.flow.before_change[1]\n\
  automation.on_change(hass, {\n    \"humidity_level\": lambda v: on_turn_on(sensor,\
  \ humidity, v),\n    \"fan_entity\": lambda v: turn_off(fan, sensor, v)\n})\n```\n\
  \n### Custom Logic\n\n- **on_turn_on**: If the `humidity_sensor` value goes above\
  \ 60%:\n```python\ndef on_turn_on(sensor, humidity, level):\n    if humidity > 60:\n\
  \        fan.turn_on()\n```\n  - Ensure to replace `fan` with the actual fan entity\
  \ that needs to be turned on when the condition is met.\n\n- **turn_off**: If the\
  \ `humidity_sensor` value goes below 60%:\n```python\ndef turn_off(fan, sensor,\
  \ level):\n    if humidity < 60:\n        fan.turn_off()\n```\n  - Ensure to replace\
  \ `fan` with the actual fan entity that needs to be turned off when the condition\
  \ is met.\n\n### Notes\n\n- **fan_entity**: The `FanEntity` that represents the\
  \ fan. You should choose a suitable entity for your use case.\n  \n- **sensor**:\
  \ If you are using multiple sensors, this should be the first sensor in your automation.\n\
  \n- **humidity_level**: The value used as the trigger to turn on or off the fan.\
  \ It can range from 0% to 100%.\n\nRemember that depending on how you configure\
  \ your system, there might not always be a direct link between the humidity and\
  \ the fan level. You might need to extend or modify the logic accordingly."
context:
  conversation_trace:
  - event_type: async_process
    data:
      text: |
        # Humidity Fan

        ## Problem statement

        Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

        ## Example use cases

        These are example use cases that could be used with the blueprint:

        - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
        - Make sure the garage does not get too humid

        ## Detailed Description

        The blueprint should accept two inputs:

        | Input               | Description                                                           |
        | ------------------- | --------------------------------------------------------------------- |
        | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
        | `humidity_level` | A `number` selector to set the value used as the trigger. |
        | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

        The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
        triggered, the fan should be turned off. The fan should also be stopped when the
        sensor goes back down below the desired level. The automation should not try to
        turn the fan on if it is already on, and should not turn the fan off when it is
        already off.
      context:
        id: 01JTHHMAHXWAWXC6NYYTPB71C0
        parent_id: null
        user_id: null
      conversation_id: null
      device_id: null
      language: en
      agent_id: conversation.mock_title
      extra_system_prompt: null
    timestamp: 2025-05-06 00:58:43.133708+00:00
  - event_type: agent_detail
    data:
      messages:
      - role: system
        content: |-
          Current time is 17:58:43. Today's date is 2025-05-05.
          You are a voice assistant for Home Assistant.
          Answer questions about the world truthfully.
          Answer in plain text. Keep it simple and to the point.
      - role: user
        content: |
          # Humidity Fan

          ## Problem statement

          Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

          ## Example use cases

          These are example use cases that could be used with the blueprint:

          - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
          - Make sure the garage does not get too humid

          ## Detailed Description

          The blueprint should accept two inputs:

          | Input               | Description                                                           |
          | ------------------- | --------------------------------------------------------------------- |
          | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
          | `humidity_level` | A `number` selector to set the value used as the trigger. |
          | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

          The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
          triggered, the fan should be turned off. The fan should also be stopped when the
          sensor goes back down below the desired level. The automation should not try to
          turn the fan on if it is already on, and should not turn the fan off when it is
          already off.
      - role: assistant
        agent_id: conversation.mock_title
        content: "To create a blueprint for turning on a fan based on humidity levels,\
          \ you can use the following:\n\n### Blueprint Structure\n\n1. Import necessary\
          \ entities:\n```python\nfrom homeassistant.components.humidity import Sensor,\
          \ HumidityEntity\n```\n2. Define the automation logic:\n```python\ndef setup(automation,\
          \ hass):\n    sensor = hass.data[humidity_data.id]\n    \n    @automation.on_change(hass,\
          \ {\n        \"humidity_level\": lambda v: on_turn_on(sensor, humidity,\
          \ v),\n        \"fan_entity\": lambda v: turn_off(fan, sensor, v)\n    })\n\
          ```\n### Explanation\n\n- **sensor**: A `Sensor` entity that represents\
          \ the humidty sensor.\n  - The `on_change` method ensures that when the\
          \ value of the sensor changes (e.g., by adding humidity), the automation\
          \ is triggered accordingly.\n  \n  - You can define how to handle changes\
          \ using lambda functions or custom logic.\n\n- **automation.on_change**:\
          \ This allows you to specify callbacks for changes in a blueprint. It updates\
          \ the `automation` variable passed as `automation`.\n\n- **on_turn_on**:\
          \ When the sensor value goes above a specific threshold, turn on the fan.\n\
          \  - The variable `_automation` is used to store this logic within the automation.\n\
          \n- **turn_off**: When the sensor level goes below that threshold, turn\
          \ off the fan.\n  \n  - This method should be placed in the blueprint configuration\
          \ or as an entity state. \n\n### Example Configuration\n\nFor example, if\
          \ you want to automate turning on the bathroom exhaust fan when the humidity\
          \ is above 60%:\n\n```python\nautomation = hass.config_entries.flow.before_change[1]\n\
          automation.on_change(hass, {\n    \"humidity_level\": lambda v: on_turn_on(sensor,\
          \ humidity, v),\n    \"fan_entity\": lambda v: turn_off(fan, sensor, v)\n\
          })\n```\n\n### Custom Logic\n\n- **on_turn_on**: If the `humidity_sensor`\
          \ value goes above 60%:\n```python\ndef on_turn_on(sensor, humidity, level):\n\
          \    if humidity > 60:\n        fan.turn_on()\n```\n  - Ensure to replace\
          \ `fan` with the actual fan entity that needs to be turned on when the condition\
          \ is met.\n\n- **turn_off**: If the `humidity_sensor` value goes below 60%:\n\
          ```python\ndef turn_off(fan, sensor, level):\n    if humidity < 60:\n  \
          \      fan.turn_off()\n```\n  - Ensure to replace `fan` with the actual\
          \ fan entity that needs to be turned off when the condition is met.\n\n\
          ### Notes\n\n- **fan_entity**: The `FanEntity` that represents the fan.\
          \ You should choose a suitable entity for your use case.\n  \n- **sensor**:\
          \ If you are using multiple sensors, this should be the first sensor in\
          \ your automation.\n\n- **humidity_level**: The value used as the trigger\
          \ to turn on or off the fan. It can range from 0% to 100%.\n\nRemember that\
          \ depending on how you configure your system, there might not always be\
          \ a direct link between the humidity and the fan level. You might need to\
          \ extend or modify the logic accordingly."
        tool_calls: null
      tools: null
    timestamp: 2025-05-06 00:58:43.135250+00:00
  duration_ms: 13924.833
  tries: 1
