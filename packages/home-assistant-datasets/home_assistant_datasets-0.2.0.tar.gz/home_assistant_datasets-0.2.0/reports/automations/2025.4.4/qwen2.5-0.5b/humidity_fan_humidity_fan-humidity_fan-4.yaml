---
uuid: 3d2a126a-71c0-4da5-adfb-f3e2f14f17b9
task_id: humidity_fan_humidity_fan-humidity_fan-4
model_id: qwen2.5-0.5b
category: fan
task:
  input_text: |
    # Humidity Fan

    ## Problem statement

    Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

    ## Example use cases

    These are example use cases that could be used with the blueprint:

    - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
    - Make sure the garage does not get too humid

    ## Detailed Description

    The blueprint should accept two inputs:

    | Input               | Description                                                           |
    | ------------------- | --------------------------------------------------------------------- |
    | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
    | `humidity_level` | A `number` selector to set the value used as the trigger. |
    | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

    The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
    triggered, the fan should be turned off. The fan should also be stopped when the
    sensor goes back down below the desired level. The automation should not try to
    turn the fan on if it is already on, and should not turn the fan off when it is
    already off.
response: |-
  ```yaml
  automation:
    id: turn_on_fan
    triggers:
      - entity_id: humidity_sensor
        condition: lower_than: 60
        delay_seconds: 1800

  action:
    id: stop_fan
    trigger: [turn_on_fan]
  ```
  ```python
  import homeassistant.components.humidty as humidty

  from datetime import timedelta

  humidity_sensor = sensor_id
  fan_entity = fan_id

  def async_setup_entry(hass, config, async_add_entries):
      await hass.config.async_set_entry(
          config.entry_id,
          async_create_entry(
              entry=async_create_entry(config),
              data={
                  "entity_id": f"sensor.{humidity_sensor}",
                  "action": {
                      "entity_id": f"fan.{fan_entity}"
                  },
                  "actions": {}
              }
          )
      )

  @homeassistant.on(humidty.SENSOR_UPDATE)
  async def async_update_humidity(hass):
      await hass.async_add_executor_job(update_humidity)
  ```
context:
  conversation_trace:
  - event_type: async_process
    data:
      text: |
        # Humidity Fan

        ## Problem statement

        Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

        ## Example use cases

        These are example use cases that could be used with the blueprint:

        - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
        - Make sure the garage does not get too humid

        ## Detailed Description

        The blueprint should accept two inputs:

        | Input               | Description                                                           |
        | ------------------- | --------------------------------------------------------------------- |
        | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
        | `humidity_level` | A `number` selector to set the value used as the trigger. |
        | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

        The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
        triggered, the fan should be turned off. The fan should also be stopped when the
        sensor goes back down below the desired level. The automation should not try to
        turn the fan on if it is already on, and should not turn the fan off when it is
        already off.
      context:
        id: 01JTHHNDQ31MB0JBHMP4FFDX6D
        parent_id: null
        user_id: null
      conversation_id: null
      device_id: null
      language: en
      agent_id: conversation.mock_title
      extra_system_prompt: null
    timestamp: 2025-05-06 00:59:19.140064+00:00
  - event_type: agent_detail
    data:
      messages:
      - role: system
        content: |-
          Current time is 17:59:19. Today's date is 2025-05-05.
          You are a voice assistant for Home Assistant.
          Answer questions about the world truthfully.
          Answer in plain text. Keep it simple and to the point.
      - role: user
        content: |
          # Humidity Fan

          ## Problem statement

          Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

          ## Example use cases

          These are example use cases that could be used with the blueprint:

          - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
          - Make sure the garage does not get too humid

          ## Detailed Description

          The blueprint should accept two inputs:

          | Input               | Description                                                           |
          | ------------------- | --------------------------------------------------------------------- |
          | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
          | `humidity_level` | A `number` selector to set the value used as the trigger. |
          | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

          The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
          triggered, the fan should be turned off. The fan should also be stopped when the
          sensor goes back down below the desired level. The automation should not try to
          turn the fan on if it is already on, and should not turn the fan off when it is
          already off.
      - role: assistant
        agent_id: conversation.mock_title
        content: |-
          ```yaml
          automation:
            id: turn_on_fan
            triggers:
              - entity_id: humidity_sensor
                condition: lower_than: 60
                delay_seconds: 1800

          action:
            id: stop_fan
            trigger: [turn_on_fan]
          ```
          ```python
          import homeassistant.components.humidty as humidty

          from datetime import timedelta

          humidity_sensor = sensor_id
          fan_entity = fan_id

          def async_setup_entry(hass, config, async_add_entries):
              await hass.config.async_set_entry(
                  config.entry_id,
                  async_create_entry(
                      entry=async_create_entry(config),
                      data={
                          "entity_id": f"sensor.{humidity_sensor}",
                          "action": {
                              "entity_id": f"fan.{fan_entity}"
                          },
                          "actions": {}
                      }
                  )
              )

          @homeassistant.on(humidty.SENSOR_UPDATE)
          async def async_update_humidity(hass):
              await hass.async_add_executor_job(update_humidity)
          ```
        tool_calls: null
      tools: null
    timestamp: 2025-05-06 00:59:19.141426+00:00
  duration_ms: 5182.457
  tries: 1
