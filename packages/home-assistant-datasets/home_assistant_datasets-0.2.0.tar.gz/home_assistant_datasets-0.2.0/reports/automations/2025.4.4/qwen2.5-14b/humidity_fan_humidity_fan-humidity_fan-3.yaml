---
uuid: ec409535-0ff9-4da4-82c8-6e5d0851e128
task_id: humidity_fan_humidity_fan-humidity_fan-3
model_id: qwen2.5-14b
category: fan
task:
  input_text: |
    # Humidity Fan

    ## Problem statement

    Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

    ## Example use cases

    These are example use cases that could be used with the blueprint:

    - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
    - Make sure the garage does not get too humid

    ## Detailed Description

    The blueprint should accept two inputs:

    | Input               | Description                                                           |
    | ------------------- | --------------------------------------------------------------------- |
    | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
    | `humidity_level` | A `number` selector to set the value used as the trigger. |
    | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

    The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
    triggered, the fan should be turned off. The fan should also be stopped when the
    sensor goes back down below the desired level. The automation should not try to
    turn the fan on if it is already on, and should not turn the fan off when it is
    already off.
response: |-
  Here's a blueprint automation for Home Assistant that meets your requirements:

  ```yaml
  automation:
    - alias: "Humidity Control Fan Automation"
      trigger:
        platform: state
        entity_id: sensor.humidity_sensor
        to: '>='
        below: !input humidity_level
      action:
        service: fan.turn_on
        target:
          entity_id: fan.fan_entity
      condition:
        condition: or
        conditions:
          - condition: state
            entity_id: fan.fan_entity
            state: off
          - condition: template
            value_template: "{{ is_state('fan.fan_entity', 'off') }}"
      mode: single
    - alias: "Humidity Control Fan Automation (Off)"
      trigger:
        platform: state
        entity_id: sensor.humidity_sensor
        to: '<'
        above: !input humidity_level
      action:
        service: fan.turn_off
        target:
          entity_id: fan.fan_entity
  ```

  Inputs for the blueprint:

  - `humidity_sensor`: The ID of your humidity sensor.
  - `humidity_level`: A number input that sets the trigger level.
  - `fan_entity`: The ID of your fan.

  These rules ensure that the fan turns on when the humidity exceeds the specified level and turns off when it falls below the level. It also ensures that if the fan is already in the desired state, no action will be taken to change its status unnecessarily.
context:
  conversation_trace:
  - event_type: async_process
    data:
      text: |
        # Humidity Fan

        ## Problem statement

        Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

        ## Example use cases

        These are example use cases that could be used with the blueprint:

        - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
        - Make sure the garage does not get too humid

        ## Detailed Description

        The blueprint should accept two inputs:

        | Input               | Description                                                           |
        | ------------------- | --------------------------------------------------------------------- |
        | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
        | `humidity_level` | A `number` selector to set the value used as the trigger. |
        | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

        The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
        triggered, the fan should be turned off. The fan should also be stopped when the
        sensor goes back down below the desired level. The automation should not try to
        turn the fan on if it is already on, and should not turn the fan off when it is
        already off.
      context:
        id: 01JTHT3MJ7WZCTRKET9A2RAZVG
        parent_id: null
        user_id: null
      conversation_id: null
      device_id: null
      language: en
      agent_id: conversation.mock_title
      extra_system_prompt: null
    timestamp: 2025-05-06 03:26:53.511759+00:00
  - event_type: agent_detail
    data:
      messages:
      - role: system
        content: |-
          Current time is 20:26:53. Today's date is 2025-05-05.
          You are a voice assistant for Home Assistant.
          Answer questions about the world truthfully.
          Answer in plain text. Keep it simple and to the point.
      - role: user
        content: |
          # Humidity Fan

          ## Problem statement

          Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

          ## Example use cases

          These are example use cases that could be used with the blueprint:

          - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
          - Make sure the garage does not get too humid

          ## Detailed Description

          The blueprint should accept two inputs:

          | Input               | Description                                                           |
          | ------------------- | --------------------------------------------------------------------- |
          | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
          | `humidity_level` | A `number` selector to set the value used as the trigger. |
          | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

          The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
          triggered, the fan should be turned off. The fan should also be stopped when the
          sensor goes back down below the desired level. The automation should not try to
          turn the fan on if it is already on, and should not turn the fan off when it is
          already off.
      - role: assistant
        agent_id: conversation.mock_title
        content: |-
          Here's a blueprint automation for Home Assistant that meets your requirements:

          ```yaml
          automation:
            - alias: "Humidity Control Fan Automation"
              trigger:
                platform: state
                entity_id: sensor.humidity_sensor
                to: '>='
                below: !input humidity_level
              action:
                service: fan.turn_on
                target:
                  entity_id: fan.fan_entity
              condition:
                condition: or
                conditions:
                  - condition: state
                    entity_id: fan.fan_entity
                    state: off
                  - condition: template
                    value_template: "{{ is_state('fan.fan_entity', 'off') }}"
              mode: single
            - alias: "Humidity Control Fan Automation (Off)"
              trigger:
                platform: state
                entity_id: sensor.humidity_sensor
                to: '<'
                above: !input humidity_level
              action:
                service: fan.turn_off
                target:
                  entity_id: fan.fan_entity
          ```

          Inputs for the blueprint:

          - `humidity_sensor`: The ID of your humidity sensor.
          - `humidity_level`: A number input that sets the trigger level.
          - `fan_entity`: The ID of your fan.

          These rules ensure that the fan turns on when the humidity exceeds the specified level and turns off when it falls below the level. It also ensures that if the fan is already in the desired state, no action will be taken to change its status unnecessarily.
        tool_calls: null
      tools: null
    timestamp: 2025-05-06 03:26:53.513269+00:00
  duration_ms: 24768.222
  tries: 1
