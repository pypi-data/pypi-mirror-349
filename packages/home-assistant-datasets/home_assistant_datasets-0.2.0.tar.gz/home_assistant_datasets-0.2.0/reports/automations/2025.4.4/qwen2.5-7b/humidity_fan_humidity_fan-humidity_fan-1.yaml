---
uuid: 9ac3c2c3-ed78-4306-a75d-96ffe499dcf1
task_id: humidity_fan_humidity_fan-humidity_fan-1
model_id: qwen2.5-7b
category: fan
task:
  input_text: |
    # Humidity Fan

    ## Problem statement

    Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

    ## Example use cases

    These are example use cases that could be used with the blueprint:

    - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
    - Make sure the garage does not get too humid

    ## Detailed Description

    The blueprint should accept two inputs:

    | Input               | Description                                                           |
    | ------------------- | --------------------------------------------------------------------- |
    | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
    | `humidity_level` | A `number` selector to set the value used as the trigger. |
    | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

    The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
    triggered, the fan should be turned off. The fan should also be stopped when the
    sensor goes back down below the desired level. The automation should not try to
    turn the fan on if it is already on, and should not turn the fan off when it is
    already off.
response: |-
  Here's a Home Assistant Blueprint for your humidity-based fan control:

  ```yaml
  - id: HumidityFanControl
    alias: Turn On Fan Based on Humidity
    description: "Turns on the fan when humidity exceeds a set level."
    trigger:
      - platform: state
        entity_id: sensor.humidity_sensor
        attribute: value
        above:
          value_template: "{{触发的湿度值}}"
    condition:
      - condition: state
        entity_id: fan.fan_entity
        state:
          not_equal: "on"
    action:
      - service: fan.turn_on
        target:
          entity_id: fan.fan_entity

    trigger:
      - platform: state
        entity_id: sensor.humidity_sensor
        attribute: value
        below:
          value_template: "{{触发的湿度值}}"
    condition:
      - condition: state
        entity_id: fan.fan_entity
        state:
          not_equal: "off"
    action:
      - service: fan.turn_off
        target:
          entity_id: fan.fan_entity
  ```

  ### Explanation:

  - **Trigger:** Monitors the humidity sensor when its value goes above or below a set threshold.
  - **Condition:** Ensures that the fan is either not already on or off, respectively.
  - **Action:** Turns the fan on if it's off and the humidity exceeds the set level; turns the fan off if it’s on and the humidity drops below the set level.

  Replace `sensor.humidity_sensor`, `fan.fan_entity`, and `{{触发的湿度值}}` with your actual sensor, fan entity ID, and desired humidity threshold.
context:
  conversation_trace:
  - event_type: async_process
    data:
      text: |
        # Humidity Fan

        ## Problem statement

        Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

        ## Example use cases

        These are example use cases that could be used with the blueprint:

        - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
        - Make sure the garage does not get too humid

        ## Detailed Description

        The blueprint should accept two inputs:

        | Input               | Description                                                           |
        | ------------------- | --------------------------------------------------------------------- |
        | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
        | `humidity_level` | A `number` selector to set the value used as the trigger. |
        | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

        The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
        triggered, the fan should be turned off. The fan should also be stopped when the
        sensor goes back down below the desired level. The automation should not try to
        turn the fan on if it is already on, and should not turn the fan off when it is
        already off.
      context:
        id: 01JTHSHBTREZVPRK4APVX6RDJB
        parent_id: null
        user_id: null
      conversation_id: null
      device_id: null
      language: en
      agent_id: conversation.mock_title
      extra_system_prompt: null
    timestamp: 2025-05-06 03:16:54.744902+00:00
  - event_type: agent_detail
    data:
      messages:
      - role: system
        content: |-
          Current time is 20:16:54. Today's date is 2025-05-05.
          You are a voice assistant for Home Assistant.
          Answer questions about the world truthfully.
          Answer in plain text. Keep it simple and to the point.
      - role: user
        content: |
          # Humidity Fan

          ## Problem statement

          Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

          ## Example use cases

          These are example use cases that could be used with the blueprint:

          - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
          - Make sure the garage does not get too humid

          ## Detailed Description

          The blueprint should accept two inputs:

          | Input               | Description                                                           |
          | ------------------- | --------------------------------------------------------------------- |
          | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
          | `humidity_level` | A `number` selector to set the value used as the trigger. |
          | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

          The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
          triggered, the fan should be turned off. The fan should also be stopped when the
          sensor goes back down below the desired level. The automation should not try to
          turn the fan on if it is already on, and should not turn the fan off when it is
          already off.
      - role: assistant
        agent_id: conversation.mock_title
        content: |-
          Here's a Home Assistant Blueprint for your humidity-based fan control:

          ```yaml
          - id: HumidityFanControl
            alias: Turn On Fan Based on Humidity
            description: "Turns on the fan when humidity exceeds a set level."
            trigger:
              - platform: state
                entity_id: sensor.humidity_sensor
                attribute: value
                above:
                  value_template: "{{触发的湿度值}}"
            condition:
              - condition: state
                entity_id: fan.fan_entity
                state:
                  not_equal: "on"
            action:
              - service: fan.turn_on
                target:
                  entity_id: fan.fan_entity

            trigger:
              - platform: state
                entity_id: sensor.humidity_sensor
                attribute: value
                below:
                  value_template: "{{触发的湿度值}}"
            condition:
              - condition: state
                entity_id: fan.fan_entity
                state:
                  not_equal: "off"
            action:
              - service: fan.turn_off
                target:
                  entity_id: fan.fan_entity
          ```

          ### Explanation:

          - **Trigger:** Monitors the humidity sensor when its value goes above or below a set threshold.
          - **Condition:** Ensures that the fan is either not already on or off, respectively.
          - **Action:** Turns the fan on if it's off and the humidity exceeds the set level; turns the fan off if it’s on and the humidity drops below the set level.

          Replace `sensor.humidity_sensor`, `fan.fan_entity`, and `{{触发的湿度值}}` with your actual sensor, fan entity ID, and desired humidity threshold.
        tool_calls: null
      tools: null
    timestamp: 2025-05-06 03:16:54.746451+00:00
  duration_ms: 15708.449
  tries: 1
