---
uuid: 44754de5-c756-4c61-ba97-ec53298d7a5a
task_id: light_on_door_light_on_door-light_on_door-4
model_id: gemini-1.5-flash
category: light
task:
  input_text: |
    # Light on door

    ## Problem statement

    Create an blueprint automation to turn on a light when the door opens.

    ## Example use cases

    These are example use cases that could be used with the blueprint:

    - Turn on the pantry light when the pantry door opens

    ## Detailed Description

    The blueprint should accept two inputs:

    | Input          | Description                                                                     |
    | -------------- | ------------------------------------------------------------------------------- |
    | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
    | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

    The automation should trigger when the door opens, and turn the light on. The
    light should be shut off when the door closes or after a 2 minute timeout.
response: |-
  ```yaml
  alias: Light on Door Opening
  description: Turn on a light when a door opens, and off when it closes or after a timeout.
  use_blueprint:
    path: blueprint.yaml
    input:
      door_sensor: binary_sensor.pantry_door
      light_switch: light.pantry_light
      timeout: '00:02:00' # 2 minutes

  # This is the blueprint.yaml file
  blueprint:
    name: Light on Door Opening
    domain: automation
    input:
      door_sensor:
        name: Door Sensor
        description: The binary sensor that triggers the automation.
        selector:
          entity:
            domain: binary_sensor
            device_class: door
      light_switch:
        name: Light Switch
        description: The light to turn on or off.
        selector:
          entity:
            domain: light
      timeout:
        name: Timeout
        description: How long to keep the light on if the door doesn't close.
        default: '00:02:00'
        selector:
          text:
            type: text
            value: '00:02:00'
  variables:
    light_is_on: false
  mode: restart
  trigger:
    - platform: state
      entity_id: !input door_sensor
      to: 'on'
  action:
    - service: light.turn_on
      target:
        entity_id: !input light_switch
      data: {}
    - variables:
        light_is_on: true
    - delay: !input timeout
    - choose:
        - conditions:
            - condition: state
              entity_id: !input door_sensor
              state: 'off'
          sequence:
            - service: light.turn_off
              target:
                entity_id: !input light_switch
            - variables:
                light_is_on: false
        - default:
            - service: light.turn_off
              target:
                entity_id: !input light_switch
            - variables:
                light_is_on: false

  ```
context:
  conversation_trace:
  - event_type: async_process
    data:
      text: |
        # Light on door

        ## Problem statement

        Create an blueprint automation to turn on a light when the door opens.

        ## Example use cases

        These are example use cases that could be used with the blueprint:

        - Turn on the pantry light when the pantry door opens

        ## Detailed Description

        The blueprint should accept two inputs:

        | Input          | Description                                                                     |
        | -------------- | ------------------------------------------------------------------------------- |
        | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
        | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

        The automation should trigger when the door opens, and turn the light on. The
        light should be shut off when the door closes or after a 2 minute timeout.
      context:
        id: 01JSGDHR77VS1G6VE0C6ASAN0T
        parent_id: null
        user_id: null
      conversation_id: null
      device_id: null
      language: en
      agent_id: conversation.mock_title
      extra_system_prompt: null
    timestamp: 2025-04-23 04:12:28.263239+00:00
  - event_type: agent_detail
    data:
      messages:
      - role: system
        content: |-
          Current time is 21:12:28. Today's date is 2025-04-22.

          Create a Home Assistant blueprint YAML configuration based on the user request.

          Please respond only with markdown that contains yaml. You can
          add comments inline with your step by step thinking. The response must start
          with ```yaml and end with ``` because your answer will be parsed by code. It
          is very important to stick to the format.
      - role: user
        content: |
          # Light on door

          ## Problem statement

          Create an blueprint automation to turn on a light when the door opens.

          ## Example use cases

          These are example use cases that could be used with the blueprint:

          - Turn on the pantry light when the pantry door opens

          ## Detailed Description

          The blueprint should accept two inputs:

          | Input          | Description                                                                     |
          | -------------- | ------------------------------------------------------------------------------- |
          | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
          | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

          The automation should trigger when the door opens, and turn the light on. The
          light should be shut off when the door closes or after a 2 minute timeout.
      - role: assistant
        agent_id: conversation.mock_title
        content: |-
          ```yaml
          alias: Light on Door Opening
          description: Turn on a light when a door opens, and off when it closes or after a timeout.
          use_blueprint:
            path: blueprint.yaml
            input:
              door_sensor: binary_sensor.pantry_door
              light_switch: light.pantry_light
              timeout: '00:02:00' # 2 minutes

          # This is the blueprint.yaml file
          blueprint:
            name: Light on Door Opening
            domain: automation
            input:
              door_sensor:
                name: Door Sensor
                description: The binary sensor that triggers the automation.
                selector:
                  entity:
                    domain: binary_sensor
                    device_class: door
              light_switch:
                name: Light Switch
                description: The light to turn on or off.
                selector:
                  entity:
                    domain: light
              timeout:
                name: Timeout
                description: How long to keep the light on if the door doesn't close.
                default: '00:02:00'
                selector:
                  text:
                    type: text
                    value: '00:02:00'
          variables:
            light_is_on: false
          mode: restart
          trigger:
            - platform: state
              entity_id: !input door_sensor
              to: 'on'
          action:
            - service: light.turn_on
              target:
                entity_id: !input light_switch
              data: {}
            - variables:
                light_is_on: true
            - delay: !input timeout
            - choose:
                - conditions:
                    - condition: state
                      entity_id: !input door_sensor
                      state: 'off'
                  sequence:
                    - service: light.turn_off
                      target:
                        entity_id: !input light_switch
                    - variables:
                        light_is_on: false
                - default:
                    - service: light.turn_off
                      target:
                        entity_id: !input light_switch
                    - variables:
                        light_is_on: false

          ```
        tool_calls: null
      tools: null
    timestamp: 2025-04-23 04:12:28.264834+00:00
  - event_type: agent_detail
    data:
      stats:
        input_tokens: 273
        cached_input_tokens: 0
        output_tokens: 494
    timestamp: 2025-04-23 04:12:31.563870+00:00
  duration_ms: 3300.947
  tries: 1
