---
uuid: 1125c5c5-da04-44e8-bf39-d0acde9bc873
task_id: humidity_fan_humidity_fan-humidity_fan-4
model_id: claude-3-5-haiku
category: fan
task:
  input_text: |
    # Humidity Fan

    ## Problem statement

    Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

    ## Example use cases

    These are example use cases that could be used with the blueprint:

    - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
    - Make sure the garage does not get too humid

    ## Detailed Description

    The blueprint should accept two inputs:

    | Input               | Description                                                           |
    | ------------------- | --------------------------------------------------------------------- |
    | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
    | `humidity_level` | A `number` selector to set the value used as the trigger. |
    | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

    The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
    triggered, the fan should be turned off. The fan should also be stopped when the
    sensor goes back down below the desired level. The automation should not try to
    turn the fan on if it is already on, and should not turn the fan off when it is
    already off.
response: |-
  ```yaml
  # Humidity-based Fan Control Blueprint
  # This blueprint manages a fan based on humidity sensor readings
  blueprint:
    name: Humidity Fan Control
    description: Turn on a fan when humidity exceeds a specified threshold
    domain: automation
    input:
      humidity_sensor:
        name: Humidity Sensor
        description: Sensor to monitor humidity levels
        selector:
          entity:
            domain: sensor

      humidity_level:
        name: Humidity Threshold
        description: Humidity level at which fan will turn on
        selector:
          number:
            min: 0
            max: 100
            unit_of_measurement: "%"
            step: 1

      fan_entity:
        name: Fan Entity
        description: Fan to control based on humidity
        selector:
          entity:
            domain: fan

  variables:
    # Convert input parameters to variables for easier use
    sensor: !input humidity_sensor
    threshold: !input humidity_level
    fan: !input fan_entity

  trigger:
    # Trigger when humidity sensor changes
    - platform: state
      entity_id: !input humidity_sensor

  condition:
    # Check if humidity has actually crossed the threshold
    - condition: numeric_state
      entity_id: !input humidity_sensor
      above: !input humidity_level

  action:
    # Turn on fan if not already on
    - choose:
      - conditions:
          - condition: state
            entity_id: !input fan_entity
            state: 'off'
        sequence:
          - service: fan.turn_on
            target:
              entity_id: !input fan_entity

    # Optional: Turn off fan when humidity drops below threshold
    - choose:
      - conditions:
          - condition: numeric_state
            entity_id: !input humidity_sensor
            below: !input humidity_level
        sequence:
          - service: fan.turn_off
            target:
              entity_id: !input fan_entity

  mode: single
  max_exceeded: silent
  ```
context:
  conversation_trace:
  - event_type: async_process
    data:
      text: |
        # Humidity Fan

        ## Problem statement

        Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

        ## Example use cases

        These are example use cases that could be used with the blueprint:

        - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
        - Make sure the garage does not get too humid

        ## Detailed Description

        The blueprint should accept two inputs:

        | Input               | Description                                                           |
        | ------------------- | --------------------------------------------------------------------- |
        | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
        | `humidity_level` | A `number` selector to set the value used as the trigger. |
        | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

        The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
        triggered, the fan should be turned off. The fan should also be stopped when the
        sensor goes back down below the desired level. The automation should not try to
        turn the fan on if it is already on, and should not turn the fan off when it is
        already off.
      context:
        id: 01JSGDVQVTC0BJWVWVJ6WHTZRH
        parent_id: null
        user_id: null
      conversation_id: null
      device_id: null
      language: en
      agent_id: conversation.mock_title
      extra_system_prompt: null
    timestamp: 2025-04-23 04:17:55.578316+00:00
  - event_type: agent_detail
    data:
      messages:
      - role: system
        content: |-
          Current time is 21:17:55. Today's date is 2025-04-22.

          Create a Home Assistant blueprint YAML configuration based on the user request.

          Please respond only with markdown that contains yaml. You can
          add comments inline with your step by step thinking. The response must start
          with ```yaml and end with ``` because your answer will be parsed by code. It
          is very important to stick to the format.
      - role: user
        content: |
          # Humidity Fan

          ## Problem statement

          Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

          ## Example use cases

          These are example use cases that could be used with the blueprint:

          - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
          - Make sure the garage does not get too humid

          ## Detailed Description

          The blueprint should accept two inputs:

          | Input               | Description                                                           |
          | ------------------- | --------------------------------------------------------------------- |
          | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
          | `humidity_level` | A `number` selector to set the value used as the trigger. |
          | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

          The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
          triggered, the fan should be turned off. The fan should also be stopped when the
          sensor goes back down below the desired level. The automation should not try to
          turn the fan on if it is already on, and should not turn the fan off when it is
          already off.
      - role: assistant
        agent_id: conversation.mock_title
        content: |-
          ```yaml
          # Humidity-based Fan Control Blueprint
          # This blueprint manages a fan based on humidity sensor readings
          blueprint:
            name: Humidity Fan Control
            description: Turn on a fan when humidity exceeds a specified threshold
            domain: automation
            input:
              humidity_sensor:
                name: Humidity Sensor
                description: Sensor to monitor humidity levels
                selector:
                  entity:
                    domain: sensor

              humidity_level:
                name: Humidity Threshold
                description: Humidity level at which fan will turn on
                selector:
                  number:
                    min: 0
                    max: 100
                    unit_of_measurement: "%"
                    step: 1

              fan_entity:
                name: Fan Entity
                description: Fan to control based on humidity
                selector:
                  entity:
                    domain: fan

          variables:
            # Convert input parameters to variables for easier use
            sensor: !input humidity_sensor
            threshold: !input humidity_level
            fan: !input fan_entity

          trigger:
            # Trigger when humidity sensor changes
            - platform: state
              entity_id: !input humidity_sensor

          condition:
            # Check if humidity has actually crossed the threshold
            - condition: numeric_state
              entity_id: !input humidity_sensor
              above: !input humidity_level

          action:
            # Turn on fan if not already on
            - choose:
              - conditions:
                  - condition: state
                    entity_id: !input fan_entity
                    state: 'off'
                sequence:
                  - service: fan.turn_on
                    target:
                      entity_id: !input fan_entity

            # Optional: Turn off fan when humidity drops below threshold
            - choose:
              - conditions:
                  - condition: numeric_state
                    entity_id: !input humidity_sensor
                    below: !input humidity_level
                sequence:
                  - service: fan.turn_off
                    target:
                      entity_id: !input fan_entity

          mode: single
          max_exceeded: silent
          ```
        tool_calls: null
      tools: null
    timestamp: 2025-04-23 04:17:55.580234+00:00
  duration_ms: 7848.245
  tries: 1
