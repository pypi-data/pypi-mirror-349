---
uuid: 760e20f7-27bf-4069-8115-b4325429b4be
task_id: light_on_door_light_on_door-light_on_door-0
model_id: gemini-2.5-flash
category: light
task:
  input_text: |
    # Light on door

    ## Problem statement

    Create an blueprint automation to turn on a light when the door opens.

    ## Example use cases

    These are example use cases that could be used with the blueprint:

    - Turn on the pantry light when the pantry door opens

    ## Detailed Description

    The blueprint should accept two inputs:

    | Input          | Description                                                                     |
    | -------------- | ------------------------------------------------------------------------------- |
    | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
    | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

    The automation should trigger when the door opens, and turn the light on. The
    light should be shut off when the door closes or after a 2 minute timeout.
response: |-
  ```yaml
  blueprint:
    name: Light on door open
    description: Turn on a light when a door opens and turn it off when it closes or after a timeout.
    domain: automation
    input:
      door_sensor:
        name: Door Sensor
        description: The binary sensor for the door (e.g., contact sensor).
        selector:
          entity:
            domain: binary_sensor
            # Optional: Add device_class filter if needed, e.g., device_class: door or device_class: window
      light_switch:
        name: Light(s)
        description: The light(s) to turn on/off.
        selector:
          target:
            entity:
              domain: light

  trigger:
    - platform: state
      entity_id: !input door_sensor
      from: "off"
      to: "on"
      id: "door_opened" # Give this trigger an ID for clarity, though not strictly necessary here

  action:
    - alias: "Turn on light"
      service: light.turn_on
      target: !input light_switch
      # Optional: Add light settings like brightness, color_temp, etc. here if needed
      # data: {}

    - alias: "Wait for door close or timeout"
      wait_for_trigger:
        # Wait until the door sensor is off...
        - platform: state
          entity_id: !input door_sensor
          to: "off"
          id: "door_closed"
        # ...or until 2 minutes have passed
        - platform: template
          value_template: "{{ true }}" # This is always true, used just for the timeout
          for:
            minutes: 2
          id: "timeout"
      timeout: # Set a timeout for the wait_for_trigger itself, just in case, though not strictly needed here
        minutes: 3 # Make this slightly longer than the action timeout

    - alias: "Turn off light"
      # This action runs regardless of which wait_for_trigger condition was met (door closed or timeout)
      service: light.turn_off
      target: !input light_switch

  mode: restart # Recommended mode for automations that might trigger again before completing

  ```
context:
  conversation_trace:
  - event_type: async_process
    data:
      text: |
        # Light on door

        ## Problem statement

        Create an blueprint automation to turn on a light when the door opens.

        ## Example use cases

        These are example use cases that could be used with the blueprint:

        - Turn on the pantry light when the pantry door opens

        ## Detailed Description

        The blueprint should accept two inputs:

        | Input          | Description                                                                     |
        | -------------- | ------------------------------------------------------------------------------- |
        | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
        | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

        The automation should trigger when the door opens, and turn the light on. The
        light should be shut off when the door closes or after a 2 minute timeout.
      context:
        id: 01JSGDQXYQCNED9MWHPXBS1A90
        parent_id: null
        user_id: null
      conversation_id: null
      device_id: null
      language: en
      agent_id: conversation.mock_title
      extra_system_prompt: null
    timestamp: 2025-04-23 04:15:50.743353+00:00
  - event_type: agent_detail
    data:
      messages:
      - role: system
        content: |-
          Current time is 21:15:50. Today's date is 2025-04-22.

          Create a Home Assistant blueprint YAML configuration based on the user request.

          Please respond only with markdown that contains yaml. You can
          add comments inline with your step by step thinking. The response must start
          with ```yaml and end with ``` because your answer will be parsed by code. It
          is very important to stick to the format.
      - role: user
        content: |
          # Light on door

          ## Problem statement

          Create an blueprint automation to turn on a light when the door opens.

          ## Example use cases

          These are example use cases that could be used with the blueprint:

          - Turn on the pantry light when the pantry door opens

          ## Detailed Description

          The blueprint should accept two inputs:

          | Input          | Description                                                                     |
          | -------------- | ------------------------------------------------------------------------------- |
          | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
          | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

          The automation should trigger when the door opens, and turn the light on. The
          light should be shut off when the door closes or after a 2 minute timeout.
      - role: assistant
        agent_id: conversation.mock_title
        content: |-
          ```yaml
          blueprint:
            name: Light on door open
            description: Turn on a light when a door opens and turn it off when it closes or after a timeout.
            domain: automation
            input:
              door_sensor:
                name: Door Sensor
                description: The binary sensor for the door (e.g., contact sensor).
                selector:
                  entity:
                    domain: binary_sensor
                    # Optional: Add device_class filter if needed, e.g., device_class: door or device_class: window
              light_switch:
                name: Light(s)
                description: The light(s) to turn on/off.
                selector:
                  target:
                    entity:
                      domain: light

          trigger:
            - platform: state
              entity_id: !input door_sensor
              from: "off"
              to: "on"
              id: "door_opened" # Give this trigger an ID for clarity, though not strictly necessary here

          action:
            - alias: "Turn on light"
              service: light.turn_on
              target: !input light_switch
              # Optional: Add light settings like brightness, color_temp, etc. here if needed
              # data: {}

            - alias: "Wait for door close or timeout"
              wait_for_trigger:
                # Wait until the door sensor is off...
                - platform: state
                  entity_id: !input door_sensor
                  to: "off"
                  id: "door_closed"
                # ...or until 2 minutes have passed
                - platform: template
                  value_template: "{{ true }}" # This is always true, used just for the timeout
                  for:
                    minutes: 2
                  id: "timeout"
              timeout: # Set a timeout for the wait_for_trigger itself, just in case, though not strictly needed here
                minutes: 3 # Make this slightly longer than the action timeout

            - alias: "Turn off light"
              # This action runs regardless of which wait_for_trigger condition was met (door closed or timeout)
              service: light.turn_off
              target: !input light_switch

          mode: restart # Recommended mode for automations that might trigger again before completing

          ```
        tool_calls: null
      tools: null
    timestamp: 2025-04-23 04:15:50.744937+00:00
  - event_type: agent_detail
    data:
      stats:
        input_tokens: 275
        cached_input_tokens: 0
        output_tokens: 1202
    timestamp: 2025-04-23 04:15:57.173667+00:00
  duration_ms: 6430.626
  tries: 1
