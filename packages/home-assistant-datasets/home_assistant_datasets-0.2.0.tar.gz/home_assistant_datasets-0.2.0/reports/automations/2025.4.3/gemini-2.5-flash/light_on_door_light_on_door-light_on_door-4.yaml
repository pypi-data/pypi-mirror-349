---
uuid: 953fd322-a8b6-45cf-b091-8dc7c7b56839
task_id: light_on_door_light_on_door-light_on_door-4
model_id: gemini-2.5-flash
category: light
task:
  input_text: |
    # Light on door

    ## Problem statement

    Create an blueprint automation to turn on a light when the door opens.

    ## Example use cases

    These are example use cases that could be used with the blueprint:

    - Turn on the pantry light when the pantry door opens

    ## Detailed Description

    The blueprint should accept two inputs:

    | Input          | Description                                                                     |
    | -------------- | ------------------------------------------------------------------------------- |
    | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
    | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

    The automation should trigger when the door opens, and turn the light on. The
    light should be shut off when the door closes or after a 2 minute timeout.
response: |-
  ```yaml
  blueprint:
    name: Light on door open
    description: Turns on a light when a door opens, and turns it off when the door closes or after a timeout.
    domain: automation
    input:
      door_sensor:
        name: Door Sensor
        description: The binary sensor for the door (e.g., a contact sensor that is 'on' when open).
        selector:
          entity:
            domain: binary_sensor
      light_switch:
        name: Light(s) to control
        description: The light entity or entities to turn on when the door opens.
        selector:
          target:
            entity:
              domain: light

  # Trigger when the door sensor changes from off to on
  trigger:
    - platform: state
      entity_id: !input door_sensor
      from: "off"
      to: "on"

  action:
    # Turn on the specified light(s)
    - service: light.turn_on
      target: !input light_switch

    # Wait until the door is closed or a 2-minute timeout occurs
    - wait_for_trigger:
        # Wait for the door sensor state to change back to 'off' (closed)
        - platform: state
          entity_id: !input door_sensor
          to: "off"
      # Set the timeout duration to 2 minutes
      timeout: "00:02:00"
      # Continue the automation even if the timeout is reached before the door closes
      continue_on_timeout: true

    # Turn off the light(s)
    - service: light.turn_off
      target: !input light_switch

  mode: restart
  ```
context:
  conversation_trace:
  - event_type: async_process
    data:
      text: |
        # Light on door

        ## Problem statement

        Create an blueprint automation to turn on a light when the door opens.

        ## Example use cases

        These are example use cases that could be used with the blueprint:

        - Turn on the pantry light when the pantry door opens

        ## Detailed Description

        The blueprint should accept two inputs:

        | Input          | Description                                                                     |
        | -------------- | ------------------------------------------------------------------------------- |
        | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
        | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

        The automation should trigger when the door opens, and turn the light on. The
        light should be shut off when the door closes or after a 2 minute timeout.
      context:
        id: 01JSGE24GBPKWVJ050Z8TSH5TP
        parent_id: null
        user_id: null
      conversation_id: null
      device_id: null
      language: en
      agent_id: conversation.mock_title
      extra_system_prompt: null
    timestamp: 2025-04-23 04:21:25.131622+00:00
  - event_type: agent_detail
    data:
      messages:
      - role: system
        content: |-
          Current time is 21:21:25. Today's date is 2025-04-22.

          Create a Home Assistant blueprint YAML configuration based on the user request.

          Please respond only with markdown that contains yaml. You can
          add comments inline with your step by step thinking. The response must start
          with ```yaml and end with ``` because your answer will be parsed by code. It
          is very important to stick to the format.
      - role: user
        content: |
          # Light on door

          ## Problem statement

          Create an blueprint automation to turn on a light when the door opens.

          ## Example use cases

          These are example use cases that could be used with the blueprint:

          - Turn on the pantry light when the pantry door opens

          ## Detailed Description

          The blueprint should accept two inputs:

          | Input          | Description                                                                     |
          | -------------- | ------------------------------------------------------------------------------- |
          | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
          | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

          The automation should trigger when the door opens, and turn the light on. The
          light should be shut off when the door closes or after a 2 minute timeout.
      - role: assistant
        agent_id: conversation.mock_title
        content: |-
          ```yaml
          blueprint:
            name: Light on door open
            description: Turns on a light when a door opens, and turns it off when the door closes or after a timeout.
            domain: automation
            input:
              door_sensor:
                name: Door Sensor
                description: The binary sensor for the door (e.g., a contact sensor that is 'on' when open).
                selector:
                  entity:
                    domain: binary_sensor
              light_switch:
                name: Light(s) to control
                description: The light entity or entities to turn on when the door opens.
                selector:
                  target:
                    entity:
                      domain: light

          # Trigger when the door sensor changes from off to on
          trigger:
            - platform: state
              entity_id: !input door_sensor
              from: "off"
              to: "on"

          action:
            # Turn on the specified light(s)
            - service: light.turn_on
              target: !input light_switch

            # Wait until the door is closed or a 2-minute timeout occurs
            - wait_for_trigger:
                # Wait for the door sensor state to change back to 'off' (closed)
                - platform: state
                  entity_id: !input door_sensor
                  to: "off"
              # Set the timeout duration to 2 minutes
              timeout: "00:02:00"
              # Continue the automation even if the timeout is reached before the door closes
              continue_on_timeout: true

            # Turn off the light(s)
            - service: light.turn_off
              target: !input light_switch

          mode: restart
          ```
        tool_calls: null
      tools: null
    timestamp: 2025-04-23 04:21:25.133450+00:00
  - event_type: agent_detail
    data:
      stats:
        input_tokens: 275
        cached_input_tokens: 0
        output_tokens: 1468
    timestamp: 2025-04-23 04:21:32.139299+00:00
  duration_ms: 7008.032
  tries: 1
