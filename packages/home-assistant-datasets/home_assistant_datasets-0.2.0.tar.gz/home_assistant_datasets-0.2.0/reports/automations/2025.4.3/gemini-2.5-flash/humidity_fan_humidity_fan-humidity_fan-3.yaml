---
uuid: 5d7b9eb1-dfe6-4760-88d8-1bd2f97d8207
task_id: humidity_fan_humidity_fan-humidity_fan-3
model_id: gemini-2.5-flash
category: fan
task:
  input_text: |
    # Humidity Fan

    ## Problem statement

    Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

    ## Example use cases

    These are example use cases that could be used with the blueprint:

    - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
    - Make sure the garage does not get too humid

    ## Detailed Description

    The blueprint should accept two inputs:

    | Input               | Description                                                           |
    | ------------------- | --------------------------------------------------------------------- |
    | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
    | `humidity_level` | A `number` selector to set the value used as the trigger. |
    | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

    The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
    triggered, the fan should be turned off. The fan should also be stopped when the
    sensor goes back down below the desired level. The automation should not try to
    turn the fan on if it is already on, and should not turn the fan off when it is
    already off.
response: |-
  ```yaml
  blueprint:
    name: Humidity Fan Control
    description: Turns a fan on when humidity exceeds a specified level and off when it drops below that level.
    domain: automation
    # Add a source_url if you plan to share this blueprint publicly
    # source_url: https://github.com/your_username/your_blueprints/blob/main/humidity_fan.yaml

    input:
      humidity_sensor:
        name: Humidity Sensor
        description: The sensor entity that measures humidity.
        selector:
          entity:
            domain: sensor
            # Consider adding device_class: humidity here if you want to filter strictly,
            # but excluding it allows using generic sensor entities if needed.
            # device_class: humidity
      humidity_level:
        name: Humidity Threshold (%)
        description: The humidity percentage level that triggers the fan.
        selector:
          number:
            min: 0
            max: 100
            unit_of_measurement: "%"
            mode: slider
            step: 1
      fan_entity:
        name: Fan Entity
        description: The fan entity to turn on or off.
        selector:
          entity:
            domain: fan

  trigger:
    # Trigger when the humidity sensor state changes.
    - platform: state
      entity_id: !input humidity_sensor

  action:
    - choose:
        # Action 1: Turn the fan ON if humidity is above the threshold AND the fan is currently OFF
        - conditions:
            # Condition: Humidity level is above the specified threshold
            - condition: numeric_state
              entity_id: !input humidity_sensor
              above: !input humidity_level
            # Condition: The fan is currently off
            - condition: state
              entity_id: !input fan_entity
              state: 'off'
          sequence:
            # Turn the fan on
            - service: fan.turn_on
              target:
                entity_id: !input fan_entity
        # Action 2: Turn the fan OFF if humidity is below the threshold AND the fan is currently ON
        - conditions:
            # Condition: Humidity level is below the specified threshold
            - condition: numeric_state
              entity_id: !input humidity_sensor
              below: !input humidity_level
            # Condition: The fan is currently on
            - condition: state
              entity_id: !input fan_entity
              state: 'on'
          sequence:
            # Turn the fan off
            - service: fan.turn_off
              target:
                entity_id: !input fan_entity
      # Optional: Add a default action if none of the conditions are met (e.g., logging)
      # default: []

  mode: single
  # Ensure only one instance of the automation runs at a time.
  # This prevents issues if the sensor state changes rapidly.

  ```
context:
  conversation_trace:
  - event_type: async_process
    data:
      text: |
        # Humidity Fan

        ## Problem statement

        Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

        ## Example use cases

        These are example use cases that could be used with the blueprint:

        - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
        - Make sure the garage does not get too humid

        ## Detailed Description

        The blueprint should accept two inputs:

        | Input               | Description                                                           |
        | ------------------- | --------------------------------------------------------------------- |
        | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
        | `humidity_level` | A `number` selector to set the value used as the trigger. |
        | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

        The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
        triggered, the fan should be turned off. The fan should also be stopped when the
        sensor goes back down below the desired level. The automation should not try to
        turn the fan on if it is already on, and should not turn the fan off when it is
        already off.
      context:
        id: 01JSGCXD6YYPPSXPNY17Z5QC9Q
        parent_id: null
        user_id: null
      conversation_id: null
      device_id: null
      language: en
      agent_id: conversation.mock_title
      extra_system_prompt: null
    timestamp: 2025-04-23 04:01:21.631041+00:00
  - event_type: agent_detail
    data:
      messages:
      - role: system
        content: |-
          Current time is 21:01:21. Today's date is 2025-04-22.

          Create a Home Assistant blueprint YAML configuration based on the user request.

          Please respond only with markdown that contains yaml. You can
          add comments inline with your step by step thinking. The response must start
          with ```yaml and end with ``` because your answer will be parsed by code. It
          is very important to stick to the format.
      - role: user
        content: |
          # Humidity Fan

          ## Problem statement

          Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

          ## Example use cases

          These are example use cases that could be used with the blueprint:

          - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
          - Make sure the garage does not get too humid

          ## Detailed Description

          The blueprint should accept two inputs:

          | Input               | Description                                                           |
          | ------------------- | --------------------------------------------------------------------- |
          | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
          | `humidity_level` | A `number` selector to set the value used as the trigger. |
          | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

          The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
          triggered, the fan should be turned off. The fan should also be stopped when the
          sensor goes back down below the desired level. The automation should not try to
          turn the fan on if it is already on, and should not turn the fan off when it is
          already off.
      - role: assistant
        agent_id: conversation.mock_title
        content: |-
          ```yaml
          blueprint:
            name: Humidity Fan Control
            description: Turns a fan on when humidity exceeds a specified level and off when it drops below that level.
            domain: automation
            # Add a source_url if you plan to share this blueprint publicly
            # source_url: https://github.com/your_username/your_blueprints/blob/main/humidity_fan.yaml

            input:
              humidity_sensor:
                name: Humidity Sensor
                description: The sensor entity that measures humidity.
                selector:
                  entity:
                    domain: sensor
                    # Consider adding device_class: humidity here if you want to filter strictly,
                    # but excluding it allows using generic sensor entities if needed.
                    # device_class: humidity
              humidity_level:
                name: Humidity Threshold (%)
                description: The humidity percentage level that triggers the fan.
                selector:
                  number:
                    min: 0
                    max: 100
                    unit_of_measurement: "%"
                    mode: slider
                    step: 1
              fan_entity:
                name: Fan Entity
                description: The fan entity to turn on or off.
                selector:
                  entity:
                    domain: fan

          trigger:
            # Trigger when the humidity sensor state changes.
            - platform: state
              entity_id: !input humidity_sensor

          action:
            - choose:
                # Action 1: Turn the fan ON if humidity is above the threshold AND the fan is currently OFF
                - conditions:
                    # Condition: Humidity level is above the specified threshold
                    - condition: numeric_state
                      entity_id: !input humidity_sensor
                      above: !input humidity_level
                    # Condition: The fan is currently off
                    - condition: state
                      entity_id: !input fan_entity
                      state: 'off'
                  sequence:
                    # Turn the fan on
                    - service: fan.turn_on
                      target:
                        entity_id: !input fan_entity
                # Action 2: Turn the fan OFF if humidity is below the threshold AND the fan is currently ON
                - conditions:
                    # Condition: Humidity level is below the specified threshold
                    - condition: numeric_state
                      entity_id: !input humidity_sensor
                      below: !input humidity_level
                    # Condition: The fan is currently on
                    - condition: state
                      entity_id: !input fan_entity
                      state: 'on'
                  sequence:
                    # Turn the fan off
                    - service: fan.turn_off
                      target:
                        entity_id: !input fan_entity
              # Optional: Add a default action if none of the conditions are met (e.g., logging)
              # default: []

          mode: single
          # Ensure only one instance of the automation runs at a time.
          # This prevents issues if the sensor state changes rapidly.

          ```
        tool_calls: null
      tools: null
    timestamp: 2025-04-23 04:01:21.633162+00:00
  - event_type: agent_detail
    data:
      stats:
        input_tokens: 362
        cached_input_tokens: 0
        output_tokens: 3129
    timestamp: 2025-04-23 04:01:36.853008+00:00
  duration_ms: 15222.351
  tries: 1
