---
uuid: 05516751-a4b3-44a8-9c82-fa1e2564bbe0
task_id: light_on_door_light_on_door-light_on_door-4
model_id: gemini-2.0-flash-lite
category: light
task:
  input_text: |
    # Light on door

    ## Problem statement

    Create an blueprint automation to turn on a light when the door opens.

    ## Example use cases

    These are example use cases that could be used with the blueprint:

    - Turn on the pantry light when the pantry door opens

    ## Detailed Description

    The blueprint should accept two inputs:

    | Input          | Description                                                                     |
    | -------------- | ------------------------------------------------------------------------------- |
    | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
    | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

    The automation should trigger when the door opens, and turn the light on. The
    light should be shut off when the door closes or after a 2 minute timeout.
response: |-
  ```yaml
  blueprint:
    name: Light on Door
    description: Turn on a light when a door opens. Turn off the light when the door closes or after a timeout.
    domain: automation
    input:
      door_sensor:
        name: Door Sensor
        description: The door sensor to trigger the automation.
        selector:
          entity:
            domain: binary_sensor
            device_class: door
      light_switch:
        name: Light Switch
        description: The light(s) to control.
        selector:
          target:
            entity:
              domain: light

  # The template for the automation
  automation:
    alias: "Light on Door" # Name of the automation
    mode: restart # Restart the automation if it's triggered again while running (e.g., door opens and closes quickly)
    trigger:
      - platform: state
        entity_id: !input door_sensor # The door sensor entity
        from: "off" # Trigger when the door opens (from closed)
        to: "on" # Trigger when the door opens (to open)
    action:
      - alias: "Turn on light" # Add an alias for action for easier debugging
        service: light.turn_on
        target: !input light_switch # Target the light entity
      - wait_for_trigger:
          - platform: state
            entity_id: !input door_sensor # Trigger when door closes
            from: "on" # From open
            to: "off" # To closed
          - platform: timeout
            timeout: 120 # 2 minute timeout
      - alias: "Turn off light"
        service: light.turn_off
        target: !input light_switch # Target the light entity
  ```
context:
  conversation_trace:
  - event_type: async_process
    data:
      text: |
        # Light on door

        ## Problem statement

        Create an blueprint automation to turn on a light when the door opens.

        ## Example use cases

        These are example use cases that could be used with the blueprint:

        - Turn on the pantry light when the pantry door opens

        ## Detailed Description

        The blueprint should accept two inputs:

        | Input          | Description                                                                     |
        | -------------- | ------------------------------------------------------------------------------- |
        | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
        | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

        The automation should trigger when the door opens, and turn the light on. The
        light should be shut off when the door closes or after a 2 minute timeout.
      context:
        id: 01JSGE2BM9127CT582HRC4W5FG
        parent_id: null
        user_id: null
      conversation_id: null
      device_id: null
      language: en
      agent_id: conversation.mock_title
      extra_system_prompt: null
    timestamp: 2025-04-23 04:21:32.425723+00:00
  - event_type: agent_detail
    data:
      messages:
      - role: system
        content: |-
          Current time is 21:21:32. Today's date is 2025-04-22.

          Create a Home Assistant blueprint YAML configuration based on the user request.

          Please respond only with markdown that contains yaml. You can
          add comments inline with your step by step thinking. The response must start
          with ```yaml and end with ``` because your answer will be parsed by code. It
          is very important to stick to the format.
      - role: user
        content: |
          # Light on door

          ## Problem statement

          Create an blueprint automation to turn on a light when the door opens.

          ## Example use cases

          These are example use cases that could be used with the blueprint:

          - Turn on the pantry light when the pantry door opens

          ## Detailed Description

          The blueprint should accept two inputs:

          | Input          | Description                                                                     |
          | -------------- | ------------------------------------------------------------------------------- |
          | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
          | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

          The automation should trigger when the door opens, and turn the light on. The
          light should be shut off when the door closes or after a 2 minute timeout.
      - role: assistant
        agent_id: conversation.mock_title
        content: |-
          ```yaml
          blueprint:
            name: Light on Door
            description: Turn on a light when a door opens. Turn off the light when the door closes or after a timeout.
            domain: automation
            input:
              door_sensor:
                name: Door Sensor
                description: The door sensor to trigger the automation.
                selector:
                  entity:
                    domain: binary_sensor
                    device_class: door
              light_switch:
                name: Light Switch
                description: The light(s) to control.
                selector:
                  target:
                    entity:
                      domain: light

          # The template for the automation
          automation:
            alias: "Light on Door" # Name of the automation
            mode: restart # Restart the automation if it's triggered again while running (e.g., door opens and closes quickly)
            trigger:
              - platform: state
                entity_id: !input door_sensor # The door sensor entity
                from: "off" # Trigger when the door opens (from closed)
                to: "on" # Trigger when the door opens (to open)
            action:
              - alias: "Turn on light" # Add an alias for action for easier debugging
                service: light.turn_on
                target: !input light_switch # Target the light entity
              - wait_for_trigger:
                  - platform: state
                    entity_id: !input door_sensor # Trigger when door closes
                    from: "on" # From open
                    to: "off" # To closed
                  - platform: timeout
                    timeout: 120 # 2 minute timeout
              - alias: "Turn off light"
                service: light.turn_off
                target: !input light_switch # Target the light entity
          ```
        tool_calls: null
      tools: null
    timestamp: 2025-04-23 04:21:32.427314+00:00
  - event_type: agent_detail
    data:
      stats:
        input_tokens: 273
        cached_input_tokens: 0
        output_tokens: 397
    timestamp: 2025-04-23 04:21:35.043596+00:00
  duration_ms: 2618.199
  tries: 1
