---
uuid: e7324e2a-c18e-4eaf-91b7-0303e43768ee
task_id: light_on_door_light_on_door-light_on_door-2
model_id: gemini-2.0-flash-lite
category: light
task:
  input_text: |
    # Light on door

    ## Problem statement

    Create an blueprint automation to turn on a light when the door opens.

    ## Example use cases

    These are example use cases that could be used with the blueprint:

    - Turn on the pantry light when the pantry door opens

    ## Detailed Description

    The blueprint should accept two inputs:

    | Input          | Description                                                                     |
    | -------------- | ------------------------------------------------------------------------------- |
    | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
    | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

    The automation should trigger when the door opens, and turn the light on. The
    light should be shut off when the door closes or after a 2 minute timeout.
response: |-
  ```yaml
  blueprint:
    name: Turn Light On When Door Opens
    description: Turn on a light when a door opens, and off when it closes or after a timeout.
    domain: automation
    input:
      door_sensor:
        name: Door Sensor
        description: The door sensor to monitor.
        selector:
          entity:
            domain: binary_sensor
      light_switch:
        name: Light to Control
        description: The light to turn on and off.
        selector:
          target:
            entity:
              domain: light
      timeout_minutes:
        name: Timeout (minutes)
        description: How long to wait before turning the light off after the door closes.
        default: 2
        selector:
          number:
            min: 1
            max: 60
            unit_of_measurement: minutes
            step: 1
            mode: slider

  trigger:
    - platform: state
      entity_id: !input door_sensor
      from: "off"
      to: "on"

  action:
    - service: light.turn_on
      target: !input light_switch
    - wait_for_trigger:
        - platform: state
          entity_id: !input door_sensor
          from: "on"
          to: "off"
          timeout:
            minutes: !input timeout_minutes # Use input value for timeout
    - service: light.turn_off
      target: !input light_switch
  ```
context:
  conversation_trace:
  - event_type: async_process
    data:
      text: |
        # Light on door

        ## Problem statement

        Create an blueprint automation to turn on a light when the door opens.

        ## Example use cases

        These are example use cases that could be used with the blueprint:

        - Turn on the pantry light when the pantry door opens

        ## Detailed Description

        The blueprint should accept two inputs:

        | Input          | Description                                                                     |
        | -------------- | ------------------------------------------------------------------------------- |
        | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
        | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

        The automation should trigger when the door opens, and turn the light on. The
        light should be shut off when the door closes or after a 2 minute timeout.
      context:
        id: 01JSGD50YQ20694VEDS7ZP9GWX
        parent_id: null
        user_id: null
      conversation_id: null
      device_id: null
      language: en
      agent_id: conversation.mock_title
      extra_system_prompt: null
    timestamp: 2025-04-23 04:05:31.223859+00:00
  - event_type: agent_detail
    data:
      messages:
      - role: system
        content: |-
          Current time is 21:05:31. Today's date is 2025-04-22.

          Create a Home Assistant blueprint YAML configuration based on the user request.

          Please respond only with markdown that contains yaml. You can
          add comments inline with your step by step thinking. The response must start
          with ```yaml and end with ``` because your answer will be parsed by code. It
          is very important to stick to the format.
      - role: user
        content: |
          # Light on door

          ## Problem statement

          Create an blueprint automation to turn on a light when the door opens.

          ## Example use cases

          These are example use cases that could be used with the blueprint:

          - Turn on the pantry light when the pantry door opens

          ## Detailed Description

          The blueprint should accept two inputs:

          | Input          | Description                                                                     |
          | -------------- | ------------------------------------------------------------------------------- |
          | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
          | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

          The automation should trigger when the door opens, and turn the light on. The
          light should be shut off when the door closes or after a 2 minute timeout.
      - role: assistant
        agent_id: conversation.mock_title
        content: |-
          ```yaml
          blueprint:
            name: Turn Light On When Door Opens
            description: Turn on a light when a door opens, and off when it closes or after a timeout.
            domain: automation
            input:
              door_sensor:
                name: Door Sensor
                description: The door sensor to monitor.
                selector:
                  entity:
                    domain: binary_sensor
              light_switch:
                name: Light to Control
                description: The light to turn on and off.
                selector:
                  target:
                    entity:
                      domain: light
              timeout_minutes:
                name: Timeout (minutes)
                description: How long to wait before turning the light off after the door closes.
                default: 2
                selector:
                  number:
                    min: 1
                    max: 60
                    unit_of_measurement: minutes
                    step: 1
                    mode: slider

          trigger:
            - platform: state
              entity_id: !input door_sensor
              from: "off"
              to: "on"

          action:
            - service: light.turn_on
              target: !input light_switch
            - wait_for_trigger:
                - platform: state
                  entity_id: !input door_sensor
                  from: "on"
                  to: "off"
                  timeout:
                    minutes: !input timeout_minutes # Use input value for timeout
            - service: light.turn_off
              target: !input light_switch
          ```
        tool_calls: null
      tools: null
    timestamp: 2025-04-23 04:05:31.225463+00:00
  - event_type: agent_detail
    data:
      stats:
        input_tokens: 273
        cached_input_tokens: 0
        output_tokens: 341
    timestamp: 2025-04-23 04:05:33.558637+00:00
  duration_ms: 2335.191
  tries: 1
