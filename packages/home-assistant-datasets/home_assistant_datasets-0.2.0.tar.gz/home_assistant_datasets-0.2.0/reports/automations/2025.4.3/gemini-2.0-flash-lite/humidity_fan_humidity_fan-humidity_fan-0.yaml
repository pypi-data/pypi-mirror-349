---
uuid: 8ab79a48-f288-4177-9de3-b7d7509b7468
task_id: humidity_fan_humidity_fan-humidity_fan-0
model_id: gemini-2.0-flash-lite
category: fan
task:
  input_text: |
    # Humidity Fan

    ## Problem statement

    Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

    ## Example use cases

    These are example use cases that could be used with the blueprint:

    - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
    - Make sure the garage does not get too humid

    ## Detailed Description

    The blueprint should accept two inputs:

    | Input               | Description                                                           |
    | ------------------- | --------------------------------------------------------------------- |
    | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
    | `humidity_level` | A `number` selector to set the value used as the trigger. |
    | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

    The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
    triggered, the fan should be turned off. The fan should also be stopped when the
    sensor goes back down below the desired level. The automation should not try to
    turn the fan on if it is already on, and should not turn the fan off when it is
    already off.
response: |-
  ```yaml
  blueprint:
    name: Humidity Fan Control
    description: Turns on a fan when humidity exceeds a specified level and turns it off when humidity drops below that level.
    domain: automation
    input:
      humidity_sensor:
        name: Humidity Sensor
        description: The humidity sensor to monitor.
        selector:
          entity:
            domain: sensor
            device_class: humidity
      humidity_level:
        name: Humidity Threshold
        description: The humidity level (percentage) above which to turn on the fan.
        default: 60
        selector:
          number:
            min: 0
            max: 100
            unit_of_measurement: "%"
            step: 1
      fan_entity:
        name: Fan Entity
        description: The fan entity to control.
        selector:
          entity:
            domain: fan

  trigger:
    - platform: numeric_state
      entity_id: !input humidity_sensor
      above: !input humidity_level
      id: humidity_above

    - platform: numeric_state
      entity_id: !input humidity_sensor
      below: !input humidity_level
      id: humidity_below

  action:
    - choose:
        - conditions:
            - condition: trigger
              id: humidity_above
            - condition: state
              entity_id: !input fan_entity
              state: "off" # Check if fan is off before turning it on
          sequence:
            - service: fan.turn_on
              target:
                entity_id: !input fan_entity
              # If the fan is on, do nothing.
        - conditions:
            - condition: trigger
              id: humidity_below
            - condition: state
              entity_id: !input fan_entity
              state: "on" # check if fan is on
          sequence:
            - service: fan.turn_off
              target:
                entity_id: !input fan_entity
      # If the fan is off, do nothing.
  ```
context:
  conversation_trace:
  - event_type: async_process
    data:
      text: |
        # Humidity Fan

        ## Problem statement

        Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

        ## Example use cases

        These are example use cases that could be used with the blueprint:

        - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
        - Make sure the garage does not get too humid

        ## Detailed Description

        The blueprint should accept two inputs:

        | Input               | Description                                                           |
        | ------------------- | --------------------------------------------------------------------- |
        | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
        | `humidity_level` | A `number` selector to set the value used as the trigger. |
        | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

        The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
        triggered, the fan should be turned off. The fan should also be stopped when the
        sensor goes back down below the desired level. The automation should not try to
        turn the fan on if it is already on, and should not turn the fan off when it is
        already off.
      context:
        id: 01JSGCQSSV6GCETQEME1NZ7CPW
        parent_id: null
        user_id: null
      conversation_id: null
      device_id: null
      language: en
      agent_id: conversation.mock_title
      extra_system_prompt: null
    timestamp: 2025-04-23 03:58:17.916106+00:00
  - event_type: agent_detail
    data:
      messages:
      - role: system
        content: |-
          Current time is 20:58:17. Today's date is 2025-04-22.

          Create a Home Assistant blueprint YAML configuration based on the user request.

          Please respond only with markdown that contains yaml. You can
          add comments inline with your step by step thinking. The response must start
          with ```yaml and end with ``` because your answer will be parsed by code. It
          is very important to stick to the format.
      - role: user
        content: |
          # Humidity Fan

          ## Problem statement

          Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

          ## Example use cases

          These are example use cases that could be used with the blueprint:

          - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
          - Make sure the garage does not get too humid

          ## Detailed Description

          The blueprint should accept two inputs:

          | Input               | Description                                                           |
          | ------------------- | --------------------------------------------------------------------- |
          | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
          | `humidity_level` | A `number` selector to set the value used as the trigger. |
          | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

          The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
          triggered, the fan should be turned off. The fan should also be stopped when the
          sensor goes back down below the desired level. The automation should not try to
          turn the fan on if it is already on, and should not turn the fan off when it is
          already off.
      - role: assistant
        agent_id: conversation.mock_title
        content: |-
          ```yaml
          blueprint:
            name: Humidity Fan Control
            description: Turns on a fan when humidity exceeds a specified level and turns it off when humidity drops below that level.
            domain: automation
            input:
              humidity_sensor:
                name: Humidity Sensor
                description: The humidity sensor to monitor.
                selector:
                  entity:
                    domain: sensor
                    device_class: humidity
              humidity_level:
                name: Humidity Threshold
                description: The humidity level (percentage) above which to turn on the fan.
                default: 60
                selector:
                  number:
                    min: 0
                    max: 100
                    unit_of_measurement: "%"
                    step: 1
              fan_entity:
                name: Fan Entity
                description: The fan entity to control.
                selector:
                  entity:
                    domain: fan

          trigger:
            - platform: numeric_state
              entity_id: !input humidity_sensor
              above: !input humidity_level
              id: humidity_above

            - platform: numeric_state
              entity_id: !input humidity_sensor
              below: !input humidity_level
              id: humidity_below

          action:
            - choose:
                - conditions:
                    - condition: trigger
                      id: humidity_above
                    - condition: state
                      entity_id: !input fan_entity
                      state: "off" # Check if fan is off before turning it on
                  sequence:
                    - service: fan.turn_on
                      target:
                        entity_id: !input fan_entity
                      # If the fan is on, do nothing.
                - conditions:
                    - condition: trigger
                      id: humidity_below
                    - condition: state
                      entity_id: !input fan_entity
                      state: "on" # check if fan is on
                  sequence:
                    - service: fan.turn_off
                      target:
                        entity_id: !input fan_entity
              # If the fan is off, do nothing.
          ```
        tool_calls: null
      tools: null
    timestamp: 2025-04-23 03:58:17.917699+00:00
  - event_type: agent_detail
    data:
      stats:
        input_tokens: 360
        cached_input_tokens: 0
        output_tokens: 462
    timestamp: 2025-04-23 03:58:20.813003+00:00
  duration_ms: 2897.236
  tries: 1
