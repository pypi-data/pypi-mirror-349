---
uuid: 97492b74-c363-490d-aaaf-4e010b9360b2
task_id: light_on_door_light_on_door-light_on_door-0
model_id: gemini-2.0-flash-lite
category: light
task:
  input_text: |
    # Light on door

    ## Problem statement

    Create an blueprint automation to turn on a light when the door opens.

    ## Example use cases

    These are example use cases that could be used with the blueprint:

    - Turn on the pantry light when the pantry door opens

    ## Detailed Description

    The blueprint should accept two inputs:

    | Input          | Description                                                                     |
    | -------------- | ------------------------------------------------------------------------------- |
    | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
    | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

    The automation should trigger when the door opens, and turn the light on. The
    light should be shut off when the door closes or after a 2 minute timeout.
response: |-
  ```yaml
  blueprint:
    name: Turn on light when door opens
    description: Turn on a light when a door opens, turn off when door closes or after a timeout.
    domain: automation
    input:
      door_sensor:
        name: Door Sensor
        description: The binary sensor for the door.
        selector:
          entity:
            domain: binary_sensor
            device_class: door
      light_switch:
        name: Light Switch
        description: The light(s) to turn on/off.
        selector:
          target:
            entity:
              domain: light

  variables:
    door_open_state: "on" # Consider "on" as open, "off" as closed.  Adjust as needed for your door sensor's state.

  trigger:
    - platform: state
      entity_id: !input door_sensor
      to: !input door_open_state # Trigger when the door opens
      from:
        - "off" #Consider "off" as closed
        - "unavailable" #Handle the unavailable state
        - "unknown" #Handle the unknown state

  action:
    - alias: "Turn on the light"
      service: light.turn_on
      target: !input light_switch
    - wait_for_trigger:  # Wait for either the door to close or the timeout.
        - platform: state
          entity_id: !input door_sensor
          to:
            - "off" # Door closed
            - "unavailable" # Door is unavailable.
          from: !input door_open_state # from door is open state
        - platform: timeout
          timeout: 120 # Seconds
      continue_on_timeout: true  # Continue even if timeout happens
    - alias: "Turn off the light"
      service: light.turn_off
      target: !input light_switch
  ```
context:
  conversation_trace:
  - event_type: async_process
    data:
      text: |
        # Light on door

        ## Problem statement

        Create an blueprint automation to turn on a light when the door opens.

        ## Example use cases

        These are example use cases that could be used with the blueprint:

        - Turn on the pantry light when the pantry door opens

        ## Detailed Description

        The blueprint should accept two inputs:

        | Input          | Description                                                                     |
        | -------------- | ------------------------------------------------------------------------------- |
        | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
        | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

        The automation should trigger when the door opens, and turn the light on. The
        light should be shut off when the door closes or after a 2 minute timeout.
      context:
        id: 01JSGD385YF6YKK3MVPQ1R69Y7
        parent_id: null
        user_id: null
      conversation_id: null
      device_id: null
      language: en
      agent_id: conversation.mock_title
      extra_system_prompt: null
    timestamp: 2025-04-23 04:04:33.086537+00:00
  - event_type: agent_detail
    data:
      messages:
      - role: system
        content: |-
          Current time is 21:04:33. Today's date is 2025-04-22.

          Create a Home Assistant blueprint YAML configuration based on the user request.

          Please respond only with markdown that contains yaml. You can
          add comments inline with your step by step thinking. The response must start
          with ```yaml and end with ``` because your answer will be parsed by code. It
          is very important to stick to the format.
      - role: user
        content: |
          # Light on door

          ## Problem statement

          Create an blueprint automation to turn on a light when the door opens.

          ## Example use cases

          These are example use cases that could be used with the blueprint:

          - Turn on the pantry light when the pantry door opens

          ## Detailed Description

          The blueprint should accept two inputs:

          | Input          | Description                                                                     |
          | -------------- | ------------------------------------------------------------------------------- |
          | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
          | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

          The automation should trigger when the door opens, and turn the light on. The
          light should be shut off when the door closes or after a 2 minute timeout.
      - role: assistant
        agent_id: conversation.mock_title
        content: |-
          ```yaml
          blueprint:
            name: Turn on light when door opens
            description: Turn on a light when a door opens, turn off when door closes or after a timeout.
            domain: automation
            input:
              door_sensor:
                name: Door Sensor
                description: The binary sensor for the door.
                selector:
                  entity:
                    domain: binary_sensor
                    device_class: door
              light_switch:
                name: Light Switch
                description: The light(s) to turn on/off.
                selector:
                  target:
                    entity:
                      domain: light

          variables:
            door_open_state: "on" # Consider "on" as open, "off" as closed.  Adjust as needed for your door sensor's state.

          trigger:
            - platform: state
              entity_id: !input door_sensor
              to: !input door_open_state # Trigger when the door opens
              from:
                - "off" #Consider "off" as closed
                - "unavailable" #Handle the unavailable state
                - "unknown" #Handle the unknown state

          action:
            - alias: "Turn on the light"
              service: light.turn_on
              target: !input light_switch
            - wait_for_trigger:  # Wait for either the door to close or the timeout.
                - platform: state
                  entity_id: !input door_sensor
                  to:
                    - "off" # Door closed
                    - "unavailable" # Door is unavailable.
                  from: !input door_open_state # from door is open state
                - platform: timeout
                  timeout: 120 # Seconds
              continue_on_timeout: true  # Continue even if timeout happens
            - alias: "Turn off the light"
              service: light.turn_off
              target: !input light_switch
          ```
        tool_calls: null
      tools: null
    timestamp: 2025-04-23 04:04:33.088350+00:00
  - event_type: agent_detail
    data:
      stats:
        input_tokens: 273
        cached_input_tokens: 0
        output_tokens: 429
    timestamp: 2025-04-23 04:04:36.187261+00:00
  duration_ms: 3101.075
  tries: 1
