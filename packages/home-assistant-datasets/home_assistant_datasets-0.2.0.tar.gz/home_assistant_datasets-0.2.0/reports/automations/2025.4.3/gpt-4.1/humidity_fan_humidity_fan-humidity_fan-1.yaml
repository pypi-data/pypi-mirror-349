---
uuid: 39cf5716-b219-44e9-925d-aca5b39f62b2
task_id: humidity_fan_humidity_fan-humidity_fan-1
model_id: gpt-4.1
category: fan
task:
  input_text: |
    # Humidity Fan

    ## Problem statement

    Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

    ## Example use cases

    These are example use cases that could be used with the blueprint:

    - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
    - Make sure the garage does not get too humid

    ## Detailed Description

    The blueprint should accept two inputs:

    | Input               | Description                                                           |
    | ------------------- | --------------------------------------------------------------------- |
    | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
    | `humidity_level` | A `number` selector to set the value used as the trigger. |
    | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

    The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
    triggered, the fan should be turned off. The fan should also be stopped when the
    sensor goes back down below the desired level. The automation should not try to
    turn the fan on if it is already on, and should not turn the fan off when it is
    already off.
response: |-
  ```yaml
  blueprint:
    name: Humidity Based Fan Control
    description: |
      Automatically turn a fan entity on when a humidity sensor goes above a set level and turn it off when it falls below.
      - Only turns fan on if it's not already running.
      - Only turns fan off if it is running.
    domain: automation
    input:
      humidity_sensor:
        name: Humidity Sensor
        description: The sensor providing humidity readings.
        selector:
          entity:
            domain: sensor
            device_class: humidity
      humidity_level:
        name: Humidity Trigger Level
        description: The humidity value (in %) at which to toggle the fan on/off.
        default: 60
        selector:
          number:
            min: 1
            max: 100
            unit_of_measurement: '%'
            mode: slider
      fan_entity:
        name: Fan Entity
        description: The fan to control based on humidity.
        selector:
          entity:
            domain: fan

  mode: restart
  max_exceeded: silent

  trigger:
    - platform: state
      entity_id: !input humidity_sensor

  variables:
    current_humidity: "{{ states( (blueprint.inputs.humidity_sensor) ) | float }}"
    humidity_level: !input humidity_level
    fan_entity: !input fan_entity

  condition: []

  action:
    - choose:
        # If humidity is above the threshold and fan is OFF, turn on fan
        - conditions:
            - condition: template
              value_template: "{{ current_humidity > humidity_level }}"
            - condition: state
              entity_id: !input fan_entity
              state: 'off'
          sequence:
            - service: fan.turn_on
              target:
                entity_id: !input fan_entity
        # If humidity is at or below the threshold and fan is ON, turn off fan
        - conditions:
            - condition: template
              value_template: "{{ current_humidity <= humidity_level }}"
            - condition: state
              entity_id: !input fan_entity
              state: 'on'
          sequence:
            - service: fan.turn_off
              target:
                entity_id: !input fan_entity
  ```
context:
  conversation_trace:
  - event_type: async_process
    data:
      text: |
        # Humidity Fan

        ## Problem statement

        Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

        ## Example use cases

        These are example use cases that could be used with the blueprint:

        - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
        - Make sure the garage does not get too humid

        ## Detailed Description

        The blueprint should accept two inputs:

        | Input               | Description                                                           |
        | ------------------- | --------------------------------------------------------------------- |
        | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
        | `humidity_level` | A `number` selector to set the value used as the trigger. |
        | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

        The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
        triggered, the fan should be turned off. The fan should also be stopped when the
        sensor goes back down below the desired level. The automation should not try to
        turn the fan on if it is already on, and should not turn the fan off when it is
        already off.
      context:
        id: 01JSGDZ0VASCSKJ394FG0RPZ2F
        parent_id: null
        user_id: null
      conversation_id: null
      device_id: null
      language: en
      agent_id: conversation.mock_title
      extra_system_prompt: null
    timestamp: 2025-04-23 04:19:43.082138+00:00
  - event_type: agent_detail
    data:
      messages:
      - role: system
        content: |-
          Current time is 21:19:43. Today's date is 2025-04-22.

          Create a Home Assistant blueprint YAML configuration based on the user request.

          Please respond only with markdown that contains yaml. You can
          add comments inline with your step by step thinking. The response must start
          with ```yaml and end with ``` because your answer will be parsed by code. It
          is very important to stick to the format.
      - role: user
        content: |
          # Humidity Fan

          ## Problem statement

          Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

          ## Example use cases

          These are example use cases that could be used with the blueprint:

          - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
          - Make sure the garage does not get too humid

          ## Detailed Description

          The blueprint should accept two inputs:

          | Input               | Description                                                           |
          | ------------------- | --------------------------------------------------------------------- |
          | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
          | `humidity_level` | A `number` selector to set the value used as the trigger. |
          | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

          The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
          triggered, the fan should be turned off. The fan should also be stopped when the
          sensor goes back down below the desired level. The automation should not try to
          turn the fan on if it is already on, and should not turn the fan off when it is
          already off.
      - role: assistant
        agent_id: conversation.mock_title
        content: |-
          ```yaml
          blueprint:
            name: Humidity Based Fan Control
            description: |
              Automatically turn a fan entity on when a humidity sensor goes above a set level and turn it off when it falls below.
              - Only turns fan on if it's not already running.
              - Only turns fan off if it is running.
            domain: automation
            input:
              humidity_sensor:
                name: Humidity Sensor
                description: The sensor providing humidity readings.
                selector:
                  entity:
                    domain: sensor
                    device_class: humidity
              humidity_level:
                name: Humidity Trigger Level
                description: The humidity value (in %) at which to toggle the fan on/off.
                default: 60
                selector:
                  number:
                    min: 1
                    max: 100
                    unit_of_measurement: '%'
                    mode: slider
              fan_entity:
                name: Fan Entity
                description: The fan to control based on humidity.
                selector:
                  entity:
                    domain: fan

          mode: restart
          max_exceeded: silent

          trigger:
            - platform: state
              entity_id: !input humidity_sensor

          variables:
            current_humidity: "{{ states( (blueprint.inputs.humidity_sensor) ) | float }}"
            humidity_level: !input humidity_level
            fan_entity: !input fan_entity

          condition: []

          action:
            - choose:
                # If humidity is above the threshold and fan is OFF, turn on fan
                - conditions:
                    - condition: template
                      value_template: "{{ current_humidity > humidity_level }}"
                    - condition: state
                      entity_id: !input fan_entity
                      state: 'off'
                  sequence:
                    - service: fan.turn_on
                      target:
                        entity_id: !input fan_entity
                # If humidity is at or below the threshold and fan is ON, turn off fan
                - conditions:
                    - condition: template
                      value_template: "{{ current_humidity <= humidity_level }}"
                    - condition: state
                      entity_id: !input fan_entity
                      state: 'on'
                  sequence:
                    - service: fan.turn_off
                      target:
                        entity_id: !input fan_entity
          ```
        tool_calls: null
      tools: null
    timestamp: 2025-04-23 04:19:43.083882+00:00
  - event_type: agent_detail
    data:
      stats:
        input_tokens: 340
        output_tokens: 457
    timestamp: 2025-04-23 04:19:49.844997+00:00
  duration_ms: 6763.748
  tries: 1
