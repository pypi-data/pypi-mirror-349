---
uuid: 6b741652-f97e-48c7-8e6d-61b653630002
task_id: humidity_fan_humidity_fan-humidity_fan-2
model_id: claude-3-7-sonnet
category: fan
task:
  input_text: |
    # Humidity Fan

    ## Problem statement

    Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

    ## Example use cases

    These are example use cases that could be used with the blueprint:

    - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
    - Make sure the garage does not get too humid

    ## Detailed Description

    The blueprint should accept two inputs:

    | Input               | Description                                                           |
    | ------------------- | --------------------------------------------------------------------- |
    | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
    | `humidity_level` | A `number` selector to set the value used as the trigger. |
    | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

    The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
    triggered, the fan should be turned off. The fan should also be stopped when the
    sensor goes back down below the desired level. The automation should not try to
    turn the fan on if it is already on, and should not turn the fan off when it is
    already off.
response: "```yaml\n# Humidity Fan Blueprint\n# This blueprint turns on a fan when\
  \ a humidity sensor exceeds a specified level,\n# and turns it off when the humidity\
  \ falls below that level.\n\n# First, let's define the basic blueprint metadata\n\
  blueprint:\n  name: \"Humidity Fan Control\"\n  description: \"Controls a fan based\
  \ on humidity readings from a sensor.\"\n  domain: automation\n  author: \"Home\
  \ Assistant Blueprint Creator\"\n  source_url: \"https://github.com/home-assistant/blueprints\"\
  \n  input:\n    humidity_sensor:\n      name: Humidity Sensor\n      description:\
  \ \"The humidity sensor that will trigger the fan.\"\n      selector:\n        entity:\n\
  \          domain: sensor\n          device_class: humidity\n    humidity_level:\n\
  \      name: Humidity Threshold\n      description: \"When humidity exceeds this\
  \ percentage value, the fan will turn on.\"\n      default: 60\n      selector:\n\
  \        number:\n          min: 0\n          max: 100\n          unit_of_measurement:\
  \ \"%\"\n          mode: slider\n          step: 1\n    fan_entity:\n      name:\
  \ Fan\n      description: \"The fan that will be controlled.\"\n      selector:\n\
  \        entity:\n          domain: fan\n\n# Now, let's define the trigger for the\
  \ automation\n# We'll use a state trigger to monitor the humidity sensor\ntrigger:\n\
  \  - platform: numeric_state\n    entity_id: !input humidity_sensor\n    above:\
  \ !input humidity_level\n    id: \"humidity_high\"\n  - platform: numeric_state\n\
  \    entity_id: !input humidity_sensor\n    below: !input humidity_level\n    id:\
  \ \"humidity_low\"\n\n# Define a condition to check the current state of the fan\n\
  # This ensures we don't try to turn on an already-on fan or turn off an already-off\
  \ fan\ncondition: []\n\n# Now define the action to take when triggered\naction:\n\
  \  - choose:\n      # When humidity is high, turn fan on (if it's not already on)\n\
  \      - conditions:\n          - condition: trigger\n            id: \"humidity_high\"\
  \n          - condition: state\n            entity_id: !input fan_entity\n     \
  \       state: \"off\"\n        sequence:\n          - service: fan.turn_on\n  \
  \          target:\n              entity_id: !input fan_entity\n      \n      #\
  \ When humidity is low, turn fan off (if it's not already off)\n      - conditions:\n\
  \          - condition: trigger\n            id: \"humidity_low\"\n          - condition:\
  \ state\n            entity_id: !input fan_entity\n            state: \"on\"\n \
  \       sequence:\n          - service: fan.turn_off\n            target:\n    \
  \          entity_id: !input fan_entity\n\n# Adding mode as single to prevent multiple\
  \ simultaneous executions\nmode: single\n```"
context:
  conversation_trace:
  - event_type: async_process
    data:
      text: |
        # Humidity Fan

        ## Problem statement

        Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

        ## Example use cases

        These are example use cases that could be used with the blueprint:

        - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
        - Make sure the garage does not get too humid

        ## Detailed Description

        The blueprint should accept two inputs:

        | Input               | Description                                                           |
        | ------------------- | --------------------------------------------------------------------- |
        | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
        | `humidity_level` | A `number` selector to set the value used as the trigger. |
        | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

        The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
        triggered, the fan should be turned off. The fan should also be stopped when the
        sensor goes back down below the desired level. The automation should not try to
        turn the fan on if it is already on, and should not turn the fan off when it is
        already off.
      context:
        id: 01JSGDEM1T60XH8N7S7XP3E7EH
        parent_id: null
        user_id: null
      conversation_id: null
      device_id: null
      language: en
      agent_id: conversation.mock_title
      extra_system_prompt: null
    timestamp: 2025-04-23 04:10:45.690436+00:00
  - event_type: agent_detail
    data:
      messages:
      - role: system
        content: |-
          Current time is 21:10:45. Today's date is 2025-04-22.

          Create a Home Assistant blueprint YAML configuration based on the user request.

          Please respond only with markdown that contains yaml. You can
          add comments inline with your step by step thinking. The response must start
          with ```yaml and end with ``` because your answer will be parsed by code. It
          is very important to stick to the format.
      - role: user
        content: |
          # Humidity Fan

          ## Problem statement

          Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

          ## Example use cases

          These are example use cases that could be used with the blueprint:

          - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
          - Make sure the garage does not get too humid

          ## Detailed Description

          The blueprint should accept two inputs:

          | Input               | Description                                                           |
          | ------------------- | --------------------------------------------------------------------- |
          | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
          | `humidity_level` | A `number` selector to set the value used as the trigger. |
          | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

          The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
          triggered, the fan should be turned off. The fan should also be stopped when the
          sensor goes back down below the desired level. The automation should not try to
          turn the fan on if it is already on, and should not turn the fan off when it is
          already off.
      - role: assistant
        agent_id: conversation.mock_title
        content: "```yaml\n# Humidity Fan Blueprint\n# This blueprint turns on a fan\
          \ when a humidity sensor exceeds a specified level,\n# and turns it off\
          \ when the humidity falls below that level.\n\n# First, let's define the\
          \ basic blueprint metadata\nblueprint:\n  name: \"Humidity Fan Control\"\
          \n  description: \"Controls a fan based on humidity readings from a sensor.\"\
          \n  domain: automation\n  author: \"Home Assistant Blueprint Creator\"\n\
          \  source_url: \"https://github.com/home-assistant/blueprints\"\n  input:\n\
          \    humidity_sensor:\n      name: Humidity Sensor\n      description: \"\
          The humidity sensor that will trigger the fan.\"\n      selector:\n    \
          \    entity:\n          domain: sensor\n          device_class: humidity\n\
          \    humidity_level:\n      name: Humidity Threshold\n      description:\
          \ \"When humidity exceeds this percentage value, the fan will turn on.\"\
          \n      default: 60\n      selector:\n        number:\n          min: 0\n\
          \          max: 100\n          unit_of_measurement: \"%\"\n          mode:\
          \ slider\n          step: 1\n    fan_entity:\n      name: Fan\n      description:\
          \ \"The fan that will be controlled.\"\n      selector:\n        entity:\n\
          \          domain: fan\n\n# Now, let's define the trigger for the automation\n\
          # We'll use a state trigger to monitor the humidity sensor\ntrigger:\n \
          \ - platform: numeric_state\n    entity_id: !input humidity_sensor\n   \
          \ above: !input humidity_level\n    id: \"humidity_high\"\n  - platform:\
          \ numeric_state\n    entity_id: !input humidity_sensor\n    below: !input\
          \ humidity_level\n    id: \"humidity_low\"\n\n# Define a condition to check\
          \ the current state of the fan\n# This ensures we don't try to turn on an\
          \ already-on fan or turn off an already-off fan\ncondition: []\n\n# Now\
          \ define the action to take when triggered\naction:\n  - choose:\n     \
          \ # When humidity is high, turn fan on (if it's not already on)\n      -\
          \ conditions:\n          - condition: trigger\n            id: \"humidity_high\"\
          \n          - condition: state\n            entity_id: !input fan_entity\n\
          \            state: \"off\"\n        sequence:\n          - service: fan.turn_on\n\
          \            target:\n              entity_id: !input fan_entity\n     \
          \ \n      # When humidity is low, turn fan off (if it's not already off)\n\
          \      - conditions:\n          - condition: trigger\n            id: \"\
          humidity_low\"\n          - condition: state\n            entity_id: !input\
          \ fan_entity\n            state: \"on\"\n        sequence:\n          -\
          \ service: fan.turn_off\n            target:\n              entity_id: !input\
          \ fan_entity\n\n# Adding mode as single to prevent multiple simultaneous\
          \ executions\nmode: single\n```"
        tool_calls: null
      tools: null
    timestamp: 2025-04-23 04:10:45.696216+00:00
  duration_ms: 9231.067
  tries: 1
