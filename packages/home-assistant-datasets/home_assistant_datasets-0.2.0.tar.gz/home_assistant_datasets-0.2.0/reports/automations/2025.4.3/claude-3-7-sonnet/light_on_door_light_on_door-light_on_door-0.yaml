---
uuid: 0ea84d81-9363-4b98-9064-20eb1359c7c9
task_id: light_on_door_light_on_door-light_on_door-0
model_id: claude-3-7-sonnet
category: light
task:
  input_text: |
    # Light on door

    ## Problem statement

    Create an blueprint automation to turn on a light when the door opens.

    ## Example use cases

    These are example use cases that could be used with the blueprint:

    - Turn on the pantry light when the pantry door opens

    ## Detailed Description

    The blueprint should accept two inputs:

    | Input          | Description                                                                     |
    | -------------- | ------------------------------------------------------------------------------- |
    | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
    | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

    The automation should trigger when the door opens, and turn the light on. The
    light should be shut off when the door closes or after a 2 minute timeout.
response: "```yaml\n# This blueprint creates an automation that turns on a light when\
  \ a door opens,\n# and turns it off when the door closes (or after a 2-minute timeout)\n\
  blueprint:\n  name: Light on Door\n  description: >\n    Turn on a light when a\
  \ door opens and turn it off when the door closes or after a timeout.\n  domain:\
  \ automation\n  input:\n    door_sensor:\n      name: Door Sensor\n      description:\
  \ The door sensor that will trigger the light\n      selector:\n        entity:\n\
  \          domain: binary_sensor\n          multiple: false\n    light_switch:\n\
  \      name: Light\n      description: The light(s) to control\n      selector:\n\
  \        target:\n          entity:\n            domain: light\n\n# Define triggers\
  \ for the automation\ntrigger:\n  # Trigger when the door sensor state changes\n\
  \  - platform: state\n    entity_id: !input door_sensor\n    id: door_change\n\n\
  # Define conditions (none needed for this automation)\ncondition: []\n\n# Define\
  \ actions based on the trigger\naction:\n  # Check if door opened\n  - choose:\n\
  \      # If door opened (state changes to \"on\")\n      - conditions:\n       \
  \   - condition: template\n            value_template: \"{{ trigger.to_state.state\
  \ == 'on' }}\"\n        sequence:\n          # Turn on the light\n          - service:\
  \ light.turn_on\n            target: !input light_switch\n            data: {}\n\
  \      \n      # If door closed (state changes to \"off\")\n      - conditions:\n\
  \          - condition: template\n            value_template: \"{{ trigger.to_state.state\
  \ == 'off' }}\"\n        sequence:\n          # Turn off the light\n          -\
  \ service: light.turn_off\n            target: !input light_switch\n           \
  \ data: {}\n    \n    # Default action if neither condition met (shouldn't happen,\
  \ but included for robustness)\n    default: []\n  \n  # Set up timeout - only run\
  \ if door is left open\n  - choose:\n      - conditions:\n          - condition:\
  \ template\n            value_template: \"{{ trigger.to_state.state == 'on' }}\"\
  \n        sequence:\n          # Wait 2 minutes\n          - delay:\n          \
  \    minutes: 2\n          \n          # Check if door is still open\n         \
  \ - condition: state\n            entity_id: !input door_sensor\n            state:\
  \ \"on\"\n          \n          # Turn off the light after timeout\n          -\
  \ service: light.turn_off\n            target: !input light_switch\n           \
  \ data: {}\n    \n    # Default action if door closed (no timeout needed)\n    default:\
  \ []\n\n# Add mode to restart the automation each time the door state changes\n\
  mode: restart\n```"
context:
  conversation_trace:
  - event_type: async_process
    data:
      text: |
        # Light on door

        ## Problem statement

        Create an blueprint automation to turn on a light when the door opens.

        ## Example use cases

        These are example use cases that could be used with the blueprint:

        - Turn on the pantry light when the pantry door opens

        ## Detailed Description

        The blueprint should accept two inputs:

        | Input          | Description                                                                     |
        | -------------- | ------------------------------------------------------------------------------- |
        | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
        | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

        The automation should trigger when the door opens, and turn the light on. The
        light should be shut off when the door closes or after a 2 minute timeout.
      context:
        id: 01JSGDPZ80FRF15DJMAN9NRTB6
        parent_id: null
        user_id: null
      conversation_id: null
      device_id: null
      language: en
      agent_id: conversation.mock_title
      extra_system_prompt: null
    timestamp: 2025-04-23 04:15:19.296694+00:00
  - event_type: agent_detail
    data:
      messages:
      - role: system
        content: |-
          Current time is 21:15:19. Today's date is 2025-04-22.

          Create a Home Assistant blueprint YAML configuration based on the user request.

          Please respond only with markdown that contains yaml. You can
          add comments inline with your step by step thinking. The response must start
          with ```yaml and end with ``` because your answer will be parsed by code. It
          is very important to stick to the format.
      - role: user
        content: |
          # Light on door

          ## Problem statement

          Create an blueprint automation to turn on a light when the door opens.

          ## Example use cases

          These are example use cases that could be used with the blueprint:

          - Turn on the pantry light when the pantry door opens

          ## Detailed Description

          The blueprint should accept two inputs:

          | Input          | Description                                                                     |
          | -------------- | ------------------------------------------------------------------------------- |
          | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
          | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

          The automation should trigger when the door opens, and turn the light on. The
          light should be shut off when the door closes or after a 2 minute timeout.
      - role: assistant
        agent_id: conversation.mock_title
        content: "```yaml\n# This blueprint creates an automation that turns on a\
          \ light when a door opens,\n# and turns it off when the door closes (or\
          \ after a 2-minute timeout)\nblueprint:\n  name: Light on Door\n  description:\
          \ >\n    Turn on a light when a door opens and turn it off when the door\
          \ closes or after a timeout.\n  domain: automation\n  input:\n    door_sensor:\n\
          \      name: Door Sensor\n      description: The door sensor that will trigger\
          \ the light\n      selector:\n        entity:\n          domain: binary_sensor\n\
          \          multiple: false\n    light_switch:\n      name: Light\n     \
          \ description: The light(s) to control\n      selector:\n        target:\n\
          \          entity:\n            domain: light\n\n# Define triggers for the\
          \ automation\ntrigger:\n  # Trigger when the door sensor state changes\n\
          \  - platform: state\n    entity_id: !input door_sensor\n    id: door_change\n\
          \n# Define conditions (none needed for this automation)\ncondition: []\n\
          \n# Define actions based on the trigger\naction:\n  # Check if door opened\n\
          \  - choose:\n      # If door opened (state changes to \"on\")\n      -\
          \ conditions:\n          - condition: template\n            value_template:\
          \ \"{{ trigger.to_state.state == 'on' }}\"\n        sequence:\n        \
          \  # Turn on the light\n          - service: light.turn_on\n           \
          \ target: !input light_switch\n            data: {}\n      \n      # If\
          \ door closed (state changes to \"off\")\n      - conditions:\n        \
          \  - condition: template\n            value_template: \"{{ trigger.to_state.state\
          \ == 'off' }}\"\n        sequence:\n          # Turn off the light\n   \
          \       - service: light.turn_off\n            target: !input light_switch\n\
          \            data: {}\n    \n    # Default action if neither condition met\
          \ (shouldn't happen, but included for robustness)\n    default: []\n  \n\
          \  # Set up timeout - only run if door is left open\n  - choose:\n     \
          \ - conditions:\n          - condition: template\n            value_template:\
          \ \"{{ trigger.to_state.state == 'on' }}\"\n        sequence:\n        \
          \  # Wait 2 minutes\n          - delay:\n              minutes: 2\n    \
          \      \n          # Check if door is still open\n          - condition:\
          \ state\n            entity_id: !input door_sensor\n            state: \"\
          on\"\n          \n          # Turn off the light after timeout\n       \
          \   - service: light.turn_off\n            target: !input light_switch\n\
          \            data: {}\n    \n    # Default action if door closed (no timeout\
          \ needed)\n    default: []\n\n# Add mode to restart the automation each\
          \ time the door state changes\nmode: restart\n```"
        tool_calls: null
      tools: null
    timestamp: 2025-04-23 04:15:19.298524+00:00
  duration_ms: 9388.399
  tries: 1
