---
uuid: 179f30ce-8cf2-488d-bfe9-f52480d06ee6
task_id: light_on_door_light_on_door-light_on_door-1
model_id: claude-3-7-sonnet
category: light
task:
  input_text: |
    # Light on door

    ## Problem statement

    Create an blueprint automation to turn on a light when the door opens.

    ## Example use cases

    These are example use cases that could be used with the blueprint:

    - Turn on the pantry light when the pantry door opens

    ## Detailed Description

    The blueprint should accept two inputs:

    | Input          | Description                                                                     |
    | -------------- | ------------------------------------------------------------------------------- |
    | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
    | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

    The automation should trigger when the door opens, and turn the light on. The
    light should be shut off when the door closes or after a 2 minute timeout.
response: "```yaml\nblueprint:\n  name: Light on Door Open\n  description: Turn on\
  \ a light when a door opens and turn it off when the door closes or after a timeout.\n\
  \  domain: automation\n  input:\n    door_sensor:\n      name: Door Sensor\n   \
  \   description: The door sensor that will trigger the light\n      selector:\n\
  \        entity:\n          domain: binary_sensor\n          multiple: false\n \
  \   light_switch:\n      name: Light\n      description: The light(s) to control\
  \ when the door opens/closes\n      selector:\n        target:\n          entity:\n\
  \            domain: light\n    timeout_minutes:\n      name: Timeout Minutes\n\
  \      description: Time in minutes after which the light will turn off automatically\
  \ if the door remains open\n      default: 2\n      selector:\n        number:\n\
  \          min: 0.5\n          max: 60\n          step: 0.5\n          unit_of_measurement:\
  \ minutes\n          mode: slider\n\n# Define the triggers for the automation\n\
  trigger:\n  # Trigger when the door sensor state changes\n  - platform: state\n\
  \    entity_id: !input door_sensor\n    id: door_state_change\n\n# Define the conditions\
  \ for the automation\ncondition: []\n\n# Define the actions for the automation\n\
  action:\n  # Check if the door is opening or closing\n  - choose:\n      # If the\
  \ door is opening (state changed to 'on')\n      - conditions:\n          - condition:\
  \ template\n            value_template: \"{{ trigger.to_state.state == 'on' }}\"\
  \n        sequence:\n          # Turn on the light\n          - service: light.turn_on\n\
  \            target: !input light_switch\n          # Set up a timer to turn off\
  \ the light after timeout\n          - service: timer.start\n            entity_id:\
  \ timer.door_light_timeout\n            data:\n              duration: \"{{ (input_timeout_minutes\
  \ | float) * 60 }}\"\n            enabled: true\n      \n      # If the door is\
  \ closing (state changed to 'off')\n      - conditions:\n          - condition:\
  \ template\n            value_template: \"{{ trigger.to_state.state == 'off' }}\"\
  \n        sequence:\n          # Turn off the light\n          - service: light.turn_off\n\
  \            target: !input light_switch\n          # Cancel the timer if it's running\n\
  \          - service: timer.cancel\n            entity_id: timer.door_light_timeout\n\
  \            enabled: \"{{ is_state('timer.door_light_timeout', 'active') }}\"\n\
  \n# Create a helper timer entity if it doesn't exist\nmode: restart\nvariables:\n\
  \  input_timeout_minutes: !input timeout_minutes\n\n# Add a separate automation\
  \ to handle the timer expiry\ntimer:\n  door_light_timeout:\n    name: \"Door Light\
  \ Timeout\"\n    duration: \"00:02:00\"  # Default 2 minutes\n\n# When the timer\
  \ expires, turn off the light\ntrigger_variables:\n  door_sensor: !input door_sensor\n\
  \  light_switch: !input light_switch\n\n# Create a secondary automation to handle\
  \ the timer expiry\nautomation:\n  - id: door_light_timeout_handler\n    alias:\
  \ \"Door Light Timeout Handler\"\n    trigger:\n      - platform: event\n      \
  \  event_type: timer.finished\n        event_data:\n          entity_id: timer.door_light_timeout\n\
  \    condition: \n      - condition: state\n        entity_id: !input door_sensor\n\
  \        state: \"on\"  # Only act if the door is still open\n    action:\n    \
  \  - service: light.turn_off\n        target: !input light_switch\n```"
context:
  conversation_trace:
  - event_type: async_process
    data:
      text: |
        # Light on door

        ## Problem statement

        Create an blueprint automation to turn on a light when the door opens.

        ## Example use cases

        These are example use cases that could be used with the blueprint:

        - Turn on the pantry light when the pantry door opens

        ## Detailed Description

        The blueprint should accept two inputs:

        | Input          | Description                                                                     |
        | -------------- | ------------------------------------------------------------------------------- |
        | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
        | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

        The automation should trigger when the door opens, and turn the light on. The
        light should be shut off when the door closes or after a 2 minute timeout.
      context:
        id: 01JSGDHBM5PCKQ94HV46WN0XHP
        parent_id: null
        user_id: null
      conversation_id: null
      device_id: null
      language: en
      agent_id: conversation.mock_title
      extra_system_prompt: null
    timestamp: 2025-04-23 04:12:15.365444+00:00
  - event_type: agent_detail
    data:
      messages:
      - role: system
        content: |-
          Current time is 21:12:15. Today's date is 2025-04-22.

          Create a Home Assistant blueprint YAML configuration based on the user request.

          Please respond only with markdown that contains yaml. You can
          add comments inline with your step by step thinking. The response must start
          with ```yaml and end with ``` because your answer will be parsed by code. It
          is very important to stick to the format.
      - role: user
        content: |
          # Light on door

          ## Problem statement

          Create an blueprint automation to turn on a light when the door opens.

          ## Example use cases

          These are example use cases that could be used with the blueprint:

          - Turn on the pantry light when the pantry door opens

          ## Detailed Description

          The blueprint should accept two inputs:

          | Input          | Description                                                                     |
          | -------------- | ------------------------------------------------------------------------------- |
          | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
          | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

          The automation should trigger when the door opens, and turn the light on. The
          light should be shut off when the door closes or after a 2 minute timeout.
      - role: assistant
        agent_id: conversation.mock_title
        content: "```yaml\nblueprint:\n  name: Light on Door Open\n  description:\
          \ Turn on a light when a door opens and turn it off when the door closes\
          \ or after a timeout.\n  domain: automation\n  input:\n    door_sensor:\n\
          \      name: Door Sensor\n      description: The door sensor that will trigger\
          \ the light\n      selector:\n        entity:\n          domain: binary_sensor\n\
          \          multiple: false\n    light_switch:\n      name: Light\n     \
          \ description: The light(s) to control when the door opens/closes\n    \
          \  selector:\n        target:\n          entity:\n            domain: light\n\
          \    timeout_minutes:\n      name: Timeout Minutes\n      description: Time\
          \ in minutes after which the light will turn off automatically if the door\
          \ remains open\n      default: 2\n      selector:\n        number:\n   \
          \       min: 0.5\n          max: 60\n          step: 0.5\n          unit_of_measurement:\
          \ minutes\n          mode: slider\n\n# Define the triggers for the automation\n\
          trigger:\n  # Trigger when the door sensor state changes\n  - platform:\
          \ state\n    entity_id: !input door_sensor\n    id: door_state_change\n\n\
          # Define the conditions for the automation\ncondition: []\n\n# Define the\
          \ actions for the automation\naction:\n  # Check if the door is opening\
          \ or closing\n  - choose:\n      # If the door is opening (state changed\
          \ to 'on')\n      - conditions:\n          - condition: template\n     \
          \       value_template: \"{{ trigger.to_state.state == 'on' }}\"\n     \
          \   sequence:\n          # Turn on the light\n          - service: light.turn_on\n\
          \            target: !input light_switch\n          # Set up a timer to\
          \ turn off the light after timeout\n          - service: timer.start\n \
          \           entity_id: timer.door_light_timeout\n            data:\n   \
          \           duration: \"{{ (input_timeout_minutes | float) * 60 }}\"\n \
          \           enabled: true\n      \n      # If the door is closing (state\
          \ changed to 'off')\n      - conditions:\n          - condition: template\n\
          \            value_template: \"{{ trigger.to_state.state == 'off' }}\"\n\
          \        sequence:\n          # Turn off the light\n          - service:\
          \ light.turn_off\n            target: !input light_switch\n          # Cancel\
          \ the timer if it's running\n          - service: timer.cancel\n       \
          \     entity_id: timer.door_light_timeout\n            enabled: \"{{ is_state('timer.door_light_timeout',\
          \ 'active') }}\"\n\n# Create a helper timer entity if it doesn't exist\n\
          mode: restart\nvariables:\n  input_timeout_minutes: !input timeout_minutes\n\
          \n# Add a separate automation to handle the timer expiry\ntimer:\n  door_light_timeout:\n\
          \    name: \"Door Light Timeout\"\n    duration: \"00:02:00\"  # Default\
          \ 2 minutes\n\n# When the timer expires, turn off the light\ntrigger_variables:\n\
          \  door_sensor: !input door_sensor\n  light_switch: !input light_switch\n\
          \n# Create a secondary automation to handle the timer expiry\nautomation:\n\
          \  - id: door_light_timeout_handler\n    alias: \"Door Light Timeout Handler\"\
          \n    trigger:\n      - platform: event\n        event_type: timer.finished\n\
          \        event_data:\n          entity_id: timer.door_light_timeout\n  \
          \  condition: \n      - condition: state\n        entity_id: !input door_sensor\n\
          \        state: \"on\"  # Only act if the door is still open\n    action:\n\
          \      - service: light.turn_off\n        target: !input light_switch\n\
          ```"
        tool_calls: null
      tools: null
    timestamp: 2025-04-23 04:12:15.367068+00:00
  duration_ms: 12606.386
  tries: 1
