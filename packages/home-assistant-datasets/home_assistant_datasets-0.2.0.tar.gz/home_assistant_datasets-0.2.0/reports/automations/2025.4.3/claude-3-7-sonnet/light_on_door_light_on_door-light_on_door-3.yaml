---
uuid: 800a2018-ddc0-422a-b1c9-7354a43fe927
task_id: light_on_door_light_on_door-light_on_door-3
model_id: claude-3-7-sonnet
category: light
task:
  input_text: |
    # Light on door

    ## Problem statement

    Create an blueprint automation to turn on a light when the door opens.

    ## Example use cases

    These are example use cases that could be used with the blueprint:

    - Turn on the pantry light when the pantry door opens

    ## Detailed Description

    The blueprint should accept two inputs:

    | Input          | Description                                                                     |
    | -------------- | ------------------------------------------------------------------------------- |
    | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
    | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

    The automation should trigger when the door opens, and turn the light on. The
    light should be shut off when the door closes or after a 2 minute timeout.
response: "```yaml\nblueprint:\n  name: \"Light on Door Open\"\n  description: \"\
  Turn on lights when a door is opened, and turn off when closed (or after 2 minutes).\"\
  \n  domain: automation\n  input:\n    door_sensor:\n      name: Door Sensor\n  \
  \    description: The door sensor that will trigger this automation.\n      selector:\n\
  \        entity:\n          domain: binary_sensor\n          multiple: false\n \
  \   light_switch:\n      name: Light\n      description: The light(s) to control\
  \ when the door opens/closes.\n      selector:\n        target:\n          entity:\n\
  \            domain: light\n\n# Define the triggers for this automation\ntrigger:\n\
  \  # Trigger when the door sensor state changes\n  - platform: state\n    entity_id:\
  \ !input door_sensor\n    id: door_state_change\n\n# Define the actions to take\
  \ when triggered\naction:\n  # Use a choose action to handle different states\n\
  \  - choose:\n      # When the door opens (state is \"on\")\n      - conditions:\n\
  \          - condition: state\n            entity_id: !input door_sensor\n     \
  \       state: \"on\"\n        sequence:\n          # Turn on the light(s)\n   \
  \       - service: light.turn_on\n            target: !input light_switch\n    \
  \      \n          # Start a 2-minute timer to turn off the light if door remains\
  \ open\n          - delay:\n              minutes: 2\n          \n          # Check\
  \ if the door is still open after the delay\n          - condition: state\n    \
  \        entity_id: !input door_sensor\n            state: \"on\"\n          \n\
  \          # If condition is met (door still open), turn off the light\n       \
  \   - service: light.turn_off\n            target: !input light_switch\n      \n\
  \      # When the door closes (state is \"off\")\n      - conditions:\n        \
  \  - condition: state\n            entity_id: !input door_sensor\n            state:\
  \ \"off\"\n        sequence:\n          # Turn off the light(s)\n          - service:\
  \ light.turn_off\n            target: !input light_switch\n\nmode: restart\n# Using\
  \ restart mode so that if the door is opened and closed within 2 minutes,\n# the\
  \ automation will restart and the timer will be canceled\n```"
context:
  conversation_trace:
  - event_type: async_process
    data:
      text: |
        # Light on door

        ## Problem statement

        Create an blueprint automation to turn on a light when the door opens.

        ## Example use cases

        These are example use cases that could be used with the blueprint:

        - Turn on the pantry light when the pantry door opens

        ## Detailed Description

        The blueprint should accept two inputs:

        | Input          | Description                                                                     |
        | -------------- | ------------------------------------------------------------------------------- |
        | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
        | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

        The automation should trigger when the door opens, and turn the light on. The
        light should be shut off when the door closes or after a 2 minute timeout.
      context:
        id: 01JSGCRNX76CKKN12M0V0WB051
        parent_id: null
        user_id: null
      conversation_id: null
      device_id: null
      language: en
      agent_id: conversation.mock_title
      extra_system_prompt: null
    timestamp: 2025-04-23 03:58:46.695863+00:00
  - event_type: agent_detail
    data:
      messages:
      - role: system
        content: |-
          Current time is 20:58:46. Today's date is 2025-04-22.

          Create a Home Assistant blueprint YAML configuration based on the user request.

          Please respond only with markdown that contains yaml. You can
          add comments inline with your step by step thinking. The response must start
          with ```yaml and end with ``` because your answer will be parsed by code. It
          is very important to stick to the format.
      - role: user
        content: |
          # Light on door

          ## Problem statement

          Create an blueprint automation to turn on a light when the door opens.

          ## Example use cases

          These are example use cases that could be used with the blueprint:

          - Turn on the pantry light when the pantry door opens

          ## Detailed Description

          The blueprint should accept two inputs:

          | Input          | Description                                                                     |
          | -------------- | ------------------------------------------------------------------------------- |
          | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
          | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

          The automation should trigger when the door opens, and turn the light on. The
          light should be shut off when the door closes or after a 2 minute timeout.
      - role: assistant
        agent_id: conversation.mock_title
        content: "```yaml\nblueprint:\n  name: \"Light on Door Open\"\n  description:\
          \ \"Turn on lights when a door is opened, and turn off when closed (or after\
          \ 2 minutes).\"\n  domain: automation\n  input:\n    door_sensor:\n    \
          \  name: Door Sensor\n      description: The door sensor that will trigger\
          \ this automation.\n      selector:\n        entity:\n          domain:\
          \ binary_sensor\n          multiple: false\n    light_switch:\n      name:\
          \ Light\n      description: The light(s) to control when the door opens/closes.\n\
          \      selector:\n        target:\n          entity:\n            domain:\
          \ light\n\n# Define the triggers for this automation\ntrigger:\n  # Trigger\
          \ when the door sensor state changes\n  - platform: state\n    entity_id:\
          \ !input door_sensor\n    id: door_state_change\n\n# Define the actions\
          \ to take when triggered\naction:\n  # Use a choose action to handle different\
          \ states\n  - choose:\n      # When the door opens (state is \"on\")\n \
          \     - conditions:\n          - condition: state\n            entity_id:\
          \ !input door_sensor\n            state: \"on\"\n        sequence:\n   \
          \       # Turn on the light(s)\n          - service: light.turn_on\n   \
          \         target: !input light_switch\n          \n          # Start a 2-minute\
          \ timer to turn off the light if door remains open\n          - delay:\n\
          \              minutes: 2\n          \n          # Check if the door is\
          \ still open after the delay\n          - condition: state\n           \
          \ entity_id: !input door_sensor\n            state: \"on\"\n          \n\
          \          # If condition is met (door still open), turn off the light\n\
          \          - service: light.turn_off\n            target: !input light_switch\n\
          \      \n      # When the door closes (state is \"off\")\n      - conditions:\n\
          \          - condition: state\n            entity_id: !input door_sensor\n\
          \            state: \"off\"\n        sequence:\n          # Turn off the\
          \ light(s)\n          - service: light.turn_off\n            target: !input\
          \ light_switch\n\nmode: restart\n# Using restart mode so that if the door\
          \ is opened and closed within 2 minutes,\n# the automation will restart\
          \ and the timer will be canceled\n```"
        tool_calls: null
      tools: null
    timestamp: 2025-04-23 03:58:46.702100+00:00
  duration_ms: 8181.362
  tries: 1
