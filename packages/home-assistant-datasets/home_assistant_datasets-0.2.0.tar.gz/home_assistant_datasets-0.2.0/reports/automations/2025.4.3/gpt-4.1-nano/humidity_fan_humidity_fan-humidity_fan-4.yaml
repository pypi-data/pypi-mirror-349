---
uuid: af674175-bd55-44db-9a1a-432e874faab3
task_id: humidity_fan_humidity_fan-humidity_fan-4
model_id: gpt-4.1-nano
category: fan
task:
  input_text: |
    # Humidity Fan

    ## Problem statement

    Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

    ## Example use cases

    These are example use cases that could be used with the blueprint:

    - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
    - Make sure the garage does not get too humid

    ## Detailed Description

    The blueprint should accept two inputs:

    | Input               | Description                                                           |
    | ------------------- | --------------------------------------------------------------------- |
    | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
    | `humidity_level` | A `number` selector to set the value used as the trigger. |
    | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

    The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
    triggered, the fan should be turned off. The fan should also be stopped when the
    sensor goes back down below the desired level. The automation should not try to
    turn the fan on if it is already on, and should not turn the fan off when it is
    already off.
response: |-
  ```yaml
  blueprint:
    name: Humidity Fan Control
    description: >
      Automate turning on a fan based on humidity sensor readings.
      Turns the fan on when humidity exceeds a threshold and turns it off when it drops below.
    domain: automation
    input:
      humidity_sensor:
        name: Humidity Sensor
        description: The humidity sensor to monitor.
        selector:
          entity:
            domain: sensor
      humidity_level:
        name: Humidity Level
        description: The humidity threshold to trigger the fan.
        selector:
          number:
            min: 0
            max: 100
            unit_of_measurement: '%'
      fan_entity:
        name: Fan Entity
        description: The fan to control.
        selector:
          entity:
            domain: fan

  variables:
    humidity_sensor: !input 'humidity_sensor'
    humidity_level: !input 'humidity_level'
    fan_entity: !input 'fan_entity'

  # Trigger when humidity crosses above the threshold
  trigger:
    - platform: numeric_state
      entity_id: !input 'humidity_sensor'
      above: !input 'humidity_level'

  # When humidity exceeds threshold, turn on the fan if it's not already on
  condition: []
  action:
    - service: fan.turn_on
      target:
        entity_id: !input 'fan_entity'
    - choose:
        - conditions:
            - condition: state
              entity_id: !input 'fan_entity'
              state: 'on'
          sequence: []

  # Add a second trigger for when humidity drops below the threshold to turn off the fan
    - platform: numeric_state
      entity_id: !input 'humidity_sensor'
      below: !input 'humidity_level'
      id: 'humidity_below_threshold'

  # Turn off the fan if it's on
    - service: fan.turn_off
      target:
        entity_id: !input 'fan_entity'
    - condition: state
      entity_id: !input 'fan_entity'
      state: 'on'
  ```
context:
  conversation_trace:
  - event_type: async_process
    data:
      text: |
        # Humidity Fan

        ## Problem statement

        Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

        ## Example use cases

        These are example use cases that could be used with the blueprint:

        - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
        - Make sure the garage does not get too humid

        ## Detailed Description

        The blueprint should accept two inputs:

        | Input               | Description                                                           |
        | ------------------- | --------------------------------------------------------------------- |
        | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
        | `humidity_level` | A `number` selector to set the value used as the trigger. |
        | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

        The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
        triggered, the fan should be turned off. The fan should also be stopped when the
        sensor goes back down below the desired level. The automation should not try to
        turn the fan on if it is already on, and should not turn the fan off when it is
        already off.
      context:
        id: 01JSGDJT69D8YE2MD09GTGK59G
        parent_id: null
        user_id: null
      conversation_id: null
      device_id: null
      language: en
      agent_id: conversation.mock_title
      extra_system_prompt: null
    timestamp: 2025-04-23 04:13:03.049145+00:00
  - event_type: agent_detail
    data:
      messages:
      - role: system
        content: |-
          Current time is 21:13:03. Today's date is 2025-04-22.

          Create a Home Assistant blueprint YAML configuration based on the user request.

          Please respond only with markdown that contains yaml. You can
          add comments inline with your step by step thinking. The response must start
          with ```yaml and end with ``` because your answer will be parsed by code. It
          is very important to stick to the format.
      - role: user
        content: |
          # Humidity Fan

          ## Problem statement

          Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

          ## Example use cases

          These are example use cases that could be used with the blueprint:

          - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
          - Make sure the garage does not get too humid

          ## Detailed Description

          The blueprint should accept two inputs:

          | Input               | Description                                                           |
          | ------------------- | --------------------------------------------------------------------- |
          | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
          | `humidity_level` | A `number` selector to set the value used as the trigger. |
          | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

          The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
          triggered, the fan should be turned off. The fan should also be stopped when the
          sensor goes back down below the desired level. The automation should not try to
          turn the fan on if it is already on, and should not turn the fan off when it is
          already off.
      - role: assistant
        agent_id: conversation.mock_title
        content: |-
          ```yaml
          blueprint:
            name: Humidity Fan Control
            description: >
              Automate turning on a fan based on humidity sensor readings.
              Turns the fan on when humidity exceeds a threshold and turns it off when it drops below.
            domain: automation
            input:
              humidity_sensor:
                name: Humidity Sensor
                description: The humidity sensor to monitor.
                selector:
                  entity:
                    domain: sensor
              humidity_level:
                name: Humidity Level
                description: The humidity threshold to trigger the fan.
                selector:
                  number:
                    min: 0
                    max: 100
                    unit_of_measurement: '%'
              fan_entity:
                name: Fan Entity
                description: The fan to control.
                selector:
                  entity:
                    domain: fan

          variables:
            humidity_sensor: !input 'humidity_sensor'
            humidity_level: !input 'humidity_level'
            fan_entity: !input 'fan_entity'

          # Trigger when humidity crosses above the threshold
          trigger:
            - platform: numeric_state
              entity_id: !input 'humidity_sensor'
              above: !input 'humidity_level'

          # When humidity exceeds threshold, turn on the fan if it's not already on
          condition: []
          action:
            - service: fan.turn_on
              target:
                entity_id: !input 'fan_entity'
            - choose:
                - conditions:
                    - condition: state
                      entity_id: !input 'fan_entity'
                      state: 'on'
                  sequence: []

          # Add a second trigger for when humidity drops below the threshold to turn off the fan
            - platform: numeric_state
              entity_id: !input 'humidity_sensor'
              below: !input 'humidity_level'
              id: 'humidity_below_threshold'

          # Turn off the fan if it's on
            - service: fan.turn_off
              target:
                entity_id: !input 'fan_entity'
            - condition: state
              entity_id: !input 'fan_entity'
              state: 'on'
          ```
        tool_calls: null
      tools: null
    timestamp: 2025-04-23 04:13:03.050699+00:00
  - event_type: agent_detail
    data:
      stats:
        input_tokens: 340
        output_tokens: 418
    timestamp: 2025-04-23 04:13:05.172616+00:00
  duration_ms: 2125.33
  tries: 1
