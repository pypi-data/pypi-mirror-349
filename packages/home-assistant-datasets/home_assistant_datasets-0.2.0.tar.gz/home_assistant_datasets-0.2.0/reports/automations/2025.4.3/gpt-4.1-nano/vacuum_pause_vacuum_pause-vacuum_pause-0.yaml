---
uuid: d82dc2b5-2863-4c16-b826-a38a0ae0e9bf
task_id: vacuum_pause_vacuum_pause-vacuum_pause-0
model_id: gpt-4.1-nano
category: vacuum
task:
  input_text: |
    # Vacuum Pause

    ## Problem statement

    Create a blueprint automation to pause the vacuum when I receive a phone call.

    ## Example use cases

    These are example use cases that could be used with the blueprint:

    - Pause the vacuum when I get a phone call from my relatives
    - Don't interrupt my work video convererence call with vacuum noise by pausing it when the call starts

    ## Detailed Description

    The blueprint should accept two inputs:

    | Input               | Description                                                           |
    | ------------------- | --------------------------------------------------------------------- |
    | `phone_call_sensor` | A `binary_sensor` entity that triggers when a phone call is received. |
    | `vacuum_entity`     | A `vacuum` entity to pause when the automation fires.                 |

    The automation should trigger when the binary sensor fires and the vacuum is running. The vacuum
    should be paused (not stopped) and can be resumed manually.
response: |-
  ```yaml
  blueprint:
    name: Vacuum Pause on Phone Call
    description: >
      Pauses a vacuum when a specified phone call sensor is triggered,
      if the vacuum is currently running.
    domain: automation
    input:
      phone_call_sensor:
        name: Phone Call Sensor
        description: Binary sensor that indicates an incoming phone call
        selector:
          entity:
            domain: binary_sensor
      vacuum_entity:
        name: Vacuum Entity
        description: The vacuum to pause when a call is received
        selector:
          entity:
            domain: vacuum

  trigger:
    - platform: state
      entity_id: !input phone_call_sensor
      to: 'on'  # Trigger when the sensor detects a call (assuming 'on' indicates active call)

  condition:
    - condition: state
      entity_id: !input vacuum_entity
      state: 'docked'  # Optional: add if you only want to pause when vacuum is not already paused
    - condition: template
      value_template: >
        {{ state_attr(!input.vacuum_entity, 'status') in ['cleaning', 'returning_home', 'hdmi'] or
           state_attr(!input.vacuum_entity, 'state') == 'cleaning' }}

  # Note: The exact attributes depend on your vacuum's integration. Adjust accordingly.

  action:
    - choose:
        - conditions:
            - condition: template
              value_template: >
                {{ is_state(!input.vacuum_entity, 'cleaning') }}
          sequence:
            - service: vacuum.pause
              target:
                entity_id: !input.vacuum_entity
      default: []

  # Optional: Add automations to resume vacuum if call ends, if needed.
  ```
context:
  conversation_trace:
  - event_type: async_process
    data:
      text: |
        # Vacuum Pause

        ## Problem statement

        Create a blueprint automation to pause the vacuum when I receive a phone call.

        ## Example use cases

        These are example use cases that could be used with the blueprint:

        - Pause the vacuum when I get a phone call from my relatives
        - Don't interrupt my work video convererence call with vacuum noise by pausing it when the call starts

        ## Detailed Description

        The blueprint should accept two inputs:

        | Input               | Description                                                           |
        | ------------------- | --------------------------------------------------------------------- |
        | `phone_call_sensor` | A `binary_sensor` entity that triggers when a phone call is received. |
        | `vacuum_entity`     | A `vacuum` entity to pause when the automation fires.                 |

        The automation should trigger when the binary sensor fires and the vacuum is running. The vacuum
        should be paused (not stopped) and can be resumed manually.
      context:
        id: 01JSGDYCKNC77HC7RW83NPV2TW
        parent_id: null
        user_id: null
      conversation_id: null
      device_id: null
      language: en
      agent_id: conversation.mock_title
      extra_system_prompt: null
    timestamp: 2025-04-23 04:19:22.357874+00:00
  - event_type: agent_detail
    data:
      messages:
      - role: system
        content: |-
          Current time is 21:19:22. Today's date is 2025-04-22.

          Create a Home Assistant blueprint YAML configuration based on the user request.

          Please respond only with markdown that contains yaml. You can
          add comments inline with your step by step thinking. The response must start
          with ```yaml and end with ``` because your answer will be parsed by code. It
          is very important to stick to the format.
      - role: user
        content: |
          # Vacuum Pause

          ## Problem statement

          Create a blueprint automation to pause the vacuum when I receive a phone call.

          ## Example use cases

          These are example use cases that could be used with the blueprint:

          - Pause the vacuum when I get a phone call from my relatives
          - Don't interrupt my work video convererence call with vacuum noise by pausing it when the call starts

          ## Detailed Description

          The blueprint should accept two inputs:

          | Input               | Description                                                           |
          | ------------------- | --------------------------------------------------------------------- |
          | `phone_call_sensor` | A `binary_sensor` entity that triggers when a phone call is received. |
          | `vacuum_entity`     | A `vacuum` entity to pause when the automation fires.                 |

          The automation should trigger when the binary sensor fires and the vacuum is running. The vacuum
          should be paused (not stopped) and can be resumed manually.
      - role: assistant
        agent_id: conversation.mock_title
        content: |-
          ```yaml
          blueprint:
            name: Vacuum Pause on Phone Call
            description: >
              Pauses a vacuum when a specified phone call sensor is triggered,
              if the vacuum is currently running.
            domain: automation
            input:
              phone_call_sensor:
                name: Phone Call Sensor
                description: Binary sensor that indicates an incoming phone call
                selector:
                  entity:
                    domain: binary_sensor
              vacuum_entity:
                name: Vacuum Entity
                description: The vacuum to pause when a call is received
                selector:
                  entity:
                    domain: vacuum

          trigger:
            - platform: state
              entity_id: !input phone_call_sensor
              to: 'on'  # Trigger when the sensor detects a call (assuming 'on' indicates active call)

          condition:
            - condition: state
              entity_id: !input vacuum_entity
              state: 'docked'  # Optional: add if you only want to pause when vacuum is not already paused
            - condition: template
              value_template: >
                {{ state_attr(!input.vacuum_entity, 'status') in ['cleaning', 'returning_home', 'hdmi'] or
                   state_attr(!input.vacuum_entity, 'state') == 'cleaning' }}

          # Note: The exact attributes depend on your vacuum's integration. Adjust accordingly.

          action:
            - choose:
                - conditions:
                    - condition: template
                      value_template: >
                        {{ is_state(!input.vacuum_entity, 'cleaning') }}
                  sequence:
                    - service: vacuum.pause
                      target:
                        entity_id: !input.vacuum_entity
              default: []

          # Optional: Add automations to resume vacuum if call ends, if needed.
          ```
        tool_calls: null
      tools: null
    timestamp: 2025-04-23 04:19:22.359446+00:00
  - event_type: agent_detail
    data:
      stats:
        input_tokens: 278
        output_tokens: 362
    timestamp: 2025-04-23 04:19:30.339545+00:00
  duration_ms: 7984.856
  tries: 1
