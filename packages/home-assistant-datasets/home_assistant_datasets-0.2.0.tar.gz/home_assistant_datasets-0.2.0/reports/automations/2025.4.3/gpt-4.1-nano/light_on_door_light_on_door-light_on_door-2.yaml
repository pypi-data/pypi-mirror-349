---
uuid: 286fb139-e409-4ab8-ae73-ada2b996d7be
task_id: light_on_door_light_on_door-light_on_door-2
model_id: gpt-4.1-nano
category: light
task:
  input_text: |
    # Light on door

    ## Problem statement

    Create an blueprint automation to turn on a light when the door opens.

    ## Example use cases

    These are example use cases that could be used with the blueprint:

    - Turn on the pantry light when the pantry door opens

    ## Detailed Description

    The blueprint should accept two inputs:

    | Input          | Description                                                                     |
    | -------------- | ------------------------------------------------------------------------------- |
    | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
    | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

    The automation should trigger when the door opens, and turn the light on. The
    light should be shut off when the door closes or after a 2 minute timeout.
response: "```yaml\nblueprint:\n  name: Light on door opening\n  description: Automate\
  \ turning on a light when a door opens, and turn off after door closes or timeout\n\
  \  domain: automation\n  input:\n    door_sensor:\n      name: Door Sensor\n   \
  \   description: The binary sensor that detects door state\n      selector:\n  \
  \      entity:\n          domain: binary_sensor\n          device_class: door\n\
  \    light_switch:\n      name: Light Switch\n      description: The light entities\
  \ to turn on\n      selector:\n        target:\n          entity:\n            domain:\
  \ light\n\nvariables:\n  delay_time: '00:02:00'  # 2 minute timeout\n\ntrigger:\n\
  \  - platform: state\n    entity_id: !input door_sensor\n    to: 'on'  # Door opened\n\
  \  - platform: state\n    entity_id: !input door_sensor\n    to: 'off'  # Door closed\n\
  \naction:\n  - choose:\n      - conditions:\n          - condition: trigger\n  \
  \          id: 'door_open'\n        sequence:\n          - service: light.turn_on\n\
  \            target: !input light_switch\n      - conditions:\n          - condition:\
  \ trigger\n            id: 'door_close'\n        sequence:\n          - service:\
  \ light.turn_off\n            target: !input light_switch\n  - default: []\n   \
  \       \n  - delay: !var delay_time\n  - service: light.turn_off\n    target: !input\
  \ light_switch\n```"
context:
  conversation_trace:
  - event_type: async_process
    data:
      text: |
        # Light on door

        ## Problem statement

        Create an blueprint automation to turn on a light when the door opens.

        ## Example use cases

        These are example use cases that could be used with the blueprint:

        - Turn on the pantry light when the pantry door opens

        ## Detailed Description

        The blueprint should accept two inputs:

        | Input          | Description                                                                     |
        | -------------- | ------------------------------------------------------------------------------- |
        | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
        | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

        The automation should trigger when the door opens, and turn the light on. The
        light should be shut off when the door closes or after a 2 minute timeout.
      context:
        id: 01JSGCPE8A4M737TAE8REEHEFW
        parent_id: null
        user_id: null
      conversation_id: null
      device_id: null
      language: en
      agent_id: conversation.mock_title
      extra_system_prompt: null
    timestamp: 2025-04-23 03:57:33.322529+00:00
  - event_type: agent_detail
    data:
      messages:
      - role: system
        content: |-
          Current time is 20:57:33. Today's date is 2025-04-22.

          Create a Home Assistant blueprint YAML configuration based on the user request.

          Please respond only with markdown that contains yaml. You can
          add comments inline with your step by step thinking. The response must start
          with ```yaml and end with ``` because your answer will be parsed by code. It
          is very important to stick to the format.
      - role: user
        content: |
          # Light on door

          ## Problem statement

          Create an blueprint automation to turn on a light when the door opens.

          ## Example use cases

          These are example use cases that could be used with the blueprint:

          - Turn on the pantry light when the pantry door opens

          ## Detailed Description

          The blueprint should accept two inputs:

          | Input          | Description                                                                     |
          | -------------- | ------------------------------------------------------------------------------- |
          | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
          | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

          The automation should trigger when the door opens, and turn the light on. The
          light should be shut off when the door closes or after a 2 minute timeout.
      - role: assistant
        agent_id: conversation.mock_title
        content: "```yaml\nblueprint:\n  name: Light on door opening\n  description:\
          \ Automate turning on a light when a door opens, and turn off after door\
          \ closes or timeout\n  domain: automation\n  input:\n    door_sensor:\n\
          \      name: Door Sensor\n      description: The binary sensor that detects\
          \ door state\n      selector:\n        entity:\n          domain: binary_sensor\n\
          \          device_class: door\n    light_switch:\n      name: Light Switch\n\
          \      description: The light entities to turn on\n      selector:\n   \
          \     target:\n          entity:\n            domain: light\n\nvariables:\n\
          \  delay_time: '00:02:00'  # 2 minute timeout\n\ntrigger:\n  - platform:\
          \ state\n    entity_id: !input door_sensor\n    to: 'on'  # Door opened\n\
          \  - platform: state\n    entity_id: !input door_sensor\n    to: 'off' \
          \ # Door closed\n\naction:\n  - choose:\n      - conditions:\n         \
          \ - condition: trigger\n            id: 'door_open'\n        sequence:\n\
          \          - service: light.turn_on\n            target: !input light_switch\n\
          \      - conditions:\n          - condition: trigger\n            id: 'door_close'\n\
          \        sequence:\n          - service: light.turn_off\n            target:\
          \ !input light_switch\n  - default: []\n          \n  - delay: !var delay_time\n\
          \  - service: light.turn_off\n    target: !input light_switch\n```"
        tool_calls: null
      tools: null
    timestamp: 2025-04-23 03:57:33.324264+00:00
  - event_type: agent_detail
    data:
      stats:
        input_tokens: 257
        output_tokens: 303
    timestamp: 2025-04-23 03:57:35.019520+00:00
  duration_ms: 1698.841
  tries: 1
