---
uuid: a08e22cb-c937-4595-b6b6-b89440c533f2
task_id: light_on_door_light_on_door-light_on_door-0
model_id: gpt-4.1-nano
category: light
task:
  input_text: |
    # Light on door

    ## Problem statement

    Create an blueprint automation to turn on a light when the door opens.

    ## Example use cases

    These are example use cases that could be used with the blueprint:

    - Turn on the pantry light when the pantry door opens

    ## Detailed Description

    The blueprint should accept two inputs:

    | Input          | Description                                                                     |
    | -------------- | ------------------------------------------------------------------------------- |
    | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
    | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

    The automation should trigger when the door opens, and turn the light on. The
    light should be shut off when the door closes or after a 2 minute timeout.
response: |-
  ```yaml
  blueprint:
    name: Light on door open
    description: Turn on a light when a door opens, turn it off when closed or after 2 minutes.
    domain: automation
    input:
      door_sensor:
        name: Door Sensor
        description: Binary sensor for the door (opens/closes)
        selector:
          entity:
            device_class: door
      light_switch:
        name: Light Switch
        description: Light entity to turn on when door opens
        selector:
          target:
            entity:
              domain: light

  # Automations handle the trigger, conditions, and actions
  # Use a reactive automation triggered on door sensor change
  # When door opens, turn on light and start a 2-minute timer
  # When door closes or timer expires, turn off the light

  trigger:
    - platform: state
      entity_id: !input door_sensor
      to: 'on'  # door opens
    - platform: state
      entity_id: !input door_sensor
      to: 'off'  # door closes

  action:
    - choose:
        - conditions:
            - condition: state
              entity_id: !input door_sensor
              state: 'on'  # door opened
          sequence:
            - service: light.turn_on
              target: !input light_switch
            - wait_for_trigger:
                - platform: state
                  entity_id: !input door_sensor
                  to: 'off'
                - platform: state
                  entity_id: !input door_sensor
                  to: 'on'
              timeout: '00:02:00'  # 2 minute timeout
            - service: light.turn_off
              target: !input light_switch
        - conditions:
            - condition: state
              entity_id: !input door_sensor
              state: 'off'  # door closed
          sequence:
            - service: light.turn_off
              target: !input light_switch
  ```
context:
  conversation_trace:
  - event_type: async_process
    data:
      text: |
        # Light on door

        ## Problem statement

        Create an blueprint automation to turn on a light when the door opens.

        ## Example use cases

        These are example use cases that could be used with the blueprint:

        - Turn on the pantry light when the pantry door opens

        ## Detailed Description

        The blueprint should accept two inputs:

        | Input          | Description                                                                     |
        | -------------- | ------------------------------------------------------------------------------- |
        | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
        | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

        The automation should trigger when the door opens, and turn the light on. The
        light should be shut off when the door closes or after a 2 minute timeout.
      context:
        id: 01JSGDFN1VGRNQBBY4YPEPNG8B
        parent_id: null
        user_id: null
      conversation_id: null
      device_id: null
      language: en
      agent_id: conversation.mock_title
      extra_system_prompt: null
    timestamp: 2025-04-23 04:11:19.483839+00:00
  - event_type: agent_detail
    data:
      messages:
      - role: system
        content: |-
          Current time is 21:11:19. Today's date is 2025-04-22.

          Create a Home Assistant blueprint YAML configuration based on the user request.

          Please respond only with markdown that contains yaml. You can
          add comments inline with your step by step thinking. The response must start
          with ```yaml and end with ``` because your answer will be parsed by code. It
          is very important to stick to the format.
      - role: user
        content: |
          # Light on door

          ## Problem statement

          Create an blueprint automation to turn on a light when the door opens.

          ## Example use cases

          These are example use cases that could be used with the blueprint:

          - Turn on the pantry light when the pantry door opens

          ## Detailed Description

          The blueprint should accept two inputs:

          | Input          | Description                                                                     |
          | -------------- | ------------------------------------------------------------------------------- |
          | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
          | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

          The automation should trigger when the door opens, and turn the light on. The
          light should be shut off when the door closes or after a 2 minute timeout.
      - role: assistant
        agent_id: conversation.mock_title
        content: |-
          ```yaml
          blueprint:
            name: Light on door open
            description: Turn on a light when a door opens, turn it off when closed or after 2 minutes.
            domain: automation
            input:
              door_sensor:
                name: Door Sensor
                description: Binary sensor for the door (opens/closes)
                selector:
                  entity:
                    device_class: door
              light_switch:
                name: Light Switch
                description: Light entity to turn on when door opens
                selector:
                  target:
                    entity:
                      domain: light

          # Automations handle the trigger, conditions, and actions
          # Use a reactive automation triggered on door sensor change
          # When door opens, turn on light and start a 2-minute timer
          # When door closes or timer expires, turn off the light

          trigger:
            - platform: state
              entity_id: !input door_sensor
              to: 'on'  # door opens
            - platform: state
              entity_id: !input door_sensor
              to: 'off'  # door closes

          action:
            - choose:
                - conditions:
                    - condition: state
                      entity_id: !input door_sensor
                      state: 'on'  # door opened
                  sequence:
                    - service: light.turn_on
                      target: !input light_switch
                    - wait_for_trigger:
                        - platform: state
                          entity_id: !input door_sensor
                          to: 'off'
                        - platform: state
                          entity_id: !input door_sensor
                          to: 'on'
                      timeout: '00:02:00'  # 2 minute timeout
                    - service: light.turn_off
                      target: !input light_switch
                - conditions:
                    - condition: state
                      entity_id: !input door_sensor
                      state: 'off'  # door closed
                  sequence:
                    - service: light.turn_off
                      target: !input light_switch
          ```
        tool_calls: null
      tools: null
    timestamp: 2025-04-23 04:11:19.485359+00:00
  - event_type: agent_detail
    data:
      stats:
        input_tokens: 257
        output_tokens: 409
    timestamp: 2025-04-23 04:11:21.509418+00:00
  duration_ms: 2026.517
  tries: 1
