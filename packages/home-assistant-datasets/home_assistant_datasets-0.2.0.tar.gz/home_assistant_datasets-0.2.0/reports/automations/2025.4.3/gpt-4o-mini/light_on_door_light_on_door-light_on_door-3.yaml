---
uuid: e92cdf11-0cd8-4bc4-84d5-6c0ed63841f7
task_id: light_on_door_light_on_door-light_on_door-3
model_id: gpt-4o-mini
category: light
task:
  input_text: |
    # Light on door

    ## Problem statement

    Create an blueprint automation to turn on a light when the door opens.

    ## Example use cases

    These are example use cases that could be used with the blueprint:

    - Turn on the pantry light when the pantry door opens

    ## Detailed Description

    The blueprint should accept two inputs:

    | Input          | Description                                                                     |
    | -------------- | ------------------------------------------------------------------------------- |
    | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
    | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

    The automation should trigger when the door opens, and turn the light on. The
    light should be shut off when the door closes or after a 2 minute timeout.
response: "```yaml\nblueprint:\n  name: Light on Door\n  description: Turn on a light\
  \ when the door opens.\n  domain: automation\n  input:\n    door_sensor:\n     \
  \ name: Door Sensor\n      description: A binary sensor that triggers the automation\
  \ when the door opens.\n      selector:\n        entity:\n          domain: binary_sensor\n\
  \    light_switch:\n      name: Light Switch\n      description: One or more light\
  \ entities to turn on or off.\n      selector:\n        target:\n          entity:\n\
  \            domain: light\n\ntrigger:\n  - platform: state\n    entity_id: !input\
  \ door_sensor\n    from: 'off'\n    to: 'on'\n\naction:\n  - service: light.turn_on\n\
  \    target: !input light_switch\n\n  - wait_for_trigger:\n      - platform: state\n\
  \        entity_id: !input door_sensor\n        from: 'on'\n        to: 'off'\n\
  \    # Alternatively, you could wait for a timeout instead of waiting for the door\
  \ to close.\n  - delay: '00:02:00'  # Wait for 2 minutes\n  \n  - service: light.turn_off\n\
  \    target: !input light_switch\n\nmode: single\n```"
context:
  conversation_trace:
  - event_type: async_process
    data:
      text: |
        # Light on door

        ## Problem statement

        Create an blueprint automation to turn on a light when the door opens.

        ## Example use cases

        These are example use cases that could be used with the blueprint:

        - Turn on the pantry light when the pantry door opens

        ## Detailed Description

        The blueprint should accept two inputs:

        | Input          | Description                                                                     |
        | -------------- | ------------------------------------------------------------------------------- |
        | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
        | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

        The automation should trigger when the door opens, and turn the light on. The
        light should be shut off when the door closes or after a 2 minute timeout.
      context:
        id: 01JSGD033585KS9HWRT16Z1C1N
        parent_id: null
        user_id: null
      conversation_id: null
      device_id: null
      language: en
      agent_id: conversation.mock_title
      extra_system_prompt: null
    timestamp: 2025-04-23 04:02:49.574045+00:00
  - event_type: agent_detail
    data:
      messages:
      - role: system
        content: |-
          Current time is 21:02:49. Today's date is 2025-04-22.

          Create a Home Assistant blueprint YAML configuration based on the user request.

          Please respond only with markdown that contains yaml. You can
          add comments inline with your step by step thinking. The response must start
          with ```yaml and end with ``` because your answer will be parsed by code. It
          is very important to stick to the format.
      - role: user
        content: |
          # Light on door

          ## Problem statement

          Create an blueprint automation to turn on a light when the door opens.

          ## Example use cases

          These are example use cases that could be used with the blueprint:

          - Turn on the pantry light when the pantry door opens

          ## Detailed Description

          The blueprint should accept two inputs:

          | Input          | Description                                                                     |
          | -------------- | ------------------------------------------------------------------------------- |
          | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
          | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

          The automation should trigger when the door opens, and turn the light on. The
          light should be shut off when the door closes or after a 2 minute timeout.
      - role: assistant
        agent_id: conversation.mock_title
        content: "```yaml\nblueprint:\n  name: Light on Door\n  description: Turn\
          \ on a light when the door opens.\n  domain: automation\n  input:\n    door_sensor:\n\
          \      name: Door Sensor\n      description: A binary sensor that triggers\
          \ the automation when the door opens.\n      selector:\n        entity:\n\
          \          domain: binary_sensor\n    light_switch:\n      name: Light Switch\n\
          \      description: One or more light entities to turn on or off.\n    \
          \  selector:\n        target:\n          entity:\n            domain: light\n\
          \ntrigger:\n  - platform: state\n    entity_id: !input door_sensor\n   \
          \ from: 'off'\n    to: 'on'\n\naction:\n  - service: light.turn_on\n   \
          \ target: !input light_switch\n\n  - wait_for_trigger:\n      - platform:\
          \ state\n        entity_id: !input door_sensor\n        from: 'on'\n   \
          \     to: 'off'\n    # Alternatively, you could wait for a timeout instead\
          \ of waiting for the door to close.\n  - delay: '00:02:00'  # Wait for 2\
          \ minutes\n  \n  - service: light.turn_off\n    target: !input light_switch\n\
          \nmode: single\n```"
        tool_calls: null
      tools: null
    timestamp: 2025-04-23 04:02:49.575619+00:00
  - event_type: agent_detail
    data:
      stats:
        input_tokens: 257
        output_tokens: 248
    timestamp: 2025-04-23 04:02:53.830395+00:00
  duration_ms: 4259.843
  tries: 1
