---
uuid: 66b08356-e4b6-4279-8fd2-ace93c32516a
task_id: light_on_door_light_on_door-light_on_door-0
model_id: gpt-3.5
category: light
task:
  input_text: |
    # Light on door

    ## Problem statement

    Create an blueprint automation to turn on a light when the door opens.

    ## Example use cases

    These are example use cases that could be used with the blueprint:

    - Turn on the pantry light when the pantry door opens

    ## Detailed Description

    The blueprint should accept two inputs:

    | Input          | Description                                                                     |
    | -------------- | ------------------------------------------------------------------------------- |
    | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
    | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

    The automation should trigger when the door opens, and turn the light on. The
    light should be shut off when the door closes or after a 2 minute timeout.
response: |-
  ```yaml
  # Blueprint for turning on a light when the door opens

  blueprint:
    name: Light on Door
    description: Turn on a light when the door opens and turn it off after a delay or when the door closes.
    domain: automation
    input:
      door_sensor:
        name: Door Sensor
        description: "The binary sensor that triggers the automation."
        selector:
          entity:
            domain: binary_sensor
      light_switch:
        name: Light Entity
        description: "The light entity to turn on or off."
        selector:
          entity:
            domain: light

  mode: single

  trigger:
    platform: state
    entity_id: !input door_sensor
    to: "on"

  action:
    - variables:
        timer_duration: "00:02:00"
    - choose:
        - conditions:
            - condition: state
              entity_id: !input door_sensor
              state: "off"
          sequence:
            - service: light.turn_off
              target: !input light_switch
        - conditions:
            - condition: template
              value_template: "{{ is_state(trigger.entity_id, 'on') }}"
          sequence:
            - service: light.turn_on
              target: !input light_switch
            - delay: "{{ timer_duration }}"
            - service: light.turn_off
              target: !input light_switch
  ```
context:
  conversation_trace:
  - event_type: async_process
    data:
      text: |
        # Light on door

        ## Problem statement

        Create an blueprint automation to turn on a light when the door opens.

        ## Example use cases

        These are example use cases that could be used with the blueprint:

        - Turn on the pantry light when the pantry door opens

        ## Detailed Description

        The blueprint should accept two inputs:

        | Input          | Description                                                                     |
        | -------------- | ------------------------------------------------------------------------------- |
        | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
        | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

        The automation should trigger when the door opens, and turn the light on. The
        light should be shut off when the door closes or after a 2 minute timeout.
      context:
        id: 01JSGCS5S534948NNP8QEFDFFV
        parent_id: null
        user_id: null
      conversation_id: null
      device_id: null
      language: en
      agent_id: conversation.mock_title
      extra_system_prompt: null
    timestamp: 2025-04-23 03:59:02.949378+00:00
  - event_type: agent_detail
    data:
      messages:
      - role: system
        content: |-
          Current time is 20:59:02. Today's date is 2025-04-22.

          Create a Home Assistant blueprint YAML configuration based on the user request.

          Please respond only with markdown that contains yaml. You can
          add comments inline with your step by step thinking. The response must start
          with ```yaml and end with ``` because your answer will be parsed by code. It
          is very important to stick to the format.
      - role: user
        content: |
          # Light on door

          ## Problem statement

          Create an blueprint automation to turn on a light when the door opens.

          ## Example use cases

          These are example use cases that could be used with the blueprint:

          - Turn on the pantry light when the pantry door opens

          ## Detailed Description

          The blueprint should accept two inputs:

          | Input          | Description                                                                     |
          | -------------- | ------------------------------------------------------------------------------- |
          | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
          | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

          The automation should trigger when the door opens, and turn the light on. The
          light should be shut off when the door closes or after a 2 minute timeout.
      - role: assistant
        agent_id: conversation.mock_title
        content: |-
          ```yaml
          # Blueprint for turning on a light when the door opens

          blueprint:
            name: Light on Door
            description: Turn on a light when the door opens and turn it off after a delay or when the door closes.
            domain: automation
            input:
              door_sensor:
                name: Door Sensor
                description: "The binary sensor that triggers the automation."
                selector:
                  entity:
                    domain: binary_sensor
              light_switch:
                name: Light Entity
                description: "The light entity to turn on or off."
                selector:
                  entity:
                    domain: light

          mode: single

          trigger:
            platform: state
            entity_id: !input door_sensor
            to: "on"

          action:
            - variables:
                timer_duration: "00:02:00"
            - choose:
                - conditions:
                    - condition: state
                      entity_id: !input door_sensor
                      state: "off"
                  sequence:
                    - service: light.turn_off
                      target: !input light_switch
                - conditions:
                    - condition: template
                      value_template: "{{ is_state(trigger.entity_id, 'on') }}"
                  sequence:
                    - service: light.turn_on
                      target: !input light_switch
                    - delay: "{{ timer_duration }}"
                    - service: light.turn_off
                      target: !input light_switch
          ```
        tool_calls: null
      tools: null
    timestamp: 2025-04-23 03:59:02.950964+00:00
  - event_type: agent_detail
    data:
      stats:
        input_tokens: 258
        output_tokens: 286
    timestamp: 2025-04-23 03:59:07.198538+00:00
  duration_ms: 4249.987
  tries: 1
