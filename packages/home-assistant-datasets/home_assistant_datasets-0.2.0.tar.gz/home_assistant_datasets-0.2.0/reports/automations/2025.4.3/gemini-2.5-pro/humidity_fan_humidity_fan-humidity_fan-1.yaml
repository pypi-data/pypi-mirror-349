---
uuid: 5d3ae0d2-1120-42a4-8416-b6be7c06c90d
task_id: humidity_fan_humidity_fan-humidity_fan-1
model_id: gemini-2.5-pro
category: fan
task:
  input_text: |
    # Humidity Fan

    ## Problem statement

    Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

    ## Example use cases

    These are example use cases that could be used with the blueprint:

    - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
    - Make sure the garage does not get too humid

    ## Detailed Description

    The blueprint should accept two inputs:

    | Input               | Description                                                           |
    | ------------------- | --------------------------------------------------------------------- |
    | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
    | `humidity_level` | A `number` selector to set the value used as the trigger. |
    | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

    The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
    triggered, the fan should be turned off. The fan should also be stopped when the
    sensor goes back down below the desired level. The automation should not try to
    turn the fan on if it is already on, and should not turn the fan off when it is
    already off.
response: |-
  ```yaml
  # Home Assistant Blueprint: Humidity Fan Control
  #
  # Automates turning a fan on/off based on a humidity sensor's reading.
  #
  # Problem statement:
  # Create a blueprint automation to turn on the fan based on the value of the humidity sensor.
  #
  # Example use cases:
  # - Turn on the bathroom exhaust fan when the bathroom humidity is above 60%
  # - Make sure the garage does not get too humid
  #
  # Detailed Description:
  # The blueprint accepts three inputs:
  # - humidity_sensor: A sensor entity that measures humidity.
  # - humidity_level: A number representing the humidity percentage threshold.
  # - fan_entity: The fan entity to control.
  #
  # The automation triggers when the humidity_sensor level goes above humidity_level,
  # turning the fan on (if it's off).
  # The fan is turned off when the sensor level goes back below humidity_level (if it's on).

  blueprint:
    name: Humidity Fan Control
    description: Turns a fan on when humidity rises above a threshold and off when it drops below.
    domain: automation
    source_url: https://github.com/home-assistant/core/blob/dev/homeassistant/components/automation/blueprints/humidity_fan.yaml # Placeholder URL, replace if hosted
    input:
      humidity_sensor:
        name: Humidity Sensor
        description: The sensor entity measuring humidity.
        selector:
          entity:
            domain: sensor
            device_class: humidity
      humidity_level:
        name: Humidity Threshold
        description: Turn the fan on when humidity is above this level (%).
        selector:
          number:
            min: 0
            max: 100
            unit_of_measurement: "%"
            mode: slider # or box
            step: 1
        default: 60
      fan_entity:
        name: Fan
        description: The fan entity to control.
        selector:
          entity:
            domain: fan

  # Define the triggers for the automation.
  # We need two triggers: one for humidity rising above the threshold,
  # and one for humidity dropping below the threshold.
  trigger:
    - platform: numeric_state
      # Trigger when humidity goes ABOVE the threshold
      entity_id: !input humidity_sensor
      above: !input humidity_level
      id: 'turn_on' # Assign an ID for use in actions
    - platform: numeric_state
      # Trigger when humidity goes BELOW the threshold
      entity_id: !input humidity_sensor
      below: !input humidity_level
      id: 'turn_off' # Assign an ID for use in actions

  # Define the actions to take based on which trigger fired.
  action:
    # Use choose to select actions based on the trigger ID
    - choose:
        # Option 1: Triggered by 'turn_on' (humidity went above threshold)
        - conditions:
            - condition: trigger
              id: 'turn_on'
            # Add a condition to only act if the fan is currently off
            - condition: state
              entity_id: !input fan_entity
              state: 'off'
          sequence:
            # Turn the fan on
            - service: fan.turn_on
              target:
                entity_id: !input fan_entity

        # Option 2: Triggered by 'turn_off' (humidity went below threshold)
        - conditions:
            - condition: trigger
              id: 'turn_off'
            # Add a condition to only act if the fan is currently on
            - condition: state
              entity_id: !input fan_entity
              state: 'on'
          sequence:
            # Turn the fan off
            - service: fan.turn_off
              target:
                entity_id: !input fan_entity

      # Default action (optional, can be empty if no action needed when conditions don't match)
      # default: [] # No action needed if fan state already matches desired state

  mode: single # Ensures the automation doesn't run multiple times concurrently for the same entity pair
  ```
context:
  conversation_trace:
  - event_type: async_process
    data:
      text: |
        # Humidity Fan

        ## Problem statement

        Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

        ## Example use cases

        These are example use cases that could be used with the blueprint:

        - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
        - Make sure the garage does not get too humid

        ## Detailed Description

        The blueprint should accept two inputs:

        | Input               | Description                                                           |
        | ------------------- | --------------------------------------------------------------------- |
        | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
        | `humidity_level` | A `number` selector to set the value used as the trigger. |
        | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

        The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
        triggered, the fan should be turned off. The fan should also be stopped when the
        sensor goes back down below the desired level. The automation should not try to
        turn the fan on if it is already on, and should not turn the fan off when it is
        already off.
      context:
        id: 01JSGDJYEZ4422HDTAXGZGEAK7
        parent_id: null
        user_id: null
      conversation_id: null
      device_id: null
      language: en
      agent_id: conversation.mock_title
      extra_system_prompt: null
    timestamp: 2025-04-23 04:13:07.423150+00:00
  - event_type: agent_detail
    data:
      messages:
      - role: system
        content: |-
          Current time is 21:13:07. Today's date is 2025-04-22.

          Create a Home Assistant blueprint YAML configuration based on the user request.

          Please respond only with markdown that contains yaml. You can
          add comments inline with your step by step thinking. The response must start
          with ```yaml and end with ``` because your answer will be parsed by code. It
          is very important to stick to the format.
      - role: user
        content: |
          # Humidity Fan

          ## Problem statement

          Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

          ## Example use cases

          These are example use cases that could be used with the blueprint:

          - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
          - Make sure the garage does not get too humid

          ## Detailed Description

          The blueprint should accept two inputs:

          | Input               | Description                                                           |
          | ------------------- | --------------------------------------------------------------------- |
          | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
          | `humidity_level` | A `number` selector to set the value used as the trigger. |
          | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

          The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
          triggered, the fan should be turned off. The fan should also be stopped when the
          sensor goes back down below the desired level. The automation should not try to
          turn the fan on if it is already on, and should not turn the fan off when it is
          already off.
      - role: assistant
        agent_id: conversation.mock_title
        content: |-
          ```yaml
          # Home Assistant Blueprint: Humidity Fan Control
          #
          # Automates turning a fan on/off based on a humidity sensor's reading.
          #
          # Problem statement:
          # Create a blueprint automation to turn on the fan based on the value of the humidity sensor.
          #
          # Example use cases:
          # - Turn on the bathroom exhaust fan when the bathroom humidity is above 60%
          # - Make sure the garage does not get too humid
          #
          # Detailed Description:
          # The blueprint accepts three inputs:
          # - humidity_sensor: A sensor entity that measures humidity.
          # - humidity_level: A number representing the humidity percentage threshold.
          # - fan_entity: The fan entity to control.
          #
          # The automation triggers when the humidity_sensor level goes above humidity_level,
          # turning the fan on (if it's off).
          # The fan is turned off when the sensor level goes back below humidity_level (if it's on).

          blueprint:
            name: Humidity Fan Control
            description: Turns a fan on when humidity rises above a threshold and off when it drops below.
            domain: automation
            source_url: https://github.com/home-assistant/core/blob/dev/homeassistant/components/automation/blueprints/humidity_fan.yaml # Placeholder URL, replace if hosted
            input:
              humidity_sensor:
                name: Humidity Sensor
                description: The sensor entity measuring humidity.
                selector:
                  entity:
                    domain: sensor
                    device_class: humidity
              humidity_level:
                name: Humidity Threshold
                description: Turn the fan on when humidity is above this level (%).
                selector:
                  number:
                    min: 0
                    max: 100
                    unit_of_measurement: "%"
                    mode: slider # or box
                    step: 1
                default: 60
              fan_entity:
                name: Fan
                description: The fan entity to control.
                selector:
                  entity:
                    domain: fan

          # Define the triggers for the automation.
          # We need two triggers: one for humidity rising above the threshold,
          # and one for humidity dropping below the threshold.
          trigger:
            - platform: numeric_state
              # Trigger when humidity goes ABOVE the threshold
              entity_id: !input humidity_sensor
              above: !input humidity_level
              id: 'turn_on' # Assign an ID for use in actions
            - platform: numeric_state
              # Trigger when humidity goes BELOW the threshold
              entity_id: !input humidity_sensor
              below: !input humidity_level
              id: 'turn_off' # Assign an ID for use in actions

          # Define the actions to take based on which trigger fired.
          action:
            # Use choose to select actions based on the trigger ID
            - choose:
                # Option 1: Triggered by 'turn_on' (humidity went above threshold)
                - conditions:
                    - condition: trigger
                      id: 'turn_on'
                    # Add a condition to only act if the fan is currently off
                    - condition: state
                      entity_id: !input fan_entity
                      state: 'off'
                  sequence:
                    # Turn the fan on
                    - service: fan.turn_on
                      target:
                        entity_id: !input fan_entity

                # Option 2: Triggered by 'turn_off' (humidity went below threshold)
                - conditions:
                    - condition: trigger
                      id: 'turn_off'
                    # Add a condition to only act if the fan is currently on
                    - condition: state
                      entity_id: !input fan_entity
                      state: 'on'
                  sequence:
                    # Turn the fan off
                    - service: fan.turn_off
                      target:
                        entity_id: !input fan_entity

              # Default action (optional, can be empty if no action needed when conditions don't match)
              # default: [] # No action needed if fan state already matches desired state

          mode: single # Ensures the automation doesn't run multiple times concurrently for the same entity pair
          ```
        tool_calls: null
      tools: null
    timestamp: 2025-04-23 04:13:07.424730+00:00
  - event_type: agent_detail
    data:
      stats:
        input_tokens: 362
        cached_input_tokens: 0
        output_tokens: 2077
    timestamp: 2025-04-23 04:13:25.489595+00:00
  duration_ms: 18066.756
  tries: 1
