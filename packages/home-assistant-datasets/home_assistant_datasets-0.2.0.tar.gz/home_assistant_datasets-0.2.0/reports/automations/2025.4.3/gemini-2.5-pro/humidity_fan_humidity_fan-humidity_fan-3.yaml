---
uuid: d6547b3f-24f7-4dd9-be91-a433db9051ef
task_id: humidity_fan_humidity_fan-humidity_fan-3
model_id: gemini-2.5-pro
category: fan
task:
  input_text: |
    # Humidity Fan

    ## Problem statement

    Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

    ## Example use cases

    These are example use cases that could be used with the blueprint:

    - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
    - Make sure the garage does not get too humid

    ## Detailed Description

    The blueprint should accept two inputs:

    | Input               | Description                                                           |
    | ------------------- | --------------------------------------------------------------------- |
    | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
    | `humidity_level` | A `number` selector to set the value used as the trigger. |
    | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

    The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
    triggered, the fan should be turned off. The fan should also be stopped when the
    sensor goes back down below the desired level. The automation should not try to
    turn the fan on if it is already on, and should not turn the fan off when it is
    already off.
response: |-
  ```yaml
  blueprint:
    name: Humidity Controlled Fan
    description: Turns a fan on or off based on a humidity sensor's value.
    domain: automation
    source_url: https://github.com/home-assistant/core/blob/dev/homeassistant/components/automation/blueprints/humidity_fan.yaml # Example URL, replace if hosted elsewhere
    input:
      humidity_sensor:
        name: Humidity Sensor
        description: The sensor entity that measures humidity.
        selector:
          entity:
            domain: sensor
            device_class: humidity
      humidity_level:
        name: Humidity Threshold
        description: The humidity level (in %) above which the fan should turn on.
        selector:
          number:
            min: 0
            max: 100
            unit_of_measurement: "%"
            mode: slider # Or 'box'
            step: 1
        default: 60 # Provide a reasonable default
      fan_entity:
        name: Fan
        description: The fan entity to control.
        selector:
          entity:
            domain: fan

  # Define variables to make templates cleaner
  variables:
    humidity_sensor: !input humidity_sensor
    humidity_level: !input humidity_level
    fan_entity: !input fan_entity

  # Trigger the automation when the humidity crosses the threshold in either direction
  trigger:
    # Trigger when humidity goes ABOVE the threshold
    - platform: numeric_state
      entity_id: !input humidity_sensor
      above: !input humidity_level
      id: 'humidity_high' # Assign an ID for the choose action
    # Trigger when humidity goes BELOW the threshold
    - platform: numeric_state
      entity_id: !input humidity_sensor
      below: !input humidity_level
      id: 'humidity_low' # Assign an ID for the choose action

  condition: [] # No global conditions needed, handled in actions

  action:
    # Use choose to perform different actions based on which trigger fired
    - choose:
        # Option 1: Triggered because humidity went HIGH
        - conditions:
            - condition: trigger
              id: 'humidity_high'
            # Add condition to only act if the fan is currently OFF
            - condition: state
              entity_id: !input fan_entity
              state: 'off'
          sequence:
            # Turn the fan ON
            - service: fan.turn_on
              target:
                entity_id: !input fan_entity
        # Option 2: Triggered because humidity went LOW
        - conditions:
            - condition: trigger
              id: 'humidity_low'
            # Add condition to only act if the fan is currently ON
            - condition: state
              entity_id: !input fan_entity
              state: 'on'
          sequence:
            # Turn the fan OFF
            - service: fan.turn_off
              target:
                entity_id: !input fan_entity

  mode: single # Ensures the automation doesn't run multiple instances simultaneously if humidity rapidly fluctuates
  ```
context:
  conversation_trace:
  - event_type: async_process
    data:
      text: |
        # Humidity Fan

        ## Problem statement

        Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

        ## Example use cases

        These are example use cases that could be used with the blueprint:

        - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
        - Make sure the garage does not get too humid

        ## Detailed Description

        The blueprint should accept two inputs:

        | Input               | Description                                                           |
        | ------------------- | --------------------------------------------------------------------- |
        | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
        | `humidity_level` | A `number` selector to set the value used as the trigger. |
        | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

        The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
        triggered, the fan should be turned off. The fan should also be stopped when the
        sensor goes back down below the desired level. The automation should not try to
        turn the fan on if it is already on, and should not turn the fan off when it is
        already off.
      context:
        id: 01JSGD07JPPJDA4MWXVMWVD53Y
        parent_id: null
        user_id: null
      conversation_id: null
      device_id: null
      language: en
      agent_id: conversation.mock_title
      extra_system_prompt: null
    timestamp: 2025-04-23 04:02:54.167077+00:00
  - event_type: agent_detail
    data:
      messages:
      - role: system
        content: |-
          Current time is 21:02:54. Today's date is 2025-04-22.

          Create a Home Assistant blueprint YAML configuration based on the user request.

          Please respond only with markdown that contains yaml. You can
          add comments inline with your step by step thinking. The response must start
          with ```yaml and end with ``` because your answer will be parsed by code. It
          is very important to stick to the format.
      - role: user
        content: |
          # Humidity Fan

          ## Problem statement

          Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

          ## Example use cases

          These are example use cases that could be used with the blueprint:

          - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
          - Make sure the garage does not get too humid

          ## Detailed Description

          The blueprint should accept two inputs:

          | Input               | Description                                                           |
          | ------------------- | --------------------------------------------------------------------- |
          | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
          | `humidity_level` | A `number` selector to set the value used as the trigger. |
          | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

          The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
          triggered, the fan should be turned off. The fan should also be stopped when the
          sensor goes back down below the desired level. The automation should not try to
          turn the fan on if it is already on, and should not turn the fan off when it is
          already off.
      - role: assistant
        agent_id: conversation.mock_title
        content: |-
          ```yaml
          blueprint:
            name: Humidity Controlled Fan
            description: Turns a fan on or off based on a humidity sensor's value.
            domain: automation
            source_url: https://github.com/home-assistant/core/blob/dev/homeassistant/components/automation/blueprints/humidity_fan.yaml # Example URL, replace if hosted elsewhere
            input:
              humidity_sensor:
                name: Humidity Sensor
                description: The sensor entity that measures humidity.
                selector:
                  entity:
                    domain: sensor
                    device_class: humidity
              humidity_level:
                name: Humidity Threshold
                description: The humidity level (in %) above which the fan should turn on.
                selector:
                  number:
                    min: 0
                    max: 100
                    unit_of_measurement: "%"
                    mode: slider # Or 'box'
                    step: 1
                default: 60 # Provide a reasonable default
              fan_entity:
                name: Fan
                description: The fan entity to control.
                selector:
                  entity:
                    domain: fan

          # Define variables to make templates cleaner
          variables:
            humidity_sensor: !input humidity_sensor
            humidity_level: !input humidity_level
            fan_entity: !input fan_entity

          # Trigger the automation when the humidity crosses the threshold in either direction
          trigger:
            # Trigger when humidity goes ABOVE the threshold
            - platform: numeric_state
              entity_id: !input humidity_sensor
              above: !input humidity_level
              id: 'humidity_high' # Assign an ID for the choose action
            # Trigger when humidity goes BELOW the threshold
            - platform: numeric_state
              entity_id: !input humidity_sensor
              below: !input humidity_level
              id: 'humidity_low' # Assign an ID for the choose action

          condition: [] # No global conditions needed, handled in actions

          action:
            # Use choose to perform different actions based on which trigger fired
            - choose:
                # Option 1: Triggered because humidity went HIGH
                - conditions:
                    - condition: trigger
                      id: 'humidity_high'
                    # Add condition to only act if the fan is currently OFF
                    - condition: state
                      entity_id: !input fan_entity
                      state: 'off'
                  sequence:
                    # Turn the fan ON
                    - service: fan.turn_on
                      target:
                        entity_id: !input fan_entity
                # Option 2: Triggered because humidity went LOW
                - conditions:
                    - condition: trigger
                      id: 'humidity_low'
                    # Add condition to only act if the fan is currently ON
                    - condition: state
                      entity_id: !input fan_entity
                      state: 'on'
                  sequence:
                    # Turn the fan OFF
                    - service: fan.turn_off
                      target:
                        entity_id: !input fan_entity

          mode: single # Ensures the automation doesn't run multiple instances simultaneously if humidity rapidly fluctuates
          ```
        tool_calls: null
      tools: null
    timestamp: 2025-04-23 04:02:54.168640+00:00
  - event_type: agent_detail
    data:
      stats:
        input_tokens: 362
        cached_input_tokens: 0
        output_tokens: 1474
    timestamp: 2025-04-23 04:03:06.966045+00:00
  duration_ms: 12799.33
  tries: 1
