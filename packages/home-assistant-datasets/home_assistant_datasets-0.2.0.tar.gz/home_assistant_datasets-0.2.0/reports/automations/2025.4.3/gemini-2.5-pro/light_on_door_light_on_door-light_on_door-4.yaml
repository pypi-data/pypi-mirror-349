---
uuid: cd0d48a3-4cde-4700-a30c-cf7ab627231b
task_id: light_on_door_light_on_door-light_on_door-4
model_id: gemini-2.5-pro
category: light
task:
  input_text: |
    # Light on door

    ## Problem statement

    Create an blueprint automation to turn on a light when the door opens.

    ## Example use cases

    These are example use cases that could be used with the blueprint:

    - Turn on the pantry light when the pantry door opens

    ## Detailed Description

    The blueprint should accept two inputs:

    | Input          | Description                                                                     |
    | -------------- | ------------------------------------------------------------------------------- |
    | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
    | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

    The automation should trigger when the door opens, and turn the light on. The
    light should be shut off when the door closes or after a 2 minute timeout.
response: |-
  ```yaml
  # Home Assistant Blueprint: Light on Door Open with Timeout
  #
  # Author: Assistant based on user request
  # Date: 2025-04-22
  #
  # This blueprint automates turning on a light when a door is opened
  # and turning it off when the door closes or after a specified timeout.
  #
  blueprint:
    name: Turn Light On When Door Opens (with Timeout)
    description: >- # Multi-line description for clarity
      Turns on one or more lights when a specific door sensor indicates 'open'.
      The light(s) will automatically turn off when the door sensor indicates 'closed'
      or after a 2-minute timeout, whichever comes first.
      If the door is opened again while the light is on, the timeout timer restarts.
    domain: automation
    # Specify the inputs the user needs to configure for this blueprint
    input:
      door_sensor:
        name: Door Sensor
        description: The binary sensor entity that monitors the door state (e.g., contact sensor). The automation triggers when this sensor changes to 'on' (open).
        # Use a selector to help the user pick the right entity
        selector:
          entity:
            # Filter entities to only show binary sensors
            domain: binary_sensor
            # Suggest sensors with the 'door' device class, but allow any binary_sensor
            device_class: door
      light_switch:
        name: Light(s) to Control
        description: The light entity or entities that should be turned on/off.
        # Use a target selector to allow picking one or more lights, areas, or devices
        selector:
          target:
            entity:
              # Filter targets to only show light entities
              domain: light

  # Set the automation mode to 'restart'
  # This ensures that if the door is opened again while the automation is waiting
  # (e.g., during the timeout period), the current run is cancelled, and a new
  # run starts, effectively restarting the timeout.
  mode: restart

  # Define the trigger condition for the automation
  trigger:
    # Trigger when the state of the door sensor changes
    - platform: state
      # The entity to monitor is the one selected by the user in the 'door_sensor' input
      entity_id: !input door_sensor
      # Specify the state change that should trigger the automation:
      # from 'off' (closed) to 'on' (open)
      from: 'off'
      to: 'on'
      # Optional: Add 'for' duration if needed, but usually not for door sensors

  # Define the sequence of actions to perform when the trigger occurs
  action:
    # Action 1: Turn on the specified light(s)
    - service: light.turn_on
      # Target the light(s) selected by the user in the 'light_switch' input
      target: !input light_switch
      # Optional: Add specific parameters like brightness or color here if needed
      # data:
      #   brightness_pct: 80

    # Action 2: Wait for either the door to close OR for a timeout
    - wait_for_trigger:
        # Condition 1: Wait for the door sensor to change state back to 'off' (closed)
        - platform: state
          entity_id: !input door_sensor
          to: 'off'
          # Optional: Add 'for' duration if the sensor might fluctuate briefly
          # for:
          #   seconds: 1
      # Specify the maximum time to wait before proceeding (timeout)
      timeout:
        # Set the timeout duration to 2 minutes
        minutes: 2
      # Important: Ensure the automation continues to the next step (turning off the light)
      # regardless of whether the wait completed due to the trigger (door closed)
      # or due to the timeout. Default is true, but set explicitly for clarity.
      continue_on_timeout: true

    # Action 3: Turn off the specified light(s)
    # This action runs after the 'wait_for_trigger' completes, either because
    # the door was closed or because the 2-minute timeout was reached.
    - service: light.turn_off
      # Target the same light(s) selected by the user
      target: !input light_switch
  ```
context:
  conversation_trace:
  - event_type: async_process
    data:
      text: |
        # Light on door

        ## Problem statement

        Create an blueprint automation to turn on a light when the door opens.

        ## Example use cases

        These are example use cases that could be used with the blueprint:

        - Turn on the pantry light when the pantry door opens

        ## Detailed Description

        The blueprint should accept two inputs:

        | Input          | Description                                                                     |
        | -------------- | ------------------------------------------------------------------------------- |
        | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
        | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

        The automation should trigger when the door opens, and turn the light on. The
        light should be shut off when the door closes or after a 2 minute timeout.
      context:
        id: 01JSGCTS7P463FP1HCRSFJQJYZ
        parent_id: null
        user_id: null
      conversation_id: null
      device_id: null
      language: en
      agent_id: conversation.mock_title
      extra_system_prompt: null
    timestamp: 2025-04-23 03:59:55.639036+00:00
  - event_type: agent_detail
    data:
      messages:
      - role: system
        content: |-
          Current time is 20:59:55. Today's date is 2025-04-22.

          Create a Home Assistant blueprint YAML configuration based on the user request.

          Please respond only with markdown that contains yaml. You can
          add comments inline with your step by step thinking. The response must start
          with ```yaml and end with ``` because your answer will be parsed by code. It
          is very important to stick to the format.
      - role: user
        content: |
          # Light on door

          ## Problem statement

          Create an blueprint automation to turn on a light when the door opens.

          ## Example use cases

          These are example use cases that could be used with the blueprint:

          - Turn on the pantry light when the pantry door opens

          ## Detailed Description

          The blueprint should accept two inputs:

          | Input          | Description                                                                     |
          | -------------- | ------------------------------------------------------------------------------- |
          | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
          | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

          The automation should trigger when the door opens, and turn the light on. The
          light should be shut off when the door closes or after a 2 minute timeout.
      - role: assistant
        agent_id: conversation.mock_title
        content: |-
          ```yaml
          # Home Assistant Blueprint: Light on Door Open with Timeout
          #
          # Author: Assistant based on user request
          # Date: 2025-04-22
          #
          # This blueprint automates turning on a light when a door is opened
          # and turning it off when the door closes or after a specified timeout.
          #
          blueprint:
            name: Turn Light On When Door Opens (with Timeout)
            description: >- # Multi-line description for clarity
              Turns on one or more lights when a specific door sensor indicates 'open'.
              The light(s) will automatically turn off when the door sensor indicates 'closed'
              or after a 2-minute timeout, whichever comes first.
              If the door is opened again while the light is on, the timeout timer restarts.
            domain: automation
            # Specify the inputs the user needs to configure for this blueprint
            input:
              door_sensor:
                name: Door Sensor
                description: The binary sensor entity that monitors the door state (e.g., contact sensor). The automation triggers when this sensor changes to 'on' (open).
                # Use a selector to help the user pick the right entity
                selector:
                  entity:
                    # Filter entities to only show binary sensors
                    domain: binary_sensor
                    # Suggest sensors with the 'door' device class, but allow any binary_sensor
                    device_class: door
              light_switch:
                name: Light(s) to Control
                description: The light entity or entities that should be turned on/off.
                # Use a target selector to allow picking one or more lights, areas, or devices
                selector:
                  target:
                    entity:
                      # Filter targets to only show light entities
                      domain: light

          # Set the automation mode to 'restart'
          # This ensures that if the door is opened again while the automation is waiting
          # (e.g., during the timeout period), the current run is cancelled, and a new
          # run starts, effectively restarting the timeout.
          mode: restart

          # Define the trigger condition for the automation
          trigger:
            # Trigger when the state of the door sensor changes
            - platform: state
              # The entity to monitor is the one selected by the user in the 'door_sensor' input
              entity_id: !input door_sensor
              # Specify the state change that should trigger the automation:
              # from 'off' (closed) to 'on' (open)
              from: 'off'
              to: 'on'
              # Optional: Add 'for' duration if needed, but usually not for door sensors

          # Define the sequence of actions to perform when the trigger occurs
          action:
            # Action 1: Turn on the specified light(s)
            - service: light.turn_on
              # Target the light(s) selected by the user in the 'light_switch' input
              target: !input light_switch
              # Optional: Add specific parameters like brightness or color here if needed
              # data:
              #   brightness_pct: 80

            # Action 2: Wait for either the door to close OR for a timeout
            - wait_for_trigger:
                # Condition 1: Wait for the door sensor to change state back to 'off' (closed)
                - platform: state
                  entity_id: !input door_sensor
                  to: 'off'
                  # Optional: Add 'for' duration if the sensor might fluctuate briefly
                  # for:
                  #   seconds: 1
              # Specify the maximum time to wait before proceeding (timeout)
              timeout:
                # Set the timeout duration to 2 minutes
                minutes: 2
              # Important: Ensure the automation continues to the next step (turning off the light)
              # regardless of whether the wait completed due to the trigger (door closed)
              # or due to the timeout. Default is true, but set explicitly for clarity.
              continue_on_timeout: true

            # Action 3: Turn off the specified light(s)
            # This action runs after the 'wait_for_trigger' completes, either because
            # the door was closed or because the 2-minute timeout was reached.
            - service: light.turn_off
              # Target the same light(s) selected by the user
              target: !input light_switch
          ```
        tool_calls: null
      tools: null
    timestamp: 2025-04-23 03:59:55.640607+00:00
  - event_type: agent_detail
    data:
      stats:
        input_tokens: 275
        cached_input_tokens: 0
        output_tokens: 3037
    timestamp: 2025-04-23 04:00:23.255942+00:00
  duration_ms: 27617.244
  tries: 1
