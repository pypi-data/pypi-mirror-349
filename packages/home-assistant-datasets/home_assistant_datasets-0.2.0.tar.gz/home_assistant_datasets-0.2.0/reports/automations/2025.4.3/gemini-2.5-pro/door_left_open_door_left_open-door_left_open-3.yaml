---
uuid: d6946ae4-dbb8-404a-9090-d537bf0eea94
task_id: door_left_open_door_left_open-door_left_open-3
model_id: gemini-2.5-pro
category: media_player
task:
  input_text: |
    # Door left open

    ## Problem statement

    Create an blueprint automation to play an alert on the speaker when the door is
    left open.

    ## Example use cases

    These are example use cases that could be used with the blueprint:

    - Play an message on the living room speaker if the garage door has been left open for more than 30 minutes
    - When the front door is ajar for 5 minutes, play a sound on the kitchen bluetooth speaker.

    ## Detailed Description

    The blueprint should accept two inputs:

    | Input           | Selector Type | Description                                                                           |
    | --------------- | ------------- | ------------------------------------------------------------------------------------- |
    | `door_sensor`   | `entity`      | A `binary_sensor` entity selector door sensor that is the target of the automation.   |
    | `alert_media`   | `media`       | The target for the `media` selector for the media player and media id with the alter. |
    | `open_duration` | `duration`    | A `duration` selector, the amount of time before playing the alert.                   |

    The automation should play the selected media when the door has been open for the specified duration.
response: |-
  ```yaml
  blueprint:
    name: Door Left Open Alert
    description: Plays an alert on a speaker when a door is left open for a specified duration.
    domain: automation
    # Define the inputs for the blueprint
    input:
      door_sensor:
        name: Door Sensor
        description: The binary sensor entity representing the door.
        selector:
          # Select an entity
          entity:
            # Filter for binary sensors
            domain: binary_sensor
            # Optionally filter for entities with device class 'door'
            device_class: door
      alert_media:
        name: Alert Media Player and Content
        description: Select the target media player and the media to play as an alert.
        selector:
          # Use the media selector to choose player and content
          media: {}
      open_duration:
        name: Open Duration
        description: Time the door must be open before the alert triggers.
        selector:
          # Select a duration (e.g., minutes, seconds)
          duration: {}
        # Provide a default value (e.g., 5 minutes)
        default: "00:05:00"

    # Specify the automation mode. 'single' ensures that the automation doesn't run multiple times concurrently for the same trigger.
    # If the door is closed and reopened before the duration expires, the timer resets due to the 'for' clause.
    mode: single

    # Define the trigger conditions for the automation
    trigger:
      - platform: state
        # Use the door sensor entity selected by the user
        entity_id: !input door_sensor
        # Trigger only when the state changes TO 'on' (open)
        to: 'on'
        # And remains 'on' for the specified duration
        for: !input open_duration

    # Define the actions to take when the trigger conditions are met
    action:
      - service: media_player.play_media
        # Target the media player entity selected via the 'alert_media' input
        target:
          entity_id: !input alert_media.entity_id
        # Provide the media details selected via the 'alert_media' input
        data:
          media_content_id: !input alert_media.media_content_id
          media_content_type: !input alert_media.media_content_type
        # Optional: Include metadata if provided by the selector and needed by the player
        # metadata: !input alert_media.metadata # Uncomment if needed, depends on media player integration

  ```
context:
  conversation_trace:
  - event_type: async_process
    data:
      text: |
        # Door left open

        ## Problem statement

        Create an blueprint automation to play an alert on the speaker when the door is
        left open.

        ## Example use cases

        These are example use cases that could be used with the blueprint:

        - Play an message on the living room speaker if the garage door has been left open for more than 30 minutes
        - When the front door is ajar for 5 minutes, play a sound on the kitchen bluetooth speaker.

        ## Detailed Description

        The blueprint should accept two inputs:

        | Input           | Selector Type | Description                                                                           |
        | --------------- | ------------- | ------------------------------------------------------------------------------------- |
        | `door_sensor`   | `entity`      | A `binary_sensor` entity selector door sensor that is the target of the automation.   |
        | `alert_media`   | `media`       | The target for the `media` selector for the media player and media id with the alter. |
        | `open_duration` | `duration`    | A `duration` selector, the amount of time before playing the alert.                   |

        The automation should play the selected media when the door has been open for the specified duration.
      context:
        id: 01JSGCWX3KZF1GB88WWSP01HWJ
        parent_id: null
        user_id: null
      conversation_id: null
      device_id: null
      language: en
      agent_id: conversation.mock_title
      extra_system_prompt: null
    timestamp: 2025-04-23 04:01:05.139839+00:00
  - event_type: agent_detail
    data:
      messages:
      - role: system
        content: |-
          Current time is 21:01:05. Today's date is 2025-04-22.

          Create a Home Assistant blueprint YAML configuration based on the user request.

          Please respond only with markdown that contains yaml. You can
          add comments inline with your step by step thinking. The response must start
          with ```yaml and end with ``` because your answer will be parsed by code. It
          is very important to stick to the format.
      - role: user
        content: |
          # Door left open

          ## Problem statement

          Create an blueprint automation to play an alert on the speaker when the door is
          left open.

          ## Example use cases

          These are example use cases that could be used with the blueprint:

          - Play an message on the living room speaker if the garage door has been left open for more than 30 minutes
          - When the front door is ajar for 5 minutes, play a sound on the kitchen bluetooth speaker.

          ## Detailed Description

          The blueprint should accept two inputs:

          | Input           | Selector Type | Description                                                                           |
          | --------------- | ------------- | ------------------------------------------------------------------------------------- |
          | `door_sensor`   | `entity`      | A `binary_sensor` entity selector door sensor that is the target of the automation.   |
          | `alert_media`   | `media`       | The target for the `media` selector for the media player and media id with the alter. |
          | `open_duration` | `duration`    | A `duration` selector, the amount of time before playing the alert.                   |

          The automation should play the selected media when the door has been open for the specified duration.
      - role: assistant
        agent_id: conversation.mock_title
        content: |-
          ```yaml
          blueprint:
            name: Door Left Open Alert
            description: Plays an alert on a speaker when a door is left open for a specified duration.
            domain: automation
            # Define the inputs for the blueprint
            input:
              door_sensor:
                name: Door Sensor
                description: The binary sensor entity representing the door.
                selector:
                  # Select an entity
                  entity:
                    # Filter for binary sensors
                    domain: binary_sensor
                    # Optionally filter for entities with device class 'door'
                    device_class: door
              alert_media:
                name: Alert Media Player and Content
                description: Select the target media player and the media to play as an alert.
                selector:
                  # Use the media selector to choose player and content
                  media: {}
              open_duration:
                name: Open Duration
                description: Time the door must be open before the alert triggers.
                selector:
                  # Select a duration (e.g., minutes, seconds)
                  duration: {}
                # Provide a default value (e.g., 5 minutes)
                default: "00:05:00"

            # Specify the automation mode. 'single' ensures that the automation doesn't run multiple times concurrently for the same trigger.
            # If the door is closed and reopened before the duration expires, the timer resets due to the 'for' clause.
            mode: single

            # Define the trigger conditions for the automation
            trigger:
              - platform: state
                # Use the door sensor entity selected by the user
                entity_id: !input door_sensor
                # Trigger only when the state changes TO 'on' (open)
                to: 'on'
                # And remains 'on' for the specified duration
                for: !input open_duration

            # Define the actions to take when the trigger conditions are met
            action:
              - service: media_player.play_media
                # Target the media player entity selected via the 'alert_media' input
                target:
                  entity_id: !input alert_media.entity_id
                # Provide the media details selected via the 'alert_media' input
                data:
                  media_content_id: !input alert_media.media_content_id
                  media_content_type: !input alert_media.media_content_type
                # Optional: Include metadata if provided by the selector and needed by the player
                # metadata: !input alert_media.metadata # Uncomment if needed, depends on media player integration

          ```
        tool_calls: null
      tools: null
    timestamp: 2025-04-23 04:01:05.141495+00:00
  - event_type: agent_detail
    data:
      stats:
        input_tokens: 353
        cached_input_tokens: 0
        output_tokens: 1892
    timestamp: 2025-04-23 04:01:21.335169+00:00
  duration_ms: 16195.713
  tries: 1
