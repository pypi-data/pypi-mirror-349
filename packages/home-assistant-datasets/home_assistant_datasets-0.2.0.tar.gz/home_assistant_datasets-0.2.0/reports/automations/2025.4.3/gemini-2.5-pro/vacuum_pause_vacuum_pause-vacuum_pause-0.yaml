---
uuid: fcd0ef11-d6d7-4cb6-9c84-5f98ca6ae0e0
task_id: vacuum_pause_vacuum_pause-vacuum_pause-0
model_id: gemini-2.5-pro
category: vacuum
task:
  input_text: |
    # Vacuum Pause

    ## Problem statement

    Create a blueprint automation to pause the vacuum when I receive a phone call.

    ## Example use cases

    These are example use cases that could be used with the blueprint:

    - Pause the vacuum when I get a phone call from my relatives
    - Don't interrupt my work video convererence call with vacuum noise by pausing it when the call starts

    ## Detailed Description

    The blueprint should accept two inputs:

    | Input               | Description                                                           |
    | ------------------- | --------------------------------------------------------------------- |
    | `phone_call_sensor` | A `binary_sensor` entity that triggers when a phone call is received. |
    | `vacuum_entity`     | A `vacuum` entity to pause when the automation fires.                 |

    The automation should trigger when the binary sensor fires and the vacuum is running. The vacuum
    should be paused (not stopped) and can be resumed manually.
response: |-
  ```yaml
  # Home Assistant Blueprint: Vacuum Pause on Phone Call
  #
  # Pauses a specified vacuum cleaner when a phone call starts,
  # indicated by a binary sensor turning 'on'. The vacuum must be actively cleaning.
  #
  # For more details and use cases, see:
  # https://community.home-assistant.io/t/your-blueprint-topic-url (replace with actual URL if you share it)

  blueprint:
    name: Vacuum Pause on Phone Call
    description: Pauses the specified vacuum cleaner when a phone call sensor turns 'on', but only if the vacuum is currently cleaning. The vacuum can be resumed manually later.
    domain: automation
    # Define the inputs the user will configure in the UI
    input:
      phone_call_sensor:
        name: Phone Call Sensor
        description: Select the binary sensor that indicates an active phone call (it should turn 'on' when a call starts).
        # Use a selector to ensure the user picks a binary sensor entity
        selector:
          entity:
            domain: binary_sensor
            # Optional: You could filter by device_class if appropriate, e.g.:
            # device_class: connectivity
      vacuum_entity:
        name: Vacuum Cleaner
        description: Select the vacuum cleaner entity you want to pause.
        # Use a selector to ensure the user picks a vacuum entity
        selector:
          entity:
            domain: vacuum

  # Define how the automation behaves if triggered again while running
  # 'single' ensures it runs only once per trigger event until finished.
  mode: single

  # Define the event that starts the automation
  trigger:
    # Trigger when the state of the selected phone call sensor changes
    - platform: state
      # Use the entity ID provided by the user input 'phone_call_sensor'
      entity_id: !input phone_call_sensor
      # Trigger specifically when the state changes *to* 'on'
      to: 'on'
      # Optional: Add 'from: 'off'' if you want to ensure it only triggers on the transition from off to on.
      # from: 'off'

  # Define conditions that must be met for the actions to run
  condition:
    # Check the state of the selected vacuum cleaner
    - condition: state
      # Use the entity ID provided by the user input 'vacuum_entity'
      entity_id: !input vacuum_entity
      # Only proceed if the vacuum's state is 'cleaning'.
      # Note: Vacuum states can vary between models/integrations.
      # Common active states include 'cleaning', 'vacuuming'. Check your vacuum's state in Developer Tools > States if unsure.
      state: 'cleaning'

  # Define the actions to perform when the trigger occurs and conditions are met
  action:
    # Call the 'vacuum.pause' service
    - service: vacuum.pause
      # Target the specific vacuum cleaner entity selected by the user
      target:
        entity_id: !input vacuum_entity
      # Optional: Add a wait or notification here if needed
      # - delay: '00:00:01' # Example wait
      # - service: notify.mobile_app_your_phone # Example notification
      #   data:
      #     message: "Paused {{ state_attr(!input 'vacuum_entity', 'friendly_name') }} due to phone call."

  ```
context:
  conversation_trace:
  - event_type: async_process
    data:
      text: |
        # Vacuum Pause

        ## Problem statement

        Create a blueprint automation to pause the vacuum when I receive a phone call.

        ## Example use cases

        These are example use cases that could be used with the blueprint:

        - Pause the vacuum when I get a phone call from my relatives
        - Don't interrupt my work video convererence call with vacuum noise by pausing it when the call starts

        ## Detailed Description

        The blueprint should accept two inputs:

        | Input               | Description                                                           |
        | ------------------- | --------------------------------------------------------------------- |
        | `phone_call_sensor` | A `binary_sensor` entity that triggers when a phone call is received. |
        | `vacuum_entity`     | A `vacuum` entity to pause when the automation fires.                 |

        The automation should trigger when the binary sensor fires and the vacuum is running. The vacuum
        should be paused (not stopped) and can be resumed manually.
      context:
        id: 01JSGD79G54QRBKKJXK4MW4X4B
        parent_id: null
        user_id: null
      conversation_id: null
      device_id: null
      language: en
      agent_id: conversation.mock_title
      extra_system_prompt: null
    timestamp: 2025-04-23 04:06:45.509610+00:00
  - event_type: agent_detail
    data:
      messages:
      - role: system
        content: |-
          Current time is 21:06:45. Today's date is 2025-04-22.

          Create a Home Assistant blueprint YAML configuration based on the user request.

          Please respond only with markdown that contains yaml. You can
          add comments inline with your step by step thinking. The response must start
          with ```yaml and end with ``` because your answer will be parsed by code. It
          is very important to stick to the format.
      - role: user
        content: |
          # Vacuum Pause

          ## Problem statement

          Create a blueprint automation to pause the vacuum when I receive a phone call.

          ## Example use cases

          These are example use cases that could be used with the blueprint:

          - Pause the vacuum when I get a phone call from my relatives
          - Don't interrupt my work video convererence call with vacuum noise by pausing it when the call starts

          ## Detailed Description

          The blueprint should accept two inputs:

          | Input               | Description                                                           |
          | ------------------- | --------------------------------------------------------------------- |
          | `phone_call_sensor` | A `binary_sensor` entity that triggers when a phone call is received. |
          | `vacuum_entity`     | A `vacuum` entity to pause when the automation fires.                 |

          The automation should trigger when the binary sensor fires and the vacuum is running. The vacuum
          should be paused (not stopped) and can be resumed manually.
      - role: assistant
        agent_id: conversation.mock_title
        content: |-
          ```yaml
          # Home Assistant Blueprint: Vacuum Pause on Phone Call
          #
          # Pauses a specified vacuum cleaner when a phone call starts,
          # indicated by a binary sensor turning 'on'. The vacuum must be actively cleaning.
          #
          # For more details and use cases, see:
          # https://community.home-assistant.io/t/your-blueprint-topic-url (replace with actual URL if you share it)

          blueprint:
            name: Vacuum Pause on Phone Call
            description: Pauses the specified vacuum cleaner when a phone call sensor turns 'on', but only if the vacuum is currently cleaning. The vacuum can be resumed manually later.
            domain: automation
            # Define the inputs the user will configure in the UI
            input:
              phone_call_sensor:
                name: Phone Call Sensor
                description: Select the binary sensor that indicates an active phone call (it should turn 'on' when a call starts).
                # Use a selector to ensure the user picks a binary sensor entity
                selector:
                  entity:
                    domain: binary_sensor
                    # Optional: You could filter by device_class if appropriate, e.g.:
                    # device_class: connectivity
              vacuum_entity:
                name: Vacuum Cleaner
                description: Select the vacuum cleaner entity you want to pause.
                # Use a selector to ensure the user picks a vacuum entity
                selector:
                  entity:
                    domain: vacuum

          # Define how the automation behaves if triggered again while running
          # 'single' ensures it runs only once per trigger event until finished.
          mode: single

          # Define the event that starts the automation
          trigger:
            # Trigger when the state of the selected phone call sensor changes
            - platform: state
              # Use the entity ID provided by the user input 'phone_call_sensor'
              entity_id: !input phone_call_sensor
              # Trigger specifically when the state changes *to* 'on'
              to: 'on'
              # Optional: Add 'from: 'off'' if you want to ensure it only triggers on the transition from off to on.
              # from: 'off'

          # Define conditions that must be met for the actions to run
          condition:
            # Check the state of the selected vacuum cleaner
            - condition: state
              # Use the entity ID provided by the user input 'vacuum_entity'
              entity_id: !input vacuum_entity
              # Only proceed if the vacuum's state is 'cleaning'.
              # Note: Vacuum states can vary between models/integrations.
              # Common active states include 'cleaning', 'vacuuming'. Check your vacuum's state in Developer Tools > States if unsure.
              state: 'cleaning'

          # Define the actions to perform when the trigger occurs and conditions are met
          action:
            # Call the 'vacuum.pause' service
            - service: vacuum.pause
              # Target the specific vacuum cleaner entity selected by the user
              target:
                entity_id: !input vacuum_entity
              # Optional: Add a wait or notification here if needed
              # - delay: '00:00:01' # Example wait
              # - service: notify.mobile_app_your_phone # Example notification
              #   data:
              #     message: "Paused {{ state_attr(!input 'vacuum_entity', 'friendly_name') }} due to phone call."

          ```
        tool_calls: null
      tools: null
    timestamp: 2025-04-23 04:06:45.511707+00:00
  - event_type: agent_detail
    data:
      stats:
        input_tokens: 297
        cached_input_tokens: 0
        output_tokens: 1863
    timestamp: 2025-04-23 04:07:04.037442+00:00
  duration_ms: 18528.199
  tries: 1
