---
uuid: b55c6b22-6a3f-44f0-a583-e71e54e844ce
task_id: humidity_fan_humidity_fan-humidity_fan-2
model_id: gemini-2.5-pro
category: fan
task:
  input_text: |
    # Humidity Fan

    ## Problem statement

    Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

    ## Example use cases

    These are example use cases that could be used with the blueprint:

    - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
    - Make sure the garage does not get too humid

    ## Detailed Description

    The blueprint should accept two inputs:

    | Input               | Description                                                           |
    | ------------------- | --------------------------------------------------------------------- |
    | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
    | `humidity_level` | A `number` selector to set the value used as the trigger. |
    | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

    The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
    triggered, the fan should be turned off. The fan should also be stopped when the
    sensor goes back down below the desired level. The automation should not try to
    turn the fan on if it is already on, and should not turn the fan off when it is
    already off.
response: |-
  ```yaml
  blueprint:
    name: Humidity Fan Control # Descriptive name for the blueprint
    description: Turns a fan on when humidity rises above a threshold and off when it drops below. # Clear description of what it does
    domain: automation # Specifies that this blueprint creates automations
    input:
      # Input for the humidity sensor entity
      humidity_sensor:
        name: Humidity Sensor
        description: The sensor entity reporting humidity levels (must have device_class: humidity).
        selector:
          entity:
            domain: sensor
            device_class: humidity # Ensures only humidity sensors are selectable

      # Input for the humidity threshold level
      humidity_level:
        name: Humidity Threshold
        description: The humidity percentage (%) above which the fan should turn on.
        selector:
          number:
            min: 0
            max: 100
            step: 1
            unit_of_measurement: "%" # Specifies the unit for clarity
            mode: slider # User-friendly slider for selecting the value

      # Input for the fan entity to control
      fan_entity:
        name: Fan
        description: The fan entity to be controlled by this automation.
        selector:
          entity:
            domain: fan # Ensures only fan entities are selectable

  # Define the triggers for the automation
  trigger:
    # Trigger when humidity goes ABOVE the specified threshold
    - platform: numeric_state
      entity_id: !input humidity_sensor # Use the sensor input
      above: !input humidity_level # Use the threshold input
      id: 'humidity_high' # Assign an ID to this trigger for use in actions

    # Trigger when humidity goes BELOW the specified threshold
    - platform: numeric_state
      entity_id: !input humidity_sensor # Use the sensor input
      below: !input humidity_level # Use the threshold input
      id: 'humidity_low' # Assign an ID to this trigger for use in actions

  # Define the sequence of actions to perform when triggered
  action:
    # Use 'choose' to execute different actions based on which trigger fired
    - choose:
        # Actions for the 'humidity_high' trigger
        - conditions:
            # Check if the trigger ID is 'humidity_high'
            - condition: trigger
              id: 'humidity_high'
            # Add a condition to only act if the fan is currently off, preventing unnecessary service calls
            - condition: state
              entity_id: !input fan_entity
              state: 'off'
          # Sequence of actions if conditions are met (humidity high AND fan is off)
          sequence:
            - service: fan.turn_on # Call the service to turn the fan on
              target:
                entity_id: !input fan_entity # Target the selected fan entity

        # Actions for the 'humidity_low' trigger
        - conditions:
            # Check if the trigger ID is 'humidity_low'
            - condition: trigger
              id: 'humidity_low'
            # Add a condition to only act if the fan is currently on, preventing unnecessary service calls
            - condition: state
              entity_id: !input fan_entity
              state: 'on'
          # Sequence of actions if conditions are met (humidity low AND fan is on)
          sequence:
            - service: fan.turn_off # Call the service to turn the fan off
              target:
                entity_id: !input fan_entity # Target the selected fan entity

  # Set the automation mode to 'restart'
  # This means if the automation is triggered again while it's already running (e.g., humidity fluctuates rapidly around the threshold),
  # the previous run will be cancelled and the new run will start. This ensures the fan state reflects the latest humidity reading relative to the threshold.
  mode: restart
  ```
context:
  conversation_trace:
  - event_type: async_process
    data:
      text: |
        # Humidity Fan

        ## Problem statement

        Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

        ## Example use cases

        These are example use cases that could be used with the blueprint:

        - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
        - Make sure the garage does not get too humid

        ## Detailed Description

        The blueprint should accept two inputs:

        | Input               | Description                                                           |
        | ------------------- | --------------------------------------------------------------------- |
        | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
        | `humidity_level` | A `number` selector to set the value used as the trigger. |
        | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

        The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
        triggered, the fan should be turned off. The fan should also be stopped when the
        sensor goes back down below the desired level. The automation should not try to
        turn the fan on if it is already on, and should not turn the fan off when it is
        already off.
      context:
        id: 01JSGCPKBCE42MPBFXXS8CJFWH
        parent_id: null
        user_id: null
      conversation_id: null
      device_id: null
      language: en
      agent_id: conversation.mock_title
      extra_system_prompt: null
    timestamp: 2025-04-23 03:57:38.540777+00:00
  - event_type: agent_detail
    data:
      messages:
      - role: system
        content: |-
          Current time is 20:57:38. Today's date is 2025-04-22.

          Create a Home Assistant blueprint YAML configuration based on the user request.

          Please respond only with markdown that contains yaml. You can
          add comments inline with your step by step thinking. The response must start
          with ```yaml and end with ``` because your answer will be parsed by code. It
          is very important to stick to the format.
      - role: user
        content: |
          # Humidity Fan

          ## Problem statement

          Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

          ## Example use cases

          These are example use cases that could be used with the blueprint:

          - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
          - Make sure the garage does not get too humid

          ## Detailed Description

          The blueprint should accept two inputs:

          | Input               | Description                                                           |
          | ------------------- | --------------------------------------------------------------------- |
          | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
          | `humidity_level` | A `number` selector to set the value used as the trigger. |
          | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

          The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
          triggered, the fan should be turned off. The fan should also be stopped when the
          sensor goes back down below the desired level. The automation should not try to
          turn the fan on if it is already on, and should not turn the fan off when it is
          already off.
      - role: assistant
        agent_id: conversation.mock_title
        content: |-
          ```yaml
          blueprint:
            name: Humidity Fan Control # Descriptive name for the blueprint
            description: Turns a fan on when humidity rises above a threshold and off when it drops below. # Clear description of what it does
            domain: automation # Specifies that this blueprint creates automations
            input:
              # Input for the humidity sensor entity
              humidity_sensor:
                name: Humidity Sensor
                description: The sensor entity reporting humidity levels (must have device_class: humidity).
                selector:
                  entity:
                    domain: sensor
                    device_class: humidity # Ensures only humidity sensors are selectable

              # Input for the humidity threshold level
              humidity_level:
                name: Humidity Threshold
                description: The humidity percentage (%) above which the fan should turn on.
                selector:
                  number:
                    min: 0
                    max: 100
                    step: 1
                    unit_of_measurement: "%" # Specifies the unit for clarity
                    mode: slider # User-friendly slider for selecting the value

              # Input for the fan entity to control
              fan_entity:
                name: Fan
                description: The fan entity to be controlled by this automation.
                selector:
                  entity:
                    domain: fan # Ensures only fan entities are selectable

          # Define the triggers for the automation
          trigger:
            # Trigger when humidity goes ABOVE the specified threshold
            - platform: numeric_state
              entity_id: !input humidity_sensor # Use the sensor input
              above: !input humidity_level # Use the threshold input
              id: 'humidity_high' # Assign an ID to this trigger for use in actions

            # Trigger when humidity goes BELOW the specified threshold
            - platform: numeric_state
              entity_id: !input humidity_sensor # Use the sensor input
              below: !input humidity_level # Use the threshold input
              id: 'humidity_low' # Assign an ID to this trigger for use in actions

          # Define the sequence of actions to perform when triggered
          action:
            # Use 'choose' to execute different actions based on which trigger fired
            - choose:
                # Actions for the 'humidity_high' trigger
                - conditions:
                    # Check if the trigger ID is 'humidity_high'
                    - condition: trigger
                      id: 'humidity_high'
                    # Add a condition to only act if the fan is currently off, preventing unnecessary service calls
                    - condition: state
                      entity_id: !input fan_entity
                      state: 'off'
                  # Sequence of actions if conditions are met (humidity high AND fan is off)
                  sequence:
                    - service: fan.turn_on # Call the service to turn the fan on
                      target:
                        entity_id: !input fan_entity # Target the selected fan entity

                # Actions for the 'humidity_low' trigger
                - conditions:
                    # Check if the trigger ID is 'humidity_low'
                    - condition: trigger
                      id: 'humidity_low'
                    # Add a condition to only act if the fan is currently on, preventing unnecessary service calls
                    - condition: state
                      entity_id: !input fan_entity
                      state: 'on'
                  # Sequence of actions if conditions are met (humidity low AND fan is on)
                  sequence:
                    - service: fan.turn_off # Call the service to turn the fan off
                      target:
                        entity_id: !input fan_entity # Target the selected fan entity

          # Set the automation mode to 'restart'
          # This means if the automation is triggered again while it's already running (e.g., humidity fluctuates rapidly around the threshold),
          # the previous run will be cancelled and the new run will start. This ensures the fan state reflects the latest humidity reading relative to the threshold.
          mode: restart
          ```
        tool_calls: null
      tools: null
    timestamp: 2025-04-23 03:57:38.542402+00:00
  - event_type: agent_detail
    data:
      stats:
        input_tokens: 362
        cached_input_tokens: 0
        output_tokens: 2690
    timestamp: 2025-04-23 03:58:00.539264+00:00
  duration_ms: 21998.818
  tries: 1
