---
uuid: 57cd5add-cdb1-4507-ab62-e9adc5153b62
task_id: light_on_door_light_on_door-light_on_door-2
model_id: gemini-2.5-pro
category: light
task:
  input_text: |
    # Light on door

    ## Problem statement

    Create an blueprint automation to turn on a light when the door opens.

    ## Example use cases

    These are example use cases that could be used with the blueprint:

    - Turn on the pantry light when the pantry door opens

    ## Detailed Description

    The blueprint should accept two inputs:

    | Input          | Description                                                                     |
    | -------------- | ------------------------------------------------------------------------------- |
    | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
    | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

    The automation should trigger when the door opens, and turn the light on. The
    light should be shut off when the door closes or after a 2 minute timeout.
response: |-
  ```yaml
  blueprint:
    name: Turn Light On When Door Opens
    description: Turns on a specified light when a door sensor opens. The light turns off when the door closes or after a 2-minute timeout.
    domain: automation
    # Specify the input fields the user will configure in the UI
    input:
      door_sensor:
        name: Door Sensor
        description: The binary sensor representing the door (e.g., contact sensor). The automation triggers when this sensor state changes to 'on' (open).
        selector:
          entity:
            domain: binary_sensor
            device_class: door # Suggest door sensors, but allow any binary_sensor
      light_switch:
        name: Light Switch
        description: The light entity or entities to turn on/off.
        selector:
          target:
            entity:
              domain: light

  # Define the automation mode
  # 'restart' ensures that if the door is opened again while the automation is waiting
  # (e.g., during the timeout period), the automation restarts from the beginning.
  mode: restart

  # Define the trigger for the automation
  trigger:
    - platform: state
      entity_id: !input door_sensor
      # Trigger when the door sensor changes from 'off' (closed) to 'on' (open)
      from: 'off'
      to: 'on'

  # Define the sequence of actions to perform when the trigger occurs
  action:
    - # Turn on the specified light(s)
      service: light.turn_on
      target: !input light_switch
    - # Wait for either the door to close or a timeout
      wait_for_trigger:
        # Option 1: Door closes
        - platform: state
          entity_id: !input door_sensor
          # Wait for the door sensor to change from 'on' (open) to 'off' (closed)
          from: 'on'
          to: 'off'
        # Option 2: Timeout after 2 minutes
        - platform: time_pattern
          # Wait for 2 minutes (0 hours, 2 minutes, 0 seconds)
          minutes: '/2' # Although time_pattern is usually for recurring, using wait_for_trigger with a short timeout is a common pattern. Let's refine this.
          # A simpler timeout approach within wait_for_trigger:
    - # Wait for either the door to close or a timeout (Refined approach)
      wait_for_trigger:
        # Option 1: Door closes
        - platform: state
          entity_id: !input door_sensor
          to: 'off' # Simpler: just wait until it's 'off'
        # Option 2: Timeout after 2 minutes
      # Define the timeout period directly
      timeout:
        minutes: 2
      # Ensure the automation continues even if the wait times out
      continue_on_timeout: true
    - # Turn off the specified light(s) regardless of whether the door closed or the timeout occurred
      service: light.turn_off
      target: !input light_switch
  ```
context:
  conversation_trace:
  - event_type: async_process
    data:
      text: |
        # Light on door

        ## Problem statement

        Create an blueprint automation to turn on a light when the door opens.

        ## Example use cases

        These are example use cases that could be used with the blueprint:

        - Turn on the pantry light when the pantry door opens

        ## Detailed Description

        The blueprint should accept two inputs:

        | Input          | Description                                                                     |
        | -------------- | ------------------------------------------------------------------------------- |
        | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
        | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

        The automation should trigger when the door opens, and turn the light on. The
        light should be shut off when the door closes or after a 2 minute timeout.
      context:
        id: 01JSGDGPC9RT865GP99NHHFVCW
        parent_id: null
        user_id: null
      conversation_id: null
      device_id: null
      language: en
      agent_id: conversation.mock_title
      extra_system_prompt: null
    timestamp: 2025-04-23 04:11:53.609901+00:00
  - event_type: agent_detail
    data:
      messages:
      - role: system
        content: |-
          Current time is 21:11:53. Today's date is 2025-04-22.

          Create a Home Assistant blueprint YAML configuration based on the user request.

          Please respond only with markdown that contains yaml. You can
          add comments inline with your step by step thinking. The response must start
          with ```yaml and end with ``` because your answer will be parsed by code. It
          is very important to stick to the format.
      - role: user
        content: |
          # Light on door

          ## Problem statement

          Create an blueprint automation to turn on a light when the door opens.

          ## Example use cases

          These are example use cases that could be used with the blueprint:

          - Turn on the pantry light when the pantry door opens

          ## Detailed Description

          The blueprint should accept two inputs:

          | Input          | Description                                                                     |
          | -------------- | ------------------------------------------------------------------------------- |
          | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
          | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

          The automation should trigger when the door opens, and turn the light on. The
          light should be shut off when the door closes or after a 2 minute timeout.
      - role: assistant
        agent_id: conversation.mock_title
        content: |-
          ```yaml
          blueprint:
            name: Turn Light On When Door Opens
            description: Turns on a specified light when a door sensor opens. The light turns off when the door closes or after a 2-minute timeout.
            domain: automation
            # Specify the input fields the user will configure in the UI
            input:
              door_sensor:
                name: Door Sensor
                description: The binary sensor representing the door (e.g., contact sensor). The automation triggers when this sensor state changes to 'on' (open).
                selector:
                  entity:
                    domain: binary_sensor
                    device_class: door # Suggest door sensors, but allow any binary_sensor
              light_switch:
                name: Light Switch
                description: The light entity or entities to turn on/off.
                selector:
                  target:
                    entity:
                      domain: light

          # Define the automation mode
          # 'restart' ensures that if the door is opened again while the automation is waiting
          # (e.g., during the timeout period), the automation restarts from the beginning.
          mode: restart

          # Define the trigger for the automation
          trigger:
            - platform: state
              entity_id: !input door_sensor
              # Trigger when the door sensor changes from 'off' (closed) to 'on' (open)
              from: 'off'
              to: 'on'

          # Define the sequence of actions to perform when the trigger occurs
          action:
            - # Turn on the specified light(s)
              service: light.turn_on
              target: !input light_switch
            - # Wait for either the door to close or a timeout
              wait_for_trigger:
                # Option 1: Door closes
                - platform: state
                  entity_id: !input door_sensor
                  # Wait for the door sensor to change from 'on' (open) to 'off' (closed)
                  from: 'on'
                  to: 'off'
                # Option 2: Timeout after 2 minutes
                - platform: time_pattern
                  # Wait for 2 minutes (0 hours, 2 minutes, 0 seconds)
                  minutes: '/2' # Although time_pattern is usually for recurring, using wait_for_trigger with a short timeout is a common pattern. Let's refine this.
                  # A simpler timeout approach within wait_for_trigger:
            - # Wait for either the door to close or a timeout (Refined approach)
              wait_for_trigger:
                # Option 1: Door closes
                - platform: state
                  entity_id: !input door_sensor
                  to: 'off' # Simpler: just wait until it's 'off'
                # Option 2: Timeout after 2 minutes
              # Define the timeout period directly
              timeout:
                minutes: 2
              # Ensure the automation continues even if the wait times out
              continue_on_timeout: true
            - # Turn off the specified light(s) regardless of whether the door closed or the timeout occurred
              service: light.turn_off
              target: !input light_switch
          ```
        tool_calls: null
      tools: null
    timestamp: 2025-04-23 04:11:53.611759+00:00
  - event_type: agent_detail
    data:
      stats:
        input_tokens: 275
        cached_input_tokens: 0
        output_tokens: 1237
    timestamp: 2025-04-23 04:12:06.043940+00:00
  duration_ms: 12434.888
  tries: 1
