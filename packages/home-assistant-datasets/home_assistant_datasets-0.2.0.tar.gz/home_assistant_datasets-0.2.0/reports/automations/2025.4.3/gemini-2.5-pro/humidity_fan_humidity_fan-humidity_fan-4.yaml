---
uuid: 909462e4-e787-4b76-814e-f589bdecf86b
task_id: humidity_fan_humidity_fan-humidity_fan-4
model_id: gemini-2.5-pro
category: fan
task:
  input_text: |
    # Humidity Fan

    ## Problem statement

    Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

    ## Example use cases

    These are example use cases that could be used with the blueprint:

    - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
    - Make sure the garage does not get too humid

    ## Detailed Description

    The blueprint should accept two inputs:

    | Input               | Description                                                           |
    | ------------------- | --------------------------------------------------------------------- |
    | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
    | `humidity_level` | A `number` selector to set the value used as the trigger. |
    | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

    The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
    triggered, the fan should be turned off. The fan should also be stopped when the
    sensor goes back down below the desired level. The automation should not try to
    turn the fan on if it is already on, and should not turn the fan off when it is
    already off.
response: |-
  ```yaml
  blueprint:
    name: Humidity Controlled Fan
    description: Turn a fan on or off based on a humidity sensor's value. The fan turns on when humidity rises above the target level and turns off when it drops below it.
    domain: automation
    input:
      humidity_sensor:
        name: Humidity Sensor
        description: The sensor entity that measures humidity.
        selector:
          entity:
            domain: sensor
            device_class: humidity
      humidity_level:
        name: Humidity Threshold
        description: The humidity level (in %) above which the fan should turn on.
        selector:
          number:
            min: 0
            max: 100
            unit_of_measurement: "%"
            mode: slider # Use a slider for easier selection
            step: 1
      fan_entity:
        name: Fan
        description: The fan entity to control.
        selector:
          entity:
            domain: fan

  # Set the automation mode to restart. This ensures that if the humidity level fluctuates
  # around the threshold, the automation restarts, correctly evaluating the current state.
  mode: restart

  # Define the triggers for the automation
  trigger:
    # Trigger 1: When humidity goes ABOVE the threshold
    - platform: numeric_state
      entity_id: !input humidity_sensor
      above: !input humidity_level
      id: 'turn_on' # Assign an ID for use in actions
      # Add a small 'for' duration to prevent rapid toggling if humidity fluctuates near the threshold
      # Remove or adjust if immediate response is needed
      # for:
      #   minutes: 1

    # Trigger 2: When humidity goes BELOW the threshold
    - platform: numeric_state
      entity_id: !input humidity_sensor
      below: !input humidity_level
      id: 'turn_off' # Assign an ID for use in actions
      # Add a small 'for' duration to prevent rapid toggling
      # Remove or adjust if immediate response is needed
      # for:
      #   minutes: 1

  # Define the actions to take based on the trigger
  action:
    - choose:
        # Option 1: Triggered by humidity going ABOVE threshold
        - conditions:
            # Check if the trigger ID matches 'turn_on'
            - condition: trigger
              id: 'turn_on'
            # Check if the fan is currently OFF to avoid unnecessary service calls
            - condition: state
              entity_id: !input fan_entity
              state: 'off'
          sequence:
            # Turn the fan ON
            - service: fan.turn_on
              target:
                entity_id: !input fan_entity

        # Option 2: Triggered by humidity going BELOW threshold
        - conditions:
            # Check if the trigger ID matches 'turn_off'
            - condition: trigger
              id: 'turn_off'
            # Check if the fan is currently ON to avoid unnecessary service calls
            - condition: state
              entity_id: !input fan_entity
              state: 'on'
          sequence:
            # Turn the fan OFF
            - service: fan.turn_off
              target:
                entity_id: !input fan_entity
      # Default action (optional): If none of the choices match (shouldn't happen here)
      # default: []
  ```
context:
  conversation_trace:
  - event_type: async_process
    data:
      text: |
        # Humidity Fan

        ## Problem statement

        Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

        ## Example use cases

        These are example use cases that could be used with the blueprint:

        - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
        - Make sure the garage does not get too humid

        ## Detailed Description

        The blueprint should accept two inputs:

        | Input               | Description                                                           |
        | ------------------- | --------------------------------------------------------------------- |
        | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
        | `humidity_level` | A `number` selector to set the value used as the trigger. |
        | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

        The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
        triggered, the fan should be turned off. The fan should also be stopped when the
        sensor goes back down below the desired level. The automation should not try to
        turn the fan on if it is already on, and should not turn the fan off when it is
        already off.
      context:
        id: 01JSGCR2PQ3R5R9V5DEWEM37HG
        parent_id: null
        user_id: null
      conversation_id: null
      device_id: null
      language: en
      agent_id: conversation.mock_title
      extra_system_prompt: null
    timestamp: 2025-04-23 03:58:27.031859+00:00
  - event_type: agent_detail
    data:
      messages:
      - role: system
        content: |-
          Current time is 20:58:27. Today's date is 2025-04-22.

          Create a Home Assistant blueprint YAML configuration based on the user request.

          Please respond only with markdown that contains yaml. You can
          add comments inline with your step by step thinking. The response must start
          with ```yaml and end with ``` because your answer will be parsed by code. It
          is very important to stick to the format.
      - role: user
        content: |
          # Humidity Fan

          ## Problem statement

          Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

          ## Example use cases

          These are example use cases that could be used with the blueprint:

          - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
          - Make sure the garage does not get too humid

          ## Detailed Description

          The blueprint should accept two inputs:

          | Input               | Description                                                           |
          | ------------------- | --------------------------------------------------------------------- |
          | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
          | `humidity_level` | A `number` selector to set the value used as the trigger. |
          | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

          The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
          triggered, the fan should be turned off. The fan should also be stopped when the
          sensor goes back down below the desired level. The automation should not try to
          turn the fan on if it is already on, and should not turn the fan off when it is
          already off.
      - role: assistant
        agent_id: conversation.mock_title
        content: |-
          ```yaml
          blueprint:
            name: Humidity Controlled Fan
            description: Turn a fan on or off based on a humidity sensor's value. The fan turns on when humidity rises above the target level and turns off when it drops below it.
            domain: automation
            input:
              humidity_sensor:
                name: Humidity Sensor
                description: The sensor entity that measures humidity.
                selector:
                  entity:
                    domain: sensor
                    device_class: humidity
              humidity_level:
                name: Humidity Threshold
                description: The humidity level (in %) above which the fan should turn on.
                selector:
                  number:
                    min: 0
                    max: 100
                    unit_of_measurement: "%"
                    mode: slider # Use a slider for easier selection
                    step: 1
              fan_entity:
                name: Fan
                description: The fan entity to control.
                selector:
                  entity:
                    domain: fan

          # Set the automation mode to restart. This ensures that if the humidity level fluctuates
          # around the threshold, the automation restarts, correctly evaluating the current state.
          mode: restart

          # Define the triggers for the automation
          trigger:
            # Trigger 1: When humidity goes ABOVE the threshold
            - platform: numeric_state
              entity_id: !input humidity_sensor
              above: !input humidity_level
              id: 'turn_on' # Assign an ID for use in actions
              # Add a small 'for' duration to prevent rapid toggling if humidity fluctuates near the threshold
              # Remove or adjust if immediate response is needed
              # for:
              #   minutes: 1

            # Trigger 2: When humidity goes BELOW the threshold
            - platform: numeric_state
              entity_id: !input humidity_sensor
              below: !input humidity_level
              id: 'turn_off' # Assign an ID for use in actions
              # Add a small 'for' duration to prevent rapid toggling
              # Remove or adjust if immediate response is needed
              # for:
              #   minutes: 1

          # Define the actions to take based on the trigger
          action:
            - choose:
                # Option 1: Triggered by humidity going ABOVE threshold
                - conditions:
                    # Check if the trigger ID matches 'turn_on'
                    - condition: trigger
                      id: 'turn_on'
                    # Check if the fan is currently OFF to avoid unnecessary service calls
                    - condition: state
                      entity_id: !input fan_entity
                      state: 'off'
                  sequence:
                    # Turn the fan ON
                    - service: fan.turn_on
                      target:
                        entity_id: !input fan_entity

                # Option 2: Triggered by humidity going BELOW threshold
                - conditions:
                    # Check if the trigger ID matches 'turn_off'
                    - condition: trigger
                      id: 'turn_off'
                    # Check if the fan is currently ON to avoid unnecessary service calls
                    - condition: state
                      entity_id: !input fan_entity
                      state: 'on'
                  sequence:
                    # Turn the fan OFF
                    - service: fan.turn_off
                      target:
                        entity_id: !input fan_entity
              # Default action (optional): If none of the choices match (shouldn't happen here)
              # default: []
          ```
        tool_calls: null
      tools: null
    timestamp: 2025-04-23 03:58:27.033492+00:00
  - event_type: agent_detail
    data:
      stats:
        input_tokens: 362
        cached_input_tokens: 0
        output_tokens: 2284
    timestamp: 2025-04-23 03:58:46.340386+00:00
  duration_ms: 19308.868
  tries: 1
