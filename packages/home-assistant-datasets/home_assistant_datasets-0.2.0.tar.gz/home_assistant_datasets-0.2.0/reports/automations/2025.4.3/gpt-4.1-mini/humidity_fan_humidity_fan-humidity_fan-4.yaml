---
uuid: 06a6b09e-f096-4c0b-8c44-374d08c85aed
task_id: humidity_fan_humidity_fan-humidity_fan-4
model_id: gpt-4.1-mini
category: fan
task:
  input_text: |
    # Humidity Fan

    ## Problem statement

    Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

    ## Example use cases

    These are example use cases that could be used with the blueprint:

    - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
    - Make sure the garage does not get too humid

    ## Detailed Description

    The blueprint should accept two inputs:

    | Input               | Description                                                           |
    | ------------------- | --------------------------------------------------------------------- |
    | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
    | `humidity_level` | A `number` selector to set the value used as the trigger. |
    | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

    The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
    triggered, the fan should be turned off. The fan should also be stopped when the
    sensor goes back down below the desired level. The automation should not try to
    turn the fan on if it is already on, and should not turn the fan off when it is
    already off.
response: |-
  ```yaml
  blueprint:
    name: Humidity Fan Control
    description: >
      Turn a fan on when humidity level goes above a threshold and turn it off when below.
    domain: automation
    input:
      humidity_sensor:
        name: Humidity Sensor
        description: The sensor entity measuring humidity.
        selector:
          entity:
            domain: sensor
            device_class: humidity
      humidity_level:
        name: Humidity Level Threshold
        description: Threshold humidity level (%) above which to turn on the fan.
        selector:
          number:
            min: 0
            max: 100
            step: 1
            unit_of_measurement: "%"
      fan_entity:
        name: Fan Entity
        description: The fan to turn on/off based on humidity.
        selector:
          entity:
            domain: fan

  trigger:
    - platform: numeric_state
      entity_id: !input humidity_sensor
      above: !input humidity_level
    - platform: numeric_state
      entity_id: !input humidity_sensor
      below: !input humidity_level

  # Conditions to decide whether to turn fan on or off are handled in actions

  action:
    - choose:
        - conditions:
            - "{{ trigger.to_state is not none }}"
            - "{{ trigger.to_state.state | float > float(humidity_level) }}"
          sequence:
            - condition: state
              entity_id: !input fan_entity
              state: "off"
            - service: fan.turn_on
              target:
                entity_id: !input fan_entity
        - conditions:
            - "{{ trigger.to_state is not none }}"
            - "{{ trigger.to_state.state | float < float(humidity_level) }}"
          sequence:
            - condition: state
              entity_id: !input fan_entity
              state: "on"
            - service: fan.turn_off
              target:
                entity_id: !input fan_entity
  mode: restart
  ```
context:
  conversation_trace:
  - event_type: async_process
    data:
      text: |
        # Humidity Fan

        ## Problem statement

        Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

        ## Example use cases

        These are example use cases that could be used with the blueprint:

        - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
        - Make sure the garage does not get too humid

        ## Detailed Description

        The blueprint should accept two inputs:

        | Input               | Description                                                           |
        | ------------------- | --------------------------------------------------------------------- |
        | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
        | `humidity_level` | A `number` selector to set the value used as the trigger. |
        | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

        The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
        triggered, the fan should be turned off. The fan should also be stopped when the
        sensor goes back down below the desired level. The automation should not try to
        turn the fan on if it is already on, and should not turn the fan off when it is
        already off.
      context:
        id: 01JSGD2HJMK46Q3VGZ4BX71503
        parent_id: null
        user_id: null
      conversation_id: null
      device_id: null
      language: en
      agent_id: conversation.mock_title
      extra_system_prompt: null
    timestamp: 2025-04-23 04:04:09.940130+00:00
  - event_type: agent_detail
    data:
      messages:
      - role: system
        content: |-
          Current time is 21:04:09. Today's date is 2025-04-22.

          Create a Home Assistant blueprint YAML configuration based on the user request.

          Please respond only with markdown that contains yaml. You can
          add comments inline with your step by step thinking. The response must start
          with ```yaml and end with ``` because your answer will be parsed by code. It
          is very important to stick to the format.
      - role: user
        content: |
          # Humidity Fan

          ## Problem statement

          Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

          ## Example use cases

          These are example use cases that could be used with the blueprint:

          - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
          - Make sure the garage does not get too humid

          ## Detailed Description

          The blueprint should accept two inputs:

          | Input               | Description                                                           |
          | ------------------- | --------------------------------------------------------------------- |
          | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
          | `humidity_level` | A `number` selector to set the value used as the trigger. |
          | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

          The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
          triggered, the fan should be turned off. The fan should also be stopped when the
          sensor goes back down below the desired level. The automation should not try to
          turn the fan on if it is already on, and should not turn the fan off when it is
          already off.
      - role: assistant
        agent_id: conversation.mock_title
        content: |-
          ```yaml
          blueprint:
            name: Humidity Fan Control
            description: >
              Turn a fan on when humidity level goes above a threshold and turn it off when below.
            domain: automation
            input:
              humidity_sensor:
                name: Humidity Sensor
                description: The sensor entity measuring humidity.
                selector:
                  entity:
                    domain: sensor
                    device_class: humidity
              humidity_level:
                name: Humidity Level Threshold
                description: Threshold humidity level (%) above which to turn on the fan.
                selector:
                  number:
                    min: 0
                    max: 100
                    step: 1
                    unit_of_measurement: "%"
              fan_entity:
                name: Fan Entity
                description: The fan to turn on/off based on humidity.
                selector:
                  entity:
                    domain: fan

          trigger:
            - platform: numeric_state
              entity_id: !input humidity_sensor
              above: !input humidity_level
            - platform: numeric_state
              entity_id: !input humidity_sensor
              below: !input humidity_level

          # Conditions to decide whether to turn fan on or off are handled in actions

          action:
            - choose:
                - conditions:
                    - "{{ trigger.to_state is not none }}"
                    - "{{ trigger.to_state.state | float > float(humidity_level) }}"
                  sequence:
                    - condition: state
                      entity_id: !input fan_entity
                      state: "off"
                    - service: fan.turn_on
                      target:
                        entity_id: !input fan_entity
                - conditions:
                    - "{{ trigger.to_state is not none }}"
                    - "{{ trigger.to_state.state | float < float(humidity_level) }}"
                  sequence:
                    - condition: state
                      entity_id: !input fan_entity
                      state: "on"
                    - service: fan.turn_off
                      target:
                        entity_id: !input fan_entity
          mode: restart
          ```
        tool_calls: null
      tools: null
    timestamp: 2025-04-23 04:04:09.941668+00:00
  - event_type: agent_detail
    data:
      stats:
        input_tokens: 340
        output_tokens: 400
    timestamp: 2025-04-23 04:04:15.093005+00:00
  duration_ms: 5153.811
  tries: 1
