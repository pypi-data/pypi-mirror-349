---
uuid: 535cb47b-aa88-4da4-8756-b81c42f175c9
task_id: light_on_door_light_on_door-light_on_door-1
model_id: gpt-4.1-mini
category: light
task:
  input_text: |
    # Light on door

    ## Problem statement

    Create an blueprint automation to turn on a light when the door opens.

    ## Example use cases

    These are example use cases that could be used with the blueprint:

    - Turn on the pantry light when the pantry door opens

    ## Detailed Description

    The blueprint should accept two inputs:

    | Input          | Description                                                                     |
    | -------------- | ------------------------------------------------------------------------------- |
    | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
    | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

    The automation should trigger when the door opens, and turn the light on. The
    light should be shut off when the door closes or after a 2 minute timeout.
response: |-
  ```yaml
  blueprint:
    name: Light on Door Open
    description: >
      Turn on one or more lights when a door sensor opens,
      and turn the lights off when the door closes or after 2 minutes timeout.
    domain: automation
    input:
      door_sensor:
        name: Door Sensor
        description: The binary sensor that triggers the automation on open/close
        selector:
          entity:
            domain: binary_sensor
            device_class: door
      light_switch:
        name: Light(s) to control
        description: One or more light entities to turn on/off
        selector:
          target:
            entity:
              domain: light

  trigger:
    - platform: state
      entity_id: !input door_sensor
      to: "on"   # Door opened
    - platform: state
      entity_id: !input door_sensor
      to: "off"  # Door closed

  variables:
    door_sensor: !input door_sensor
    light_switch: !input light_switch

  action:
    - choose:
        - conditions:
            - condition: state
              entity_id: "{{ door_sensor }}"
              state: "on"
          sequence:
            # Door opened: turn lights on
            - service: light.turn_on
              target: "{{ light_switch }}"
            # Wait 2 minutes, then check if door still open to turn lights off
            - wait_for_trigger:
                - platform: state
                  entity_id: "{{ door_sensor }}"
                  to: "off"
              timeout: "00:02:00"
            - choose:
                - conditions:
                    - condition: state
                      entity_id: "{{ door_sensor }}"
                      state: "on"
                  sequence:
                    - service: light.turn_off
                      target: "{{ light_switch }}"
        - conditions:
            - condition: state
              entity_id: "{{ door_sensor }}"
              state: "off"
          sequence:
            # Door closed: immediately turn lights off
            - service: light.turn_off
              target: "{{ light_switch }}"
  mode: restart
  ```
context:
  conversation_trace:
  - event_type: async_process
    data:
      text: |
        # Light on door

        ## Problem statement

        Create an blueprint automation to turn on a light when the door opens.

        ## Example use cases

        These are example use cases that could be used with the blueprint:

        - Turn on the pantry light when the pantry door opens

        ## Detailed Description

        The blueprint should accept two inputs:

        | Input          | Description                                                                     |
        | -------------- | ------------------------------------------------------------------------------- |
        | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
        | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

        The automation should trigger when the door opens, and turn the light on. The
        light should be shut off when the door closes or after a 2 minute timeout.
      context:
        id: 01JSGDRNN3QQCZ1AF3G0FGVR66
        parent_id: null
        user_id: null
      conversation_id: null
      device_id: null
      language: en
      agent_id: conversation.mock_title
      extra_system_prompt: null
    timestamp: 2025-04-23 04:16:15.011385+00:00
  - event_type: agent_detail
    data:
      messages:
      - role: system
        content: |-
          Current time is 21:16:15. Today's date is 2025-04-22.

          Create a Home Assistant blueprint YAML configuration based on the user request.

          Please respond only with markdown that contains yaml. You can
          add comments inline with your step by step thinking. The response must start
          with ```yaml and end with ``` because your answer will be parsed by code. It
          is very important to stick to the format.
      - role: user
        content: |
          # Light on door

          ## Problem statement

          Create an blueprint automation to turn on a light when the door opens.

          ## Example use cases

          These are example use cases that could be used with the blueprint:

          - Turn on the pantry light when the pantry door opens

          ## Detailed Description

          The blueprint should accept two inputs:

          | Input          | Description                                                                     |
          | -------------- | ------------------------------------------------------------------------------- |
          | `door_sensor`  | A `binary_sensor` that triggers the automation to start.                        |
          | `light_switch` | One or more `light` entity targets to turn on or off when the automation fires. |

          The automation should trigger when the door opens, and turn the light on. The
          light should be shut off when the door closes or after a 2 minute timeout.
      - role: assistant
        agent_id: conversation.mock_title
        content: |-
          ```yaml
          blueprint:
            name: Light on Door Open
            description: >
              Turn on one or more lights when a door sensor opens,
              and turn the lights off when the door closes or after 2 minutes timeout.
            domain: automation
            input:
              door_sensor:
                name: Door Sensor
                description: The binary sensor that triggers the automation on open/close
                selector:
                  entity:
                    domain: binary_sensor
                    device_class: door
              light_switch:
                name: Light(s) to control
                description: One or more light entities to turn on/off
                selector:
                  target:
                    entity:
                      domain: light

          trigger:
            - platform: state
              entity_id: !input door_sensor
              to: "on"   # Door opened
            - platform: state
              entity_id: !input door_sensor
              to: "off"  # Door closed

          variables:
            door_sensor: !input door_sensor
            light_switch: !input light_switch

          action:
            - choose:
                - conditions:
                    - condition: state
                      entity_id: "{{ door_sensor }}"
                      state: "on"
                  sequence:
                    # Door opened: turn lights on
                    - service: light.turn_on
                      target: "{{ light_switch }}"
                    # Wait 2 minutes, then check if door still open to turn lights off
                    - wait_for_trigger:
                        - platform: state
                          entity_id: "{{ door_sensor }}"
                          to: "off"
                      timeout: "00:02:00"
                    - choose:
                        - conditions:
                            - condition: state
                              entity_id: "{{ door_sensor }}"
                              state: "on"
                          sequence:
                            - service: light.turn_off
                              target: "{{ light_switch }}"
                - conditions:
                    - condition: state
                      entity_id: "{{ door_sensor }}"
                      state: "off"
                  sequence:
                    # Door closed: immediately turn lights off
                    - service: light.turn_off
                      target: "{{ light_switch }}"
          mode: restart
          ```
        tool_calls: null
      tools: null
    timestamp: 2025-04-23 04:16:15.012937+00:00
  - event_type: agent_detail
    data:
      stats:
        input_tokens: 257
        output_tokens: 428
    timestamp: 2025-04-23 04:16:20.738542+00:00
  duration_ms: 5730.32
  tries: 1
