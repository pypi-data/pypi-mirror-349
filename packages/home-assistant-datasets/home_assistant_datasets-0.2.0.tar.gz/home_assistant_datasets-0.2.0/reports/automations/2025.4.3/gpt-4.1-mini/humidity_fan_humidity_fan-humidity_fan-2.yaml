---
uuid: a4d261db-07bf-4eae-a115-6df3e5339c2e
task_id: humidity_fan_humidity_fan-humidity_fan-2
model_id: gpt-4.1-mini
category: fan
task:
  input_text: |
    # Humidity Fan

    ## Problem statement

    Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

    ## Example use cases

    These are example use cases that could be used with the blueprint:

    - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
    - Make sure the garage does not get too humid

    ## Detailed Description

    The blueprint should accept two inputs:

    | Input               | Description                                                           |
    | ------------------- | --------------------------------------------------------------------- |
    | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
    | `humidity_level` | A `number` selector to set the value used as the trigger. |
    | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

    The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
    triggered, the fan should be turned off. The fan should also be stopped when the
    sensor goes back down below the desired level. The automation should not try to
    turn the fan on if it is already on, and should not turn the fan off when it is
    already off.
response: |
  ```yaml
  blueprint:
    name: Humidity Fan Control
    description: >
      Turn on a fan when humidity rises above a set level, and turn it off when humidity falls below that level.
    domain: automation
    input:
      humidity_sensor:
        name: Humidity Sensor
        description: Sensor measuring the humidity level.
        selector:
          entity:
            domain: sensor
      humidity_level:
        name: Humidity Threshold
        description: Humidity level (%) above which the fan should turn on.
        selector:
          number:
            min: 0
            max: 100
            unit_of_measurement: "%"
            mode: box
            step: 1
            slider: true
      fan_entity:
        name: Fan
        description: Fan to control based on humidity.
        selector:
          entity:
            domain: fan

  trigger:
    - platform: numeric_state
      entity_id: !input humidity_sensor
      above: !input humidity_level

    - platform: numeric_state
      entity_id: !input humidity_sensor
      below: !input humidity_level

  action:
    - choose:
        - conditions:
            # Humidity went above threshold
            - condition: template
              value_template: >
                {{ trigger.to_state.state | float > (state_attr(trigger.entity_id, 'unit_of_measurement') in ['%', 'percent'] and 0 or 0) and
                   trigger.to_state.state | float > (float(blueprint.inputs.humidity_level)) and
                   (states(fan_entity) | lower) != 'on' }}
          sequence:
            - service: fan.turn_on
              target:
                entity_id: !input fan_entity

        - conditions:
            # Humidity went below threshold
            - condition: template
              value_template: >
                {{ trigger.to_state.state | float < (float(blueprint.inputs.humidity_level)) and
                   (states(fan_entity) | lower) == 'on' }}
          sequence:
            - service: fan.turn_off
              target:
                entity_id: !input fan_entity
  mode: single
  ```
context:
  conversation_trace:
  - event_type: async_process
    data:
      text: |
        # Humidity Fan

        ## Problem statement

        Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

        ## Example use cases

        These are example use cases that could be used with the blueprint:

        - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
        - Make sure the garage does not get too humid

        ## Detailed Description

        The blueprint should accept two inputs:

        | Input               | Description                                                           |
        | ------------------- | --------------------------------------------------------------------- |
        | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
        | `humidity_level` | A `number` selector to set the value used as the trigger. |
        | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

        The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
        triggered, the fan should be turned off. The fan should also be stopped when the
        sensor goes back down below the desired level. The automation should not try to
        turn the fan on if it is already on, and should not turn the fan off when it is
        already off.
      context:
        id: 01JSGDKSGZ56ESDRC61T456CP0
        parent_id: null
        user_id: null
      conversation_id: null
      device_id: null
      language: en
      agent_id: conversation.mock_title
      extra_system_prompt: null
    timestamp: 2025-04-23 04:13:35.135921+00:00
  - event_type: agent_detail
    data:
      messages:
      - role: system
        content: |-
          Current time is 21:13:35. Today's date is 2025-04-22.

          Create a Home Assistant blueprint YAML configuration based on the user request.

          Please respond only with markdown that contains yaml. You can
          add comments inline with your step by step thinking. The response must start
          with ```yaml and end with ``` because your answer will be parsed by code. It
          is very important to stick to the format.
      - role: user
        content: |
          # Humidity Fan

          ## Problem statement

          Create a blueprint automation to turn on the fan based on the value of the humidity sensor.

          ## Example use cases

          These are example use cases that could be used with the blueprint:

          - Turn on the bathroom exhaust fan when the bathroom humidty is above 60%
          - Make sure the garage does not get too humid

          ## Detailed Description

          The blueprint should accept two inputs:

          | Input               | Description                                                           |
          | ------------------- | --------------------------------------------------------------------- |
          | `humidity_sensor` | A `sensor` entity that is a humidty sensor that triggers the automation. |
          | `humidity_level` | A `number` selector to set the value used as the trigger. |
          | `fan_entity`     | A `fan` entity to turn on when the automation fires. |

          The automation should trigger when the `humidity_sensor` level goes above `humidity_level`. When
          triggered, the fan should be turned off. The fan should also be stopped when the
          sensor goes back down below the desired level. The automation should not try to
          turn the fan on if it is already on, and should not turn the fan off when it is
          already off.
      - role: assistant
        agent_id: conversation.mock_title
        content: |
          ```yaml
          blueprint:
            name: Humidity Fan Control
            description: >
              Turn on a fan when humidity rises above a set level, and turn it off when humidity falls below that level.
            domain: automation
            input:
              humidity_sensor:
                name: Humidity Sensor
                description: Sensor measuring the humidity level.
                selector:
                  entity:
                    domain: sensor
              humidity_level:
                name: Humidity Threshold
                description: Humidity level (%) above which the fan should turn on.
                selector:
                  number:
                    min: 0
                    max: 100
                    unit_of_measurement: "%"
                    mode: box
                    step: 1
                    slider: true
              fan_entity:
                name: Fan
                description: Fan to control based on humidity.
                selector:
                  entity:
                    domain: fan

          trigger:
            - platform: numeric_state
              entity_id: !input humidity_sensor
              above: !input humidity_level

            - platform: numeric_state
              entity_id: !input humidity_sensor
              below: !input humidity_level

          action:
            - choose:
                - conditions:
                    # Humidity went above threshold
                    - condition: template
                      value_template: >
                        {{ trigger.to_state.state | float > (state_attr(trigger.entity_id, 'unit_of_measurement') in ['%', 'percent'] and 0 or 0) and
                           trigger.to_state.state | float > (float(blueprint.inputs.humidity_level)) and
                           (states(fan_entity) | lower) != 'on' }}
                  sequence:
                    - service: fan.turn_on
                      target:
                        entity_id: !input fan_entity

                - conditions:
                    # Humidity went below threshold
                    - condition: template
                      value_template: >
                        {{ trigger.to_state.state | float < (float(blueprint.inputs.humidity_level)) and
                           (states(fan_entity) | lower) == 'on' }}
                  sequence:
                    - service: fan.turn_off
                      target:
                        entity_id: !input fan_entity
          mode: single
          ```
        tool_calls: null
      tools: null
    timestamp: 2025-04-23 04:13:35.137477+00:00
  - event_type: agent_detail
    data:
      stats:
        input_tokens: 340
        output_tokens: 441
    timestamp: 2025-04-23 04:13:41.414911+00:00
  duration_ms: 6282.356
  tries: 1
