# pyproject.toml
[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "scientific-plot-scaler"
dynamic = ["version"]
description = "A tool for creating publication-ready scientific plots with proper text scaling for LaTeX documents"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Vijay Nandurdikar", email = "vijaynandurdikar@gmail.com"}
]
maintainers = [
    {name = "Vijay Nandurdikar", email = "vijaynandurdikar@gmail.com"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering :: Visualization",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Operating System :: OS Independent",
]
keywords = ["scientific", "plotting", "latex", "publication", "matplotlib"]
requires-python = ">=3.8"
dependencies = [
    "matplotlib>=3.5.0",
    "seaborn>=0.11.0",
    "numpy>=1.20.0",
    "scipy>=1.7.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=6.0",
    "pytest-cov>=2.0",
    "black>=21.0",
    "flake8>=3.8",
    "mypy>=0.812",
    "pre-commit>=2.0",
]
examples = [
    "jupyter>=1.0",
    "pandas>=1.0",
]
docs = [
    "sphinx>=4.0",
    "sphinx-rtd-theme>=1.0",
]

[project.urls]
Homepage = "https://github.com/VijayN10/scientific-plot-scaler"
Documentation = "https://github.com/VijayN10/scientific-plot-scaler/wiki"
Repository = "https://github.com/VijayN10/scientific-plot-scaler"
"Bug Tracker" = "https://github.com/VijayN10/scientific-plot-scaler/issues"
Changelog = "https://github.com/VijayN10/scientific-plot-scaler/blob/main/CHANGELOG.md"

[project.scripts]
plot-scaler = "scientific_plot_scaler.plot_scaler:main"

[tool.setuptools_scm]
write_to = "scientific_plot_scaler/_version.py"

[tool.setuptools.packages.find]
where = ["."]
include = ["scientific_plot_scaler*"]

[tool.setuptools.package-data]
scientific_plot_scaler = ["configs/*.json"]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short --strict-markers"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.coverage.run]
source = ["scientific_plot_scaler"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]