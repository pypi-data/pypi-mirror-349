from _typeshed import Incomplete
from typing import Iterable, Iterator, overload

class Box:
    x_max: float
    x_min: float
    y_max: float
    y_min: float
    z_max: float
    z_min: float
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, x_min: float, y_min: float, z_min: float, x_max: float, y_max: float, z_max: float) -> None: ...
    @overload
    def __init__(self, x_min: float, y_min: float, x_max: float, y_max: float) -> None: ...
    @overload
    def __init__(self, min, max) -> None: ...
    @overload
    def __init__(self, list: list[float]) -> None: ...
    @overload
    def __init__(self, key: VoxelKey, las_header) -> None: ...
    @overload
    def Contains(self, arg0: Box) -> bool: ...
    @overload
    def Contains(self, arg0) -> bool: ...
    @staticmethod
    def EmptyBox() -> Box: ...
    def Intersects(self, arg0: Box) -> bool: ...
    @staticmethod
    def MaxBox() -> Box: ...
    def Within(self, arg0: Box) -> bool: ...

class CopcConfig:
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def copc_extents(self): ...
    @property
    def copc_info(self): ...
    @property
    def extra_bytes_vlr(self) -> EbVlr: ...
    @property
    def las_header(self) -> LasHeader: ...
    @property
    def wkt(self) -> str: ...

class CopcConfigWriter:
    @overload
    def __init__(self, point_format_id: int, scale: Vector3 = ..., offset: Vector3 = ..., wkt: str = ..., extra_bytes_vlr: EbVlr = ..., has_extended_stats: bool = ...) -> None: ...
    @overload
    def __init__(self, arg0: CopcConfig) -> None: ...
    @property
    def copc_extents(self): ...
    @property
    def copc_info(self): ...
    @property
    def extra_bytes_vlr(self) -> EbVlr: ...
    @property
    def las_header(self) -> LasHeader: ...
    @property
    def wkt(self) -> str: ...

class CopcExtent:
    maximum: float
    mean: float
    minimum: float
    var: float
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, minimum: float, maximum: float, mean: float = ..., var: float = ...) -> None: ...
    @overload
    def __init__(self, list: list[float]) -> None: ...
    def __eq__(self, arg0: CopcExtent) -> bool: ...

class CopcExtents:
    blue: CopcExtent
    classification: CopcExtent
    edge_of_flight_line: CopcExtent
    extra_bytes: list[CopcExtent]
    gps_time: CopcExtent
    green: CopcExtent
    intensity: CopcExtent
    nir: CopcExtent
    number_of_returns: CopcExtent
    point_source_id: CopcExtent
    red: CopcExtent
    return_number: CopcExtent
    scan_angle: CopcExtent
    scan_direction_flag: CopcExtent
    scanner_channel: CopcExtent
    user_data: CopcExtent
    x: CopcExtent
    y: CopcExtent
    z: CopcExtent
    def __init__(self, point_format_id: int, num_eb_items: int = ...) -> None: ...
    @property
    def extents(self) -> list[CopcExtent]: ...
    @property
    def has_extended_stats(self) -> bool: ...
    @property
    def point_format_id(self) -> int: ...

class CopcInfo:
    center_x: float
    center_y: float
    center_z: float
    halfsize: float
    root_hier_offset: int
    root_hier_size: int
    spacing: float
    def __init__(self) -> None: ...

class EbField:
    def __init__(self) -> None: ...

class EbVlr:
    items: Incomplete
    def __init__(self, arg0: int) -> None: ...

class FileReader:
    def __init__(self, arg0: str) -> None: ...
    def Close(self) -> None: ...
    def FindNode(self, key: VoxelKey) -> Node: ...
    def GetAllChildrenOfPage(self, key: VoxelKey) -> list[Node]: ...
    def GetAllNodes(self) -> list[Node]: ...
    def GetAllPoints(self, resolution: float = ...) -> Points: ...
    def GetDepthAtResolution(self, resolution: float) -> int: ...
    def GetMaxDepth(self) -> int: ...
    def GetNodesAtResolution(self, resolution: float) -> list[Node]: ...
    def GetNodesIntersectBox(self, box: Box, resolution: float = ...) -> list[Node]: ...
    def GetNodesWithinBox(self, box: Box, resolution: float = ...) -> list[Node]: ...
    def GetNodesWithinResolution(self, resolution: float) -> list[Node]: ...
    def GetPageList(self) -> list[VoxelKey]: ...
    @overload
    def GetPointData(self, node: Node) -> VectorChar: ...
    @overload
    def GetPointData(self, key: VoxelKey) -> VectorChar: ...
    @overload
    def GetPointDataCompressed(self, node: Node) -> VectorChar: ...
    @overload
    def GetPointDataCompressed(self, key: VoxelKey) -> VectorChar: ...
    @overload
    def GetPoints(self, node: Node) -> Points: ...
    @overload
    def GetPoints(self, key: VoxelKey) -> Points: ...
    def GetPointsWithinBox(self, box: Box, resolution: float = ...) -> Points: ...
    def ValidateSpatialBounds(self, verbose: bool = ...) -> bool: ...
    @property
    def copc_config(self): ...
    @property
    def path(self) -> str: ...

class FileWriter:
    def __init__(self, file_path: str, config, point_format_id: int | None = ..., scale: Vector3 | None = ..., offset: Vector3 | None = ..., wkt: str | None = ..., extra_bytes_vlr: EbVlr | None = ..., has_extended_stats: bool | None = ...) -> None: ...
    @overload
    def AddNode(self, key: VoxelKey, points: Points, page_key: VoxelKey = ...) -> Node: ...
    @overload
    def AddNode(self, key: VoxelKey, uncompressed_data: VectorChar, page_key: VoxelKey = ...) -> Node: ...
    def AddNodeCompressed(self, key: VoxelKey, compressed_data: VectorChar, point_count: int, page_key: VoxelKey = ...) -> Node: ...
    def ChangeNodePage(self, node_key: VoxelKey, new_page_key: VoxelKey) -> None: ...
    def Close(self) -> None: ...
    def FindNode(self, arg0: VoxelKey) -> Node: ...
    @property
    def copc_config(self): ...
    @property
    def path(self) -> str: ...

class LasHeader:
    creation_day: int
    creation_year: int
    file_source_id: int
    generating_software: str
    global_encoding: int
    guid: str
    max: Vector3
    min: Vector3
    points_by_return: Incomplete
    system_identifier: str
    def __init__(self) -> None: ...
    def ApplyInverseScale(self, arg0: Vector3) -> Vector3: ...
    def ApplyScale(self, arg0: Vector3) -> Vector3: ...
    def ApplyScaleX(self, arg0: float) -> float: ...
    def ApplyScaleY(self, arg0: float) -> float: ...
    def ApplyScaleZ(self, arg0: float) -> float: ...
    def Bounds(self) -> Box: ...
    def CheckAndUpdateBounds(self, arg0: Point) -> None: ...
    def EbByteSize(self) -> int: ...
    def RemoveScaleX(self, arg0: float) -> int: ...
    def RemoveScaleY(self, arg0: float) -> int: ...
    def RemoveScaleZ(self, arg0: float) -> int: ...
    def SetGpsTimeBit(self) -> None: ...
    def Span(self) -> float: ...
    @property
    def evlr_count(self) -> int: ...
    @property
    def evlr_offset(self) -> int: ...
    @property
    def offset(self) -> Vector3: ...
    @property
    def point_count(self) -> int: ...
    @property
    def point_format_id(self) -> int: ...
    @property
    def point_offset(self) -> int: ...
    @property
    def point_record_length(self) -> int: ...
    @property
    def scale(self) -> Vector3: ...
    @property
    def vlr_count(self) -> int: ...

class LazConfig:
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def extra_bytes_vlr(self) -> EbVlr: ...
    @property
    def las_header(self) -> LasHeader: ...
    @property
    def wkt(self) -> str: ...

class LazConfigWriter:
    @overload
    def __init__(self, point_format_id: int, scale: Vector3 = ..., offset: Vector3 = ..., wkt: str = ..., extra_bytes_vlr: EbVlr = ...) -> None: ...
    @overload
    def __init__(self, arg0: LazConfig) -> None: ...
    @overload
    def __init__(self, arg0: CopcConfig) -> None: ...
    @property
    def extra_bytes_vlr(self) -> EbVlr: ...
    @property
    def las_header(self) -> LasHeader: ...
    @property
    def wkt(self) -> str: ...

class LazReader:
    def __init__(self, file_path: str) -> None: ...
    def GetPoints(self) -> Points: ...
    @property
    def laz_config(self): ...
    @property
    def path(self) -> str: ...

class LazWriter:
    def __init__(self, file_path: str, config) -> None: ...
    def Close(self) -> None: ...
    def WritePoints(self, points: Points) -> None: ...
    def WritePointsCompressed(self, compressed_data: VectorChar, point_count: int) -> None: ...
    @property
    def chunk_count(self) -> int: ...
    @property
    def laz_config(self): ...
    @property
    def path(self) -> str: ...
    @property
    def point_count(self) -> int: ...

class Node:
    byte_size: int
    key: VoxelKey
    offset: int
    page_key: VoxelKey
    point_count: int
    def __init__(self) -> None: ...
    def IsPage(self) -> bool: ...
    def IsValid(self) -> bool: ...

class Page:
    byte_size: int
    key: VoxelKey
    loaded: bool
    offset: int
    point_count: int
    def __init__(self, *args, **kwargs) -> None: ...
    def IsPage(self) -> bool: ...
    def IsValid(self) -> bool: ...

class Point:
    blue: int
    classification: int
    edge_of_flight_line: bool
    extra_bytes: list[int]
    flags_bit_field: int
    gps_time: float
    green: int
    intensity: int
    key_point: bool
    nir: int
    number_of_returns: int
    overlap: bool
    point_source_id: int
    red: int
    return_number: int
    returns_bit_field: int
    rgb: Incomplete
    scan_angle: int
    scan_angle_degrees: float
    scan_direction_flag: bool
    scanner_channel: int
    synthetic: bool
    user_data: int
    withheld: bool
    x: float
    y: float
    z: float
    def __init__(self, *args, **kwargs) -> None: ...
    def EbByteSize(self) -> int: ...
    def HasNir(self) -> bool: ...
    def HasRgb(self) -> bool: ...
    def ToPointFormat(self, point_format_id: int) -> None: ...
    def Within(self, box: Box) -> bool: ...
    def __eq__(self, arg0: Point) -> bool: ...
    def __ne__(self, arg0: Point) -> bool: ...
    @property
    def point_format_id(self) -> int: ...
    @property
    def point_record_length(self) -> int: ...

class Points:
    blue: list[int]
    classification: list[int]
    green: list[int]
    point_source_id: list[int]
    red: list[int]
    x: list[float]
    y: list[float]
    z: list[float]
    @overload
    def __init__(self, point_format_id: int, eb_byte_size: int = ...) -> None: ...
    @overload
    def __init__(self, points: list[Point]) -> None: ...
    @overload
    def __init__(self, arg0) -> None: ...
    def AddPoint(self, arg0: Point) -> None: ...
    @overload
    def AddPoints(self, arg0: Points) -> None: ...
    @overload
    def AddPoints(self, arg0: list[Point]) -> None: ...
    def CreatePoint(self) -> Point: ...
    def GetWithin(self, box: Box) -> list[Point]: ...
    @overload
    def Pack(self, arg0: Vector3, arg1: Vector3) -> VectorChar: ...
    @overload
    def Pack(self, arg0) -> VectorChar: ...
    def ToPointFormat(self, point_format_id: int) -> None: ...
    @overload
    def Unpack(self, arg0) -> Points: ...
    @overload
    def Unpack(self, arg0: int, arg1: int, arg2: Vector3, arg3: Vector3) -> Points: ...
    def Within(self, box: Box) -> bool: ...
    def __contains__(self, arg0: Point) -> bool: ...
    @overload
    def __getitem__(self, arg0: int) -> Point: ...
    @overload
    def __getitem__(self, arg0: slice) -> Points: ...
    def __iter__(self) -> Iterator[Point]: ...
    def __len__(self) -> int: ...
    @overload
    def __setitem__(self, arg0: int, arg1: Point) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: Points) -> None: ...
    @property
    def eb_byte_size(self) -> int: ...
    @property
    def point_format_id(self) -> int: ...
    @property
    def point_record_length(self) -> int: ...

class Vector3:
    x: float
    y: float
    z: float
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, x: float, y: float, z: float) -> None: ...
    @overload
    def __init__(self, list: list[float]) -> None: ...
    @staticmethod
    def DefaultOffset() -> Vector3: ...
    @staticmethod
    def DefaultScale() -> Vector3: ...
    @overload
    def __add__(self, arg0: Vector3) -> Vector3: ...
    @overload
    def __add__(self, arg0: float) -> Vector3: ...
    def __eq__(self, arg0: Vector3) -> bool: ...
    @overload
    def __floordiv__(self, arg0: Vector3) -> Vector3: ...
    @overload
    def __floordiv__(self, arg0: float) -> Vector3: ...
    @overload
    def __mul__(self, arg0: Vector3) -> Vector3: ...
    @overload
    def __mul__(self, arg0: float) -> Vector3: ...
    @overload
    def __sub__(self, arg0: Vector3) -> Vector3: ...
    @overload
    def __sub__(self, arg0: float) -> Vector3: ...
    @overload
    def __truediv__(self, arg0: Vector3) -> Vector3: ...
    @overload
    def __truediv__(self, arg0: float) -> Vector3: ...

class VectorChar:
    @overload
    def __init__(self, arg0: Buffer) -> None: ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VectorChar) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: str) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: str) -> int: ...
    @overload
    def extend(self, L: VectorChar) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: str) -> None: ...
    @overload
    def pop(self) -> str: ...
    @overload
    def pop(self, i: int) -> str: ...
    def remove(self, x: str) -> None: ...
    def __bool__(self) -> bool: ...
    def __buffer__(self, *args, **kwargs): ...
    def __contains__(self, x: str) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VectorChar) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VectorChar: ...
    @overload
    def __getitem__(self, arg0: int) -> str: ...
    def __iter__(self) -> Iterator[str]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VectorChar) -> bool: ...
    def __release_buffer__(self, *args, **kwargs): ...
    @overload
    def __setitem__(self, arg0: int, arg1: str) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VectorChar) -> None: ...

class VoxelKey:
    d: int
    x: int
    y: int
    z: int
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, d: int, x: int, y: int, z: int) -> None: ...
    @overload
    def __init__(self, list: list[int]) -> None: ...
    def Bisect(self, arg0: int) -> VoxelKey: ...
    def ChildOf(self, parent_key: VoxelKey) -> bool: ...
    @overload
    def Contains(self, arg0, arg1) -> bool: ...
    @overload
    def Contains(self, arg0, arg1) -> bool: ...
    def Crosses(self, arg0, arg1) -> bool: ...
    def GetChildren(self) -> list[VoxelKey]: ...
    def GetParent(self) -> VoxelKey: ...
    def GetParentAtDepth(self, depth: int) -> VoxelKey: ...
    def GetParents(self, include_current: bool) -> list[VoxelKey]: ...
    @staticmethod
    def GetResolutionAtDepth(depth: int, las_header, copc_header) -> float: ...
    def Intersects(self, arg0, arg1) -> bool: ...
    @staticmethod
    def InvalidKey() -> VoxelKey: ...
    def IsValid(self) -> bool: ...
    def Resolution(self, las_header, copc_header) -> float: ...
    @staticmethod
    def RootKey() -> VoxelKey: ...
    def Within(self, arg0, arg1) -> bool: ...
    def __eq__(self, arg0: VoxelKey) -> bool: ...
    def __hash__(self) -> int: ...

@overload
def CompressBytes(_in: VectorChar, point_format_id: int, eb_byte_size: int) -> VectorChar: ...
@overload
def CompressBytes(arg0: VectorChar, arg1) -> VectorChar: ...
@overload
def DecompressBytes(compressed_data: VectorChar, header, point_count: int) -> VectorChar: ...
@overload
def DecompressBytes(compressed_data: VectorChar, point_format_id: int, eb_byte_size: int, point_count: int) -> VectorChar: ...
