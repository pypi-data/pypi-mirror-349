[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[project]
name = "ffmpeg-converter"
version = "0.3.7"
license = {file = "LICENSE"}
authors = [
    { name = "OSpoon", email = "zxin088@gmail.com" }
]
description = "基于 FFmpeg 的音视频格式转换工具"
keywords = ["ffmpeg", "converter", "audio", "video"]
readme = "README.md"
requires-python = ">=3.11"
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
]

[project.urls]
"Homepage" = "https://github.com/OSpoon/ffmpeg-converter/"
"Bug Tracker" = "https://github.com/OSpoon/ffmpeg-converter/issues"

[tool.pytest.ini_options]
pythonpath = [
  "."
]
[tool.coverage.run]
omit = [
    "*/.cursor/extensions/*",
    "*/pythonFiles/lib/python/*",
    "*/site-packages/*",
]
[tool.coverage.report]
exclude_also = [
    'def __repr__',
    'if self.debug:',
    'if settings.DEBUG',
    'raise AssertionError',
    'raise NotImplementedError',
    'if 0:',
    'if __name__ == .__main__.:',
    'if TYPE_CHECKING:',
    'class .*\bProtocol\):',
    '@(abc\.)?abstractmethod',
]
[tool.setuptools.package-data]
"pkgname" = ["py.typed"]
[tool.setuptools.packages.find]
where = ["src"]
[tool.ruff]
indent-width = 4
# Assume Python 3.13
target-version = "py313"

[tool.ruff.lint]
# Read more here https://docs.astral.sh/ruff/rules/
# By default, Ruff enables Flake8's E and F rules
# Flake8-bandit - S
# Flake8-bugbear – catches real-world Python footguns - B
# Flake8-builtins - A
# Flake8-tidy-imports - TID
# Isort - I
# Mccabe – code complexity warnings - C90
# Pycodestyle - E, W
# Pyflakes - F
# Pylint - PLC, PLE, PLW
# Ruff specific - RUF
# Simplifications (e.g., if x == True → if x) - SIM
# Pyupgrade – safe modernization (e.g., str() → f"") - UP

select = ['A', 'B', 'C90', 'E', 'F', 'I', 'PLC', 'PLE', 'PLW', 'S', 'SIM', 'TID', 'UP', 'W']
# Only enable these RUF rules
extend-select = [
  "RUF001",  # ambiguous Unicode
  "RUF012",  # mutable default arguments
  "RUF013",  # unnecessary super()
  "RUF016",  # unnecessary else after return (optional)
  "RUF018",  # unnecessary else after raise (optional)
]
ignore = ["E501", "C901", "S101"]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []
[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[dependency-groups]
dev = [
    "build>=1.2.2.post1",
    "coverage>=7.8.1",
    "pre-commit>=4.2.0",
    "pytest>=8.3.5",
    "pytest-asyncio>=0.26.0",
    "pytest-benchmark>=5.1.0",
]

[tool.ruff.lint.per-file-ignores]
# Explicit re-exports is fine in __init__.py, still a code smell elsewhere.
"__init__.py" = ["PLC0414"]
