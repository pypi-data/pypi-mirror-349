from dataclasses import dataclass

from cartography.models.core.common import PropertyRef
from cartography.models.core.nodes import CartographyNodeProperties
from cartography.models.core.nodes import CartographyNodeSchema
from cartography.models.core.relationships import CartographyRelProperties
from cartography.models.core.relationships import CartographyRelSchema
from cartography.models.core.relationships import LinkDirection
from cartography.models.core.relationships import make_target_node_matcher
{% if entity.related_entities|length > 0 %}
from cartography.models.core.relationships import OtherRelationships
{% endif %}
from cartography.models.core.relationships import TargetNodeMatcher


@dataclass(frozen=True)
class {{ entity.node_name }}NodeProperties(CartographyNodeProperties):
    {% for field_name, field_details in entity.fields.items() %}
    {{ field_name }}: PropertyRef = PropertyRef('{{ field_details.name }}')
    {% endfor %}
    lastupdated: PropertyRef = PropertyRef('lastupdated', set_in_kwargs=True)


{% if entity.parent_entity %}
@dataclass(frozen=True)
class {{ entity.node_name}}To{{ entity.parent_entity.name }}RelProperties(CartographyRelProperties):
    lastupdated: PropertyRef = PropertyRef('lastupdated', set_in_kwargs=True)


@dataclass(frozen=True)
# (:{{ entity.node_name }})<-[:RESOURCE]-(:{{ entity.parent_entity.node_name }})
class {{ entity.node_name}}To{{ entity.parent_entity.name }}Rel(CartographyRelSchema):
    target_node_label: str = '{{ entity.parent_entity.node_name }}'
    target_node_matcher: TargetNodeMatcher = make_target_node_matcher(
        {'id': PropertyRef('{{ entity.parent_entity.name|lower}}_id', set_in_kwargs=True)},
    )
    direction: LinkDirection = LinkDirection.INWARD
    rel_label: str = "RESOURCE"
    properties: {{ entity.node_name}}To{{ entity.parent_entity.name }}RelProperties = {{ entity.node_name}}To{{ entity.parent_entity.name }}RelProperties()
{% endif %}


{% for name, link_details in entity.related_entities.items() %}
@dataclass(frozen=True)
class {{ entity.node_name}}To{{ link_details.entity.node_name}}Properties(CartographyRelProperties):
    lastupdated: PropertyRef = PropertyRef("lastupdated", set_in_kwargs=True)


@dataclass(frozen=True)
# CHANGEME: Change `LINKED_TO` relation name
# (:{{ link_details.entity.node_name }})-[:LINKED_TO]->(:{{ entity.node_name }})
class {{ entity.node_name}}To{{ link_details.entity.node_name}}Rel(CartographyRelSchema):
    target_node_label: str = "{{ link_details.entity.node_name}}"
    target_node_matcher: TargetNodeMatcher = make_target_node_matcher(
        {"id": PropertyRef(
            "{{ link_details.name }}",
            {% if link_details.to_many %}
            one_to_many=True,
            {% endif %}
        )},
    )
    direction: LinkDirection = LinkDirection.INWARD
    rel_label: str = "LINKED_TO"
    properties: {{ entity.node_name}}To{{ link_details.entity.node_name}}Properties = (
        {{ entity.node_name}}To{{ link_details.entity.node_name}}Properties()
    )
{% endfor %}


@dataclass(frozen=True)
class {{ entity.node_class }}(CartographyNodeSchema):
    label: str = '{{ entity.node_name }}'
    properties: {{ entity.node_name }}NodeProperties = {{ entity.node_name }}NodeProperties()
    {% if entity.parent_entity %}
    sub_resource_relationship: {{ entity.node_name}}To{{ entity.parent_entity.name }}Rel = {{ entity.node_name}}To{{ entity.parent_entity.name }}Rel()
    {% endif %}
    {% if entity.related_entities|length > 0 %}
    other_relationships: OtherRelationships = OtherRelationships(
        [
    {% for related in entity.related_entities.values() %}
            {{ entity.node_name}}To{{ related.entity.node_name }}Rel(),
    {% endfor %}
        ],
    )
    {% endif %}
