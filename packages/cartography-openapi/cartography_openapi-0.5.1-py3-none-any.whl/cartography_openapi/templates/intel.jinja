import logging
import requests

import neo4j

{% for entity in module.entities.values() %}
import cartography.intel.{{ module.name|lower }}.{{ entity.name|lower }}s
{% endfor %}
from cartography.config import Config
from cartography.util import timeit

logger = logging.getLogger(__name__)


@timeit
def start_{{ module.name|lower }}_ingestion(neo4j_session: neo4j.Session, config: Config) -> None:
    """
    If this module is configured, perform ingestion of {{ module.name }} data. Otherwise warn and exit
    :param neo4j_session: Neo4J session for database interface
    :param config: A cartography.config object
    :return: None
    """

    # CHANGEME: Add here needed credentials
    if not config.{{ module.name|lower }}_apikey:
        logger.info(
            '{{ module.name }} import is not configured - skipping this module. '
            'See docs to configure.',
        )
        return

    # Create requests sessions
    api_session = requests.session()

    # CHANGEME: Configure the authentication
    api_session.headers.update(
        {'X-Api-Key': config.{{ module.name|lower }}_apikey}
    )

    common_job_parameters = {
        "UPDATE_TAG": config.update_tag,
        "BASE_URL": "{{ module.server_url }}",
        {% for param in module.needed_params %}
        "{{ param }}": config.{{ module.name|lower }}_{{ param }},
        {% endfor %}
    }
