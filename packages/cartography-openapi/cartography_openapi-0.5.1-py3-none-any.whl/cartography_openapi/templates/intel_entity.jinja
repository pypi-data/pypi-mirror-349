import logging
from typing import Any
from typing import Dict
from typing import List
import requests

import neo4j

from cartography.client.core.tx import load
from cartography.graph.job import GraphJob
from cartography.models.{{ entity._module.name|lower }}.{{ entity.name|lower }} import {{ entity.node_class }}
from cartography.util import timeit


logger = logging.getLogger(__name__)
# Connect and read timeouts of 60 seconds each; see https://requests.readthedocs.io/en/master/user/advanced/#timeouts
_TIMEOUT = (60, 60)


@timeit
def sync(
    neo4j_session: neo4j.Session,
    api_session: requests.Session,
    common_job_parameters: Dict[str, Any],
    {% for arg in entity.needed_params.values() %}
    {{ arg.var_name }}: str,
    {% endfor %}
) -> List[Dict]:
    {{ entity.name|lower}}s = get(
        api_session,
        common_job_parameters['BASE_URL'],
        {% for arg in entity.needed_params.values() %}
        {{ arg.var_name }},
        {% endfor %}
    )
    # CHANGEME: You can configure here a transform operation
    # formated_{{ entity.name|lower}}s = transform({{ entity.name|lower}}s)
    load_{{ entity.name|lower}}s(
        neo4j_session,
        {{ entity.name|lower}}s,  # CHANGEME: replace with `formated_{{ entity.name|lower}}s` if your added a transform step
        {% for arg in entity.needed_params.values() %}
        {{ arg.var_name }},
        {% endfor %}
        common_job_parameters['UPDATE_TAG'])
    cleanup(neo4j_session, common_job_parameters)
    return {{ entity.name|lower}}s


@timeit
def get(
    api_session: requests.Session,
    base_url: str,
    {% for arg in entity.needed_params.values() %}
    {{ arg.var_name }}: str,
    {% endfor %}
) -> List[Dict[str, Any]]:
    results: List[Dict[str, Any]] = []
{% if entity.enumeration_path.pagination %}
    params = {{ entity.enumeration_path.pagination.params }}
    keep_running = True
    while keep_running:
        keep_running = False  # To avoid any infinite loop
        req = api_session.get(
            "{base_url}{{ entity.enumeration_path.path }}".format(
                base_url=base_url,
            {% for k, v in entity.needed_params.items() %}
                {{ k }}={{ v.var_name }},
            {% endfor %}
            ),
            params=params,
            timeout=_TIMEOUT
        )
        req.raise_for_status()
        sub_results = req.json()
        results.extend(sub_results)
        if len(sub_results) == {{ entity.enumeration_path.pagination.DEFAULT_LIMIT }}:
            keep_running = True
        {{ entity.enumeration_path.pagination.increment_instruction }}
{% else %}
    # CHANGEME: You have to handle pagination if needed
    req = api_session.get(
        "{base_url}{{ entity.enumeration_path.path }}".format(
            base_url=base_url,
        {% for k, v in entity.needed_params.items() %}
            {{ k }}={{ v.var_name }},
        {% endfor %}
        ),
        timeout=_TIMEOUT
    )
    req.raise_for_status()
    {% if entity.enumeration_path.indirect_ref %}
    results = req.json()["{{entity.enumeration_path.indirect_ref}}"]
    {% else %}
    results = req.json()
    {% endif %}
{% endif %}
    return results


@timeit
def load_{{ entity.name|lower}}s(
    neo4j_session: neo4j.Session,
    data: List[Dict[str, Any]],
    {% for arg in entity.needed_params.values() %}
    {{ arg.var_name }}: str,
    {% endfor %}
    update_tag: int,
) -> None:
    logger.info("Loading %d {{ entity.node_class }} into Neo4j.", len(data))
    load(
        neo4j_session,
        {{ entity.node_class }}(),
        data,
        lastupdated=update_tag,
        {% for arg in entity.needed_params.values() %}
        {{arg.var_name}}={{ arg.var_name }},
        {% endfor %}
    )


@timeit
def cleanup(neo4j_session: neo4j.Session, common_job_parameters: Dict[str, Any]) -> None:
    GraphJob.from_node_schema(
        {{ entity.node_class }}(),
        common_job_parameters
    ).run(neo4j_session)
