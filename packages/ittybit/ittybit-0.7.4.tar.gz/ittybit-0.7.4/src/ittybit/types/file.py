# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.unchecked_base_model import UncheckedBaseModel
from .file_kind import FileKind


class File(UncheckedBaseModel):
    id: str = pydantic.Field()
    """
    Unique identifier for the file.
    """

    media_id: str = pydantic.Field()
    """
    Identifier for the parent media object.
    """

    object: str = pydantic.Field()
    """
    Object type, typically 'source' or 'derivative'.
    """

    kind: FileKind = pydantic.Field()
    """
    The general type of media.
    """

    format: str = pydantic.Field()
    """
    Specific file format/codec.
    """

    type: str = pydantic.Field()
    """
    MIME type.
    """

    width: typing.Optional[int] = pydantic.Field(default=None)
    """
    Width in pixels (for image/video).
    """

    height: typing.Optional[int] = pydantic.Field(default=None)
    """
    Height in pixels (for image/video).
    """

    duration: typing.Optional[float] = pydantic.Field(default=None)
    """
    Duration in seconds (for audio/video).
    """

    fps: typing.Optional[float] = pydantic.Field(default=None)
    """
    Frames per second (for video).
    """

    filesize: int = pydantic.Field()
    """
    File size in bytes.
    """

    folder: typing.Optional[str] = pydantic.Field(default=None)
    """
    The folder path where the file is stored.
    """

    filename: str = pydantic.Field()
    """
    The name of the file.
    """

    url: str = pydantic.Field()
    """
    Publicly accessible URL for the file.
    """

    created_by: typing.Optional[str] = pydantic.Field(default=None)
    """
    ID of the entity (e.g., task, user) that created this file.
    """

    created: dt.datetime = pydantic.Field()
    """
    Timestamp when the file record was created.
    """

    updated: dt.datetime = pydantic.Field()
    """
    Timestamp when the file record was last updated.
    """

    metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = pydantic.Field(default=None)
    """
    User-defined key-value metadata.
    """

    analysis: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = pydantic.Field(default=None)
    """
    System-generated analysis data.
    """

    original: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Indicates if this is the originally uploaded file.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
