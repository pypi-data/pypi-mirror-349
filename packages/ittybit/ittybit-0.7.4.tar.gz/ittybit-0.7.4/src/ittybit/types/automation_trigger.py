# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.unchecked_base_model import UncheckedBaseModel
from .automation_trigger_conditions_item import AutomationTriggerConditionsItem


class AutomationTrigger(UncheckedBaseModel):
    """
    The event and conditions that trigger this automation.
    """

    event: str = pydantic.Field()
    """
    The event that triggers the automation
    """

    conditions: typing.Optional[typing.List[AutomationTriggerConditionsItem]] = pydantic.Field(default=None)
    """
    Conditions that must be met for the trigger to activate.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
