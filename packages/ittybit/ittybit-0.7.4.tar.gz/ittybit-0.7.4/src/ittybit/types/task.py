# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import datetime as dt
import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2, update_forward_refs
from ..core.unchecked_base_model import UncheckedBaseModel
from .task_kind import TaskKind
from .task_results import TaskResults
from .task_status import TaskStatus


class Task(UncheckedBaseModel):
    id: str = pydantic.Field()
    """
    Unique identifier for the task.
    """

    object: str = pydantic.Field()
    """
    Object type, always 'task'.
    """

    kind: TaskKind = pydantic.Field()
    """
    The type of operation the task performs.
    """

    input: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = pydantic.Field(default=None)
    """
    The input source for the task (e.g., details of a file). Structure varies based on the task kind and preceding steps.
    """

    options: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = pydantic.Field(default=None)
    """
    Configuration options specific to the task kind.
    """

    output: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = pydantic.Field(default=None)
    """
    The result generated by the task (e.g., details of an output file or intelligence data). Structure varies.
    """

    status: TaskStatus = pydantic.Field()
    """
    Current status of the task.
    """

    progress: typing.Optional[int] = pydantic.Field(default=None)
    """
    Task progress percentage.
    """

    error: typing.Optional[str] = pydantic.Field(default=None)
    """
    Error message if the task failed.
    """

    created_by: typing.Optional[str] = pydantic.Field(default=None)
    """
    ID of the entity that created the task (e.g., user ID, automation ID).
    """

    created: dt.datetime = pydantic.Field()
    """
    Timestamp when the task was created.
    """

    updated: dt.datetime = pydantic.Field()
    """
    Timestamp when the task was last updated.
    """

    parent_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    ID of the parent task if this is part of a workflow.
    """

    workflow: typing.Optional[typing.List["Task"]] = pydantic.Field(default=None)
    """
    Array of nested task objects representing the steps within this workflow task.
    """

    next: typing.Optional[typing.List["Task"]] = pydantic.Field(default=None)
    """
    Array representing subsequent tasks (e.g., in an automation). Structure may vary.
    """

    results: typing.Optional[TaskResults] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


update_forward_refs(Task)
