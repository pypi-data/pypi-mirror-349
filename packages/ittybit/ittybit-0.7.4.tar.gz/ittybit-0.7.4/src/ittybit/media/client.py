# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.confirmation_response import ConfirmationResponse
from ..types.media_list_response import MediaListResponse
from ..types.media_response import MediaResponse
from .raw_client import AsyncRawMediaClient, RawMediaClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class MediaClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawMediaClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawMediaClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawMediaClient
        """
        return self._raw_client

    def list(
        self, *, limit: typing.Optional[int] = None, request_options: typing.Optional[RequestOptions] = None
    ) -> MediaListResponse:
        """
        Retrieves a list of all media for the current project

        Parameters
        ----------
        limit : typing.Optional[int]
            Number of media items to return per page.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        MediaListResponse
            A list of media items

        Examples
        --------
        from ittybit import Ittybit

        client = Ittybit(
            version="YOUR_VERSION",
            token="YOUR_TOKEN",
        )
        client.media.list()
        """
        _response = self._raw_client.list(limit=limit, request_options=request_options)
        return _response.data

    def create(
        self,
        *,
        url: typing.Optional[str] = OMIT,
        label: typing.Optional[str] = OMIT,
        folder: typing.Optional[str] = OMIT,
        filename: typing.Optional[str] = OMIT,
        title: typing.Optional[str] = OMIT,
        metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        async_: typing.Optional[bool] = OMIT,
        empty: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> MediaResponse:
        """
        Creates a new media item from a URL or as an empty placeholder

        Parameters
        ----------
        url : typing.Optional[str]
            URL of the media file to ingest. Required unless 'empty' is true.

        label : typing.Optional[str]
            Label for the media

        folder : typing.Optional[str]
            Folder to store the media in

        filename : typing.Optional[str]
            Filename for the media

        title : typing.Optional[str]
            Title for the media

        metadata : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]
            Additional metadata for the media

        async_ : typing.Optional[bool]
            Whether to process the media asynchronously

        empty : typing.Optional[bool]
            Create an empty media placeholder

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        MediaResponse
            Media created successfully

        Examples
        --------
        from ittybit import Ittybit

        client = Ittybit(
            version="YOUR_VERSION",
            token="YOUR_TOKEN",
        )
        client.media.create(
            url="https://storage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4",
            folder="examples/cartoons",
            filename="bunny.mp4",
            metadata={"credit": "gtv-videos-bucket"},
        )
        """
        _response = self._raw_client.create(
            url=url,
            label=label,
            folder=folder,
            filename=filename,
            title=title,
            metadata=metadata,
            async_=async_,
            empty=empty,
            request_options=request_options,
        )
        return _response.data

    def get(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> MediaResponse:
        """
        Retrieves a specific media item by its ID

        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        MediaResponse
            Media item details

        Examples
        --------
        from ittybit import Ittybit

        client = Ittybit(
            version="YOUR_VERSION",
            token="YOUR_TOKEN",
        )
        client.media.get(
            id="id",
        )
        """
        _response = self._raw_client.get(id, request_options=request_options)
        return _response.data

    def delete(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> ConfirmationResponse:
        """
        Deletes a specific media item by its ID

        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ConfirmationResponse
            Media deleted successfully

        Examples
        --------
        from ittybit import Ittybit

        client = Ittybit(
            version="YOUR_VERSION",
            token="YOUR_TOKEN",
        )
        client.media.delete(
            id="id",
        )
        """
        _response = self._raw_client.delete(id, request_options=request_options)
        return _response.data

    def update(
        self,
        id: str,
        *,
        title: typing.Optional[str] = OMIT,
        metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> MediaResponse:
        """
        Updates specific fields of a media item by its ID. Only the fields provided in the request body will be updated.

        Parameters
        ----------
        id : str

        title : typing.Optional[str]
            New title for the media item.

        metadata : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]
            New metadata object for the media item. This will replace the existing metadata.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        MediaResponse
            Media updated successfully

        Examples
        --------
        from ittybit import Ittybit

        client = Ittybit(
            version="YOUR_VERSION",
            token="YOUR_TOKEN",
        )
        client.media.update(
            id="id",
        )
        """
        _response = self._raw_client.update(id, title=title, metadata=metadata, request_options=request_options)
        return _response.data


class AsyncMediaClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawMediaClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawMediaClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawMediaClient
        """
        return self._raw_client

    async def list(
        self, *, limit: typing.Optional[int] = None, request_options: typing.Optional[RequestOptions] = None
    ) -> MediaListResponse:
        """
        Retrieves a list of all media for the current project

        Parameters
        ----------
        limit : typing.Optional[int]
            Number of media items to return per page.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        MediaListResponse
            A list of media items

        Examples
        --------
        import asyncio

        from ittybit import AsyncIttybit

        client = AsyncIttybit(
            version="YOUR_VERSION",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.media.list()


        asyncio.run(main())
        """
        _response = await self._raw_client.list(limit=limit, request_options=request_options)
        return _response.data

    async def create(
        self,
        *,
        url: typing.Optional[str] = OMIT,
        label: typing.Optional[str] = OMIT,
        folder: typing.Optional[str] = OMIT,
        filename: typing.Optional[str] = OMIT,
        title: typing.Optional[str] = OMIT,
        metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        async_: typing.Optional[bool] = OMIT,
        empty: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> MediaResponse:
        """
        Creates a new media item from a URL or as an empty placeholder

        Parameters
        ----------
        url : typing.Optional[str]
            URL of the media file to ingest. Required unless 'empty' is true.

        label : typing.Optional[str]
            Label for the media

        folder : typing.Optional[str]
            Folder to store the media in

        filename : typing.Optional[str]
            Filename for the media

        title : typing.Optional[str]
            Title for the media

        metadata : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]
            Additional metadata for the media

        async_ : typing.Optional[bool]
            Whether to process the media asynchronously

        empty : typing.Optional[bool]
            Create an empty media placeholder

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        MediaResponse
            Media created successfully

        Examples
        --------
        import asyncio

        from ittybit import AsyncIttybit

        client = AsyncIttybit(
            version="YOUR_VERSION",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.media.create(
                url="https://storage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4",
                folder="examples/cartoons",
                filename="bunny.mp4",
                metadata={"credit": "gtv-videos-bucket"},
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create(
            url=url,
            label=label,
            folder=folder,
            filename=filename,
            title=title,
            metadata=metadata,
            async_=async_,
            empty=empty,
            request_options=request_options,
        )
        return _response.data

    async def get(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> MediaResponse:
        """
        Retrieves a specific media item by its ID

        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        MediaResponse
            Media item details

        Examples
        --------
        import asyncio

        from ittybit import AsyncIttybit

        client = AsyncIttybit(
            version="YOUR_VERSION",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.media.get(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get(id, request_options=request_options)
        return _response.data

    async def delete(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> ConfirmationResponse:
        """
        Deletes a specific media item by its ID

        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ConfirmationResponse
            Media deleted successfully

        Examples
        --------
        import asyncio

        from ittybit import AsyncIttybit

        client = AsyncIttybit(
            version="YOUR_VERSION",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.media.delete(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete(id, request_options=request_options)
        return _response.data

    async def update(
        self,
        id: str,
        *,
        title: typing.Optional[str] = OMIT,
        metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> MediaResponse:
        """
        Updates specific fields of a media item by its ID. Only the fields provided in the request body will be updated.

        Parameters
        ----------
        id : str

        title : typing.Optional[str]
            New title for the media item.

        metadata : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]
            New metadata object for the media item. This will replace the existing metadata.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        MediaResponse
            Media updated successfully

        Examples
        --------
        import asyncio

        from ittybit import AsyncIttybit

        client = AsyncIttybit(
            version="YOUR_VERSION",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.media.update(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.update(id, title=title, metadata=metadata, request_options=request_options)
        return _response.data
