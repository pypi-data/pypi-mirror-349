# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.http_response import AsyncHttpResponse, HttpResponse
from ..core.request_options import RequestOptions
from ..core.unchecked_base_model import construct_type
from ..errors.bad_request_error import BadRequestError
from ..errors.unauthorized_error import UnauthorizedError
from ..types.error_response import ErrorResponse
from ..types.signature_response import SignatureResponse
from .types.signatures_create_request_method import SignaturesCreateRequestMethod

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class RawSignaturesClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def create(
        self,
        *,
        filename: str,
        folder: typing.Optional[str] = OMIT,
        expiry: typing.Optional[int] = OMIT,
        method: typing.Optional[SignaturesCreateRequestMethod] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[SignatureResponse]:
        """
        Creates a cryptographically signed URL that provides temporary and restricted access to a file. The URL can expire after a specified time and be limited to specific HTTP methods.

        Parameters
        ----------
        filename : str
            The name of the file to generate a signature for. Special characters will be sanitised.

        folder : typing.Optional[str]
            Optional folder path where the file resides. Special characters will be sanitised.

        expiry : typing.Optional[int]
            Optional expiry time for the signature in seconds since epoch. Defaults to 60 minutes from now. Must be a positive integer and in the future.

        method : typing.Optional[SignaturesCreateRequestMethod]
            Optional HTTP method allowed for the signed URL. Defaults to 'get'.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[SignatureResponse]
            Signed URL generated successfully
        """
        _response = self._client_wrapper.httpx_client.request(
            "signatures",
            method="POST",
            json={
                "filename": filename,
                "folder": folder,
                "expiry": expiry,
                "method": method,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    SignatureResponse,
                    construct_type(
                        type_=SignatureResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ErrorResponse,
                        construct_type(
                            type_=ErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ErrorResponse,
                        construct_type(
                            type_=ErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)


class AsyncRawSignaturesClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def create(
        self,
        *,
        filename: str,
        folder: typing.Optional[str] = OMIT,
        expiry: typing.Optional[int] = OMIT,
        method: typing.Optional[SignaturesCreateRequestMethod] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[SignatureResponse]:
        """
        Creates a cryptographically signed URL that provides temporary and restricted access to a file. The URL can expire after a specified time and be limited to specific HTTP methods.

        Parameters
        ----------
        filename : str
            The name of the file to generate a signature for. Special characters will be sanitised.

        folder : typing.Optional[str]
            Optional folder path where the file resides. Special characters will be sanitised.

        expiry : typing.Optional[int]
            Optional expiry time for the signature in seconds since epoch. Defaults to 60 minutes from now. Must be a positive integer and in the future.

        method : typing.Optional[SignaturesCreateRequestMethod]
            Optional HTTP method allowed for the signed URL. Defaults to 'get'.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[SignatureResponse]
            Signed URL generated successfully
        """
        _response = await self._client_wrapper.httpx_client.request(
            "signatures",
            method="POST",
            json={
                "filename": filename,
                "folder": folder,
                "expiry": expiry,
                "method": method,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    SignatureResponse,
                    construct_type(
                        type_=SignatureResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ErrorResponse,
                        construct_type(
                            type_=ErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ErrorResponse,
                        construct_type(
                            type_=ErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)
