# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.signature_response import SignatureResponse
from .raw_client import AsyncRawSignaturesClient, RawSignaturesClient
from .types.signatures_create_request_method import SignaturesCreateRequestMethod

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class SignaturesClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawSignaturesClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawSignaturesClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawSignaturesClient
        """
        return self._raw_client

    def create(
        self,
        *,
        filename: str,
        folder: typing.Optional[str] = OMIT,
        expiry: typing.Optional[int] = OMIT,
        method: typing.Optional[SignaturesCreateRequestMethod] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SignatureResponse:
        """
        Creates a cryptographically signed URL that provides temporary and restricted access to a file. The URL can expire after a specified time and be limited to specific HTTP methods.

        Parameters
        ----------
        filename : str
            The name of the file to generate a signature for. Special characters will be sanitised.

        folder : typing.Optional[str]
            Optional folder path where the file resides. Special characters will be sanitised.

        expiry : typing.Optional[int]
            Optional expiry time for the signature in seconds since epoch. Defaults to 60 minutes from now. Must be a positive integer and in the future.

        method : typing.Optional[SignaturesCreateRequestMethod]
            Optional HTTP method allowed for the signed URL. Defaults to 'get'.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SignatureResponse
            Signed URL generated successfully

        Examples
        --------
        from ittybit import Ittybit

        client = Ittybit(
            version="YOUR_VERSION",
            token="YOUR_TOKEN",
        )
        client.signatures.create(
            filename="video.mp4",
            folder="private/user_123",
            expiry=1735689600,
            method="get",
        )
        """
        _response = self._raw_client.create(
            filename=filename, folder=folder, expiry=expiry, method=method, request_options=request_options
        )
        return _response.data


class AsyncSignaturesClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawSignaturesClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawSignaturesClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawSignaturesClient
        """
        return self._raw_client

    async def create(
        self,
        *,
        filename: str,
        folder: typing.Optional[str] = OMIT,
        expiry: typing.Optional[int] = OMIT,
        method: typing.Optional[SignaturesCreateRequestMethod] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SignatureResponse:
        """
        Creates a cryptographically signed URL that provides temporary and restricted access to a file. The URL can expire after a specified time and be limited to specific HTTP methods.

        Parameters
        ----------
        filename : str
            The name of the file to generate a signature for. Special characters will be sanitised.

        folder : typing.Optional[str]
            Optional folder path where the file resides. Special characters will be sanitised.

        expiry : typing.Optional[int]
            Optional expiry time for the signature in seconds since epoch. Defaults to 60 minutes from now. Must be a positive integer and in the future.

        method : typing.Optional[SignaturesCreateRequestMethod]
            Optional HTTP method allowed for the signed URL. Defaults to 'get'.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SignatureResponse
            Signed URL generated successfully

        Examples
        --------
        import asyncio

        from ittybit import AsyncIttybit

        client = AsyncIttybit(
            version="YOUR_VERSION",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.signatures.create(
                filename="video.mp4",
                folder="private/user_123",
                expiry=1735689600,
                method="get",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create(
            filename=filename, folder=folder, expiry=expiry, method=method, request_options=request_options
        )
        return _response.data
