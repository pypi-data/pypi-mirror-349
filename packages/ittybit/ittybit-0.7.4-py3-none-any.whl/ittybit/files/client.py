# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.file_list_response import FileListResponse
from ..types.file_response import FileResponse
from .raw_client import AsyncRawFilesClient, RawFilesClient
from .types.files_delete_response import FilesDeleteResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class FilesClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawFilesClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawFilesClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawFilesClient
        """
        return self._raw_client

    def list(
        self, *, limit: typing.Optional[int] = None, request_options: typing.Optional[RequestOptions] = None
    ) -> FileListResponse:
        """
        Retrieves a paginated list of all files associated with the current project. Files can be filtered using query parameters.

        Parameters
        ----------
        limit : typing.Optional[int]
            Items per page

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FileListResponse
            A paginated list of files.

        Examples
        --------
        from ittybit import Ittybit

        client = Ittybit(
            version="YOUR_VERSION",
            token="YOUR_TOKEN",
        )
        client.files.list()
        """
        _response = self._raw_client.list(limit=limit, request_options=request_options)
        return _response.data

    def create(
        self,
        *,
        url: str,
        filename: typing.Optional[str] = OMIT,
        folder: typing.Optional[str] = OMIT,
        media_id: typing.Optional[str] = OMIT,
        label: typing.Optional[str] = OMIT,
        metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        async_: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> FileResponse:
        """
        Registers a file from a publicly accessible URL. The file will be ingested asynchronously.

        Parameters
        ----------
        url : str
            The publicly accessible URL of the file to ingest.

        filename : typing.Optional[str]
            Optional desired filename. If not provided, it may be derived from the URL.

        folder : typing.Optional[str]
            Folder path (optional)

        media_id : typing.Optional[str]
            Optional existing media ID to associate the file with.

        label : typing.Optional[str]
            Optional label for the file.

        metadata : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]
            Optional user-defined key-value metadata.

        async_ : typing.Optional[bool]
            Whether to process the ingestion asynchronously.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FileResponse
            File created successfully.

        Examples
        --------
        from ittybit import Ittybit

        client = Ittybit(
            version="YOUR_VERSION",
            token="YOUR_TOKEN",
        )
        client.files.create(
            url="https://storage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4",
            filename="bunny.mp4",
            folder="examples/cartoons",
            metadata={"credit": "gtv-videos-bucket"},
        )
        """
        _response = self._raw_client.create(
            url=url,
            filename=filename,
            folder=folder,
            media_id=media_id,
            label=label,
            metadata=metadata,
            async_=async_,
            request_options=request_options,
        )
        return _response.data

    def get(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> FileResponse:
        """
        Retrieves detailed information about a specific file identified by its unique ID, including its metadata, media associations, and technical properties.

        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FileResponse
            Returns the file details

        Examples
        --------
        from ittybit import Ittybit

        client = Ittybit(
            version="YOUR_VERSION",
            token="YOUR_TOKEN",
        )
        client.files.get(
            id="id",
        )
        """
        _response = self._raw_client.get(id, request_options=request_options)
        return _response.data

    def delete(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> FilesDeleteResponse:
        """
        Permanently removes a file from the system. This action cannot be undone. Associated media entries may still reference this file ID.

        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FilesDeleteResponse
            Confirmation that the file was deleted successfully.

        Examples
        --------
        from ittybit import Ittybit

        client = Ittybit(
            version="YOUR_VERSION",
            token="YOUR_TOKEN",
        )
        client.files.delete(
            id="id",
        )
        """
        _response = self._raw_client.delete(id, request_options=request_options)
        return _response.data

    def update(
        self,
        id: str,
        *,
        metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        filename: typing.Optional[str] = OMIT,
        folder: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> FileResponse:
        """
        Updates metadata, filename, or folder properties of an existing file. Only the specified fields will be updated.

        Parameters
        ----------
        id : str

        metadata : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]
            An object containing key-value pairs to set or update. Set a key to null to remove it.

        filename : typing.Optional[str]
            New filename for the file.

        folder : typing.Optional[str]
            New folder path for the file.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FileResponse
            File updated successfully.

        Examples
        --------
        from ittybit import Ittybit

        client = Ittybit(
            version="YOUR_VERSION",
            token="YOUR_TOKEN",
        )
        client.files.update(
            id="id",
            filename="final_approved_video.mp4",
            folder="archive/2024",
        )
        """
        _response = self._raw_client.update(
            id, metadata=metadata, filename=filename, folder=folder, request_options=request_options
        )
        return _response.data


class AsyncFilesClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawFilesClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawFilesClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawFilesClient
        """
        return self._raw_client

    async def list(
        self, *, limit: typing.Optional[int] = None, request_options: typing.Optional[RequestOptions] = None
    ) -> FileListResponse:
        """
        Retrieves a paginated list of all files associated with the current project. Files can be filtered using query parameters.

        Parameters
        ----------
        limit : typing.Optional[int]
            Items per page

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FileListResponse
            A paginated list of files.

        Examples
        --------
        import asyncio

        from ittybit import AsyncIttybit

        client = AsyncIttybit(
            version="YOUR_VERSION",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.files.list()


        asyncio.run(main())
        """
        _response = await self._raw_client.list(limit=limit, request_options=request_options)
        return _response.data

    async def create(
        self,
        *,
        url: str,
        filename: typing.Optional[str] = OMIT,
        folder: typing.Optional[str] = OMIT,
        media_id: typing.Optional[str] = OMIT,
        label: typing.Optional[str] = OMIT,
        metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        async_: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> FileResponse:
        """
        Registers a file from a publicly accessible URL. The file will be ingested asynchronously.

        Parameters
        ----------
        url : str
            The publicly accessible URL of the file to ingest.

        filename : typing.Optional[str]
            Optional desired filename. If not provided, it may be derived from the URL.

        folder : typing.Optional[str]
            Folder path (optional)

        media_id : typing.Optional[str]
            Optional existing media ID to associate the file with.

        label : typing.Optional[str]
            Optional label for the file.

        metadata : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]
            Optional user-defined key-value metadata.

        async_ : typing.Optional[bool]
            Whether to process the ingestion asynchronously.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FileResponse
            File created successfully.

        Examples
        --------
        import asyncio

        from ittybit import AsyncIttybit

        client = AsyncIttybit(
            version="YOUR_VERSION",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.files.create(
                url="https://storage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4",
                filename="bunny.mp4",
                folder="examples/cartoons",
                metadata={"credit": "gtv-videos-bucket"},
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create(
            url=url,
            filename=filename,
            folder=folder,
            media_id=media_id,
            label=label,
            metadata=metadata,
            async_=async_,
            request_options=request_options,
        )
        return _response.data

    async def get(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> FileResponse:
        """
        Retrieves detailed information about a specific file identified by its unique ID, including its metadata, media associations, and technical properties.

        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FileResponse
            Returns the file details

        Examples
        --------
        import asyncio

        from ittybit import AsyncIttybit

        client = AsyncIttybit(
            version="YOUR_VERSION",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.files.get(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get(id, request_options=request_options)
        return _response.data

    async def delete(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> FilesDeleteResponse:
        """
        Permanently removes a file from the system. This action cannot be undone. Associated media entries may still reference this file ID.

        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FilesDeleteResponse
            Confirmation that the file was deleted successfully.

        Examples
        --------
        import asyncio

        from ittybit import AsyncIttybit

        client = AsyncIttybit(
            version="YOUR_VERSION",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.files.delete(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete(id, request_options=request_options)
        return _response.data

    async def update(
        self,
        id: str,
        *,
        metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        filename: typing.Optional[str] = OMIT,
        folder: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> FileResponse:
        """
        Updates metadata, filename, or folder properties of an existing file. Only the specified fields will be updated.

        Parameters
        ----------
        id : str

        metadata : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]
            An object containing key-value pairs to set or update. Set a key to null to remove it.

        filename : typing.Optional[str]
            New filename for the file.

        folder : typing.Optional[str]
            New folder path for the file.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FileResponse
            File updated successfully.

        Examples
        --------
        import asyncio

        from ittybit import AsyncIttybit

        client = AsyncIttybit(
            version="YOUR_VERSION",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.files.update(
                id="id",
                filename="final_approved_video.mp4",
                folder="archive/2024",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.update(
            id, metadata=metadata, filename=filename, folder=folder, request_options=request_options
        )
        return _response.data
