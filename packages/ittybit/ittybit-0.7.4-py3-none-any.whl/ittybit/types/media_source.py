# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.unchecked_base_model import UncheckedBaseModel
from .media_source_kind import MediaSourceKind
from .media_source_orientation import MediaSourceOrientation


class MediaSource(UncheckedBaseModel):
    """
    Represents a source file associated with a media item.
    """

    id: str = pydantic.Field()
    """
    Unique identifier for the source file.
    """

    object: str = pydantic.Field()
    """
    Object type, always 'source' for media sources.
    """

    kind: MediaSourceKind = pydantic.Field()
    """
    The general type of media (e.g., video, image).
    """

    format: str = pydantic.Field()
    """
    Specific file format (e.g., mp4, webm, jpg).
    """

    type: str = pydantic.Field()
    """
    MIME type, potentially including codec info.
    """

    container: typing.Optional[str] = pydantic.Field(default=None)
    """
    File container format.
    """

    codec: typing.Optional[str] = pydantic.Field(default=None)
    """
    Primary codec.
    """

    width: typing.Optional[int] = pydantic.Field(default=None)
    """
    Width in pixels.
    """

    height: typing.Optional[int] = pydantic.Field(default=None)
    """
    Height in pixels.
    """

    orientation: typing.Optional[MediaSourceOrientation] = pydantic.Field(default=None)
    """
    Visual orientation.
    """

    duration: typing.Optional[float] = pydantic.Field(default=None)
    """
    Duration in seconds.
    """

    fps: typing.Optional[float] = pydantic.Field(default=None)
    """
    Frames per second.
    """

    filesize: int = pydantic.Field()
    """
    Source file size in bytes.
    """

    bitrate: typing.Optional[int] = pydantic.Field(default=None)
    """
    Average bitrate in bits per second.
    """

    original: bool = pydantic.Field()
    """
    Is this the originally ingested file?
    """

    label: typing.Optional[str] = pydantic.Field(default=None)
    """
    User-defined label for this source.
    """

    src: str = pydantic.Field()
    """
    URL of the source file.
    """

    folder: typing.Optional[str] = pydantic.Field(default=None)
    """
    The folder path.
    """

    filename: str = pydantic.Field()
    """
    The filename of the source file.
    """

    created: dt.datetime = pydantic.Field()
    """
    Timestamp created.
    """

    updated: dt.datetime = pydantic.Field()
    """
    Timestamp updated.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
