import dataclasses
import json
import logging
import os
from dataclasses import dataclass
from pathlib import Path
from typing import Any, Generator

import pytest
from dotenv import load_dotenv
from kbcstorage.client import Client as SyncStorageClient
from mcp.server.fastmcp import Context

from keboola_mcp_server.client import KeboolaClient
from keboola_mcp_server.mcp import StatefulServerSession
from keboola_mcp_server.tools.sql import WorkspaceManager

LOG = logging.getLogger(__name__)

STORAGE_API_TOKEN_ENV_VAR = 'INTEGTEST_STORAGE_TOKEN'
STORAGE_API_URL_ENV_VAR = 'INTEGTEST_STORAGE_API_URL'
WORKSPACE_SCHEMA_ENV_VAR = 'INTEGTEST_WORKSPACE_SCHEMA'


@dataclass(frozen=True)
class BucketDef:
    bucket_id: str
    display_name: str


@dataclass(frozen=True)
class TableDef:
    bucket_id: str
    table_name: str
    table_id: str

    @property
    def file_path(self) -> Path:
        """
        Path to the CSV file containing the table data.
        """
        return _data_dir() / 'proj' / 'buckets' / self.bucket_id / f'{self.table_name}.csv'


@dataclass(frozen=True)
class ConfigDef:
    component_id: str
    configuration_id: str | None  # Will be generated by Storage API
    internal_id: str

    @property
    def file_path(self) -> Path:
        """
        Path to the JSON file containing the configuration.
        """
        return _data_dir() / 'proj' / 'configs' / self.component_id / f'{self.internal_id}.json'


@dataclass(frozen=True)
class ProjectDef:
    project_id: str
    buckets: list[BucketDef]
    tables: list[TableDef]
    configs: list[ConfigDef]


def _keboola_client() -> KeboolaClient:
    storage_api_url = os.getenv(STORAGE_API_URL_ENV_VAR)
    storage_api_token = os.getenv(STORAGE_API_TOKEN_ENV_VAR)
    assert storage_api_url, f'{STORAGE_API_URL_ENV_VAR} must be set'
    assert storage_api_token, f'{STORAGE_API_TOKEN_ENV_VAR} must be set'
    return KeboolaClient(storage_api_token=storage_api_token, storage_api_url=storage_api_url)


@pytest.fixture(scope='session')
def env_file_loaded() -> bool:
    return load_dotenv()


def _data_dir() -> Path:
    return Path(__file__).parent / 'data'


@pytest.fixture(scope='session')
def shared_datadir_ro() -> Path:
    """
    Session-scoped access to shared data directory for integration tests.
    Do not modify the data in this directory.
    For function-scoped access to the data, use `shared_datadir` fixture provided by `pytest-datadir`,
    which creates a temporary copy of the data which can therefore be modified.
    """
    return _data_dir()


_BUCKET_DEFS_IN = [
    BucketDef(bucket_id='in.c-test_bucket_01', display_name='test_bucket_01'),
    BucketDef(bucket_id='in.c-test_bucket_02', display_name='test_bucket_02'),
]


def _create_buckets(storage_client: SyncStorageClient) -> list[BucketDef]:
    for bucket in _BUCKET_DEFS_IN:
        LOG.info(f'Creating bucket with display name={bucket.display_name}')
        created_bucket = storage_client.buckets.create(bucket.display_name)
        assert created_bucket['id'] == bucket.bucket_id
        assert created_bucket['displayName'] == bucket.display_name

    return _BUCKET_DEFS_IN


_TABLE_DEFS_IN = [
    TableDef(
        bucket_id='in.c-test_bucket_01',
        table_name='test_table_01',
        table_id='in.c-test_bucket_01.test_table_01',
    ),
]


def _create_tables(storage_client: SyncStorageClient) -> list[TableDef]:
    for table in _TABLE_DEFS_IN:
        LOG.info(f'Creating table with name={table.table_name}')
        created_table_id = storage_client.tables.create(
            bucket_id=table.bucket_id,
            name=table.table_name,
            file_path=str(table.file_path),
        )
        assert created_table_id == table.table_id

    return _TABLE_DEFS_IN


_CONFIG_DEFS_IN = [
    ConfigDef(
        component_id='ex-generic-v2',
        configuration_id=None,
        internal_id='config1',
    ),
]


def _create_configs(storage_client: SyncStorageClient) -> list[ConfigDef]:
    configs = []
    for config in _CONFIG_DEFS_IN:
        LOG.info(f'Creating config with internal ID={config.internal_id}')
        created_config = storage_client.configurations.create(
            component_id=config.component_id,
            name=config.internal_id,
            configuration_id=None,
            configuration=json.load(config.file_path.open('r', encoding='utf-8')),
        )
        config = dataclasses.replace(config, configuration_id=created_config['id'])
        configs.append(config)
        LOG.info(f'Created config with component ID={config.component_id} and config ID={config.configuration_id}')

    return configs


@pytest.fixture(scope='session')
def keboola_project(
    env_file_loaded: bool
) -> Generator[ProjectDef, Any, None]:
    """
    Sets up a Keboola project with items needed for integration tests,
    such as buckets, tables and configurations.
    After the tests, the project is cleaned up.
    """
    # Cannot use keboola_client fixture because it is function-scoped
    storage_client = _keboola_client().storage_client_sync
    token_info = storage_client.tokens.verify()
    project_id: str = token_info['owner']['id']
    LOG.info(f'Setting up Keboola project with ID={project_id}')

    current_buckets = storage_client.buckets.list()
    if current_buckets:
        pytest.fail(f'Expecting empty Keboola project, but found {len(current_buckets)} buckets')

    buckets = _create_buckets(storage_client)

    current_tables = storage_client.tables.list()
    if current_tables:
        pytest.fail(f'Expecting empty Keboola project, but found {len(current_tables)} tables')

    tables = _create_tables(storage_client)

    current_configs = storage_client.configurations.list(component_id='ex-generic-v2')
    if current_configs:
        pytest.fail(f'Expecting empty Keboola project, but found {len(current_configs)} configs')

    configs = _create_configs(storage_client)

    LOG.info(f'Test setup for project {project_id} complete')
    yield ProjectDef(project_id=project_id, buckets=buckets, tables=tables, configs=configs)

    LOG.info(f'Cleaning up Keboola project with ID={project_id}')
    current_buckets = storage_client.buckets.list()
    for bucket in current_buckets:
        bucket_id = bucket['id']
        LOG.info(f'Deleting bucket with ID={bucket_id}')
        storage_client.buckets.delete(bucket_id, force=True)

    for config in configs:
        LOG.info(
            f'Deleting config with component ID={config.component_id} and config ID={config.configuration_id}'
        )
        storage_client.configurations.delete(config.component_id, config.configuration_id)


@pytest.fixture(scope='session')
def buckets(keboola_project: ProjectDef) -> list[BucketDef]:
    return keboola_project.buckets


@pytest.fixture(scope='session')
def tables(keboola_project: ProjectDef) -> list[TableDef]:
    return keboola_project.tables


@pytest.fixture(scope='session')
def configs(keboola_project: ProjectDef) -> list[ConfigDef]:
    return keboola_project.configs


@pytest.fixture
def keboola_client(env_file_loaded: bool) -> KeboolaClient:
    return _keboola_client()


@pytest.fixture
def workspace_manager(keboola_client: KeboolaClient) -> WorkspaceManager:
    workspace_schema = os.getenv(WORKSPACE_SCHEMA_ENV_VAR)
    assert workspace_schema, f'{WORKSPACE_SCHEMA_ENV_VAR} must be set'
    return WorkspaceManager(keboola_client, workspace_schema)


@pytest.fixture
def mcp_context(
    mocker, keboola_client: KeboolaClient, workspace_manager: WorkspaceManager, keboola_project: ProjectDef
) -> Context:
    """
    MCP context containing the Keboola client and workspace manager.
    """
    client_context = mocker.MagicMock(Context)
    client_context.session = mocker.MagicMock(StatefulServerSession)
    client_context.session.state = {
        KeboolaClient.STATE_KEY: keboola_client,
        WorkspaceManager.STATE_KEY: workspace_manager,
    }
    return client_context
