"""Download videos from any sent popular video site links, and upload them to the chat."""

from __future__ import annotations

import os
import sys
from concurrent.futures import ThreadPoolExecutor
from tempfile import mkstemp
from time import sleep
from typing import TYPE_CHECKING, cast

from nestedtext import load as nt_load
from plumbum.cli import Application, ExistingFile, Flag, Range, SwitchAttr
from telebot import TeleBot

from . import __version__
from .link_handling import LinkHandlers
from .mrd_logging import StructLogger, get_logger
from .sending import LootSender

if TYPE_CHECKING:
    from telebot.types import Message


def get_cookies_path(cookies_content: str | None, logger: StructLogger) -> str | None:
    """Write a cookies file and return its path, or ``None`` if no cookies can be loaded."""
    if cookies_content:
        fd, cookies = mkstemp(prefix='cookies', suffix='.txt', text=True)
        with open(fd, mode='w') as cookie_file:  # noqa: PTH123
            cookie_file.write(cookies_content)
        logger.info("Wrote cookies file", path=cookies)
        return cookies
    logger.info("No cookies found")
    return None


def load_config(path: str, logger: StructLogger | None = None) -> dict[str, str]:
    """Load NestedText config file."""
    if logger:
        logger.info("Loading credentials", path=path)
    return cast(dict, nt_load(path))


def init_sentry(dsn: str):
    """Initialize Sentry."""
    try:
        import sentry_sdk
    except ImportError:
        print('ERROR: Sentry logging requires structlog_sentry and sentry-sdk.')
        print("ERROR: Did you install the 'sentry' extras?")
        print("Try: pip install 'mouse-ran-down[sentry]'")
    else:
        sentry_sdk.init(dsn)


class MouseRanDown(Application):
    """
    A Telegram bot bringing linked media directly into chats.

    Example credentials.nt:

        TOKEN: 123456789:ASDFasdfASDF-asdf123ASDF
        INSTA_USER: user@example.com
        INSTA_PW: password goes here
        TG_ADMIN_CHAT_ID: 12345678
        SENTRY_DSN: https://abc123@app.glitchtip.com/12345
        COOKIES:
          > # Netscape HTTP Cookie File
          > # This file is generated by yt-dlp.  Do not edit.
          > blah
          > blah
          > blah

        # Required:
        #   - TOKEN (Telegram Bot)
        # Recommended for Instagram (any account risk is your own):
        #   - INSTA_USER
        #   - INSTA_PW
        #   - TG_ADMIN_CHAT_ID (tip: message the bot with its @username and check the logs)
        # Recommended (and don't replace tabs with spaces):
        #   - COOKIES
        # Optional:
        #   - SENTRY_DSN
    """

    VERSION = __version__

    timeout = cast(
        int,
        SwitchAttr(
            ['t', 'timeout'],
            Range(5, 300),  # pyright: ignore [reportArgumentType]
            default=120,
            argname='TIMEOUT',
            help="Network timeout, in seconds",
        ),
    )
    json = cast(bool, Flag(['j', 'json'], help="Enable JSON output"))

    def main(self, CREDENTIALSFILE: ExistingFile):  # noqa: N803  # pyright: ignore [reportGeneralTypeIssues, reportIncompatibleMethodOverride]
        """Start the bot with the given credentials."""
        config = load_config(CREDENTIALSFILE)

        if dsn := config.get('SENTRY_DSN'):
            init_sentry(dsn)
        logger = get_logger(json=self.json, sentry=bool(dsn))

        bot = TeleBot(config['TOKEN'])
        logger.info("Initialized bot")

        loot_sender = LootSender(
            bot=bot,
            logger=logger,
            timeout=self.timeout,
            admin_chat_id=config.get('TG_ADMIN_CHAT_ID'),
        )

        cookies = get_cookies_path(config.get('COOKIES'), logger=logger)

        link_handlers = LinkHandlers(
            sender=loot_sender,
            logger=logger,
            cookies=cookies,
            insta_user=config.get('INSTA_USER'),
            insta_pw=config.get('INSTA_PW'),
        )

        @bot.business_message_handler(func=bool)
        @bot.message_handler(func=bool)
        def all_msg_handler(message: Message):
            """
            Download from any URLs that we handle and upload content to the chat.

            Sometimes just save an admin-sent verification code instead.
            """
            if (
                loot_sender.admin_chat_id
                and str(message.chat.id) == loot_sender.admin_chat_id
                and message.text
                and message.text.isnumeric()
            ):
                loot_sender.admin_response = message.text
            else:
                link_handlers.media_link_handler(message)

        with ThreadPoolExecutor() as executor:
            future = executor.submit(
                bot.infinity_polling, timeout=self.timeout, long_polling_timeout=self.timeout
            )

            while not future.running():
                logger.debug("Waiting for bot to start polling")
                sleep(1)

            # We need the bot up and running to properly initialize instagrapi
            link_handlers.init_insta()

            try:
                future.result()
            except KeyboardInterrupt:
                bot.stop_bot()
                sys.stdout.flush()
                sys.stderr.flush()
                os._exit(0)


MouseRanDown.unbind_switches('help-all')
