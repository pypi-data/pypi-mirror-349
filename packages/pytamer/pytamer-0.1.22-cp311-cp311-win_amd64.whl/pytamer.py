# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_pytamer')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_pytamer')
    _pytamer = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pytamer', [dirname(__file__)])
        except ImportError:
            import _pytamer
            return _pytamer
        if fp is not None:
            try:
                _mod = imp.load_module('_pytamer', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pytamer = swig_import_helper()
    del swig_import_helper
else:
    import _pytamer
del _swig_python_version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class tamer_env(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, tamer_env, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, tamer_env, name)
    __repr__ = _swig_repr
    __swig_setmethods__["repr"] = _pytamer.tamer_env_repr_set
    __swig_getmethods__["repr"] = _pytamer.tamer_env_repr_get
    if _newclass:
        repr = _swig_property(_pytamer.tamer_env_repr_get, _pytamer.tamer_env_repr_set)

    def __init__(self):
        this = _pytamer.new_tamer_env()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pytamer.delete_tamer_env
    __del__ = lambda self: None
tamer_env_swigregister = _pytamer.tamer_env_swigregister
tamer_env_swigregister(tamer_env)

class tamer_expr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, tamer_expr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, tamer_expr, name)
    __repr__ = _swig_repr
    __swig_setmethods__["repr"] = _pytamer.tamer_expr_repr_set
    __swig_getmethods__["repr"] = _pytamer.tamer_expr_repr_get
    if _newclass:
        repr = _swig_property(_pytamer.tamer_expr_repr_get, _pytamer.tamer_expr_repr_set)

    def __init__(self):
        this = _pytamer.new_tamer_expr()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pytamer.delete_tamer_expr
    __del__ = lambda self: None
tamer_expr_swigregister = _pytamer.tamer_expr_swigregister
tamer_expr_swigregister(tamer_expr)

class tamer_vector_expr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, tamer_vector_expr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, tamer_vector_expr, name)
    __repr__ = _swig_repr
    __swig_setmethods__["repr"] = _pytamer.tamer_vector_expr_repr_set
    __swig_getmethods__["repr"] = _pytamer.tamer_vector_expr_repr_get
    if _newclass:
        repr = _swig_property(_pytamer.tamer_vector_expr_repr_get, _pytamer.tamer_vector_expr_repr_set)

    def __init__(self):
        this = _pytamer.new_tamer_vector_expr()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pytamer.delete_tamer_vector_expr
    __del__ = lambda self: None
tamer_vector_expr_swigregister = _pytamer.tamer_vector_expr_swigregister
tamer_vector_expr_swigregister(tamer_vector_expr)

class tamer_action(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, tamer_action, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, tamer_action, name)
    __repr__ = _swig_repr
    __swig_setmethods__["repr"] = _pytamer.tamer_action_repr_set
    __swig_getmethods__["repr"] = _pytamer.tamer_action_repr_get
    if _newclass:
        repr = _swig_property(_pytamer.tamer_action_repr_get, _pytamer.tamer_action_repr_set)

    def __init__(self):
        this = _pytamer.new_tamer_action()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pytamer.delete_tamer_action
    __del__ = lambda self: None
tamer_action_swigregister = _pytamer.tamer_action_swigregister
tamer_action_swigregister(tamer_action)

class tamer_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, tamer_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, tamer_type, name)
    __repr__ = _swig_repr
    __swig_setmethods__["repr"] = _pytamer.tamer_type_repr_set
    __swig_getmethods__["repr"] = _pytamer.tamer_type_repr_get
    if _newclass:
        repr = _swig_property(_pytamer.tamer_type_repr_get, _pytamer.tamer_type_repr_set)

    def __init__(self):
        this = _pytamer.new_tamer_type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pytamer.delete_tamer_type
    __del__ = lambda self: None
tamer_type_swigregister = _pytamer.tamer_type_swigregister
tamer_type_swigregister(tamer_type)

class tamer_problem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, tamer_problem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, tamer_problem, name)
    __repr__ = _swig_repr
    __swig_setmethods__["repr"] = _pytamer.tamer_problem_repr_set
    __swig_getmethods__["repr"] = _pytamer.tamer_problem_repr_get
    if _newclass:
        repr = _swig_property(_pytamer.tamer_problem_repr_get, _pytamer.tamer_problem_repr_set)

    def __init__(self):
        this = _pytamer.new_tamer_problem()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pytamer.delete_tamer_problem
    __del__ = lambda self: None
tamer_problem_swigregister = _pytamer.tamer_problem_swigregister
tamer_problem_swigregister(tamer_problem)

class tamer_fluent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, tamer_fluent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, tamer_fluent, name)
    __repr__ = _swig_repr
    __swig_setmethods__["repr"] = _pytamer.tamer_fluent_repr_set
    __swig_getmethods__["repr"] = _pytamer.tamer_fluent_repr_get
    if _newclass:
        repr = _swig_property(_pytamer.tamer_fluent_repr_get, _pytamer.tamer_fluent_repr_set)

    def __init__(self):
        this = _pytamer.new_tamer_fluent()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pytamer.delete_tamer_fluent
    __del__ = lambda self: None
tamer_fluent_swigregister = _pytamer.tamer_fluent_swigregister
tamer_fluent_swigregister(tamer_fluent)

class tamer_constant(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, tamer_constant, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, tamer_constant, name)
    __repr__ = _swig_repr
    __swig_setmethods__["repr"] = _pytamer.tamer_constant_repr_set
    __swig_getmethods__["repr"] = _pytamer.tamer_constant_repr_get
    if _newclass:
        repr = _swig_property(_pytamer.tamer_constant_repr_get, _pytamer.tamer_constant_repr_set)

    def __init__(self):
        this = _pytamer.new_tamer_constant()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pytamer.delete_tamer_constant
    __del__ = lambda self: None
tamer_constant_swigregister = _pytamer.tamer_constant_swigregister
tamer_constant_swigregister(tamer_constant)

class tamer_function_value(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, tamer_function_value, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, tamer_function_value, name)
    __repr__ = _swig_repr
    __swig_setmethods__["repr"] = _pytamer.tamer_function_value_repr_set
    __swig_getmethods__["repr"] = _pytamer.tamer_function_value_repr_get
    if _newclass:
        repr = _swig_property(_pytamer.tamer_function_value_repr_get, _pytamer.tamer_function_value_repr_set)

    def __init__(self):
        this = _pytamer.new_tamer_function_value()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pytamer.delete_tamer_function_value
    __del__ = lambda self: None
tamer_function_value_swigregister = _pytamer.tamer_function_value_swigregister
tamer_function_value_swigregister(tamer_function_value)

class tamer_param(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, tamer_param, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, tamer_param, name)
    __repr__ = _swig_repr
    __swig_setmethods__["repr"] = _pytamer.tamer_param_repr_set
    __swig_getmethods__["repr"] = _pytamer.tamer_param_repr_get
    if _newclass:
        repr = _swig_property(_pytamer.tamer_param_repr_get, _pytamer.tamer_param_repr_set)

    def __init__(self):
        this = _pytamer.new_tamer_param()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pytamer.delete_tamer_param
    __del__ = lambda self: None
tamer_param_swigregister = _pytamer.tamer_param_swigregister
tamer_param_swigregister(tamer_param)

class tamer_instance(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, tamer_instance, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, tamer_instance, name)
    __repr__ = _swig_repr
    __swig_setmethods__["repr"] = _pytamer.tamer_instance_repr_set
    __swig_getmethods__["repr"] = _pytamer.tamer_instance_repr_get
    if _newclass:
        repr = _swig_property(_pytamer.tamer_instance_repr_get, _pytamer.tamer_instance_repr_set)

    def __init__(self):
        this = _pytamer.new_tamer_instance()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pytamer.delete_tamer_instance
    __del__ = lambda self: None
tamer_instance_swigregister = _pytamer.tamer_instance_swigregister
tamer_instance_swigregister(tamer_instance)

class tamer_simulated_effect(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, tamer_simulated_effect, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, tamer_simulated_effect, name)
    __repr__ = _swig_repr
    __swig_setmethods__["repr"] = _pytamer.tamer_simulated_effect_repr_set
    __swig_getmethods__["repr"] = _pytamer.tamer_simulated_effect_repr_get
    if _newclass:
        repr = _swig_property(_pytamer.tamer_simulated_effect_repr_get, _pytamer.tamer_simulated_effect_repr_set)

    def __init__(self):
        this = _pytamer.new_tamer_simulated_effect()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pytamer.delete_tamer_simulated_effect
    __del__ = lambda self: None
tamer_simulated_effect_swigregister = _pytamer.tamer_simulated_effect_swigregister
tamer_simulated_effect_swigregister(tamer_simulated_effect)

class tamer_interpretation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, tamer_interpretation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, tamer_interpretation, name)
    __repr__ = _swig_repr
    __swig_setmethods__["repr"] = _pytamer.tamer_interpretation_repr_set
    __swig_getmethods__["repr"] = _pytamer.tamer_interpretation_repr_get
    if _newclass:
        repr = _swig_property(_pytamer.tamer_interpretation_repr_get, _pytamer.tamer_interpretation_repr_set)

    def __init__(self):
        this = _pytamer.new_tamer_interpretation()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pytamer.delete_tamer_interpretation
    __del__ = lambda self: None
tamer_interpretation_swigregister = _pytamer.tamer_interpretation_swigregister
tamer_interpretation_swigregister(tamer_interpretation)

class tamer_ttplan(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, tamer_ttplan, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, tamer_ttplan, name)
    __repr__ = _swig_repr
    __swig_setmethods__["repr"] = _pytamer.tamer_ttplan_repr_set
    __swig_getmethods__["repr"] = _pytamer.tamer_ttplan_repr_get
    if _newclass:
        repr = _swig_property(_pytamer.tamer_ttplan_repr_get, _pytamer.tamer_ttplan_repr_set)

    def __init__(self):
        this = _pytamer.new_tamer_ttplan()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pytamer.delete_tamer_ttplan
    __del__ = lambda self: None
tamer_ttplan_swigregister = _pytamer.tamer_ttplan_swigregister
tamer_ttplan_swigregister(tamer_ttplan)

class tamer_ttplan_step(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, tamer_ttplan_step, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, tamer_ttplan_step, name)
    __repr__ = _swig_repr
    __swig_setmethods__["repr"] = _pytamer.tamer_ttplan_step_repr_set
    __swig_getmethods__["repr"] = _pytamer.tamer_ttplan_step_repr_get
    if _newclass:
        repr = _swig_property(_pytamer.tamer_ttplan_step_repr_get, _pytamer.tamer_ttplan_step_repr_set)

    def __init__(self):
        this = _pytamer.new_tamer_ttplan_step()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pytamer.delete_tamer_ttplan_step
    __del__ = lambda self: None
tamer_ttplan_step_swigregister = _pytamer.tamer_ttplan_step_swigregister
tamer_ttplan_step_swigregister(tamer_ttplan_step)

class tamer_potplan(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, tamer_potplan, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, tamer_potplan, name)
    __repr__ = _swig_repr
    __swig_setmethods__["repr"] = _pytamer.tamer_potplan_repr_set
    __swig_getmethods__["repr"] = _pytamer.tamer_potplan_repr_get
    if _newclass:
        repr = _swig_property(_pytamer.tamer_potplan_repr_get, _pytamer.tamer_potplan_repr_set)

    def __init__(self):
        this = _pytamer.new_tamer_potplan()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pytamer.delete_tamer_potplan
    __del__ = lambda self: None
tamer_potplan_swigregister = _pytamer.tamer_potplan_swigregister
tamer_potplan_swigregister(tamer_potplan)

class tamer_simulator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, tamer_simulator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, tamer_simulator, name)
    __repr__ = _swig_repr
    __swig_setmethods__["repr"] = _pytamer.tamer_simulator_repr_set
    __swig_getmethods__["repr"] = _pytamer.tamer_simulator_repr_get
    if _newclass:
        repr = _swig_property(_pytamer.tamer_simulator_repr_get, _pytamer.tamer_simulator_repr_set)

    def __init__(self):
        this = _pytamer.new_tamer_simulator()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pytamer.delete_tamer_simulator
    __del__ = lambda self: None
tamer_simulator_swigregister = _pytamer.tamer_simulator_swigregister
tamer_simulator_swigregister(tamer_simulator)

class tamer_state(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, tamer_state, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, tamer_state, name)
    __repr__ = _swig_repr
    __swig_setmethods__["repr"] = _pytamer.tamer_state_repr_set
    __swig_getmethods__["repr"] = _pytamer.tamer_state_repr_get
    if _newclass:
        repr = _swig_property(_pytamer.tamer_state_repr_get, _pytamer.tamer_state_repr_set)

    def __init__(self):
        this = _pytamer.new_tamer_state()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pytamer.delete_tamer_state
    __del__ = lambda self: None
tamer_state_swigregister = _pytamer.tamer_state_swigregister
tamer_state_swigregister(tamer_state)

class tamer_classical_state(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, tamer_classical_state, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, tamer_classical_state, name)
    __repr__ = _swig_repr
    __swig_setmethods__["repr"] = _pytamer.tamer_classical_state_repr_set
    __swig_getmethods__["repr"] = _pytamer.tamer_classical_state_repr_get
    if _newclass:
        repr = _swig_property(_pytamer.tamer_classical_state_repr_get, _pytamer.tamer_classical_state_repr_set)

    def __init__(self):
        this = _pytamer.new_tamer_classical_state()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pytamer.delete_tamer_classical_state
    __del__ = lambda self: None
tamer_classical_state_swigregister = _pytamer.tamer_classical_state_swigregister
tamer_classical_state_swigregister(tamer_classical_state)

class tamer_potplan_step(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, tamer_potplan_step, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, tamer_potplan_step, name)
    __repr__ = _swig_repr
    __swig_setmethods__["repr"] = _pytamer.tamer_potplan_step_repr_set
    __swig_getmethods__["repr"] = _pytamer.tamer_potplan_step_repr_get
    if _newclass:
        repr = _swig_property(_pytamer.tamer_potplan_step_repr_get, _pytamer.tamer_potplan_step_repr_set)

    def __init__(self):
        this = _pytamer.new_tamer_potplan_step()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pytamer.delete_tamer_potplan_step
    __del__ = lambda self: None
tamer_potplan_step_swigregister = _pytamer.tamer_potplan_step_swigregister
tamer_potplan_step_swigregister(tamer_potplan_step)

class tamer_action_iter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, tamer_action_iter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, tamer_action_iter, name)
    __repr__ = _swig_repr
    __swig_setmethods__["repr"] = _pytamer.tamer_action_iter_repr_set
    __swig_getmethods__["repr"] = _pytamer.tamer_action_iter_repr_get
    if _newclass:
        repr = _swig_property(_pytamer.tamer_action_iter_repr_get, _pytamer.tamer_action_iter_repr_set)

    def __init__(self):
        this = _pytamer.new_tamer_action_iter()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pytamer.delete_tamer_action_iter
    __del__ = lambda self: None
tamer_action_iter_swigregister = _pytamer.tamer_action_iter_swigregister
tamer_action_iter_swigregister(tamer_action_iter)

class tamer_fluent_iter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, tamer_fluent_iter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, tamer_fluent_iter, name)
    __repr__ = _swig_repr
    __swig_setmethods__["repr"] = _pytamer.tamer_fluent_iter_repr_set
    __swig_getmethods__["repr"] = _pytamer.tamer_fluent_iter_repr_get
    if _newclass:
        repr = _swig_property(_pytamer.tamer_fluent_iter_repr_get, _pytamer.tamer_fluent_iter_repr_set)

    def __init__(self):
        this = _pytamer.new_tamer_fluent_iter()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pytamer.delete_tamer_fluent_iter
    __del__ = lambda self: None
tamer_fluent_iter_swigregister = _pytamer.tamer_fluent_iter_swigregister
tamer_fluent_iter_swigregister(tamer_fluent_iter)

class tamer_constant_iter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, tamer_constant_iter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, tamer_constant_iter, name)
    __repr__ = _swig_repr
    __swig_setmethods__["repr"] = _pytamer.tamer_constant_iter_repr_set
    __swig_getmethods__["repr"] = _pytamer.tamer_constant_iter_repr_get
    if _newclass:
        repr = _swig_property(_pytamer.tamer_constant_iter_repr_get, _pytamer.tamer_constant_iter_repr_set)

    def __init__(self):
        this = _pytamer.new_tamer_constant_iter()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pytamer.delete_tamer_constant_iter
    __del__ = lambda self: None
tamer_constant_iter_swigregister = _pytamer.tamer_constant_iter_swigregister
tamer_constant_iter_swigregister(tamer_constant_iter)

class tamer_param_iter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, tamer_param_iter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, tamer_param_iter, name)
    __repr__ = _swig_repr
    __swig_setmethods__["repr"] = _pytamer.tamer_param_iter_repr_set
    __swig_getmethods__["repr"] = _pytamer.tamer_param_iter_repr_get
    if _newclass:
        repr = _swig_property(_pytamer.tamer_param_iter_repr_get, _pytamer.tamer_param_iter_repr_set)

    def __init__(self):
        this = _pytamer.new_tamer_param_iter()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pytamer.delete_tamer_param_iter
    __del__ = lambda self: None
tamer_param_iter_swigregister = _pytamer.tamer_param_iter_swigregister
tamer_param_iter_swigregister(tamer_param_iter)

class tamer_instance_iter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, tamer_instance_iter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, tamer_instance_iter, name)
    __repr__ = _swig_repr
    __swig_setmethods__["repr"] = _pytamer.tamer_instance_iter_repr_set
    __swig_getmethods__["repr"] = _pytamer.tamer_instance_iter_repr_get
    if _newclass:
        repr = _swig_property(_pytamer.tamer_instance_iter_repr_get, _pytamer.tamer_instance_iter_repr_set)

    def __init__(self):
        this = _pytamer.new_tamer_instance_iter()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pytamer.delete_tamer_instance_iter
    __del__ = lambda self: None
tamer_instance_iter_swigregister = _pytamer.tamer_instance_iter_swigregister
tamer_instance_iter_swigregister(tamer_instance_iter)

class tamer_expr_iter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, tamer_expr_iter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, tamer_expr_iter, name)
    __repr__ = _swig_repr
    __swig_setmethods__["repr"] = _pytamer.tamer_expr_iter_repr_set
    __swig_getmethods__["repr"] = _pytamer.tamer_expr_iter_repr_get
    if _newclass:
        repr = _swig_property(_pytamer.tamer_expr_iter_repr_get, _pytamer.tamer_expr_iter_repr_set)

    def __init__(self):
        this = _pytamer.new_tamer_expr_iter()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pytamer.delete_tamer_expr_iter
    __del__ = lambda self: None
tamer_expr_iter_swigregister = _pytamer.tamer_expr_iter_swigregister
tamer_expr_iter_swigregister(tamer_expr_iter)

class tamer_ttplan_step_iter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, tamer_ttplan_step_iter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, tamer_ttplan_step_iter, name)
    __repr__ = _swig_repr
    __swig_setmethods__["repr"] = _pytamer.tamer_ttplan_step_iter_repr_set
    __swig_getmethods__["repr"] = _pytamer.tamer_ttplan_step_iter_repr_get
    if _newclass:
        repr = _swig_property(_pytamer.tamer_ttplan_step_iter_repr_get, _pytamer.tamer_ttplan_step_iter_repr_set)

    def __init__(self):
        this = _pytamer.new_tamer_ttplan_step_iter()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pytamer.delete_tamer_ttplan_step_iter
    __del__ = lambda self: None
tamer_ttplan_step_iter_swigregister = _pytamer.tamer_ttplan_step_iter_swigregister
tamer_ttplan_step_iter_swigregister(tamer_ttplan_step_iter)

class tamer_potplan_step_iter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, tamer_potplan_step_iter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, tamer_potplan_step_iter, name)
    __repr__ = _swig_repr
    __swig_setmethods__["repr"] = _pytamer.tamer_potplan_step_iter_repr_set
    __swig_getmethods__["repr"] = _pytamer.tamer_potplan_step_iter_repr_get
    if _newclass:
        repr = _swig_property(_pytamer.tamer_potplan_step_iter_repr_get, _pytamer.tamer_potplan_step_iter_repr_set)

    def __init__(self):
        this = _pytamer.new_tamer_potplan_step_iter()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pytamer.delete_tamer_potplan_step_iter
    __del__ = lambda self: None
tamer_potplan_step_iter_swigregister = _pytamer.tamer_potplan_step_iter_swigregister
tamer_potplan_step_iter_swigregister(tamer_potplan_step_iter)


def tamer_get_version():
    return _pytamer.tamer_get_version()
tamer_get_version = _pytamer.tamer_get_version

def tamer_env_is_error(e):
    return _pytamer.tamer_env_is_error(e)
tamer_env_is_error = _pytamer.tamer_env_is_error

def tamer_problem_is_error(p):
    return _pytamer.tamer_problem_is_error(p)
tamer_problem_is_error = _pytamer.tamer_problem_is_error

def tamer_type_is_error(t):
    return _pytamer.tamer_type_is_error(t)
tamer_type_is_error = _pytamer.tamer_type_is_error

def tamer_fluent_is_error(f):
    return _pytamer.tamer_fluent_is_error(f)
tamer_fluent_is_error = _pytamer.tamer_fluent_is_error

def tamer_constant_is_error(c):
    return _pytamer.tamer_constant_is_error(c)
tamer_constant_is_error = _pytamer.tamer_constant_is_error

def tamer_function_value_is_error(f):
    return _pytamer.tamer_function_value_is_error(f)
tamer_function_value_is_error = _pytamer.tamer_function_value_is_error

def tamer_action_is_error(a):
    return _pytamer.tamer_action_is_error(a)
tamer_action_is_error = _pytamer.tamer_action_is_error

def tamer_simulated_effect_is_error(e):
    return _pytamer.tamer_simulated_effect_is_error(e)
tamer_simulated_effect_is_error = _pytamer.tamer_simulated_effect_is_error

def tamer_instance_is_error(i):
    return _pytamer.tamer_instance_is_error(i)
tamer_instance_is_error = _pytamer.tamer_instance_is_error

def tamer_param_is_error(p):
    return _pytamer.tamer_param_is_error(p)
tamer_param_is_error = _pytamer.tamer_param_is_error

def tamer_expr_is_error(e):
    return _pytamer.tamer_expr_is_error(e)
tamer_expr_is_error = _pytamer.tamer_expr_is_error

def tamer_ttplan_is_error(p):
    return _pytamer.tamer_ttplan_is_error(p)
tamer_ttplan_is_error = _pytamer.tamer_ttplan_is_error

def tamer_ttplan_step_is_error(s):
    return _pytamer.tamer_ttplan_step_is_error(s)
tamer_ttplan_step_is_error = _pytamer.tamer_ttplan_step_is_error

def tamer_potplan_is_error(p):
    return _pytamer.tamer_potplan_is_error(p)
tamer_potplan_is_error = _pytamer.tamer_potplan_is_error

def tamer_potplan_step_is_error(s):
    return _pytamer.tamer_potplan_step_is_error(s)
tamer_potplan_step_is_error = _pytamer.tamer_potplan_step_is_error

def tamer_state_is_error(s):
    return _pytamer.tamer_state_is_error(s)
tamer_state_is_error = _pytamer.tamer_state_is_error

def tamer_simulator_is_error(s):
    return _pytamer.tamer_simulator_is_error(s)
tamer_simulator_is_error = _pytamer.tamer_simulator_is_error

def tamer_fluent_iter_is_error(f):
    return _pytamer.tamer_fluent_iter_is_error(f)
tamer_fluent_iter_is_error = _pytamer.tamer_fluent_iter_is_error

def tamer_constant_iter_is_error(c):
    return _pytamer.tamer_constant_iter_is_error(c)
tamer_constant_iter_is_error = _pytamer.tamer_constant_iter_is_error

def tamer_action_iter_is_error(a):
    return _pytamer.tamer_action_iter_is_error(a)
tamer_action_iter_is_error = _pytamer.tamer_action_iter_is_error

def tamer_instance_iter_is_error(i):
    return _pytamer.tamer_instance_iter_is_error(i)
tamer_instance_iter_is_error = _pytamer.tamer_instance_iter_is_error

def tamer_param_iter_is_error(p):
    return _pytamer.tamer_param_iter_is_error(p)
tamer_param_iter_is_error = _pytamer.tamer_param_iter_is_error

def tamer_expr_iter_is_error(e):
    return _pytamer.tamer_expr_iter_is_error(e)
tamer_expr_iter_is_error = _pytamer.tamer_expr_iter_is_error

def tamer_ttplan_step_iter_is_error(s):
    return _pytamer.tamer_ttplan_step_iter_is_error(s)
tamer_ttplan_step_iter_is_error = _pytamer.tamer_ttplan_step_iter_is_error

def tamer_potplan_step_iter_is_error(s):
    return _pytamer.tamer_potplan_step_iter_is_error(s)
tamer_potplan_step_iter_is_error = _pytamer.tamer_potplan_step_iter_is_error

def tamer_env_new():
    return _pytamer.tamer_env_new()
tamer_env_new = _pytamer.tamer_env_new

def tamer_set_logging_level(level):
    return _pytamer.tamer_set_logging_level(level)
tamer_set_logging_level = _pytamer.tamer_set_logging_level

def tamer_env_set_boolean_option(env, opt_name, value):
    return _pytamer.tamer_env_set_boolean_option(env, opt_name, value)
tamer_env_set_boolean_option = _pytamer.tamer_env_set_boolean_option

def tamer_env_set_integer_option(env, opt_name, value):
    return _pytamer.tamer_env_set_integer_option(env, opt_name, value)
tamer_env_set_integer_option = _pytamer.tamer_env_set_integer_option

def tamer_env_set_float_option(env, opt_name, value):
    return _pytamer.tamer_env_set_float_option(env, opt_name, value)
tamer_env_set_float_option = _pytamer.tamer_env_set_float_option

def tamer_env_set_string_option(env, opt_name, value):
    return _pytamer.tamer_env_set_string_option(env, opt_name, value)
tamer_env_set_string_option = _pytamer.tamer_env_set_string_option

def _tamer_env_set_vector_string_option(env, opt_name, value, value_len):
    return _pytamer._tamer_env_set_vector_string_option(env, opt_name, value, value_len)
_tamer_env_set_vector_string_option = _pytamer._tamer_env_set_vector_string_option

def _tamer_problem_new(env, actions, actions_len, fluents, fluents_len, constants, constants_len, instances, instances_len, user_types, user_types_len, expressions, expressions_len):
    return _pytamer._tamer_problem_new(env, actions, actions_len, fluents, fluents_len, constants, constants_len, instances, instances_len, user_types, user_types_len, expressions, expressions_len)
_tamer_problem_new = _pytamer._tamer_problem_new

def tamer_parse_anml(env, filename):
    return _pytamer.tamer_parse_anml(env, filename)
tamer_parse_anml = _pytamer.tamer_parse_anml

def tamer_parse_pddl(env, domain_filename, problem_filename):
    return _pytamer.tamer_parse_pddl(env, domain_filename, problem_filename)
tamer_parse_pddl = _pytamer.tamer_parse_pddl

def tamer_dump_anml(problem, filename):
    return _pytamer.tamer_dump_anml(problem, filename)
tamer_dump_anml = _pytamer.tamer_dump_anml

def tamer_dump_pddl(problem, domain_filename, problem_filename):
    return _pytamer.tamer_dump_pddl(problem, domain_filename, problem_filename)
tamer_dump_pddl = _pytamer.tamer_dump_pddl

def tamer_problem_has_temporal_uncertainty(p):
    return _pytamer.tamer_problem_has_temporal_uncertainty(p)
tamer_problem_has_temporal_uncertainty = _pytamer.tamer_problem_has_temporal_uncertainty

def tamer_problem_get_anml(problem):
    return _pytamer.tamer_problem_get_anml(problem)
tamer_problem_get_anml = _pytamer.tamer_problem_get_anml

def tamer_problem_get_pddl(problem):
    return _pytamer.tamer_problem_get_pddl(problem)
tamer_problem_get_pddl = _pytamer.tamer_problem_get_pddl

def tamer_problem_get_ltl(problem):
    return _pytamer.tamer_problem_get_ltl(problem)
tamer_problem_get_ltl = _pytamer.tamer_problem_get_ltl

def tamer_problem_ground(problem, ground_all=0, prune_actions=1):
    return _pytamer.tamer_problem_ground(problem, ground_all, prune_actions)
tamer_problem_ground = _pytamer.tamer_problem_ground

def tamer_problem_flatten(problem):
    return _pytamer.tamer_problem_flatten(problem)
tamer_problem_flatten = _pytamer.tamer_problem_flatten

def tamer_problem_bound(problem, bound_problem):
    return _pytamer.tamer_problem_bound(problem, bound_problem)
tamer_problem_bound = _pytamer.tamer_problem_bound

def tamer_problem_temporal_uncertainty_compiler(problem):
    return _pytamer.tamer_problem_temporal_uncertainty_compiler(problem)
tamer_problem_temporal_uncertainty_compiler = _pytamer.tamer_problem_temporal_uncertainty_compiler

def tamer_problem_intermediate_effects_compiler(problem):
    return _pytamer.tamer_problem_intermediate_effects_compiler(problem)
tamer_problem_intermediate_effects_compiler = _pytamer.tamer_problem_intermediate_effects_compiler

def tamer_problem_usertype_fluents_compiler(problem):
    return _pytamer.tamer_problem_usertype_fluents_compiler(problem)
tamer_problem_usertype_fluents_compiler = _pytamer.tamer_problem_usertype_fluents_compiler

def tamer_boolean_type(env):
    return _pytamer.tamer_boolean_type(env)
tamer_boolean_type = _pytamer.tamer_boolean_type

def tamer_integer_type(env):
    return _pytamer.tamer_integer_type(env)
tamer_integer_type = _pytamer.tamer_integer_type

def tamer_integer_type_lb(env, lower_bound):
    return _pytamer.tamer_integer_type_lb(env, lower_bound)
tamer_integer_type_lb = _pytamer.tamer_integer_type_lb

def tamer_integer_type_ub(env, upper_bound):
    return _pytamer.tamer_integer_type_ub(env, upper_bound)
tamer_integer_type_ub = _pytamer.tamer_integer_type_ub

def tamer_integer_type_lub(env, lower_bound, upper_bound):
    return _pytamer.tamer_integer_type_lub(env, lower_bound, upper_bound)
tamer_integer_type_lub = _pytamer.tamer_integer_type_lub

def tamer_rational_type(env):
    return _pytamer.tamer_rational_type(env)
tamer_rational_type = _pytamer.tamer_rational_type

def tamer_rational_type_lb(env, lower_bound):
    return _pytamer.tamer_rational_type_lb(env, lower_bound)
tamer_rational_type_lb = _pytamer.tamer_rational_type_lb

def tamer_rational_type_ub(env, upper_bound):
    return _pytamer.tamer_rational_type_ub(env, upper_bound)
tamer_rational_type_ub = _pytamer.tamer_rational_type_ub

def tamer_rational_type_lub(env, lower_bound, upper_bound):
    return _pytamer.tamer_rational_type_lub(env, lower_bound, upper_bound)
tamer_rational_type_lub = _pytamer.tamer_rational_type_lub

def tamer_user_type_new(env, name):
    return _pytamer.tamer_user_type_new(env, name)
tamer_user_type_new = _pytamer.tamer_user_type_new

def tamer_user_type_add_action(user_type, action):
    return _pytamer.tamer_user_type_add_action(user_type, action)
tamer_user_type_add_action = _pytamer.tamer_user_type_add_action

def tamer_user_type_add_fluent(user_type, fluent):
    return _pytamer.tamer_user_type_add_fluent(user_type, fluent)
tamer_user_type_add_fluent = _pytamer.tamer_user_type_add_fluent

def tamer_user_type_add_constant(user_type, constant):
    return _pytamer.tamer_user_type_add_constant(user_type, constant)
tamer_user_type_add_constant = _pytamer.tamer_user_type_add_constant

def tamer_user_type_add_user_type(user_type, new_user_type):
    return _pytamer.tamer_user_type_add_user_type(user_type, new_user_type)
tamer_user_type_add_user_type = _pytamer.tamer_user_type_add_user_type

def tamer_user_type_add_base_type(user_type, base_type):
    return _pytamer.tamer_user_type_add_base_type(user_type, base_type)
tamer_user_type_add_base_type = _pytamer.tamer_user_type_add_base_type

def tamer_parameter_new(name, type):
    return _pytamer.tamer_parameter_new(name, type)
tamer_parameter_new = _pytamer.tamer_parameter_new

def _tamer_fluent_new(env, name, type, path, path_len, parameters, parameters_len):
    return _pytamer._tamer_fluent_new(env, name, type, path, path_len, parameters, parameters_len)
_tamer_fluent_new = _pytamer._tamer_fluent_new

def _tamer_constant_new(env, name, type, path, path_len, parameters, parameters_len, value):
    return _pytamer._tamer_constant_new(env, name, type, path, path_len, parameters, parameters_len, value)
_tamer_constant_new = _pytamer._tamer_constant_new

def _tamer_constant_field_new(env, name, type, path, path_len, parameters, parameters_len, key_values, values, values_len):
    return _pytamer._tamer_constant_field_new(env, name, type, path, path_len, parameters, parameters_len, key_values, values, values_len)
_tamer_constant_field_new = _pytamer._tamer_constant_field_new

def tamer_function_value_new():
    return _pytamer.tamer_function_value_new()
tamer_function_value_new = _pytamer.tamer_function_value_new

def tamer_function_value_new_default_value(e):
    return _pytamer.tamer_function_value_new_default_value(e)
tamer_function_value_new_default_value = _pytamer.tamer_function_value_new_default_value

def _tamer_function_value_add_assignment(function_value, key, len, value):
    return _pytamer._tamer_function_value_add_assignment(function_value, key, len, value)
_tamer_function_value_add_assignment = _pytamer._tamer_function_value_add_assignment

def tamer_function_value_set_default_value(function_value, value):
    return _pytamer.tamer_function_value_set_default_value(function_value, value)
tamer_function_value_set_default_value = _pytamer.tamer_function_value_set_default_value

def _tamer_action_new(env, name, path, path_len, parameters, parameters_len, expressions, expressions_len, simulated_effects, simulated_effects_len):
    return _pytamer._tamer_action_new(env, name, path, path_len, parameters, parameters_len, expressions, expressions_len, simulated_effects, simulated_effects_len)
_tamer_action_new = _pytamer._tamer_action_new

def tamer_instance_new(env, name, user_type):
    return _pytamer.tamer_instance_new(env, name, user_type)
tamer_instance_new = _pytamer.tamer_instance_new

def tamer_expr_make_or(env, a, b):
    return _pytamer.tamer_expr_make_or(env, a, b)
tamer_expr_make_or = _pytamer.tamer_expr_make_or

def tamer_expr_make_and(env, a, b):
    return _pytamer.tamer_expr_make_and(env, a, b)
tamer_expr_make_and = _pytamer.tamer_expr_make_and

def tamer_expr_make_not(env, a):
    return _pytamer.tamer_expr_make_not(env, a)
tamer_expr_make_not = _pytamer.tamer_expr_make_not

def tamer_expr_make_imply(env, a, b):
    return _pytamer.tamer_expr_make_imply(env, a, b)
tamer_expr_make_imply = _pytamer.tamer_expr_make_imply

def tamer_expr_make_iff(env, a, b):
    return _pytamer.tamer_expr_make_iff(env, a, b)
tamer_expr_make_iff = _pytamer.tamer_expr_make_iff

def tamer_expr_make_equals(env, a, b):
    return _pytamer.tamer_expr_make_equals(env, a, b)
tamer_expr_make_equals = _pytamer.tamer_expr_make_equals

def tamer_expr_make_lt(env, a, b):
    return _pytamer.tamer_expr_make_lt(env, a, b)
tamer_expr_make_lt = _pytamer.tamer_expr_make_lt

def tamer_expr_make_le(env, a, b):
    return _pytamer.tamer_expr_make_le(env, a, b)
tamer_expr_make_le = _pytamer.tamer_expr_make_le

def tamer_expr_make_gt(env, a, b):
    return _pytamer.tamer_expr_make_gt(env, a, b)
tamer_expr_make_gt = _pytamer.tamer_expr_make_gt

def tamer_expr_make_ge(env, a, b):
    return _pytamer.tamer_expr_make_ge(env, a, b)
tamer_expr_make_ge = _pytamer.tamer_expr_make_ge

def tamer_expr_make_times(env, a, b):
    return _pytamer.tamer_expr_make_times(env, a, b)
tamer_expr_make_times = _pytamer.tamer_expr_make_times

def tamer_expr_make_plus(env, a, b):
    return _pytamer.tamer_expr_make_plus(env, a, b)
tamer_expr_make_plus = _pytamer.tamer_expr_make_plus

def tamer_expr_make_div(env, a, b):
    return _pytamer.tamer_expr_make_div(env, a, b)
tamer_expr_make_div = _pytamer.tamer_expr_make_div

def tamer_expr_make_minus(env, a, b):
    return _pytamer.tamer_expr_make_minus(env, a, b)
tamer_expr_make_minus = _pytamer.tamer_expr_make_minus

def tamer_expr_make_assign(env, a, b):
    return _pytamer.tamer_expr_make_assign(env, a, b)
tamer_expr_make_assign = _pytamer.tamer_expr_make_assign

def tamer_expr_make_in_assign(env, a, b):
    return _pytamer.tamer_expr_make_in_assign(env, a, b)
tamer_expr_make_in_assign = _pytamer.tamer_expr_make_in_assign

def tamer_expr_make_open_interval(env, l, u):
    return _pytamer.tamer_expr_make_open_interval(env, l, u)
tamer_expr_make_open_interval = _pytamer.tamer_expr_make_open_interval

def tamer_expr_make_closed_interval(env, l, u):
    return _pytamer.tamer_expr_make_closed_interval(env, l, u)
tamer_expr_make_closed_interval = _pytamer.tamer_expr_make_closed_interval

def tamer_expr_make_left_open_interval(env, l, u):
    return _pytamer.tamer_expr_make_left_open_interval(env, l, u)
tamer_expr_make_left_open_interval = _pytamer.tamer_expr_make_left_open_interval

def tamer_expr_make_right_open_interval(env, l, u):
    return _pytamer.tamer_expr_make_right_open_interval(env, l, u)
tamer_expr_make_right_open_interval = _pytamer.tamer_expr_make_right_open_interval

def tamer_expr_make_point_interval(env, p):
    return _pytamer.tamer_expr_make_point_interval(env, p)
tamer_expr_make_point_interval = _pytamer.tamer_expr_make_point_interval

def tamer_expr_make_temporal_expression(env, i, e):
    return _pytamer.tamer_expr_make_temporal_expression(env, i, e)
tamer_expr_make_temporal_expression = _pytamer.tamer_expr_make_temporal_expression

def tamer_expr_make_start_anchor(env):
    return _pytamer.tamer_expr_make_start_anchor(env)
tamer_expr_make_start_anchor = _pytamer.tamer_expr_make_start_anchor

def tamer_expr_make_end_anchor(env):
    return _pytamer.tamer_expr_make_end_anchor(env)
tamer_expr_make_end_anchor = _pytamer.tamer_expr_make_end_anchor

def tamer_expr_make_duration_anchor(env):
    return _pytamer.tamer_expr_make_duration_anchor(env)
tamer_expr_make_duration_anchor = _pytamer.tamer_expr_make_duration_anchor

def tamer_expr_make_true(env):
    return _pytamer.tamer_expr_make_true(env)
tamer_expr_make_true = _pytamer.tamer_expr_make_true

def tamer_expr_make_false(env):
    return _pytamer.tamer_expr_make_false(env)
tamer_expr_make_false = _pytamer.tamer_expr_make_false

def tamer_expr_make_integer_constant(env, value):
    return _pytamer.tamer_expr_make_integer_constant(env, value)
tamer_expr_make_integer_constant = _pytamer.tamer_expr_make_integer_constant

def tamer_expr_make_rational_constant(env, numerator, denominator):
    return _pytamer.tamer_expr_make_rational_constant(env, numerator, denominator)
tamer_expr_make_rational_constant = _pytamer.tamer_expr_make_rational_constant

def tamer_expr_make_rational_constant_from_float(env, value):
    return _pytamer.tamer_expr_make_rational_constant_from_float(env, value)
tamer_expr_make_rational_constant_from_float = _pytamer.tamer_expr_make_rational_constant_from_float

def _tamer_expr_make_fluent_reference(env, f, args=0, nargs=0):
    return _pytamer._tamer_expr_make_fluent_reference(env, f, args, nargs)
_tamer_expr_make_fluent_reference = _pytamer._tamer_expr_make_fluent_reference

def tamer_expr_make_constant_reference(env, c, args=0, nargs=0):
    return _pytamer.tamer_expr_make_constant_reference(env, c, args, nargs)
tamer_expr_make_constant_reference = _pytamer.tamer_expr_make_constant_reference

def tamer_expr_make_parameter_reference(env, p):
    return _pytamer.tamer_expr_make_parameter_reference(env, p)
tamer_expr_make_parameter_reference = _pytamer.tamer_expr_make_parameter_reference

def tamer_expr_make_instance_reference(env, i):
    return _pytamer.tamer_expr_make_instance_reference(env, i)
tamer_expr_make_instance_reference = _pytamer.tamer_expr_make_instance_reference

def tamer_expr_make_contains(env, interval):
    return _pytamer.tamer_expr_make_contains(env, interval)
tamer_expr_make_contains = _pytamer.tamer_expr_make_contains

def tamer_expr_make_contains_with_label(env, interval, label):
    return _pytamer.tamer_expr_make_contains_with_label(env, interval, label)
tamer_expr_make_contains_with_label = _pytamer.tamer_expr_make_contains_with_label

def tamer_expr_make_contains_with_duration(env, interval, d):
    return _pytamer.tamer_expr_make_contains_with_duration(env, interval, d)
tamer_expr_make_contains_with_duration = _pytamer.tamer_expr_make_contains_with_duration

def tamer_expr_make_scoping(env, parent, child):
    return _pytamer.tamer_expr_make_scoping(env, parent, child)
tamer_expr_make_scoping = _pytamer.tamer_expr_make_scoping

def tamer_env_get_warnings_num(env):
    return _pytamer.tamer_env_get_warnings_num(env)
tamer_env_get_warnings_num = _pytamer.tamer_env_get_warnings_num

def tamer_env_get_warning(env, ith):
    return _pytamer.tamer_env_get_warning(env, ith)
tamer_env_get_warning = _pytamer.tamer_env_get_warning

def tamer_action_get_name(a):
    return _pytamer.tamer_action_get_name(a)
tamer_action_get_name = _pytamer.tamer_action_get_name

def tamer_fluent_get_name(f):
    return _pytamer.tamer_fluent_get_name(f)
tamer_fluent_get_name = _pytamer.tamer_fluent_get_name

def tamer_constant_get_name(c):
    return _pytamer.tamer_constant_get_name(c)
tamer_constant_get_name = _pytamer.tamer_constant_get_name

def tamer_type_get_name(t):
    return _pytamer.tamer_type_get_name(t)
tamer_type_get_name = _pytamer.tamer_type_get_name

def tamer_type_is_finite_domain(t):
    return _pytamer.tamer_type_is_finite_domain(t)
tamer_type_is_finite_domain = _pytamer.tamer_type_is_finite_domain

def tamer_type_is_boolean(t):
    return _pytamer.tamer_type_is_boolean(t)
tamer_type_is_boolean = _pytamer.tamer_type_is_boolean

def tamer_type_is_integer(t):
    return _pytamer.tamer_type_is_integer(t)
tamer_type_is_integer = _pytamer.tamer_type_is_integer

def tamer_type_is_rational(t):
    return _pytamer.tamer_type_is_rational(t)
tamer_type_is_rational = _pytamer.tamer_type_is_rational

def tamer_type_is_user(t):
    return _pytamer.tamer_type_is_user(t)
tamer_type_is_user = _pytamer.tamer_type_is_user

def tamer_type_has_lower_bound(t):
    return _pytamer.tamer_type_has_lower_bound(t)
tamer_type_has_lower_bound = _pytamer.tamer_type_has_lower_bound

def tamer_type_has_upper_bound(t):
    return _pytamer.tamer_type_has_upper_bound(t)
tamer_type_has_upper_bound = _pytamer.tamer_type_has_upper_bound

def _tamer_type_get_integer_lower_bound(t):
    return _pytamer._tamer_type_get_integer_lower_bound(t)
_tamer_type_get_integer_lower_bound = _pytamer._tamer_type_get_integer_lower_bound

def _tamer_type_get_integer_upper_bound(t):
    return _pytamer._tamer_type_get_integer_upper_bound(t)
_tamer_type_get_integer_upper_bound = _pytamer._tamer_type_get_integer_upper_bound

def _tamer_type_get_rational_lower_bound(t):
    return _pytamer._tamer_type_get_rational_lower_bound(t)
_tamer_type_get_rational_lower_bound = _pytamer._tamer_type_get_rational_lower_bound

def _tamer_type_get_rational_upper_bound(t):
    return _pytamer._tamer_type_get_rational_upper_bound(t)
_tamer_type_get_rational_upper_bound = _pytamer._tamer_type_get_rational_upper_bound

def tamer_param_get_name(p):
    return _pytamer.tamer_param_get_name(p)
tamer_param_get_name = _pytamer.tamer_param_get_name

def tamer_instance_get_name(i):
    return _pytamer.tamer_instance_get_name(i)
tamer_instance_get_name = _pytamer.tamer_instance_get_name

def tamer_fluent_get_type(f):
    return _pytamer.tamer_fluent_get_type(f)
tamer_fluent_get_type = _pytamer.tamer_fluent_get_type

def tamer_fluent_get_arity(f):
    return _pytamer.tamer_fluent_get_arity(f)
tamer_fluent_get_arity = _pytamer.tamer_fluent_get_arity

def tamer_constant_get_type(c):
    return _pytamer.tamer_constant_get_type(c)
tamer_constant_get_type = _pytamer.tamer_constant_get_type

def tamer_constant_get_arity(c):
    return _pytamer.tamer_constant_get_arity(c)
tamer_constant_get_arity = _pytamer.tamer_constant_get_arity

def tamer_constant_get_value(c):
    return _pytamer.tamer_constant_get_value(c)
tamer_constant_get_value = _pytamer.tamer_constant_get_value

def tamer_function_value_get_jth_param_of_ith_assignment(c, i, j):
    return _pytamer.tamer_function_value_get_jth_param_of_ith_assignment(c, i, j)
tamer_function_value_get_jth_param_of_ith_assignment = _pytamer.tamer_function_value_get_jth_param_of_ith_assignment

def tamer_function_value_get_assignment(c, k, len):
    return _pytamer.tamer_function_value_get_assignment(c, k, len)
tamer_function_value_get_assignment = _pytamer.tamer_function_value_get_assignment

def tamer_function_value_get_default_value(c):
    return _pytamer.tamer_function_value_get_default_value(c)
tamer_function_value_get_default_value = _pytamer.tamer_function_value_get_default_value

def tamer_param_get_type(p):
    return _pytamer.tamer_param_get_type(p)
tamer_param_get_type = _pytamer.tamer_param_get_type

def tamer_instance_get_type(i):
    return _pytamer.tamer_instance_get_type(i)
tamer_instance_get_type = _pytamer.tamer_instance_get_type

def tamer_problem_is_flat(problem):
    return _pytamer.tamer_problem_is_flat(problem)
tamer_problem_is_flat = _pytamer.tamer_problem_is_flat

def _tamer_problem_get_actions(problem):
    return _pytamer._tamer_problem_get_actions(problem)
_tamer_problem_get_actions = _pytamer._tamer_problem_get_actions

def _tamer_problem_get_expressions(problem):
    return _pytamer._tamer_problem_get_expressions(problem)
_tamer_problem_get_expressions = _pytamer._tamer_problem_get_expressions

def _tamer_problem_get_fluents(problem):
    return _pytamer._tamer_problem_get_fluents(problem)
_tamer_problem_get_fluents = _pytamer._tamer_problem_get_fluents

def _tamer_problem_get_constants(problem):
    return _pytamer._tamer_problem_get_constants(problem)
_tamer_problem_get_constants = _pytamer._tamer_problem_get_constants

def _tamer_problem_get_instances(problem):
    return _pytamer._tamer_problem_get_instances(problem)
_tamer_problem_get_instances = _pytamer._tamer_problem_get_instances

def _tamer_problem_get_user_type_instances(problem, utype):
    return _pytamer._tamer_problem_get_user_type_instances(problem, utype)
_tamer_problem_get_user_type_instances = _pytamer._tamer_problem_get_user_type_instances

def _tamer_action_get_expressions(a):
    return _pytamer._tamer_action_get_expressions(a)
_tamer_action_get_expressions = _pytamer._tamer_action_get_expressions

def _tamer_action_get_parameters(a):
    return _pytamer._tamer_action_get_parameters(a)
_tamer_action_get_parameters = _pytamer._tamer_action_get_parameters

def _tamer_fluent_get_parameters(f):
    return _pytamer._tamer_fluent_get_parameters(f)
_tamer_fluent_get_parameters = _pytamer._tamer_fluent_get_parameters

def _tamer_constant_get_parameters(c):
    return _pytamer._tamer_constant_get_parameters(c)
_tamer_constant_get_parameters = _pytamer._tamer_constant_get_parameters

def tamer_expr_is_or(env, e):
    return _pytamer.tamer_expr_is_or(env, e)
tamer_expr_is_or = _pytamer.tamer_expr_is_or

def tamer_expr_is_and(env, e):
    return _pytamer.tamer_expr_is_and(env, e)
tamer_expr_is_and = _pytamer.tamer_expr_is_and

def tamer_expr_is_not(env, e):
    return _pytamer.tamer_expr_is_not(env, e)
tamer_expr_is_not = _pytamer.tamer_expr_is_not

def tamer_expr_is_imply(env, e):
    return _pytamer.tamer_expr_is_imply(env, e)
tamer_expr_is_imply = _pytamer.tamer_expr_is_imply

def tamer_expr_is_iff(env, e):
    return _pytamer.tamer_expr_is_iff(env, e)
tamer_expr_is_iff = _pytamer.tamer_expr_is_iff

def tamer_expr_is_equals(env, e):
    return _pytamer.tamer_expr_is_equals(env, e)
tamer_expr_is_equals = _pytamer.tamer_expr_is_equals

def tamer_expr_is_lt(env, e):
    return _pytamer.tamer_expr_is_lt(env, e)
tamer_expr_is_lt = _pytamer.tamer_expr_is_lt

def tamer_expr_is_le(env, e):
    return _pytamer.tamer_expr_is_le(env, e)
tamer_expr_is_le = _pytamer.tamer_expr_is_le

def tamer_expr_is_gt(env, e):
    return _pytamer.tamer_expr_is_gt(env, e)
tamer_expr_is_gt = _pytamer.tamer_expr_is_gt

def tamer_expr_is_ge(env, e):
    return _pytamer.tamer_expr_is_ge(env, e)
tamer_expr_is_ge = _pytamer.tamer_expr_is_ge

def tamer_expr_is_times(env, e):
    return _pytamer.tamer_expr_is_times(env, e)
tamer_expr_is_times = _pytamer.tamer_expr_is_times

def tamer_expr_is_plus(env, e):
    return _pytamer.tamer_expr_is_plus(env, e)
tamer_expr_is_plus = _pytamer.tamer_expr_is_plus

def tamer_expr_is_div(env, e):
    return _pytamer.tamer_expr_is_div(env, e)
tamer_expr_is_div = _pytamer.tamer_expr_is_div

def tamer_expr_is_minus(env, e):
    return _pytamer.tamer_expr_is_minus(env, e)
tamer_expr_is_minus = _pytamer.tamer_expr_is_minus

def tamer_expr_is_assign(env, e):
    return _pytamer.tamer_expr_is_assign(env, e)
tamer_expr_is_assign = _pytamer.tamer_expr_is_assign

def tamer_expr_is_in_assign(env, e):
    return _pytamer.tamer_expr_is_in_assign(env, e)
tamer_expr_is_in_assign = _pytamer.tamer_expr_is_in_assign

def tamer_expr_is_open_interval(env, e):
    return _pytamer.tamer_expr_is_open_interval(env, e)
tamer_expr_is_open_interval = _pytamer.tamer_expr_is_open_interval

def tamer_expr_is_closed_interval(env, e):
    return _pytamer.tamer_expr_is_closed_interval(env, e)
tamer_expr_is_closed_interval = _pytamer.tamer_expr_is_closed_interval

def tamer_expr_is_left_open_interval(env, e):
    return _pytamer.tamer_expr_is_left_open_interval(env, e)
tamer_expr_is_left_open_interval = _pytamer.tamer_expr_is_left_open_interval

def tamer_expr_is_right_open_interval(env, e):
    return _pytamer.tamer_expr_is_right_open_interval(env, e)
tamer_expr_is_right_open_interval = _pytamer.tamer_expr_is_right_open_interval

def tamer_expr_is_point_interval(env, e):
    return _pytamer.tamer_expr_is_point_interval(env, e)
tamer_expr_is_point_interval = _pytamer.tamer_expr_is_point_interval

def tamer_expr_is_temporal_expression(env, e):
    return _pytamer.tamer_expr_is_temporal_expression(env, e)
tamer_expr_is_temporal_expression = _pytamer.tamer_expr_is_temporal_expression

def tamer_expr_is_start_anchor(env, e):
    return _pytamer.tamer_expr_is_start_anchor(env, e)
tamer_expr_is_start_anchor = _pytamer.tamer_expr_is_start_anchor

def tamer_expr_is_end_anchor(env, e):
    return _pytamer.tamer_expr_is_end_anchor(env, e)
tamer_expr_is_end_anchor = _pytamer.tamer_expr_is_end_anchor

def tamer_expr_is_duration_anchor(env, e):
    return _pytamer.tamer_expr_is_duration_anchor(env, e)
tamer_expr_is_duration_anchor = _pytamer.tamer_expr_is_duration_anchor

def tamer_expr_is_boolean_constant(env, e):
    return _pytamer.tamer_expr_is_boolean_constant(env, e)
tamer_expr_is_boolean_constant = _pytamer.tamer_expr_is_boolean_constant

def tamer_expr_is_rational_constant(env, e):
    return _pytamer.tamer_expr_is_rational_constant(env, e)
tamer_expr_is_rational_constant = _pytamer.tamer_expr_is_rational_constant

def tamer_expr_is_integer_constant(env, e):
    return _pytamer.tamer_expr_is_integer_constant(env, e)
tamer_expr_is_integer_constant = _pytamer.tamer_expr_is_integer_constant

def tamer_expr_is_fluent_reference(env, e):
    return _pytamer.tamer_expr_is_fluent_reference(env, e)
tamer_expr_is_fluent_reference = _pytamer.tamer_expr_is_fluent_reference

def tamer_expr_is_constant_reference(env, e):
    return _pytamer.tamer_expr_is_constant_reference(env, e)
tamer_expr_is_constant_reference = _pytamer.tamer_expr_is_constant_reference

def tamer_expr_is_parameter_reference(env, e):
    return _pytamer.tamer_expr_is_parameter_reference(env, e)
tamer_expr_is_parameter_reference = _pytamer.tamer_expr_is_parameter_reference

def tamer_expr_is_instance_reference(env, e):
    return _pytamer.tamer_expr_is_instance_reference(env, e)
tamer_expr_is_instance_reference = _pytamer.tamer_expr_is_instance_reference

def tamer_expr_is_contains(env, e):
    return _pytamer.tamer_expr_is_contains(env, e)
tamer_expr_is_contains = _pytamer.tamer_expr_is_contains

def tamer_expr_get_fluent(env, e):
    return _pytamer.tamer_expr_get_fluent(env, e)
tamer_expr_get_fluent = _pytamer.tamer_expr_get_fluent

def tamer_expr_get_constant(env, e):
    return _pytamer.tamer_expr_get_constant(env, e)
tamer_expr_get_constant = _pytamer.tamer_expr_get_constant

def tamer_expr_get_parameter(env, e):
    return _pytamer.tamer_expr_get_parameter(env, e)
tamer_expr_get_parameter = _pytamer.tamer_expr_get_parameter

def tamer_expr_get_instance(env, e):
    return _pytamer.tamer_expr_get_instance(env, e)
tamer_expr_get_instance = _pytamer.tamer_expr_get_instance

def tamer_expr_get_boolean_constant(env, e):
    return _pytamer.tamer_expr_get_boolean_constant(env, e)
tamer_expr_get_boolean_constant = _pytamer.tamer_expr_get_boolean_constant

def _tamer_expr_get_rational_constant(env, e):
    return _pytamer._tamer_expr_get_rational_constant(env, e)
_tamer_expr_get_rational_constant = _pytamer._tamer_expr_get_rational_constant

def _tamer_expr_get_integer_constant(env, e):
    return _pytamer._tamer_expr_get_integer_constant(env, e)
_tamer_expr_get_integer_constant = _pytamer._tamer_expr_get_integer_constant

def tamer_expr_get_anml(e):
    return _pytamer.tamer_expr_get_anml(e)
tamer_expr_get_anml = _pytamer.tamer_expr_get_anml

def tamer_expr_get_hash(e):
    return _pytamer.tamer_expr_get_hash(e)
tamer_expr_get_hash = _pytamer.tamer_expr_get_hash

def tamer_expr_equality(e1, e2):
    return _pytamer.tamer_expr_equality(e1, e2)
tamer_expr_equality = _pytamer.tamer_expr_equality

def tamer_fluent_get_anml(f):
    return _pytamer.tamer_fluent_get_anml(f)
tamer_fluent_get_anml = _pytamer.tamer_fluent_get_anml

def tamer_fluent_get_hash(f):
    return _pytamer.tamer_fluent_get_hash(f)
tamer_fluent_get_hash = _pytamer.tamer_fluent_get_hash

def tamer_fluent_equality(f1, f2):
    return _pytamer.tamer_fluent_equality(f1, f2)
tamer_fluent_equality = _pytamer.tamer_fluent_equality

def tamer_constant_get_anml(c):
    return _pytamer.tamer_constant_get_anml(c)
tamer_constant_get_anml = _pytamer.tamer_constant_get_anml

def tamer_constant_get_hash(c):
    return _pytamer.tamer_constant_get_hash(c)
tamer_constant_get_hash = _pytamer.tamer_constant_get_hash

def tamer_constant_equality(c1, c2):
    return _pytamer.tamer_constant_equality(c1, c2)
tamer_constant_equality = _pytamer.tamer_constant_equality

def tamer_action_get_hash(a):
    return _pytamer.tamer_action_get_hash(a)
tamer_action_get_hash = _pytamer.tamer_action_get_hash

def tamer_action_equality(a1, a2):
    return _pytamer.tamer_action_equality(a1, a2)
tamer_action_equality = _pytamer.tamer_action_equality

def tamer_action_is_temporally_uncertain(a):
    return _pytamer.tamer_action_is_temporally_uncertain(a)
tamer_action_is_temporally_uncertain = _pytamer.tamer_action_is_temporally_uncertain

def tamer_instance_get_hash(i):
    return _pytamer.tamer_instance_get_hash(i)
tamer_instance_get_hash = _pytamer.tamer_instance_get_hash

def tamer_instance_equality(i1, i2):
    return _pytamer.tamer_instance_equality(i1, i2)
tamer_instance_equality = _pytamer.tamer_instance_equality

def tamer_param_get_hash(p):
    return _pytamer.tamer_param_get_hash(p)
tamer_param_get_hash = _pytamer.tamer_param_get_hash

def tamer_param_equality(p1, p2):
    return _pytamer.tamer_param_equality(p1, p2)
tamer_param_equality = _pytamer.tamer_param_equality

def tamer_type_get_hash(t):
    return _pytamer.tamer_type_get_hash(t)
tamer_type_get_hash = _pytamer.tamer_type_get_hash

def tamer_type_equality(t1, t2):
    return _pytamer.tamer_type_equality(t1, t2)
tamer_type_equality = _pytamer.tamer_type_equality

def tamer_expr_get_arity(e):
    return _pytamer.tamer_expr_get_arity(e)
tamer_expr_get_arity = _pytamer.tamer_expr_get_arity

def tamer_expr_get_child(e, i):
    return _pytamer.tamer_expr_get_child(e, i)
tamer_expr_get_child = _pytamer.tamer_expr_get_child

def tamer_vector_add_expr(v, e):
    return _pytamer.tamer_vector_add_expr(v, e)
tamer_vector_add_expr = _pytamer.tamer_vector_add_expr

def tamer_vector_get_expr(v, i):
    return _pytamer.tamer_vector_get_expr(v, i)
tamer_vector_get_expr = _pytamer.tamer_vector_get_expr

def tamer_state_get_value(s, i, e):
    return _pytamer.tamer_state_get_value(s, i, e)
tamer_state_get_value = _pytamer.tamer_state_get_value

def _tamer_simulated_effect_new(timing, fluents, length, f, clientdata):
    return _pytamer._tamer_simulated_effect_new(timing, fluents, length, f, clientdata)
_tamer_simulated_effect_new = _pytamer._tamer_simulated_effect_new

def tamer_parse_ttplan(problem, filename):
    return _pytamer.tamer_parse_ttplan(problem, filename)
tamer_parse_ttplan = _pytamer.tamer_parse_ttplan

def tamer_ttplan_new(env):
    return _pytamer.tamer_ttplan_new(env)
tamer_ttplan_new = _pytamer.tamer_ttplan_new

def _tamer_ttplan_step_new(start_time, action, parameters, num_parameters, duration, post_condition):
    return _pytamer._tamer_ttplan_step_new(start_time, action, parameters, num_parameters, duration, post_condition)
_tamer_ttplan_step_new = _pytamer._tamer_ttplan_step_new

def _tamer_ttplan_step_new_object_action(start_time, action, parameters, num_parameters, duration, post_condition, instance):
    return _pytamer._tamer_ttplan_step_new_object_action(start_time, action, parameters, num_parameters, duration, post_condition, instance)
_tamer_ttplan_step_new_object_action = _pytamer._tamer_ttplan_step_new_object_action

def tamer_ttplan_add_step(plan, step):
    return _pytamer.tamer_ttplan_add_step(plan, step)
tamer_ttplan_add_step = _pytamer.tamer_ttplan_add_step

def tamer_ttplan_get_size(plan):
    return _pytamer.tamer_ttplan_get_size(plan)
tamer_ttplan_get_size = _pytamer.tamer_ttplan_get_size

def tamer_ttplan_get_string(plan):
    return _pytamer.tamer_ttplan_get_string(plan)
tamer_ttplan_get_string = _pytamer.tamer_ttplan_get_string

def _tamer_ttplan_get_steps(plan):
    return _pytamer._tamer_ttplan_get_steps(plan)
_tamer_ttplan_get_steps = _pytamer._tamer_ttplan_get_steps

def tamer_ttplan_step_get_start_time(step):
    return _pytamer.tamer_ttplan_step_get_start_time(step)
tamer_ttplan_step_get_start_time = _pytamer.tamer_ttplan_step_get_start_time

def tamer_ttplan_step_get_duration(step):
    return _pytamer.tamer_ttplan_step_get_duration(step)
tamer_ttplan_step_get_duration = _pytamer.tamer_ttplan_step_get_duration

def tamer_ttplan_step_get_action(step):
    return _pytamer.tamer_ttplan_step_get_action(step)
tamer_ttplan_step_get_action = _pytamer.tamer_ttplan_step_get_action

def tamer_ttplan_step_get_num_parameters(step):
    return _pytamer.tamer_ttplan_step_get_num_parameters(step)
tamer_ttplan_step_get_num_parameters = _pytamer.tamer_ttplan_step_get_num_parameters

def tamer_ttplan_step_get_parameter(step, i):
    return _pytamer.tamer_ttplan_step_get_parameter(step, i)
tamer_ttplan_step_get_parameter = _pytamer.tamer_ttplan_step_get_parameter

def tamer_ttplan_step_get_instance(step):
    return _pytamer.tamer_ttplan_step_get_instance(step)
tamer_ttplan_step_get_instance = _pytamer.tamer_ttplan_step_get_instance

def tamer_ttplan_step_get_post_condition(step):
    return _pytamer.tamer_ttplan_step_get_post_condition(step)
tamer_ttplan_step_get_post_condition = _pytamer.tamer_ttplan_step_get_post_condition

def tamer_potplan_new(env):
    return _pytamer.tamer_potplan_new(env)
tamer_potplan_new = _pytamer.tamer_potplan_new

def _tamer_potplan_add_step(plan, delay_time, action, parameters, num_parameters, duration, post_condition):
    return _pytamer._tamer_potplan_add_step(plan, delay_time, action, parameters, num_parameters, duration, post_condition)
_tamer_potplan_add_step = _pytamer._tamer_potplan_add_step

def _tamer_potplan_add_step_object_action(plan, delay_time, action, parameters, num_parameters, duration, post_condition, instance):
    return _pytamer._tamer_potplan_add_step_object_action(plan, delay_time, action, parameters, num_parameters, duration, post_condition, instance)
_tamer_potplan_add_step_object_action = _pytamer._tamer_potplan_add_step_object_action

def tamer_potplan_get_size(plan):
    return _pytamer.tamer_potplan_get_size(plan)
tamer_potplan_get_size = _pytamer.tamer_potplan_get_size

def tamer_potplan_get_string(plan):
    return _pytamer.tamer_potplan_get_string(plan)
tamer_potplan_get_string = _pytamer.tamer_potplan_get_string

def tamer_potplan_get_steps(plan):
    return _pytamer.tamer_potplan_get_steps(plan)
tamer_potplan_get_steps = _pytamer.tamer_potplan_get_steps

def tamer_potplan_get_predecessors(plan, step):
    return _pytamer.tamer_potplan_get_predecessors(plan, step)
tamer_potplan_get_predecessors = _pytamer.tamer_potplan_get_predecessors

def tamer_potplan_step_get_delay_time(step):
    return _pytamer.tamer_potplan_step_get_delay_time(step)
tamer_potplan_step_get_delay_time = _pytamer.tamer_potplan_step_get_delay_time

def tamer_potplan_step_get_id(step):
    return _pytamer.tamer_potplan_step_get_id(step)
tamer_potplan_step_get_id = _pytamer.tamer_potplan_step_get_id

def tamer_potplan_step_get_duration(step):
    return _pytamer.tamer_potplan_step_get_duration(step)
tamer_potplan_step_get_duration = _pytamer.tamer_potplan_step_get_duration

def tamer_potplan_step_get_action(step):
    return _pytamer.tamer_potplan_step_get_action(step)
tamer_potplan_step_get_action = _pytamer.tamer_potplan_step_get_action

def tamer_potplan_step_get_num_parameters(step):
    return _pytamer.tamer_potplan_step_get_num_parameters(step)
tamer_potplan_step_get_num_parameters = _pytamer.tamer_potplan_step_get_num_parameters

def tamer_potplan_step_get_parameter(step, i):
    return _pytamer.tamer_potplan_step_get_parameter(step, i)
tamer_potplan_step_get_parameter = _pytamer.tamer_potplan_step_get_parameter

def tamer_potplan_step_get_instance(step):
    return _pytamer.tamer_potplan_step_get_instance(step)
tamer_potplan_step_get_instance = _pytamer.tamer_potplan_step_get_instance

def tamer_potplan_step_get_post_condition(step):
    return _pytamer.tamer_potplan_step_get_post_condition(step)
tamer_potplan_step_get_post_condition = _pytamer.tamer_potplan_step_get_post_condition

def tamer_potplan_from_ttplan(plan):
    return _pytamer.tamer_potplan_from_ttplan(plan)
tamer_potplan_from_ttplan = _pytamer.tamer_potplan_from_ttplan

def tamer_ttplan_from_potplan(plan):
    return _pytamer.tamer_ttplan_from_potplan(plan)
tamer_ttplan_from_potplan = _pytamer.tamer_ttplan_from_potplan

def tamer_do_smt_planning(problem, horizon):
    return _pytamer.tamer_do_smt_planning(problem, horizon)
tamer_do_smt_planning = _pytamer.tamer_do_smt_planning

def _tamer_do_tsimple_planning(problem):
    return _pytamer._tamer_do_tsimple_planning(problem)
_tamer_do_tsimple_planning = _pytamer._tamer_do_tsimple_planning

def tamer_do_tsimple_planning_with_custom_heuristic(problem, f, clientdata):
    return _pytamer.tamer_do_tsimple_planning_with_custom_heuristic(problem, f, clientdata)
tamer_do_tsimple_planning_with_custom_heuristic = _pytamer.tamer_do_tsimple_planning_with_custom_heuristic

def tamer_do_iw_planning(problem):
    return _pytamer.tamer_do_iw_planning(problem)
tamer_do_iw_planning = _pytamer.tamer_do_iw_planning

def _tamer_do_ftp_planning(problem):
    return _pytamer._tamer_do_ftp_planning(problem)
_tamer_do_ftp_planning = _pytamer._tamer_do_ftp_planning

def tamer_do_ftp_planning_with_custom_heuristic(problem, f, clientdata):
    return _pytamer.tamer_do_ftp_planning_with_custom_heuristic(problem, f, clientdata)
tamer_do_ftp_planning_with_custom_heuristic = _pytamer.tamer_do_ftp_planning_with_custom_heuristic

def tamer_ttplan_validate(problem, plan):
    return _pytamer.tamer_ttplan_validate(problem, plan)
tamer_ttplan_validate = _pytamer.tamer_ttplan_validate

def tamer_new_simulator(env, problem, max_plan_size, use_fluents_as_input=1, use_actions_as_input=1, use_is_applicable_as_input=1, use_was_applied_as_input=1, use_will_be_applicable_as_input=1, use_constants_as_input=1, use_goals_as_input=1, use_tn_as_input=1, use_heuristic_as_input=0, use_makespan_as_input=0, cache_size=0):
    return _pytamer.tamer_new_simulator(env, problem, max_plan_size, use_fluents_as_input, use_actions_as_input, use_is_applicable_as_input, use_was_applied_as_input, use_will_be_applicable_as_input, use_constants_as_input, use_goals_as_input, use_tn_as_input, use_heuristic_as_input, use_makespan_as_input, cache_size)
tamer_new_simulator = _pytamer.tamer_new_simulator

def tamer_get_initial_state(simulator):
    return _pytamer.tamer_get_initial_state(simulator)
tamer_get_initial_state = _pytamer.tamer_get_initial_state

def tamer_do_step(simulator, state, action_id, compute_heuristic):
    return _pytamer.tamer_do_step(simulator, state, action_id, compute_heuristic)
tamer_do_step = _pytamer.tamer_do_step

def tamer_simulator_get_goal_index(simulator, goal):
    return _pytamer.tamer_simulator_get_goal_index(simulator, goal)
tamer_simulator_get_goal_index = _pytamer.tamer_simulator_get_goal_index

def tamer_simulator_get_constant_index(simulator, constant):
    return _pytamer.tamer_simulator_get_constant_index(simulator, constant)
tamer_simulator_get_constant_index = _pytamer.tamer_simulator_get_constant_index

def tamer_get_fluent_number(simulator):
    return _pytamer.tamer_get_fluent_number(simulator)
tamer_get_fluent_number = _pytamer.tamer_get_fluent_number

def tamer_get_action_number(simulator):
    return _pytamer.tamer_get_action_number(simulator)
tamer_get_action_number = _pytamer.tamer_get_action_number

def tamer_get_is_applicable_number(simulator):
    return _pytamer.tamer_get_is_applicable_number(simulator)
tamer_get_is_applicable_number = _pytamer.tamer_get_is_applicable_number

def tamer_get_was_applied_number(simulator):
    return _pytamer.tamer_get_was_applied_number(simulator)
tamer_get_was_applied_number = _pytamer.tamer_get_was_applied_number

def tamer_get_will_be_applicable_number(simulator):
    return _pytamer.tamer_get_will_be_applicable_number(simulator)
tamer_get_will_be_applicable_number = _pytamer.tamer_get_will_be_applicable_number

def tamer_get_constant_number(simulator):
    return _pytamer.tamer_get_constant_number(simulator)
tamer_get_constant_number = _pytamer.tamer_get_constant_number

def tamer_get_goal_number(simulator):
    return _pytamer.tamer_get_goal_number(simulator)
tamer_get_goal_number = _pytamer.tamer_get_goal_number

def tamer_get_tn_vec_size(simulator):
    return _pytamer.tamer_get_tn_vec_size(simulator)
tamer_get_tn_vec_size = _pytamer.tamer_get_tn_vec_size

def tamer_get_state_size(simulator):
    return _pytamer.tamer_get_state_size(simulator)
tamer_get_state_size = _pytamer.tamer_get_state_size

def tamer_get_state_values(simulator, state, size):
    return _pytamer.tamer_get_state_values(simulator, state, size)
tamer_get_state_values = _pytamer.tamer_get_state_values

def tamer_simulation_done(simulator, state):
    return _pytamer.tamer_simulation_done(simulator, state)
tamer_simulation_done = _pytamer.tamer_simulation_done

def tamer_state_goal_eval(state):
    return _pytamer.tamer_state_goal_eval(state)
tamer_state_goal_eval = _pytamer.tamer_state_goal_eval

def tamer_simulation_reward(simulator, state, next_state):
    return _pytamer.tamer_simulation_reward(simulator, state, next_state)
tamer_simulation_reward = _pytamer.tamer_simulation_reward

def tamer_get_heuristic_value(simulator, state):
    return _pytamer.tamer_get_heuristic_value(simulator, state)
tamer_get_heuristic_value = _pytamer.tamer_get_heuristic_value

def tamer_simulation_is_action_applicable(simulator, state, action_id):
    return _pytamer.tamer_simulation_is_action_applicable(simulator, state, action_id)
tamer_simulation_is_action_applicable = _pytamer.tamer_simulation_is_action_applicable

def tamer_simulation_is_action_never_applicable(simulator, action_id):
    return _pytamer.tamer_simulation_is_action_never_applicable(simulator, action_id)
tamer_simulation_is_action_never_applicable = _pytamer.tamer_simulation_is_action_never_applicable

def tamer_simulation_is_action_running(simulator, state, action_id):
    return _pytamer.tamer_simulation_is_action_running(simulator, state, action_id)
tamer_simulation_is_action_running = _pytamer.tamer_simulation_is_action_running

def tamer_simulator_reset(simulator):
    return _pytamer.tamer_simulator_reset(simulator)
tamer_simulator_reset = _pytamer.tamer_simulator_reset

def tamer_simulator_get_memory_from_a_ftp_run(simulator, max_expanded_states, max_goal_states):
    return _pytamer.tamer_simulator_get_memory_from_a_ftp_run(simulator, max_expanded_states, max_goal_states)
tamer_simulator_get_memory_from_a_ftp_run = _pytamer.tamer_simulator_get_memory_from_a_ftp_run

def tamer_action_iter_next(ai):
    return _pytamer.tamer_action_iter_next(ai)
tamer_action_iter_next = _pytamer.tamer_action_iter_next

def tamer_fluent_iter_next(fi):
    return _pytamer.tamer_fluent_iter_next(fi)
tamer_fluent_iter_next = _pytamer.tamer_fluent_iter_next

def tamer_constant_iter_next(ci):
    return _pytamer.tamer_constant_iter_next(ci)
tamer_constant_iter_next = _pytamer.tamer_constant_iter_next

def tamer_expr_iter_next(ei):
    return _pytamer.tamer_expr_iter_next(ei)
tamer_expr_iter_next = _pytamer.tamer_expr_iter_next

def tamer_param_iter_next(pi):
    return _pytamer.tamer_param_iter_next(pi)
tamer_param_iter_next = _pytamer.tamer_param_iter_next

def tamer_instance_iter_next(ii):
    return _pytamer.tamer_instance_iter_next(ii)
tamer_instance_iter_next = _pytamer.tamer_instance_iter_next

def tamer_ttplan_step_iter_next(ti):
    return _pytamer.tamer_ttplan_step_iter_next(ti)
tamer_ttplan_step_iter_next = _pytamer.tamer_ttplan_step_iter_next

def tamer_potplan_step_iter_next(ti):
    return _pytamer.tamer_potplan_step_iter_next(ti)
tamer_potplan_step_iter_next = _pytamer.tamer_potplan_step_iter_next

def py_tamer_simulated_effect_new(timing, fluents, length, pyfunc):
    return _pytamer.py_tamer_simulated_effect_new(timing, fluents, length, pyfunc)
py_tamer_simulated_effect_new = _pytamer.py_tamer_simulated_effect_new

def py_tamer_do_ftp_planning_with_custom_heuristic(problem, pyfunc):
    return _pytamer.py_tamer_do_ftp_planning_with_custom_heuristic(problem, pyfunc)
py_tamer_do_ftp_planning_with_custom_heuristic = _pytamer.py_tamer_do_ftp_planning_with_custom_heuristic

def py_tamer_do_tsimple_planning_with_custom_heuristic(problem, pyfunc):
    return _pytamer.py_tamer_do_tsimple_planning_with_custom_heuristic(problem, pyfunc)
py_tamer_do_tsimple_planning_with_custom_heuristic = _pytamer.py_tamer_do_tsimple_planning_with_custom_heuristic


class TamerError(Exception):
    pass

def tamer_env_set_vector_string_option(env, opt_name, values):
    return _tamer_env_set_vector_string_option(env, opt_name, values, len(values))

def tamer_expr_get_integer_constant(env, expr):
    r, n = _tamer_expr_get_integer_constant(env, expr)
    if r == 0:
        return n
    else:
        raise Exception(tamer_get_last_error_message())

def tamer_expr_get_rational_constant(env, expr):
    r, n, d = _tamer_expr_get_rational_constant(env, expr)
    if r == 0:
        return (n, d)
    else:
        raise Exception(tamer_get_last_error_message())

def tamer_type_get_rational_lower_bound(ty):
    r, n, d = _tamer_type_get_rational_lower_bound(ty)
    if r == 0:
        return (n, d)
    else:
        raise Exception(tamer_get_last_error_message())

def tamer_type_get_rational_upper_bound(ty):
    r, n, d = _tamer_type_get_rational_upper_bound(ty)
    if r == 0:
        return (n, d)
    else:
        raise Exception(tamer_get_last_error_message())

def tamer_type_get_integer_lower_bound(ty):
    r, n = _tamer_type_get_integer_lower_bound(ty)
    if r == 0:
        return n
    else:
        raise Exception(tamer_get_last_error_message())

def tamer_type_get_integer_upper_bound(ty):
    r, n = _tamer_type_get_integer_upper_bound(ty)
    if r == 0:
        return n
    else:
        raise Exception(tamer_get_last_error_message())

def tamer_ttplan_get_steps(ttplan):
    ai = _tamer_ttplan_get_steps(ttplan)
    for i in range(tamer_ttplan_get_size(ttplan)):
        a = tamer_ttplan_step_iter_next(ai)
        yield a

def tamer_problem_get_actions(problem):
    ai = _tamer_problem_get_actions(problem)
    while True:
        a = tamer_action_iter_next(ai)
        if tamer_action_is_error(a):
            break
        yield a

def tamer_problem_get_fluents(problem):
    ai = _tamer_problem_get_fluents(problem)
    while True:
        a = tamer_fluent_iter_next(ai)
        if tamer_fluent_is_error(a):
            break
        yield a

def tamer_problem_get_constants(problem):
    ai = _tamer_problem_get_constants(problem)
    while True:
        a = tamer_constant_iter_next(ai)
        if tamer_constant_is_error(a):
            break
        yield a

def tamer_problem_get_instances(problem):
    ai = _tamer_problem_get_instances(problem)
    while True:
        a = tamer_instance_iter_next(ai)
        if tamer_instance_is_error(a):
            break
        yield a

def tamer_problem_get_user_type_instances(problem, user_type):
    ai = _tamer_problem_get_user_type_instances(problem, user_type)
    while True:
        a = tamer_instance_iter_next(ai)
        if tamer_instance_is_error(a):
            break
        yield a

def tamer_problem_get_expressions(problem):
    ai = _tamer_problem_get_expressions(problem)
    while True:
        a = tamer_expr_iter_next(ai)
        if tamer_expr_is_error(a):
            break
        yield a

def tamer_action_get_expressions(action):
    ai = _tamer_action_get_expressions(action)
    while True:
        a = tamer_expr_iter_next(ai)
        if tamer_expr_is_error(a):
            break
        yield a

def tamer_action_get_parameters(action):
    ai = _tamer_action_get_parameters(action)
    while True:
        a = tamer_param_iter_next(ai)
        if tamer_param_is_error(a):
            break
        yield a

def tamer_fluent_get_parameters(fluent):
    ai = _tamer_fluent_get_parameters(fluent)
    while True:
        a = tamer_param_iter_next(ai)
        if tamer_param_is_error(a):
            break
        yield a

def tamer_constant_get_parameters(constant):
    ai = _tamer_constant_get_parameters(constant)
    while True:
        a = tamer_param_iter_next(ai)
        if tamer_param_is_error(a):
            break
        yield a

def tamer_ttplan_step_get_parameters(step):
    n = tamer_ttplan_step_get_num_parameters(step)
    for i in range(n):
        p = tamer_ttplan_step_get_parameter(step, i)
        yield p

def tamer_fluent_new(env, name, type, path, params):
    return _tamer_fluent_new(env, name, type, path, len(path), params, len(params))

def tamer_action_new(env, name, path, params, expressions, simulated_effects):
    return _tamer_action_new(env, name, path, len(path), params, len(params),
                             expressions, len(expressions), simulated_effects, len(simulated_effects))

def tamer_problem_new(env, actions, fluents, constants, instances, user_types, expressions):
    return _tamer_problem_new(env, actions, len(actions), fluents, len(fluents),
                              constants, len(constants), instances, len(instances),
                              user_types, len(user_types), expressions, len(expressions))

def tamer_constant_new(env, name, type, path, parameters, value):
    return _tamer_constant_new(env, name, type, path, len(path), parameters, len(parameters), value)

def tamer_constant_field_new(env, name, type, path, parameters, key_values, values):
    return _tamer_constant_field_new(env, name, type, path, len(path), parameters, len(parameters), \
                                     key_values, values, len(values))

def tamer_function_value_add_assignment(function_value, key, value):
    return _tamer_function_value_add_assignment(function_value, key, len(key), value)

def tamer_function_value_get_assignment(function_value, key):
    return _tamer_function_value_get_assignment(function_value, key, len(key))

def tamer_ttplan_step_new(start_time, action, parameters, duration, post_condition):
    return _tamer_ttplan_step_new(start_time, action, parameters, len(parameters), duration, post_condition)

def tamer_ttplan_step_new_object_action(start_time, action, parameters, duration, post_condition, instance):
    return _tamer_ttplan_step_new_object_action(start_time, action, parameters, len(parameters), \
                                                duration, post_condition, instance)

def tamer_potplan_add_step(plan, delay_time, action, parameters, duration, post_condition):
    return _tamer_potplan_add_step(plan, delay_time, action, parameters, len(parameters), \
                                   duration, post_condition)

def tamer_potplan_add_step_object_action(plan, delay_time, action, parameters, duration, post_condition, instance):
    return _tamer_potplan_add_step_object_action(plan, delay_time, action, parameters, len(parameters), \
                                                 duration, post_condition, instance)

def tamer_expr_make_fluent_reference(env, f, args):
    return _tamer_expr_make_fluent_reference(env, f, args, len(args))

def tamer_get_state(simulator, state):
    return tamer_get_state_values(simulator, state, tamer_get_state_size(simulator))

def tamer_step(simulator, state, action_id, compute_heuristic=True):
    next_state = tamer_do_step(simulator, state, action_id, 1 if compute_heuristic else 0)
    if tamer_state_is_error(next_state) == 1:
        return None, True, -1.0, None
    done = True if tamer_simulation_done(simulator, next_state) else False
    reward = tamer_simulation_reward(simulator, state, next_state)
    pstate = tamer_get_state(simulator, next_state)
    return next_state, done, reward, pstate

def tamer_simulated_effect_new(timing, fluents, fun):
    return py_tamer_simulated_effect_new(timing, fluents, len(fluents), fun)

def tamer_do_ftp_planning(problem, heuristic=None):
    if heuristic is None:
        return _tamer_do_ftp_planning(problem)
    else:
        return py_tamer_do_ftp_planning_with_custom_heuristic(problem, heuristic)

def tamer_do_tsimple_planning(problem, heuristic=None):
    if heuristic is None:
        return _tamer_do_tsimple_planning(problem)
    else:
        return py_tamer_do_tsimple_planning_with_custom_heuristic(problem, heuristic)

# Add equality, hash methods to objects

def _tamer_expr_hash(self):
    return tamer_expr_get_hash(self)
tamer_expr.__hash__ = _tamer_expr_hash

def _tamer_expr_eq(self, other):
    return isinstance(other, tamer_expr) and tamer_expr_equality(self, other)
tamer_expr.__eq__ = _tamer_expr_eq

def _tamer_expr_str(self):
    return tamer_expr_get_anml(self)
tamer_expr.__str__ = _tamer_expr_str
tamer_expr.__repr__ = _tamer_expr_str


def _tamer_fluent_hash(self):
    return tamer_fluent_get_hash(self)
tamer_fluent.__hash__ = _tamer_fluent_hash

def _tamer_fluent_eq(self, other):
    return isinstance(other, tamer_fluent) and tamer_fluent_equality(self, other)
tamer_fluent.__eq__ = _tamer_fluent_eq

def _tamer_fluent_str(self):
    return tamer_fluent_get_anml(self)
tamer_fluent.__str__ = _tamer_fluent_str
tamer_fluent.__repr__ = _tamer_fluent_str


def _tamer_constant_hash(self):
    return tamer_constant_get_hash(self)
tamer_constant.__hash__ = _tamer_constant_hash

def _tamer_constant_eq(self, other):
    return isinstance(other, tamer_constant) and tamer_constant_equality(self, other)
tamer_constant.__eq__ = _tamer_constant_eq

def _tamer_constant_str(self):
    return tamer_constant_get_anml(self)
tamer_constant.__str__ = _tamer_constant_str
tamer_constant.__repr__ = _tamer_constant_str


def _tamer_action_hash(self):
    return tamer_action_get_hash(self)
tamer_action.__hash__ = _tamer_action_hash

def _tamer_action_eq(self, other):
    return isinstance(other, tamer_action) and tamer_action_equality(self, other)
tamer_action.__eq__ = _tamer_action_eq


def _tamer_instance_hash(self):
    return tamer_instance_get_hash(self)
tamer_instance.__hash__ = _tamer_instance_hash

def _tamer_instance_eq(self, other):
    return isinstance(other, tamer_instance) and tamer_instance_equality(self, other)
tamer_instance.__eq__ = _tamer_instance_eq

def _tamer_instance_str(self):
    return tamer_instance_get_name(self)
tamer_instance.__str__ = _tamer_instance_str
tamer_instance.__repr__ = _tamer_instance_str


def _tamer_param_hash(self):
    return tamer_param_get_hash(self)
tamer_param.__hash__ = _tamer_param_hash

def _tamer_param_eq(self, other):
    return isinstance(other, tamer_param) and tamer_param_equality(self, other)
tamer_param.__eq__ = _tamer_param_eq

def _tamer_param_str(self):
    return tamer_param_get_name(self)
tamer_param.__str__ = _tamer_param_str
tamer_param.__repr__ = _tamer_param_str


def _tamer_type_hash(self):
    return tamer_type_get_hash(self)
tamer_type.__hash__ = _tamer_type_hash

def _tamer_type_eq(self, other):
    return isinstance(other, tamer_type) and tamer_type_equality(self, other)
tamer_type.__eq__ = _tamer_type_eq

def _tamer_type_str(self):
    return tamer_type_get_name(self)
tamer_type.__str__ = _tamer_type_str
tamer_type.__repr__ = _tamer_type_str


# This file is compatible with both classic and new-style classes.


