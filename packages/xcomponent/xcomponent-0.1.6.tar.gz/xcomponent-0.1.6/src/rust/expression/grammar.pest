expression = { for_expression | if_expression | binary_expression }

binary_expression = { term ~ (whitespace* ~ operator ~ whitespace* ~ term)* }

term = _{ for_expression | if_expression | postfix }

postfix = _{ primary ~ (postfix_op)* }
postfix_op = _{ field | index | call }

field = { "." ~ ident }
index = { "[" ~ expression ~ "]" }
call = {
    "(" ~ whitespace* ~ call_args? ~ whitespace* ~ ")"
}

call_args = _{ call_arg ~ (whitespace* ~ "," ~ whitespace* ~ call_arg)* }
call_arg = _{ kw_arg | pos_arg }
pos_arg = { term }
kw_arg = { ident ~ whitespace* ~ "=" ~ whitespace* ~ term }

primary = _{ component | ident | string | integer | boolean }
component = { "<" ~ (!"/>" ~ ANY)* ~ "/>" }

operator = { "+" | "-" | "*" | "/" | "and" | "or" | "==" | "!=" | ">=" | "<=" | ">" | "<" }
boolean = { "true" | "false" }
integer = @{ (ASCII_DIGIT | "_")+ }
string = @{ "\"" ~ (escape_sequence | !("\"" | "\\") ~ ANY)* ~ "\"" }

keyword = { "for" | "in" | "if" | "else" | operator | boolean | "{" | "}" | "[" | "]" }

ident = { !keyword ~ ident_raw }
ident_raw = _{ (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_")* }

whitespace = _{ " " | "\t" | "\n" | "\r" }
escape_sequence = { "\\" ~ ( "\"" | "\\" | "n" | "t" | "r" ) }

if_expression = {
    "if " ~ whitespace* ~ binary_expression ~ whitespace* ~ block ~ (whitespace* ~ "else" ~ whitespace* ~ block )?
}

for_expression = { "for" ~ whitespace+ ~ ident ~ whitespace+ ~ "in" ~ whitespace+ ~ term ~ whitespace* ~ block }

block = { whitespace* ~"{" ~ whitespace* ~ expression ~ whitespace* ~ "}" ~ whitespace* }
