from Терминал import цветная_печать

def содержит(что,где,игнорировать_регистр=False):
    # функция проверяет, что хотя бы один элемент из "что" (или вся переменная целиком) содержится хотя бы в одном элементе из "где" (или является частью самой переменной "где")

    # функция возвращает True или False
    # переменные "что" и "где" могут быть двух видов:
        # 1. итерируемые объекты (кортеж или список), всеми элементами которых являются строки (текст)
        # 2. сама переменная может быть строкой (текстом)
        # при нарушении любого из этих пунктов будет вызвана ошибка с описанием проблемы
    # переменная "игнорировать_регистр" может принимать только True, или быть по умолчанию False. При передаче другого типа данных будет вызвана ошибка.
    # при получении в "что" или "где" пустых строк или пустых списков будет возвращаться False
    if type(что) not in [str, list, tuple]:
        ошибка = f'Переменная "что" может быть только текстом, списком или кортежем. По факту у неё тип {type(что)}'
        raise TypeError(цветная_печать(ошибка, красный=True, стиль="жк", не_печатать=True))
    
    if type(где) not in [str, list, tuple]:
        ошибка = f'Переменная "где" может быть только текстом, списком или кортежем. По факту у неё тип {type(что)}'
        raise TypeError(цветная_печать(ошибка, красный=True, стиль="жк", не_печатать=True))
    
    if type(игнорировать_регистр) != bool:
        ошибка = f'Переменная "игнорировать_регистр" может быть только True или False. По факту у неё тип {type(игнорировать_регистр)}'
        raise TypeError(цветная_печать(ошибка, красный=True, стиль="жк", не_печатать=True))
    
    if type(что) != str:
        for элемент in что:
            if type(элемент) != str:
                ошибка = f'Переменная "что" имеет в себе нетекстовый элемент. По факту у него тип {type(элемент)}'
                raise TypeError(цветная_печать(ошибка, красный=True, стиль="жк", не_печатать=True))
            
    if type(где) != str:
        for элемент in где:
            if type(элемент) != str:
                ошибка = f'Переменная "где" имеет в себе нетекстовый элемент. По факту у него тип {type(элемент)}'
                raise TypeError(цветная_печать(ошибка, красный=True, стиль="жк", не_печатать=True))    

    if игнорировать_регистр:
        if type(что) == str:
            что = что.lower()
        else:
            новый_список = []
            for элемент in что:
                новый_список.append(элемент.lower())
            что = новый_список

        if type(где) == str:
            где = где.lower()
        else:
            новый_список = []
            for элемент in где:
                новый_список.append(элемент.lower())
            где = новый_список

    if type(что) == type(где) == str:
        if что in где:
            return True
        
    if type(что) == str and type(где) != str:
        for элемент in где:
            if что in элемент:
                return True
            
    if type(что) != str and type(где) == str:
        for элемент in что:
            if элемент in где:
                return True
            
    if type(что) == type(где) != str:
        for элемент_что in что:
            for элемент_где in где:
                if элемент_что in элемент_где:
                    return True
            

    return False
    
def тесты():
    # TDD - Test Driven Development
    # разработка функций после написания тестов к ней

    # Согласно этому принципу нужно сначала написать тесты, которые проверят каждый аспект работы функции. Каждый раз при доработке этой функции необходимо заново запускать тесты = если они все пройдены, значит функция точно работает правильно.

    # При разработке тестов недопустимо использование вычисляемых переменных  - тестируемая функция должна принять заранее подготовленные данные, а тест проверяет, согласуется ли её ответ с ожидаемым.
    # Например, при тестировании функции "сумма" ей в аргументы подаются числа 15 и 10 и сравнивается её ответ с числом 25, а не с вычислением 15 + 10.

    пройдено = []
    не_пройдено = []

    def тест(что, где, игнорировать_регистр, ожидаемый_ответ, название_теста):
       
        try:
            ответ = содержит(что, где, игнорировать_регистр)
            текст_ошибки = None
        except Exception as ошибка:
            текст_ошибки = ошибка
            ответ = "Ошибка"

        if ответ == ожидаемый_ответ:
            цветная_печать(название_теста, зелёный=True) 
            пройдено.append("+")
        else:
            цветная_печать(название_теста, красный=True)
            print(f"Введённый ответ - {ожидаемый_ответ}")
            print(f"Ожидаемый ответ     - {ответ}")
            не_пройдено.append("-")
            if текст_ошибки:
                print(текст_ошибки)
            print()
            
    
    тест(123, "где", True, "Ошибка", "Неправильный тип - 'что'")
    тест("что", 123, True, "Ошибка", "Неправильный тип - 'где'")
    тест("что", "где", "True", "Ошибка", "Неправильный тип - 'игнорировать_регистр'")
    тест(["текст", "не цифра", 23], "где", False, "Ошибка", 'В переменной "что" есть не str')
    тест("что", ["текст", "не цифра", 23], False, "Ошибка", 'В переменной "где" есть не str')
    варианты = [
        ["сырники", "кто-то ест Сырники", True, True, "что - строка; где - строка; игн_регистр - True; ответ - True"],
        ["сырники", "кто-то ест грибы", True, False, "что - строка; где - строка; игн_регистр - True; ответ - False"],
        ["Сырники", "кто-то ест Сырники", False, True, "что - строка; где - строка; игн_регистр - False; ответ - True"],
        ["сырники", "кто-то ест Сырники", False, False, "что - строка; где - строка; игн_регистр - False; ответ - False"],
        ["Сырники", ["кто-то ест Сырники", "кто-то ест грибы"], False, True, "что - строка; где - список; игн_регистр - False; ответ - True"],
        ["сырники", ["кто-то ест Сырники", "кто-то ест грибы"], False, False, "что - строка; где - список; игн_регистр - False; ответ - False"],
        ["сырники", ["кто-то ест Сырники", "кто-то ест грибы"], True, True, "что - строка; где - список; игн_регистр - True; ответ - True"],
        ["пряники", ["кто-то ест Сырники", "кто-то ест грибы"], True, False, "что - строка; где - список; игн_регистр - True; ответ - False"],
        [["Грибы", "Сырники"], "Кто-то ест Грибы", False, True, "что - список; где - строка; игн_регистр - False; ответ - True"],
        [["Грибы", "Сырники"], "Кто-то ест грибы", False, False, "что - список; где - строка; игн_регистр - False; ответ - False"],
        [["Грибы", "Сырники"], "Кто-то ест грибы", True, True, "что - список; где - строка; игн_регистр - True; ответ - True"],
        [["Грибы", "Сырники"], "Кто-то ест пряники", True, False, "что - список; где - строка; игн_регистр - True; ответ - False"],
        [["Грибы", "Сырники"], ["кто-то ест Сырники", "кто-то ест Грибы"], False, True, "что - список; где - список; игн_регистр - False; ответ - True"],
        [["Грибы", "Сырники"], ["кто-то ест сырники", "кто-то ест грибы"], False, False, "что - список; где - список; игн_регистр - False; ответ - False"],
        [["Грибы", "Сырники"], ["кто-то ест сырники", "кто-то ест грибы"], True, True, "что - список; где - список; игн_регистр - True; ответ - True"],
        [["Грибы", "Сырники"], ["кто-то ест пряники", "кто-то ест пельмени"], True, False, "что - список; где - список; игн_регистр - True; ответ - False"],
    ]

    for вариант in варианты:
        что, где, игнорировать_регистр, ответ, название = вариант
        тест(что, где, игнорировать_регистр, ответ, название)

    print("\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/")
    print(f"Всего тестов - {len(пройдено) + len(не_пройдено)}")
    print(f"Из них пройдено - {len(пройдено)}")
    print(f"Не пройдено - {len(не_пройдено)}")

тесты()