[project]
authors = [{name = "smknaake", email = "bas.knaake@deltares.nl"}]
description = "Simple command line tool to create geological cross-sections"
name = "geosections"
requires-python = ">= 3.12"
dynamic = ["version"]
readme = "README.md"
license = {file = "LICENSE"}
keywords = [
  "Geology",
  "Cross-sections",
  "CLI",
  "Deltares",
]
classifiers = [
  "Development Status :: 2 - Pre-Alpha",
  "Intended Audience :: Science/Research",
  "Topic :: Scientific/Engineering",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
]
dependencies = [
    "geost",
    "geopandas",
    "pandas",
    "numpy",
    "matplotlib",
    "pydantic",
    "rioxarray",
    "typer",
    "pillow",
    "scikit-learn",
    "shapely",
    "xarray",
    "click<8.2",
]

[project.urls]
Homepage = "https://github.com/Deltares-research/geosections"
Repository = "https://github.com/Deltares-research/geosections"
Issues = "https://github.com/Deltares-research/geosections/issues"

[project.scripts]
geosections = "geosections.cli:app"

[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]

[tool.hatch.version]
path = "src/geosections/__init__.py"

[tool.hatch.build.targets.sdist]
only-include = ["src/geosections", "tests"]

[tool.pixi.project]
channels = ["conda-forge"]
platforms = ["win-64", "linux-64", "osx-64", "osx-arm64"]

[tool.pixi.pypi-dependencies]
geosections = { path = ".", editable = true }

[tool.pixi.tasks]
build-docs = "sphinx-build -b html docs ./docs/build"
rm-build = "rm -r ./docs/build"
rebuild-docs = { depends-on = ["rm-build", "build-docs"] }

[tool.pixi.dependencies]
python = "*"
pip = "*"
pydantic = "*"
geopandas = "*"
pandas = "*"
numpy = "*"
matplotlib = "*"
rioxarray = "*"
xarray = "*"
ruff = "*"
black = "*"
pytest = "*"
pytest-cov = "*"
typer = "*"
pillow = "*"
scikit-learn = "*"
click = "<8.2"
sphinx = "*"
myst-parser = "*"
pydata-sphinx-theme = "*"
sphinx-design = "*"
myst-nb = "*"

[tool.pytest.ini_options]
testpaths = [
    "tests",
]
markers = [
	"unittest: test of single component",
	"integrationtest: test of multiple components",
]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
]

[tool.black]
line-length = 88

[tool.ruff]
line-length = 88
target-version = "py313"

[tool.ruff.lint]
select = ["F", "E", "W", "N", "I001", "NPY201"]
ignore = ["F401", "E501", "F811"]
unfixable = ["F401"]
pydocstyle.convention = "numpy"
