import{v as f,w as V}from"./runtime-dom.esm-bundler.DChKj6X8.js";import{c as N}from"./integrations.CUprebZ9.js";import{g as C}from"./strings.Fm4VVZpd.js";import{_ as k}from"./_plugin-vue_export-helper.DlAUqK2U.js";import{d as B,c,a as t,b as l,w as _,e as S,n as b,r as i,g as W,h as u}from"./runtime-core.esm-bundler.Y6RLDZTT.js";import"./user.BEEfOshe.js";import"./user.Bg1Nd46A.js";import"./index.BSdFiPHn.js";import"./loader.BQDlK3Tc.js";import"./notifications.NSMm1_5U.js";import"./index.CwJxcYEt.js";import"./dayjs.min.xlbmdZiw.js";import"./duration.BGVtNWJ9.js";const q=B({__name:"SnapshotGcpForm",setup(g,{expose:r}){r();const o=i(""),e=i(!0);function p(){o.value===""?e.value=!1:e.value=!0}const n=i(""),a=i(!0);function h(){n.value===""?a.value=!1:a.value=!0}const s=i(!1),m=W(()=>s.value||!e.value||o.value===""||!a.value||n.value==="");async function y(){if(!m.value){s.value=!0;const v=C(32),A={name:o.value,provider:"opentelemetry",vendor:"gcp",environment:{name:"otel",used_for:"integration",envvars:[{var_name:"OTEL_VENDOR",value:"gcp"}],secrets:[{key:"gcp-creds",var_name:"CHAOSTOOLKIT_OTEL_GCP_SA",value:`/home/svc/.chaostoolkit/integrations/${v}/sa.json`},{key:"service-account",path:`/home/svc/.chaostoolkit/integrations/${v}/sa.json`,value:n.value}]}};await N(A),s.value=!1}}const d={name:o,isNameValid:e,onNameBlur:p,serviceAccount:n,isServiceAccountValid:a,onServiceAccountBlur:h,isCreating:s,isSubmitDisabled:m,create:y};return Object.defineProperty(d,"__isScriptSetup",{enumerable:!1,value:!0}),d}}),x={class:"integrationForm form"},O={key:0,class:"inputWrapper__help inputWrapper__help--error"},w={key:0,class:"inputWrapper__help inputWrapper__help--error"},T={class:"inputWrapper"},D=["disabled"];function E(g,r,o,e,p,n){return u(),c("form",x,[t("div",{class:b(["inputWrapper",{"inputWrapper--error":!e.isNameValid}])},[r[2]||(r[2]=t("label",{for:"name"},[l("Name "),t("span",{class:"required"},"Required")],-1)),_(t("input",{type:"text",name:"name",id:"name","onUpdate:modelValue":r[0]||(r[0]=a=>e.name=a),onBlur:e.onNameBlur,placeholder:"Send traces to GCP",required:""},null,544),[[f,e.name]]),e.isNameValid?S("",!0):(u(),c("p",O," A name for your integration is required. "))],2),t("div",{class:b(["inputWrapper",{"inputWrapper--error":!e.isServiceAccountValid}])},[r[4]||(r[4]=t("label",{for:"serviceaccount"},[l(" Service Account Credentials "),t("span",{class:"required"},"Required")],-1)),_(t("textarea",{rows:"5",name:"serviceaccount",id:"serviceaccount","onUpdate:modelValue":r[1]||(r[1]=a=>e.serviceAccount=a),onBlur:e.onServiceAccountBlur,placeholder:"Paste the content of your service account JSON file",required:""},null,544),[[f,e.serviceAccount]]),e.isServiceAccountValid?S("",!0):(u(),c("p",w,r[3]||(r[3]=[l(" Your service account is required."),t("br",null,null,-1)])))],2),t("div",T,[t("button",{onClick:V(e.create,["prevent"]),disabled:e.isSubmitDisabled,class:"button button--primary"}," Create ",8,D)])])}const Y=k(q,[["render",E]]);export{Y as default};
