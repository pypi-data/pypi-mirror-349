import{o as R,m as p}from"./user.Bg1Nd46A.js";import{i as k,d as l}from"./loader.BQDlK3Tc.js";import{a as E}from"./notifications.NSMm1_5U.js";import{c as _}from"./contributions.K_0J8Jft.js";import{h as K}from"./objects.CrQdKsRW.js";import{h as C}from"./user.BEEfOshe.js";import{d as $}from"./dayjs.min.xlbmdZiw.js";import{u as j}from"./index.CwJxcYEt.js";const S={ASSETS_PREFIX:void 0,BASE_URL:"/",DEV:!1,MODE:"production",PROD:!0,PUBLIC_API_URL:"/api",SITE:void 0,SSR:!1},h=S===void 0?"https://62ff903e9350a1e548e1952e.mockapi.io/api":"/api",M=h==="https://62ff903e9350a1e548e1952e.mockapi.io/api",U=M?"series-contributions-for-experiments":"series/contributions/for/experiments",D=M?"series-contributions-for-executions":"series/contributions/for/executions",P=M?"series-executions-calendar":"series/executions/calendar",I=M?"series-executions-metrics/1":"series/executions/metrics",u=j(R),z=["rgb(174, 218, 225)","rgb(139, 201, 212)","rgb(104, 185, 199)","rgb(69, 169, 186)","rgb(34, 153, 173)","rgb(2, 136, 159)"],A=["rgb(252, 215, 234)","rgb(251, 198, 224)","rgb(250, 180, 215)","rgb(248, 163, 206)","rgb(247, 146, 197)","rgb(243, 129, 186)"],L=["rgb(254, 215, 184)","rgb(254, 197, 154)","rgb(253, 180, 123)","rgb(253, 162, 93)","rgb(252, 145, 62)","rgb(249, 128, 34)"],Y=["rgb(247, 181, 235)","rgb(243, 149, 227)","rgb(239, 117, 218)","rgb(236, 85, 209)","rgb(232, 53, 201)","rgb(227, 23, 191)"],B=[z,A,L,Y],b=p({labels:[],datasets:[],state:"empty"});async function N(e){return b.set(e),b.get()}const W=async()=>{b.setKey("state","loading");const e=`${h}/organization/${u.value}/${U}`;try{const t=await fetch(e);if(t.status===403)C(u.value);else if(t.ok){const s=await t.json();let o={labels:s.labels,datasets:s.datasets,state:"ready"};N(o)}else throw new Error(t.statusText)}catch(t){const s={title:"Contributions couldn't be fetched",message:t.message,type:"error"};E(s),b.setKey("state","error")}},ut=async()=>{if(k(),b.get().state==="loading"){l();return}try{await W()}finally{l()}},y=p({labels:[],datasets:[],state:"empty"});async function H(e){return y.set(e),y.get()}const w=p({labels:[],datasets:[],state:"empty"});async function V(e){return w.set(e),w.get()}function X(e){let t=[],s=[];for(const[d,v]of Object.entries(e.experiments)){const n=e.experiments[d].c,a=e.experiments[d].x;for(const[i,m]of Object.entries(n)){let r=-1;const c=t.findIndex(O=>O===i);c!==-1?r=c:(t.push(i),s.push(0),r=t.length-1);const f=_(m);let T=0;f!==null&&(T=f*a.length),s[r]=s[r]+T}}let o={labels:t,datasets:[{data:[...s]}],state:"ready"};H(o)}function q(e){let t=[],s=[];for(const[d,v]of Object.entries(e.experiments)){const n=e.experiments[d].c,a=e.experiments[d].x;for(const i of a){t.push(i[1]);for(const[m,r]of Object.entries(n)){const c=s.findIndex(f=>f.label===m);if(c!==-1)s[c].data.push(_(r));else{const f={label:m,backgroundColor:F(s.length),borderColor:F(s.length),pointRadius:6,pointHoverRadius:8,data:[_(r)]};s.push(f)}}}}let o={labels:t,datasets:[...s],state:"ready"};V(o)}function F(e){return B[e%4][Math.floor(e/4)%6]}const G=async()=>{y.setKey("state","loading"),w.setKey("state","loading");const e=`${h}/organization/${u.value}/${D}`;try{const t=await fetch(e);if(t.status===403)C(u.value);else if(t.ok){const s=await t.json();X(s),q(s)}else throw new Error(t.statusText)}catch(t){const s={title:"Contributions couldn't be fetched",message:t.message,type:"error"};E(s),y.setKey("state","error"),w.setKey("state","error")}},dt=async()=>{k();let e=y.get();if(e.state==="loading"||e.state==="ready"){l();return}try{await G()}finally{l()}},g=p({data:{weeks:[],max:0},state:"empty"});async function J(e){return g.set(e),g.get()}function Q(e){let t={weeks:[],max:0},s=0;const o=$().startOf("day");let n=o.startOf("week").subtract(6,"months").startOf("week"),a={days:[],month:""},i=0;for(;n<=o;){const r=n.format("YYYY-MM-DD"),c=K(e,r)?e[r].total:0;s=Math.max(s,c),a.days.push({dayinweek:((n.day()+6)%7+1).toString(),date:r,total:c}),a.month===""&&(a.month=$(n).format("MMM")),i++,i===7&&(t.weeks.push(a),a={days:[],month:""},i=0),n=n.add(1,"day")}a.days.length&&t.weeks.push(a),t.max=s,J({data:t,state:"ready"})}async function Z(){g.setKey("state","loading");const e=`${h}/organization/${u.value}/${P}`;try{const t=await fetch(e);if(t.status===403)C(u.value);else if(t.ok){const s=await t.json();Q(s)}else throw new Error(t.statusText)}catch(t){const s={title:"Executions couldn't be fetched",message:t.message,type:"error"};E(s),g.setKey("state","error")}}const ft=async()=>{if(k(),g.get().state==="loading"){l();return}try{await Z()}finally{l()}};p({labels:[],datasets:[],state:"empty"});const x=p({distributions:{per_user:{total:[],current_week:[]},per_period:{per_day:[],per_week:[],per_month:[]},impacts:{per_plan:[],per_tag:[]},scores:{per_experiment:[],per_plan:[]}},state:"empty"});async function tt(e){return x.set(e),x.get()}const et=async()=>{x.setKey("state","loading");const e=`${h}/organization/${u.value}/${I}`;try{const t=await fetch(e);if(t.status===403)C(u.value);else if(t.ok){let o={distributions:(await t.json()).distributions,state:"ready"};tt(o)}else throw new Error(t.statusText)}catch(t){const s={title:"Metrics couldn't be fetched",message:t.message,type:"error"};E(s),x.setKey("state","error")}},pt=async()=>{if(k(),x.get().state==="loading"){l();return}try{await et()}finally{l()}};export{ft as a,dt as b,y as c,b as d,g as e,ut as f,pt as l,x as m};
