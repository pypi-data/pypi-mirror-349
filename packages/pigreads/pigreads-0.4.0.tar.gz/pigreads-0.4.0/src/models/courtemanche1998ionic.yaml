name: Courtemanche et al. 1998
description: |
  The human atrial electrophysiology model by Courtemanche, Ramirez and Nattel
  1998 is widely used in both single-cell and tissue-level simulations,
  particularly in studies of atrial fibrillation and action potential dynamics.
  As one of the first detailed and extensively validated atrial model, it is
  considered a benchmark in the field of cardiac electrophysiology.

  Suggested parameters: dt = 0.005ms, dx = 0.25mm, diffusivity = 0.1544 mm^2/ms.
dois:
  - https://doi.org/10.1152/ajpheart.1998.275.1.H301
keywords:
  - excitable media
  - electrophysiology
  - heart
  - human
  - atria
diffusivity:
  V: 1.0
variables:
  V: -81.18 # mV
  Na_i: 11.17 # mM
  K_i: 139.0 # mM
  Ca_i: 0.0001013 # mM
  Ca_up: 1.488 # mM
  Ca_rel: 1.488 # mM
  m: 0.002908
  h: 0.9649
  j: 0.9775
  oa: 0.03043
  oi: 0.9992
  ua: 0.004966
  ui: 0.9986
  xr: 3.296e-05
  xs: 0.01869
  d: 0.0001367
  f: 0.9996
  f_Ca: 0.7755
  u: 0.0
  v: 1.0
  w: 0.9992
parameters:
  # physical constants
  T: 310.0 # K
  F: 96.4867 # C/mmol
  R: 8.3143 # J/K/mol

  # cell
  V_cell: 20100.0 # um^3
  Cm: 100.0 # pF
  V_rel: 96.48 # 0.0048 * V_cell # um^3
  V_i: 13668.0 # 0.68 * V_cell # um^3
  V_up: 1109.52 # 0.0552 * V_cell # um^3
  sigma: 1.0009103049457284 # 1.0 / 7.0 * (exp(Na_o / 67.3) - 1.0)

  # equilibrium potentials
  Ca_o: 1.8 # mM
  K_o: 5.4 # mM
  Na_o: 140.0 # mM

  # I_Na: fast Na current
  g_Na: 7.8 # nS/pF

  # I_K1: time-independent inward rectifier K current
  g_K1: 0.09 # nS/pF

  # I_to: transient outward K current
  g_to: 0.1652 # nS/pF
  K_Q10: 3.0 # non-dimensional

  # I_Kur: ultrarapid delayed rectifier K current

  # I_Kr: rapid delayed outward rectifier K current
  g_Kr: 2.94117649999999994e-02 # nS/pF

  # I_Ks: slow delayed outward rectifier K current
  g_Ks: 1.29411759999999987e-01 # nS/pF

  # I_CaL: sarcolemnal Ca current
  g_Ca_L: 0.12375 # nS/pF
  ical_f_Ca_tau: 2.0 # ms

  # I_NaK: Na-K pump current
  i_NaK_max: 5.99338739999999981e-01 # pA/pF
  Km_Na_i: 10.0 # mM
  Km_K_o: 1.5 # mM

  # I_NaCa: Na-Ca exchanger current
  I_NaCa_max: 1600.0 # pA/pF
  inaca_gamma: 0.35 # non-dimensional
  K_mNa: 87.5 # mM
  K_mCa: 1.38 # mM
  K_sat: 0.1 # non-dimensional

  # background currents
  g_B_Na: 6.74437500000000015e-04 # nS/pF
  g_B_Ca: 0.001131 # nS/pF
  g_B_K: 0.0 # nS/pF

  # intracellular ca dynamics
  i_PCa_max: 0.275 # pA/pF
  I_up_max: 0.005 # mM/ms
  K_up: 0.00092 # mM
  Ca_up_max: 15.0 # mM
  cajsr_u_tau: 8.0 # ms
  tau_tr: 180.0 # ms
  K_rel: 30.0 # 1/ms

  # Ca buffers
  CMDN_max: 0.05 # mM
  CSQN_max: 10.0 # mM
  TRPN_max: 0.07 # mM
  Km_CMDN: 0.00238 # mM
  Km_CSQN: 0.8 # mM
  Km_TRPN: 0.0005 # mM
code: |
  // extracellular currents
  // calculate i_Na
  const Real ina_j_beta = ((V < -(Real)(40.0)) ? (Real)(0.1212) * exp(-(Real)(0.01052) * V) / ((Real)(1.0) + exp(-(Real)(0.1378) * (V + (Real)(40.14)))) : (Real)(0.3) * exp(-(Real)(2.535e-07) * V) / ((Real)(1.0) + exp(-(Real)(0.1) * (V + (Real)(32.0)))));
  const Real ina_j_alpha = ((V < -(Real)(40.0)) ? (-(Real)(127140.0) * exp((Real)(0.2444) * V) - (Real)(3.474e-05) * exp(-(Real)(0.04391) * V)) * (V + (Real)(37.78)) / ((Real)(1.0) + exp((Real)(0.311) * (V + (Real)(79.23)))) : (Real)(0.0));
  const Real ina_j_tau = (Real)(1.0) / (ina_j_alpha + ina_j_beta);
  const Real ina_j_inf = ina_j_alpha / (ina_j_alpha + ina_j_beta);
  *_new_j = ina_j_inf + (j - ina_j_inf)*exp(-dt/ina_j_tau);

  const Real ina_m_beta = (Real)(0.08) * exp(-V / (Real)(11.0));
  // (singularity)
  const Real ina_m_alpha = ((fabs(V + (Real)(47.13)) < (Real)(1e-5)) ? (Real)(3.2) : (Real)(0.32) * (V + (Real)(47.13)) / ((Real)(1.0) - exp(-(Real)(0.1) * (V + (Real)(47.13)))));
  const Real ina_m_inf = ina_m_alpha / (ina_m_alpha + ina_m_beta);
  const Real ina_m_tau = (Real)(1.0) / (ina_m_alpha + ina_m_beta);
  *_new_m = ina_m_inf + (m - ina_m_inf)*exp(-dt/ina_m_tau);

  const Real ina_h_alpha = ((V < -(Real)(40.0)) ? (Real)(0.135) * exp((V + (Real)(80.0)) / -(Real)(6.8)) : (Real)(0.0));
  const Real ina_h_beta = ((V < -(Real)(40.0)) ? (Real)(3.56) * exp((Real)(0.079) * V) + (Real)(310000.0) * exp((Real)(0.35) * V) : (Real)(1.0) / ((Real)(0.13) * ((Real)(1.0) + exp((V + (Real)(10.66)) / -(Real)(11.1)))));
  const Real ina_h_inf = ina_h_alpha / (ina_h_alpha + ina_h_beta);
  const Real ina_h_tau = (Real)(1.0) / (ina_h_alpha + ina_h_beta);
  *_new_h = ina_h_inf + (h - ina_h_inf)*exp(-dt/ina_h_tau);

  const Real E_Na = R * T / F * log(Na_o / Na_i);
  const Real i_Na =  Cm * g_Na * m*m*m * h * j * (V - E_Na);

  // calculate i_K1
  const Real E_K = R * T / F * log(K_o / K_i);
  const Real i_K1 = Cm * g_K1 * (V - E_K) / ((Real)(1.0) + exp((Real)(0.07) * (V + (Real)(80.0))));

  // calculate i_to
  const Real ito_oi_beta = pow((Real)(35.56) + (Real)(1.0) * exp((V - -(Real)(10.0) - (Real)(8.74)) / -(Real)(7.44)), -(Real)(1.0));
  const Real ito_oi_alpha = pow((Real)(18.53) + (Real)(1.0) * exp((V - -(Real)(10.0) + (Real)(103.7)) / (Real)(10.95)), -(Real)(1.0));
  const Real ito_oi_inf = pow((Real)(1.0) + exp((V - -(Real)(10.0) + (Real)(33.1)) / (Real)(5.3)), -(Real)(1.0));
  const Real ito_oi_tau = pow(ito_oi_alpha + ito_oi_beta, -(Real)(1.0)) / K_Q10;
  *_new_oi = ito_oi_inf + (oi - ito_oi_inf)*exp(-dt/ito_oi_tau);

  const Real ito_oa_alpha = (Real)(0.65) / (exp((V - -(Real)(10.0)) / -(Real)(8.5)) + exp((V - -(Real)(10.0) - (Real)(40.0)) / -(Real)(59.0)));
  const Real ito_oa_beta = (Real)(0.65) / ((Real)(2.5) + exp((V - -(Real)(10.0) + (Real)(72.0)) / (Real)(17.0)));
  const Real ito_oa_inf = pow((Real)(1.0) + exp((V - -(Real)(10.0) + (Real)(10.47)) / -(Real)(17.54)), -(Real)(1.0));
  const Real ito_oa_tau = pow(ito_oa_alpha + ito_oa_beta, -(Real)(1.0)) / K_Q10;
  *_new_oa = ito_oa_inf + (oa - ito_oa_inf)*exp(-dt/ito_oa_tau);

  const Real i_to = Cm * g_to * oa*oa*oa * oi * (V - E_K);

  // calculate i_Kur
  const Real ikur_ua_inf = pow((Real)(1.0) + exp((V - -(Real)(10.0) + (Real)(20.3)) / -(Real)(9.6)), -(Real)(1.0));
  const Real ikur_ua_beta = (Real)(0.65) / ((Real)(2.5) + exp((V - -(Real)(10.0) + (Real)(72.0)) / (Real)(17.0)));
  const Real ikur_ua_alpha = (Real)(0.65) / (exp((V - -(Real)(10.0)) / -(Real)(8.5)) + exp((V - -(Real)(10.0) - (Real)(40.0)) / -(Real)(59.0)));
  const Real ikur_ua_tau = pow(ikur_ua_alpha + ikur_ua_beta, -(Real)(1.0)) / K_Q10;
  *_new_ua = ikur_ua_inf + (ua - ikur_ua_inf)*exp(-dt/ikur_ua_tau);

  const Real ikur_ui_inf = pow((Real)(1.0) + exp((V - -(Real)(10.0) - (Real)(109.45)) / (Real)(27.48)), -(Real)(1.0));
  const Real ikur_ui_tau_alpha = pow((Real)(21.0) + (Real)(1.0) * exp((V - -(Real)(10.0) - (Real)(195.0)) / -(Real)(28.0)), -(Real)(1.0));
  const Real ikur_ui_tau_beta = (Real)(1.0) / exp((V - -(Real)(10.0) - (Real)(168.0)) / -(Real)(16.0));
  const Real ikur_ui_tau = pow(ikur_ui_tau_alpha + ikur_ui_tau_beta, -(Real)(1.0)) / K_Q10;
  *_new_ui = ikur_ui_inf + (ui - ikur_ui_inf)*exp(-dt/ikur_ui_tau);

  const Real g_Kur = (Real)(0.005) + (Real)(0.05) / ((Real)(1.0) + exp((V - (Real)(15.0)) / -(Real)(13.0)));

  const Real i_Kur = Cm * g_Kur * ua*ua*ua * ui * (V - E_K);

  // calculate i_Kr
  const Real ikr_xr_inf = pow((Real)(1.0) + exp((V + (Real)(14.1)) / -(Real)(6.5)), -(Real)(1.0));
  // (singularity)
  const Real ikr_xr_tau_beta = ((fabs(V - (Real)(3.3328)) < (Real)(1e-5)) ? (Real)(3.78361180000000004e-04) : (Real)(7.38980000000000030e-05) * (V - (Real)(3.3328)) / (exp((V - (Real)(3.3328)) / (Real)(5.1237)) - (Real)(1.0)));
  const Real ikr_xr_tau_alpha = ((fabs(V + (Real)(14.1)) < (Real)(1e-5)) ? (Real)(0.0015) : (Real)(0.0003) * (V + (Real)(14.1)) / ((Real)(1.0) - exp((V + (Real)(14.1)) / -(Real)(5.0))));
  const Real ikr_xr_tau = pow(ikr_xr_tau_alpha + ikr_xr_tau_beta, -(Real)(1.0));
  *_new_xr = ikr_xr_inf + (xr - ikr_xr_inf)*exp(-dt/ikr_xr_tau);

  const Real i_Kr = Cm * g_Kr * xr * (V - E_K) / ((Real)(1.0) + exp((V + (Real)(15.0)) / (Real)(22.4)));

  // calculate i_Ks
  const Real iks_xs_inf = pow((Real)(1.0) + exp((V - (Real)(19.9)) / -(Real)(12.7)), -(Real)(0.5));
  // (singularity)
  const Real iks_xs_tau_beta = ((fabs(V - (Real)(19.9)) < (Real)(1e-5)) ? (Real)(0.000315) : (Real)(3.5e-05) * (V - (Real)(19.9)) / (exp((V - (Real)(19.9)) / (Real)(9.0)) - (Real)(1.0)));
  const Real iks_xs_tau_alpha = ((fabs(V - (Real)(19.9)) < (Real)(1e-5)) ? (Real)(0.00068) : (Real)(4e-05) * (V - (Real)(19.9)) / ((Real)(1.0) - exp((V - (Real)(19.9)) / -(Real)(17.0))));
  const Real iks_xs_tau = (Real)(0.5) / (iks_xs_tau_alpha + iks_xs_tau_beta);
  *_new_xs = iks_xs_inf + (xs - iks_xs_inf)*exp(-dt/iks_xs_tau);
  const Real i_Ks = Cm * g_Ks * xs*xs * (V - E_K);

  // calculate i_Ca_L
  const Real ical_f_inf = exp(-(V + (Real)(28.0)) / (Real)(6.9)) / ((Real)(1.0) + exp(-(V + (Real)(28.0)) / (Real)(6.9)));
  const Real ical_f_tau = (Real)(9.0) * pow((Real)(0.0197) * exp(-pow((Real)(0.0337), (Real)(2.0)) * pow(V + (Real)(10.0), (Real)(2.0))) + (Real)(0.02), -(Real)(1.0));
  *_new_f = ical_f_inf + (f - ical_f_inf)*exp(-dt/ical_f_tau);

  const Real ical_f_Ca_inf = pow((Real)(1.0) + Ca_i / (Real)(0.00035), -(Real)(1.0));
  *_new_f_Ca = ical_f_Ca_inf + (f_Ca - ical_f_Ca_inf)*exp(-dt/ical_f_Ca_tau);

  const Real ical_d_inf = pow((Real)(1.0) + exp((V + (Real)(10.0)) / -(Real)(8.0)), -(Real)(1.0));
  const Real ical_d_tau = ((fabs(V + (Real)(10.0)) < (Real)(1e-10)) ? (Real)(4.579) / ((Real)(1.0) + exp((V + (Real)(10.0)) / -(Real)(6.24))) : ((Real)(1.0) - exp((V + (Real)(10.0)) / -(Real)(6.24))) / ((Real)(0.035) * (V + (Real)(10.0)) * ((Real)(1.0) + exp((V + (Real)(10.0)) / -(Real)(6.24)))));
  *_new_d = ical_d_inf + (d - ical_d_inf)*exp(-dt/ical_d_tau);

  const Real i_Ca_L = Cm * g_Ca_L * d * f * f_Ca * (V - (Real)(65.0));

  // calculate I_B_*
  const Real E_Ca = R * T / ((Real)(2.0) * F) * log(Ca_o / Ca_i);
  const Real i_B_K = Cm * g_B_K * (V - E_K);
  const Real i_B_Ca = Cm * g_B_Ca * (V - E_Ca);
  const Real i_B_Na = Cm * g_B_Na * (V - E_Na);

  // calculate i_NaK
  const Real f_NaK = pow((Real)(1.0) + (Real)(0.1245) * exp(-(Real)(0.1) * F * V / (R * T)) + (Real)(0.0365) * sigma * exp(-F * V / (R * T)), -(Real)(1.0));
  const Real i_NaK = Cm * i_NaK_max * f_NaK * (Real)(1.0) / ((Real)(1.0) + pow(Km_Na_i / Na_i, (Real)(1.5))) * K_o / (K_o + Km_K_o);

  // calculate i_PCa
  const Real i_PCa = Cm * i_PCa_max * Ca_i / ((Real)(0.0005) + Ca_i);

  // calculate i_NaCa
  const Real i_NaCa = Cm * I_NaCa_max * (exp(inaca_gamma * F * V / (R * T)) * Na_i*Na_i*Na_i * Ca_o - exp((inaca_gamma - (Real)(1.0)) * F * V / (R * T)) * Na_o*Na_o*Na_o * Ca_i) / ((K_mNa*K_mNa*K_mNa + Na_o*Na_o*Na_o) * (K_mCa + Ca_o) * ((Real)(1.0) + K_sat * exp((inaca_gamma - (Real)(1.0)) * V * F / (R * T))));

  // misc
  const Real i_up = I_up_max / ((Real)(1.0) + K_up / Ca_i);
  const Real i_up_leak = I_up_max * Ca_up / Ca_up_max;
  const Real i_tr = (Ca_up - Ca_rel) / tau_tr;

  // intracellular Ca-currents
  const Real i_rel = K_rel * u*u * v * w * (Ca_rel - Ca_i);
  const Real cajsr_w_inf = (Real)(1.0) - pow((Real)(1.0) + exp(-(V - (Real)(40.0)) / (Real)(17.0)), -(Real)(1.0));
  const Real cajsr_w_tau = ((fabs(V - (Real)(7.9)) < (Real)(1e-10)) ? (Real)(6.0) * (Real)(0.2) / (Real)(1.3) : (Real)(6.0) * ((Real)(1.0) - exp(-(V - (Real)(7.9)) / (Real)(5.0))) / (((Real)(1.0) + (Real)(0.3) * exp(-(V - (Real)(7.9)) / (Real)(5.0))) * (Real)(1.0) * (V - (Real)(7.9))));
  *_new_w = cajsr_w_inf + (w - cajsr_w_inf)*exp(-dt/cajsr_w_tau);

  const Real Fn = (Real)(1000.0) * ((Real)(1e-15) * V_rel * i_rel - (Real)(1e-15) / ((Real)(2.0) * F) * ((Real)(0.5) * i_Ca_L - (Real)(0.2) * i_NaCa));
  const Real cajsr_v_inf = (Real)(1.0) - pow((Real)(1.0) + exp(-(Fn - (Real)(6.835e-14)) / (Real)(1.367e-15)), -(Real)(1.0));
  const Real cajsr_v_tau = (Real)(1.91) + (Real)(2.09) / ((Real)(1.0) + exp(-(Fn - (Real)(3.41749999999999983e-13)) / (Real)(1.367e-15)));
  *_new_v = cajsr_v_inf + (v - cajsr_v_inf)*exp(-dt/cajsr_v_tau);

  const Real cajsr_u_inf = pow((Real)(1.0) + exp(-(Fn - (Real)(3.41749999999999983e-13)) / (Real)(1.367e-15)), -(Real)(1.0));
  *_new_u = cajsr_u_inf + (u - cajsr_u_inf)*exp(-dt/cajsr_u_tau);

  // total current
  const Real i_ion = i_Na + i_K1 + i_to + i_Kur + i_Kr + i_Ks + i_B_Na + i_B_Ca + i_NaK + i_PCa + i_NaCa + i_Ca_L;

  // update concentrations
  *_new_Na_i = Na_i + dt * ((-(Real)(3.0) * i_NaK - ((Real)(3.0) * i_NaCa + i_B_Na + i_Na)) / (V_i * F));
  *_new_K_i = K_i + dt * (((Real)(2.0) * i_NaK - (i_K1 + i_to + i_Kur + i_Kr + i_Ks + i_B_K)) / (V_i * F));
  *_new_Ca_rel = Ca_rel + dt * ((i_tr - i_rel) * pow((Real)(1.0) + CSQN_max * Km_CSQN / pow(Ca_rel + Km_CSQN, (Real)(2.0)), -(Real)(1.0)));
  *_new_Ca_up = Ca_up + dt * (i_up - (i_up_leak + i_tr * V_rel / V_up));
  *_new_Ca_i = Ca_i + dt * (((Real)(2.0) * i_NaCa - (i_PCa + i_Ca_L + i_B_Ca)) / ((Real)(2.0) * V_i * F) + (V_up * (i_up_leak - i_up) + i_rel * V_rel) / V_i) / ((Real)(1.0) + TRPN_max * Km_TRPN / pow(Ca_i + Km_TRPN, (Real)(2.0)) + CMDN_max * Km_CMDN / pow(Ca_i + Km_CMDN, (Real)(2.0)));

  // update voltage
  *_new_V = V + dt * (_diffuse_V - i_ion/Cm);
