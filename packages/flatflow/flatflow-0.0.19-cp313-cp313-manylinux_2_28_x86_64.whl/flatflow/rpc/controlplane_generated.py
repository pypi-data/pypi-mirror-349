# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flatflow

import flatbuffers
from flatbuffers.compat import import_numpy
from typing import Any
from flatflow.ops.graph_generated import Graph
from typing import Optional
np = import_numpy()

class InitRequest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset: int = 0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = InitRequest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsInitRequest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # InitRequest
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # InitRequest
    def GlobalBatchSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # InitRequest
    def MicroBatchSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # InitRequest
    def Graph(self) -> Optional[Graph]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = Graph()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # InitRequest
    def Sizes(self, j: int):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # InitRequest
    def SizesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # InitRequest
    def SizesLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # InitRequest
    def SizesIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def InitRequestStart(builder: flatbuffers.Builder):
    builder.StartObject(4)

def InitRequestAddGlobalBatchSize(builder: flatbuffers.Builder, globalBatchSize: int):
    builder.PrependUint64Slot(0, globalBatchSize, 0)

def InitRequestAddMicroBatchSize(builder: flatbuffers.Builder, microBatchSize: int):
    builder.PrependUint64Slot(1, microBatchSize, 0)

def InitRequestAddGraph(builder: flatbuffers.Builder, graph: int):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(graph), 0)

def InitRequestAddSizes(builder: flatbuffers.Builder, sizes: int):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(sizes), 0)

def InitRequestStartSizesVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def InitRequestEnd(builder: flatbuffers.Builder) -> int:
    return builder.EndObject()



class BroadcastRequest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset: int = 0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = BroadcastRequest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsBroadcastRequest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # BroadcastRequest
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # BroadcastRequest
    def Epoch(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # BroadcastRequest
    def Rank(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # BroadcastRequest
    def Indices(self, j: int):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # BroadcastRequest
    def IndicesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint64Flags, o)
        return 0

    # BroadcastRequest
    def IndicesLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # BroadcastRequest
    def IndicesIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def BroadcastRequestStart(builder: flatbuffers.Builder):
    builder.StartObject(3)

def BroadcastRequestAddEpoch(builder: flatbuffers.Builder, epoch: int):
    builder.PrependUint64Slot(0, epoch, 0)

def BroadcastRequestAddRank(builder: flatbuffers.Builder, rank: int):
    builder.PrependUint64Slot(1, rank, 0)

def BroadcastRequestAddIndices(builder: flatbuffers.Builder, indices: int):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(indices), 0)

def BroadcastRequestStartIndicesVector(builder, numElems: int) -> int:
    return builder.StartVector(8, numElems, 8)

def BroadcastRequestEnd(builder: flatbuffers.Builder) -> int:
    return builder.EndObject()



class BroadcastResponse(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset: int = 0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = BroadcastResponse()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsBroadcastResponse(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # BroadcastResponse
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # BroadcastResponse
    def Indices(self, j: int):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # BroadcastResponse
    def IndicesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint64Flags, o)
        return 0

    # BroadcastResponse
    def IndicesLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # BroadcastResponse
    def IndicesIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def BroadcastResponseStart(builder: flatbuffers.Builder):
    builder.StartObject(1)

def BroadcastResponseAddIndices(builder: flatbuffers.Builder, indices: int):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(indices), 0)

def BroadcastResponseStartIndicesVector(builder, numElems: int) -> int:
    return builder.StartVector(8, numElems, 8)

def BroadcastResponseEnd(builder: flatbuffers.Builder) -> int:
    return builder.EndObject()



