---
description: Index of all Cursor rules
globs:
alwaysApply: true
---
# Cursor Rules Index

This index provides an overview of all Cursor rules currently defined in the project. Each rule is listed with a short description and a link to its file.

## Available Rules

- **[cursor-rules.mdc](mdc:cursor-rules.mdc)**: How to add or edit Cursor rules in the project, including naming, location, and structure requirements.
- **[docstring-guidelines.mdc](mdc:docstring-guidelines.mdc)**: Guidelines for writing docstrings, focusing on behavior and purpose, using Google style, and avoiding type repetition.
- **[formatting-guidelines.mdc](mdc:formatting-guidelines.mdc)**: Code formatting rules, enforced by `ruff`, including line length, string style, indentation, and import sorting.
- **[function-arguments.mdc](mdc:function-arguments.mdc)**: Rules for function argument style, requiring keyword arguments for complex or same-type arguments, and positional for simple cases.
- **[linting-guidelines.mdc](mdc:linting-guidelines.mdc)**: Code linting requirements, tools used (`ruff`, `bandit`, `mypy`), commands, and best practices for passing all checks.
- **[project-structure.mdc](mdc:project-structure.mdc)**: Project structure guidelines, including use of `src` layout, test organization, and API export/import best practices.
- **[testing-guidelines.mdc](mdc:testing-guidelines.mdc)**: Testing guidelines, emphasizing integration tests, fixture usage, test file structure, and running tests.
- **[typing-guidelines.mdc](mdc:typing-guidelines.mdc)**: Type annotation rules, requiring full type coverage, use of Python 3.11+ features, and best practices for maintainable types.

## How to Add or Edit Rules

See [cursor-rules.mdc](mdc:cursor-rules.mdc) for instructions on adding or editing rules, including file naming, placement, and formatting.

---

> For details on each rule, open the corresponding `.mdc` file in `.cursor/rules/`.

