---
description: Project structure
globs:
alwaysApply: false
---
# Project Structure Guidelines

This document outlines our guidelines for project structure and organization.

## Core Principles

1. Use `src` layout for Python projects
2. Keep tests in a separate `tests` directory
3. Follow consistent module organization
4. Maintain clear separation of concerns

## Directory Structure

```
project_root/
├── src/
│   └── psycopg_toolbox/
│       ├── __init__.py
│       ├── context_managers.py
│       ├── exceptions.py
│       ├── logging.py
│       └── testfixtures.py  # Reusable test fixtures that are part of the public API
├── tests/
│   ├── conftest.py         # Project-specific test fixtures
│   ├── test_context_managers.py
│   ├── test_exceptions.py
│   └── test_logging.py
├── pyproject.toml
└── README.md
```

### Key Points

1. All application code lives in the `src` directory
2. All test code lives in the `tests` directory
3. No `__init__.py` files in the `tests` directory
4. Test files mirror the structure of the source code
5. Test files are named `test_*.py`

## Module Organization

### Source Code (`src/`)

1. Package code is organized in modules under `src/psycopg_toolbox/`
2. Each module should have a clear, single responsibility
3. Use `__init__.py` files to expose public API
4. Keep related functionality together
5. Use subpackages for major feature separation
6. Place reusable test fixtures in `src/` if they are part of the public API

Example:
```
src/
└── psycopg_toolbox/
    ├── __init__.py
    ├── context_managers.py
    ├── exceptions.py
    ├── logging.py
    └── testfixtures.py  # Reusable test fixtures
```

### Tests (`tests/`)

1. Test files mirror the structure of the source code
2. Test files are named `test_*.py`
3. No `__init__.py` files in the tests directory
4. Test files should be focused and test one module
5. Use fixtures for common test setup
6. Project-specific fixtures go in `conftest.py`

Example:
```
tests/
├── conftest.py           # Project-specific fixtures
├── test_context_managers.py
├── test_exceptions.py
└── test_logging.py
```

## Best Practices

1. Keep the `src` directory clean and organized
2. Maintain a flat structure in the `tests` directory
3. Use clear, descriptive names for modules and test files
4. Keep related functionality together
5. Use subpackages for major feature separation
6. Place reusable test fixtures in `src/` if they are part of the public API
7. Place project-specific fixtures in `tests/conftest.py`

## Rationale

1. `src` layout prevents import issues
2. Separate test directory makes it clear what is test code
3. No `__init__.py` in tests prevents accidental imports
4. Consistent structure makes the codebase easier to navigate
5. Clear organization helps maintain code quality
6. Reusable test fixtures in `src/` make them available to library consumers

## Common Mistakes

### Bad Structure

```
project_root/
├── psycopg_toolbox/
│   ├── __init__.py
│   ├── context_managers.py
│   └── exceptions.py
├── tests/
│   ├── __init__.py  # Don't do this
│   ├── test_context_managers.py
│   └── test_exceptions.py
└── setup.py
```

### Good Structure

```
project_root/
├── src/
│   └── psycopg_toolbox/
│       ├── __init__.py
│       ├── context_managers.py
│       ├── exceptions.py
│       └── testfixtures.py  # Reusable test fixtures
├── tests/
│   ├── conftest.py         # Project-specific fixtures
│   ├── test_context_managers.py
│   └── test_exceptions.py
└── pyproject.toml
```

## API Exports and Imports

### Public API Exports

1. All public symbols that form the API should be exported from the top-level `__init__.py`
2. Internal implementation details should not be exported
3. Use `__all__` to explicitly define what is exported
4. Keep the public API minimal and well-documented
5. Include reusable test fixtures in the public API if they are meant to be used by consumers

Example of a good `__init__.py`:
```python
"""Psycopg Toolbox - Utilities for working with psycopg v3.

This package provides useful utilities and context managers for working with psycopg v3,
including role switching, advisory locks, autocommit management, and custom exceptions.
"""

from .context_managers import (
    autocommit,
    switch_role,
    obtain_advisory_lock,
)
from .exceptions import (
    AlreadyExistsError,
    DatabaseError,
    RoleError,
    UserError,
)
from .logging import (
    LoggingConnection,
    LoggingCursor,
)
from .testfixtures import (  # Reusable test fixtures
    db_connection,
    test_database,
)

__all__ = [
    "autocommit",
    "switch_role",
    "obtain_advisory_lock",
    "AlreadyExistsError",
    "DatabaseError",
    "RoleError",
    "UserError",
    "LoggingConnection",
    "LoggingCursor",
    # Test fixtures
    "db_connection",
    "test_database",
]
```

### Internal Imports

1. Internal code should use relative imports where possible
2. Avoid using top-level imports for internal code to prevent circular dependencies
3. Use absolute imports only when necessary
4. Keep import paths as short as possible

Examples:

```python
# Good - Using relative imports
from .exceptions import AlreadyExistsError
from .logging import LoggingConnection

# Bad - Using top-level imports for internal code
from psycopg_toolbox.exceptions import AlreadyExistsError
from psycopg_toolbox.logging import LoggingConnection
```

### Import Best Practices

1. Group imports in the following order:
   - Standard library imports
   - Third-party imports
   - Local application imports
2. Use absolute imports for standard library and third-party packages
3. Use relative imports for local application imports
4. Avoid circular dependencies by careful module organization
5. Keep import statements at the top of the file

Example:
```python
# Standard library imports
import logging
from collections.abc import AsyncGenerator
from contextlib import asynccontextmanager

# Third-party imports
from psycopg import AsyncConnection
from psycopg.errors import DuplicateDatabase

# Local application imports
from .exceptions import AlreadyExistsError
from .logging import LoggingConnection
```

## Rationale

1. Clear public API makes the package easier to use
2. Explicit exports prevent accidental exposure of internal details
3. Relative imports help prevent circular dependencies
4. Consistent import style makes code more maintainable
5. Proper import organization improves code readability
6. Reusable test fixtures in `src/` make them available to library consumers
