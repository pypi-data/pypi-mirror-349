# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from . import requests_pb2 as requests__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in gateway_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class GatewayServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Enqueue = channel.unary_unary(
                '/hyrex.performanceserver.GatewayService/Enqueue',
                request_serializer=requests__pb2.EnqueueTaskRequest.SerializeToString,
                response_deserializer=requests__pb2.EnqueueTaskResponse.FromString,
                _registered_method=True)
        self.Dequeue = channel.unary_unary(
                '/hyrex.performanceserver.GatewayService/Dequeue',
                request_serializer=requests__pb2.DequeueTaskRequest.SerializeToString,
                response_deserializer=requests__pb2.DequeueTaskResponse.FromString,
                _registered_method=True)
        self.GetQueues = channel.unary_unary(
                '/hyrex.performanceserver.GatewayService/GetQueues',
                request_serializer=requests__pb2.GetQueuesRequest.SerializeToString,
                response_deserializer=requests__pb2.GetQueuesResponse.FromString,
                _registered_method=True)
        self.GetTaskStatus = channel.unary_unary(
                '/hyrex.performanceserver.GatewayService/GetTaskStatus',
                request_serializer=requests__pb2.GetTaskStatusRequest.SerializeToString,
                response_deserializer=requests__pb2.GetTaskStatusResponse.FromString,
                _registered_method=True)
        self.MarkSuccess = channel.unary_unary(
                '/hyrex.performanceserver.GatewayService/MarkSuccess',
                request_serializer=requests__pb2.MarkSuccessRequest.SerializeToString,
                response_deserializer=requests__pb2.MarkSuccessResponse.FromString,
                _registered_method=True)
        self.MarkFailed = channel.unary_unary(
                '/hyrex.performanceserver.GatewayService/MarkFailed',
                request_serializer=requests__pb2.MarkFailedRequest.SerializeToString,
                response_deserializer=requests__pb2.MarkFailedResponse.FromString,
                _registered_method=True)
        self.GetTaskRun = channel.unary_unary(
                '/hyrex.performanceserver.GatewayService/GetTaskRun',
                request_serializer=requests__pb2.GetTaskRunRequest.SerializeToString,
                response_deserializer=requests__pb2.GetTaskRunResponse.FromString,
                _registered_method=True)
        self.GetDurableTasks = channel.unary_unary(
                '/hyrex.performanceserver.GatewayService/GetDurableTasks',
                request_serializer=requests__pb2.GetDurableRunTasksRequest.SerializeToString,
                response_deserializer=requests__pb2.GetDurableRunTasksResponse.FromString,
                _registered_method=True)
        self.RegisterTask = channel.unary_unary(
                '/hyrex.performanceserver.GatewayService/RegisterTask',
                request_serializer=requests__pb2.RegisterTaskRequest.SerializeToString,
                response_deserializer=requests__pb2.RegisterTaskResponse.FromString,
                _registered_method=True)
        self.GetTask = channel.unary_unary(
                '/hyrex.performanceserver.GatewayService/GetTask',
                request_serializer=requests__pb2.GetTaskRequest.SerializeToString,
                response_deserializer=requests__pb2.GetTaskResponse.FromString,
                _registered_method=True)
        self.GetAllTasks = channel.unary_unary(
                '/hyrex.performanceserver.GatewayService/GetAllTasks',
                request_serializer=requests__pb2.GetAllTasksRequest.SerializeToString,
                response_deserializer=requests__pb2.GetAllTasksResponse.FromString,
                _registered_method=True)
        self.RegisterExecutor = channel.unary_unary(
                '/hyrex.performanceserver.GatewayService/RegisterExecutor',
                request_serializer=requests__pb2.RegisterExecutorRequest.SerializeToString,
                response_deserializer=requests__pb2.RegisterExecutorResponse.FromString,
                _registered_method=True)
        self.UpdateExecutorQueues = channel.unary_unary(
                '/hyrex.performanceserver.GatewayService/UpdateExecutorQueues',
                request_serializer=requests__pb2.UpdateExecutorQueuesRequest.SerializeToString,
                response_deserializer=requests__pb2.UpdateExecutorQueuesResponse.FromString,
                _registered_method=True)
        self.RegisterApp = channel.unary_unary(
                '/hyrex.performanceserver.GatewayService/RegisterApp',
                request_serializer=requests__pb2.RegisterAppRequest.SerializeToString,
                response_deserializer=requests__pb2.RegisterAppResponse.FromString,
                _registered_method=True)
        self.SetLogLink = channel.unary_unary(
                '/hyrex.performanceserver.GatewayService/SetLogLink',
                request_serializer=requests__pb2.SetLogLinkRequest.SerializeToString,
                response_deserializer=requests__pb2.SetLogLinkResponse.FromString,
                _registered_method=True)
        self.AcquireSchedulerLock = channel.unary_unary(
                '/hyrex.performanceserver.GatewayService/AcquireSchedulerLock',
                request_serializer=requests__pb2.AcquireSchedulerLockRequest.SerializeToString,
                response_deserializer=requests__pb2.AcquireSchedulerLockResponse.FromString,
                _registered_method=True)
        self.PostTaskStatusCounts = channel.unary_unary(
                '/hyrex.performanceserver.GatewayService/PostTaskStatusCounts',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.QueueWaitingTasks = channel.unary_unary(
                '/hyrex.performanceserver.GatewayService/QueueWaitingTasks',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)


class GatewayServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Enqueue(self, request, context):
        """Valkey requests
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Dequeue(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetQueues(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTaskStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MarkSuccess(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MarkFailed(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTaskRun(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDurableTasks(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterTask(self, request, context):
        """Postgres requests
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllTasks(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterExecutor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateExecutorQueues(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterApp(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetLogLink(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AcquireSchedulerLock(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PostTaskStatusCounts(self, request, context):
        """Crons
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueueWaitingTasks(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GatewayServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Enqueue': grpc.unary_unary_rpc_method_handler(
                    servicer.Enqueue,
                    request_deserializer=requests__pb2.EnqueueTaskRequest.FromString,
                    response_serializer=requests__pb2.EnqueueTaskResponse.SerializeToString,
            ),
            'Dequeue': grpc.unary_unary_rpc_method_handler(
                    servicer.Dequeue,
                    request_deserializer=requests__pb2.DequeueTaskRequest.FromString,
                    response_serializer=requests__pb2.DequeueTaskResponse.SerializeToString,
            ),
            'GetQueues': grpc.unary_unary_rpc_method_handler(
                    servicer.GetQueues,
                    request_deserializer=requests__pb2.GetQueuesRequest.FromString,
                    response_serializer=requests__pb2.GetQueuesResponse.SerializeToString,
            ),
            'GetTaskStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTaskStatus,
                    request_deserializer=requests__pb2.GetTaskStatusRequest.FromString,
                    response_serializer=requests__pb2.GetTaskStatusResponse.SerializeToString,
            ),
            'MarkSuccess': grpc.unary_unary_rpc_method_handler(
                    servicer.MarkSuccess,
                    request_deserializer=requests__pb2.MarkSuccessRequest.FromString,
                    response_serializer=requests__pb2.MarkSuccessResponse.SerializeToString,
            ),
            'MarkFailed': grpc.unary_unary_rpc_method_handler(
                    servicer.MarkFailed,
                    request_deserializer=requests__pb2.MarkFailedRequest.FromString,
                    response_serializer=requests__pb2.MarkFailedResponse.SerializeToString,
            ),
            'GetTaskRun': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTaskRun,
                    request_deserializer=requests__pb2.GetTaskRunRequest.FromString,
                    response_serializer=requests__pb2.GetTaskRunResponse.SerializeToString,
            ),
            'GetDurableTasks': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDurableTasks,
                    request_deserializer=requests__pb2.GetDurableRunTasksRequest.FromString,
                    response_serializer=requests__pb2.GetDurableRunTasksResponse.SerializeToString,
            ),
            'RegisterTask': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterTask,
                    request_deserializer=requests__pb2.RegisterTaskRequest.FromString,
                    response_serializer=requests__pb2.RegisterTaskResponse.SerializeToString,
            ),
            'GetTask': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTask,
                    request_deserializer=requests__pb2.GetTaskRequest.FromString,
                    response_serializer=requests__pb2.GetTaskResponse.SerializeToString,
            ),
            'GetAllTasks': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllTasks,
                    request_deserializer=requests__pb2.GetAllTasksRequest.FromString,
                    response_serializer=requests__pb2.GetAllTasksResponse.SerializeToString,
            ),
            'RegisterExecutor': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterExecutor,
                    request_deserializer=requests__pb2.RegisterExecutorRequest.FromString,
                    response_serializer=requests__pb2.RegisterExecutorResponse.SerializeToString,
            ),
            'UpdateExecutorQueues': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateExecutorQueues,
                    request_deserializer=requests__pb2.UpdateExecutorQueuesRequest.FromString,
                    response_serializer=requests__pb2.UpdateExecutorQueuesResponse.SerializeToString,
            ),
            'RegisterApp': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterApp,
                    request_deserializer=requests__pb2.RegisterAppRequest.FromString,
                    response_serializer=requests__pb2.RegisterAppResponse.SerializeToString,
            ),
            'SetLogLink': grpc.unary_unary_rpc_method_handler(
                    servicer.SetLogLink,
                    request_deserializer=requests__pb2.SetLogLinkRequest.FromString,
                    response_serializer=requests__pb2.SetLogLinkResponse.SerializeToString,
            ),
            'AcquireSchedulerLock': grpc.unary_unary_rpc_method_handler(
                    servicer.AcquireSchedulerLock,
                    request_deserializer=requests__pb2.AcquireSchedulerLockRequest.FromString,
                    response_serializer=requests__pb2.AcquireSchedulerLockResponse.SerializeToString,
            ),
            'PostTaskStatusCounts': grpc.unary_unary_rpc_method_handler(
                    servicer.PostTaskStatusCounts,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'QueueWaitingTasks': grpc.unary_unary_rpc_method_handler(
                    servicer.QueueWaitingTasks,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'hyrex.performanceserver.GatewayService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('hyrex.performanceserver.GatewayService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class GatewayService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Enqueue(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hyrex.performanceserver.GatewayService/Enqueue',
            requests__pb2.EnqueueTaskRequest.SerializeToString,
            requests__pb2.EnqueueTaskResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Dequeue(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hyrex.performanceserver.GatewayService/Dequeue',
            requests__pb2.DequeueTaskRequest.SerializeToString,
            requests__pb2.DequeueTaskResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetQueues(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hyrex.performanceserver.GatewayService/GetQueues',
            requests__pb2.GetQueuesRequest.SerializeToString,
            requests__pb2.GetQueuesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTaskStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hyrex.performanceserver.GatewayService/GetTaskStatus',
            requests__pb2.GetTaskStatusRequest.SerializeToString,
            requests__pb2.GetTaskStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def MarkSuccess(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hyrex.performanceserver.GatewayService/MarkSuccess',
            requests__pb2.MarkSuccessRequest.SerializeToString,
            requests__pb2.MarkSuccessResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def MarkFailed(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hyrex.performanceserver.GatewayService/MarkFailed',
            requests__pb2.MarkFailedRequest.SerializeToString,
            requests__pb2.MarkFailedResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTaskRun(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hyrex.performanceserver.GatewayService/GetTaskRun',
            requests__pb2.GetTaskRunRequest.SerializeToString,
            requests__pb2.GetTaskRunResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetDurableTasks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hyrex.performanceserver.GatewayService/GetDurableTasks',
            requests__pb2.GetDurableRunTasksRequest.SerializeToString,
            requests__pb2.GetDurableRunTasksResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RegisterTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hyrex.performanceserver.GatewayService/RegisterTask',
            requests__pb2.RegisterTaskRequest.SerializeToString,
            requests__pb2.RegisterTaskResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hyrex.performanceserver.GatewayService/GetTask',
            requests__pb2.GetTaskRequest.SerializeToString,
            requests__pb2.GetTaskResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAllTasks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hyrex.performanceserver.GatewayService/GetAllTasks',
            requests__pb2.GetAllTasksRequest.SerializeToString,
            requests__pb2.GetAllTasksResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RegisterExecutor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hyrex.performanceserver.GatewayService/RegisterExecutor',
            requests__pb2.RegisterExecutorRequest.SerializeToString,
            requests__pb2.RegisterExecutorResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateExecutorQueues(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hyrex.performanceserver.GatewayService/UpdateExecutorQueues',
            requests__pb2.UpdateExecutorQueuesRequest.SerializeToString,
            requests__pb2.UpdateExecutorQueuesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RegisterApp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hyrex.performanceserver.GatewayService/RegisterApp',
            requests__pb2.RegisterAppRequest.SerializeToString,
            requests__pb2.RegisterAppResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetLogLink(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hyrex.performanceserver.GatewayService/SetLogLink',
            requests__pb2.SetLogLinkRequest.SerializeToString,
            requests__pb2.SetLogLinkResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AcquireSchedulerLock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hyrex.performanceserver.GatewayService/AcquireSchedulerLock',
            requests__pb2.AcquireSchedulerLockRequest.SerializeToString,
            requests__pb2.AcquireSchedulerLockResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PostTaskStatusCounts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hyrex.performanceserver.GatewayService/PostTaskStatusCounts',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def QueueWaitingTasks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hyrex.performanceserver.GatewayService/QueueWaitingTasks',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
