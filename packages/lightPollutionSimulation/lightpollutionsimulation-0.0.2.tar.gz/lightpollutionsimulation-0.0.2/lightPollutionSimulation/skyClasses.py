"""
Implements the Sky class, which generates a sky array and plots it.

The class uses the LightPropagation class to calculate the brightness of the sky.
The sky array is generated by creating a grid of altitude and azimuth angles.
The class also provides a method to generate a sky plot by integrating the light intensity along paths
  defined by direction vectors.
"""

import numpy as np
import lightPollutionSimulation.lightPropagation as glp
import lightPollutionSimulation.angleClass as tac
from lightPollutionSimulation.debugger import DebugPipeline, LogLevel
from numpy.typing import NDArray


class Sky:
    """
    Class to generate a sky array and plot it.

    Attributes:
        atmos (LightPropagation): The light propagation object.
        scalar (int): The scalar value for the sky array.
        debug (DebugPipeline): The debug pipeline object.
    """

    def __init__(self, propagator: glp.LightPropagation, scalar: int):
        """
        Initializes the Sky object.

        Args:
            propagator (LightPropagation): The light propagation object.
            scalar (int): The scalar value for the sky array.
            debug (DebugPipeline): The debug pipeline object.
        """
        self.atmos = propagator
        self.scalar = scalar
        self.debug = DebugPipeline.get_debug_pipeline()

    def getSkyArray(self) -> NDArray[np.float32]:
        """
        Generates the sky array.

        Returns:
            np.array: The sky array.
        """
        skyArray: NDArray[np.float32] = np.ndarray((90 * self.scalar, 360 * self.scalar), dtype=tac.AngleTuple)
        for az in range(360 * self.scalar):
            for alt in range(90 * self.scalar):
                skyArray[alt, az] = tac.AngleTuple(alt / self.scalar, az / self.scalar)
        return skyArray

    def getSkyPlot(self, x0: int, y0: int) -> tuple[NDArray[np.float32], NDArray[np.float32], NDArray[np.float32]]:
        """
        Generates a sky plot.

        Args:
            x0 (int): The x coordinate of the center of the sky plot.
            y0 (int): The y coordinate of the center of the sky plot.
        Returns:
            x (np.array): The x values of the sky plot.
            y (np.array): The y values of the sky plot.
            brightness (np.array): The brightness values of the sky plot
        """
        skyArray = self.getSkyArray()
        x, y, vector = [], [], []
        self.debug.log("Generating Projection ...", LogLevel.INFO)
        for row in skyArray:
            for angleTuple in row:
                x1, y1 = angleTuple.getProjection()

                """
                This test was to see if the vector was correct
                For this the normalized vector had to be 1 or -1 at 45° altitude

                # v = angleTuple.getVector()
                # if angleTuple.alt == 45:
                #     length_x = v[0] / np.linalg.norm(v[0])  # Normalize the vector in the xy plane
                #     print(f"Length of x: {length_x} at {angleTuple.az}°")
                """

                x.append(x1)
                y.append(y1)
                vector.append(angleTuple.getVector())
        startingPoint = np.zeros((1, 3), dtype=np.float32)
        startingPoint[0, 0] = x0
        startingPoint[0, 1] = y0
        startingPoint[0, 2] = 0
        vector2 = np.array(vector)
        brightness = self.atmos.integrateAlongPaths(startingPoint, vector2, int(x0), int(y0), int(x0 + 1), int(y0 + 1))
        x1 = np.array(x, dtype=np.float32)
        y1 = np.array(y, dtype=np.float32)
        self.debug.log("Finished generating Projection.", LogLevel.INFO)
        return x1, y1, brightness
