{"version":3,"file":"lib_index_js.6dfa3f02b6bc6bc819cd.js","mappings":"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","sources":["webpack://jupyterlab-unfold/./src/index.ts","webpack://jupyterlab-unfold/./src/unfold.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/ban-ts-comment */\n\nimport {\n  JupyterFrontEnd,\n  JupyterFrontEndPlugin\n} from '@jupyterlab/application';\n\nimport { IFileBrowserFactory } from '@jupyterlab/filebrowser';\n\nimport { IDocumentManager } from '@jupyterlab/docmanager';\n\nimport { WidgetTracker } from '@jupyterlab/apputils';\n\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\n\nimport { ITranslator } from '@jupyterlab/translation';\n\nimport { IStateDB } from '@jupyterlab/statedb';\n\nimport { FileTreeBrowser, FilterFileTreeBrowserModel } from './unfold';\n\nconst SETTINGS_ID = 'jupyterlab-unfold:jupyterlab-unfold-settings';\n\n/**\n * The file browser namespace token.\n */\nconst namespace = 'filebrowser';\n\nconst fileBrowserFactory: JupyterFrontEndPlugin<IFileBrowserFactory> = {\n  id: 'jupyterlab-unfold:FileBrowserFactory',\n  provides: IFileBrowserFactory,\n  requires: [IDocumentManager, ITranslator, ISettingRegistry],\n  optional: [IStateDB],\n  activate: async (\n    app: JupyterFrontEnd,\n    docManager: IDocumentManager,\n    translator: ITranslator,\n    settings: ISettingRegistry,\n    state: IStateDB | null\n  ): Promise<IFileBrowserFactory> => {\n    const setting = await settings.load(SETTINGS_ID);\n\n    const tracker = new WidgetTracker<FileTreeBrowser>({ namespace });\n    const createFileBrowser = (\n      id: string,\n      options: IFileBrowserFactory.IOptions = {}\n    ) => {\n      const model = new FilterFileTreeBrowserModel({\n        translator: translator,\n        auto: options.auto ?? true,\n        manager: docManager,\n        driveName: options.driveName || '',\n        refreshInterval: options.refreshInterval,\n        state:\n          options.state === null\n            ? undefined\n            : options.state || state || undefined\n      });\n      const widget = new FileTreeBrowser({\n        id,\n        model,\n        restore: true,\n        translator,\n        app\n      });\n\n      widget.listing.singleClickToUnfold = setting.get('singleClickToUnfold')\n        .composite as boolean;\n\n      setting.changed.connect(() => {\n        widget.listing.singleClickToUnfold = setting.get('singleClickToUnfold')\n          .composite as boolean;\n      });\n\n      // check the url in iframe and open\n      app.restored.then(async () => {\n        const windowPathname = window.location.pathname;\n        const treeIndex = windowPathname.indexOf('/tree/');\n        let path = windowPathname.substring(treeIndex + '/tree/'.length);\n        path = decodeURIComponent(path);\n        const content = await app.serviceManager.contents.get(path);\n        if (content.type !== 'directory') {\n          docManager.open(path);\n        }\n      });\n\n      // Track the newly created file browser.\n      void tracker.add(widget);\n\n      return widget;\n    };\n\n    // @ts-ignore: DirListing._onPathChanged is private upstream, need to change this so we can remove the ignore\n    return { createFileBrowser, tracker };\n  }\n};\n\nexport * from './unfold';\n\nexport default fileBrowserFactory;\n","/* eslint-disable @typescript-eslint/ban-ts-comment */\n\nimport { IDragEvent } from '@lumino/dragdrop';\n\nimport { ArrayExt, toArray } from '@lumino/algorithm';\n\nimport { ElementExt } from '@lumino/domutils';\n\nimport { PromiseDelegate, ReadonlyJSONObject } from '@lumino/coreutils';\n\nimport { Signal } from '@lumino/signaling';\n\nimport { DOMUtils, showErrorMessage } from '@jupyterlab/apputils';\n\nimport { JupyterFrontEnd } from '@jupyterlab/application';\n\nimport { Contents } from '@jupyterlab/services';\n\nimport { DocumentRegistry } from '@jupyterlab/docregistry';\n\nimport { renameFile } from '@jupyterlab/docmanager';\n\nimport { PathExt, IChangedArgs } from '@jupyterlab/coreutils';\n\nimport {\n  DirListing,\n  FileBrowser,\n  FilterFileBrowserModel\n} from '@jupyterlab/filebrowser';\n\nimport { ITranslator } from '@jupyterlab/translation';\n\nimport { LabIcon } from '@jupyterlab/ui-components';\n\nimport { IStateDB } from '@jupyterlab/statedb';\n\n// @ts-ignore\nimport folderOpenSvgstr from '../style/icons/folder-open.svg';\n\n/**\n * The class name added to drop targets.\n */\nconst DROP_TARGET_CLASS = 'jp-mod-dropTarget';\n\n/**\n * The mime type for a contents drag object.\n */\nconst CONTENTS_MIME = 'application/x-jupyter-icontents';\n\nexport const folderOpenIcon = new LabIcon({\n  name: 'ui-components:folder-open',\n  svgstr: folderOpenSvgstr\n});\n\n/**\n * The namespace for the `FileTreeBrowser` class statics.\n */\nexport namespace FileTreeBrowser {\n  /**\n   * An options object for initializing a file tree browser widget.\n   */\n  export interface IOptions extends FileBrowser.IOptions {\n    /**\n     * A file browser model instance.\n     */\n    model: FilterFileTreeBrowserModel;\n\n    /**\n     * The JupyterFrontEnd app.\n     */\n    app: JupyterFrontEnd;\n  }\n}\n\n/**\n * The namespace for the `DirTreeListing` class statics.\n */\nexport namespace DirTreeListing {\n  /**\n   * An options object for initializing a file tree listing widget.\n   */\n  export interface IOptions extends DirListing.IOptions {\n    /**\n     * A file browser model instance.\n     */\n    model: FilterFileTreeBrowserModel;\n  }\n}\n\n/**\n * The namespace for the `FileTreeBrowser` class statics.\n */\nexport namespace FileTreeBrowser {\n  /**\n   * An options object for initializing a file tree browser widget.\n   */\n  export interface IOptions extends FileBrowser.IOptions {\n    /**\n     * A file browser model instance.\n     */\n    model: FilterFileTreeBrowserModel;\n  }\n}\n\n/**\n * A filetree renderer.\n */\nexport class FileTreeRenderer extends DirListing.Renderer {\n  constructor(model: FilterFileTreeBrowserModel) {\n    super();\n\n    this.model = model;\n  }\n\n  /**\n   * Create the DOM node for a dir listing.\n   */\n  createNode(): HTMLElement {\n    const node = document.createElement('div');\n    const content = document.createElement('ul');\n    content.className = 'jp-DirListing-content';\n    node.appendChild(content);\n    node.tabIndex = 1;\n    return node;\n  }\n\n  populateHeaderNode(\n    node: HTMLElement,\n    translator?: ITranslator,\n    hiddenColumns?: Set<DirListing.ToggleableColumn>\n  ): void {\n    // No-op we don't want any header\n  }\n\n  handleHeaderClick(\n    node: HTMLElement,\n    event: MouseEvent\n  ): DirListing.ISortState | null {\n    return null;\n  }\n\n  updateItemNode(\n    node: HTMLElement,\n    model: Contents.IModel,\n    fileType?: DocumentRegistry.IFileType,\n    translator?: ITranslator,\n    hiddenColumns?: Set<DirListing.ToggleableColumn>,\n    selected?: boolean\n  ): void {\n    super.updateItemNode(\n      node,\n      model,\n      fileType,\n      translator,\n      hiddenColumns,\n      selected\n    );\n\n    if (model.type === 'directory' && this.model.isOpen(model.path)) {\n      const iconContainer = DOMUtils.findElement(\n        node,\n        'jp-DirListing-itemIcon'\n      );\n\n      folderOpenIcon.element({\n        container: iconContainer,\n        className: 'jp-DirListing-itemIcon',\n        stylesheet: 'listing'\n      });\n    }\n\n    // Removing old vbars\n    while (\n      node.firstChild !== null &&\n      (node.firstChild as HTMLElement).classList.contains('jp-DirListing-vbar')\n    ) {\n      node.removeChild(node.firstChild);\n    }\n\n    // Adding vbars for subdirs\n    for (let n = 0; n < model.path.split('/').length - 1; n++) {\n      const vbar = document.createElement('div');\n      vbar.classList.add('jp-DirListing-vbar');\n      node.insertBefore(vbar, node.firstChild);\n    }\n  }\n\n  private model: FilterFileTreeBrowserModel;\n}\n\n/**\n * A widget which hosts a filetree.\n */\n// @ts-ignore: _onPathChanged is private upstream, need to change this\nexport class DirTreeListing extends DirListing {\n  constructor(options: DirTreeListing.IOptions) {\n    super({ ...options, renderer: new FileTreeRenderer(options.model) });\n  }\n\n  set singleClickToUnfold(value: boolean) {\n    this._singleClickToUnfold = value;\n  }\n\n  get headerNode(): HTMLElement {\n    return document.createElement('div');\n  }\n\n  sort(state: DirListing.ISortState): void {\n    // @ts-ignore\n    this._sortedItems = toArray(this.model.items());\n    // @ts-ignore\n    this._sortState = state;\n    this.update();\n  }\n\n  get model(): FilterFileTreeBrowserModel {\n    // @ts-ignore\n    return this._model;\n  }\n\n  private async _eventDblClick(event: MouseEvent): Promise<void> {\n    const entry = this.modelForClick(event);\n\n    if (entry?.type === 'directory') {\n      if (!this._singleClickToUnfold) {\n        this.model.toggle(entry.path);\n      }\n    } else {\n      super.handleEvent(event);\n    }\n  }\n\n  _onPathChanged(): void {\n    // It's a no-op to overwrite the base class behavior\n    // We don't want to deselect everything when the path changes\n  }\n\n  private _eventDragEnter(event: IDragEvent): void {\n    if (event.mimeData.hasData(CONTENTS_MIME)) {\n      // @ts-ignore\n      const index = this._hitTestNodes(this._items, event);\n\n      let target: HTMLElement;\n      if (index !== -1) {\n        // @ts-ignore\n        target = this._items[index];\n      } else {\n        target = event.target as HTMLElement;\n      }\n      target.classList.add(DROP_TARGET_CLASS);\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  private _eventDragOver(event: IDragEvent): void {\n    event.preventDefault();\n    event.stopPropagation();\n    event.dropAction = event.proposedAction;\n\n    const dropTarget = DOMUtils.findElement(this.node, DROP_TARGET_CLASS);\n    if (dropTarget) {\n      dropTarget.classList.remove(DROP_TARGET_CLASS);\n    }\n\n    // @ts-ignore\n    const index = this._hitTestNodes(this._items, event);\n\n    let target: HTMLElement;\n    if (index !== -1) {\n      // @ts-ignore\n      target = this._items[index];\n    } else {\n      target = event.target as HTMLElement;\n    }\n    target.classList.add(DROP_TARGET_CLASS);\n  }\n\n  private _eventDrop(event: IDragEvent): void {\n    event.preventDefault();\n    event.stopPropagation();\n    // @ts-ignore\n    clearTimeout(this._selectTimer);\n    if (event.proposedAction === 'none') {\n      event.dropAction = 'none';\n      return;\n    }\n    if (!event.mimeData.hasData(CONTENTS_MIME)) {\n      return;\n    }\n\n    let target = event.target as HTMLElement;\n    while (target && target.parentElement) {\n      if (target.classList.contains(DROP_TARGET_CLASS)) {\n        target.classList.remove(DROP_TARGET_CLASS);\n        break;\n      }\n      target = target.parentElement;\n    }\n\n    // Get the path based on the target node.\n    // @ts-ignore\n    const index = ArrayExt.firstIndexOf(this._items, target);\n    let newDir: string;\n\n    if (index !== -1) {\n      const item = toArray(this.model.items())[index];\n\n      if (item.type === 'directory') {\n        newDir = item.path;\n      } else {\n        newDir = PathExt.dirname(item.path);\n      }\n    } else {\n      newDir = '';\n    }\n\n    // @ts-ignore\n    const manager = this._manager;\n\n    // Handle the items.\n    const promises: Promise<Contents.IModel | null>[] = [];\n    const paths = event.mimeData.getData(CONTENTS_MIME) as string[];\n\n    if (event.ctrlKey && event.proposedAction === 'move') {\n      event.dropAction = 'copy';\n    } else {\n      event.dropAction = event.proposedAction;\n    }\n    for (const path of paths) {\n      const localPath = manager.services.contents.localPath(path);\n      const name = PathExt.basename(localPath);\n      const newPath = PathExt.join(newDir, name);\n      // Skip files that are not moving.\n      if (newPath === path) {\n        continue;\n      }\n\n      if (event.dropAction === 'copy') {\n        promises.push(manager.copy(path, newDir));\n      } else {\n        promises.push(renameFile(manager, path, newPath));\n      }\n    }\n    Promise.all(promises).catch(error => {\n      void showErrorMessage(\n        // @ts-ignore\n        this._trans._p('showErrorMessage', 'Error while copying/moving files'),\n        error\n      );\n    });\n  }\n\n  /**\n   * Handle 'mousedown' event\n   *\n   * Note: This allow to change the path to the root and clear selection when the user\n   * is clicking on an empty space.\n   */\n  private _eventMouseDown(event: MouseEvent): void {\n    const entry = this.modelForClick(event);\n\n    if (entry) {\n      if (entry.type === 'directory') {\n        this.model.path = '/' + entry.path;\n\n        if (this._singleClickToUnfold && event.button === 0) {\n          this.model.toggle(entry.path);\n        }\n      } else {\n        this.model.path = '/' + PathExt.dirname(entry.path);\n      }\n    } else {\n      // TODO Upstream this logic to JupyterLab (clearing selection when clicking the empty space)?\n      this.clearSelectedItems();\n      this.update();\n\n      this.model.path = this.model.rootPath;\n    }\n  }\n\n  private _hitTestNodes(nodes: HTMLElement[], event: MouseEvent): number {\n    return ArrayExt.findFirstIndex(\n      nodes,\n      node =>\n        ElementExt.hitTest(node, event.clientX, event.clientY) ||\n        event.target === node\n    );\n  }\n\n  handleEvent(event: Event): void {\n    switch (event.type) {\n      case 'dblclick':\n        this._eventDblClick(event as MouseEvent);\n        break;\n      case 'lm-dragenter':\n        this._eventDragEnter(event as IDragEvent);\n        break;\n      case 'lm-dragover':\n        this._eventDragOver(event as IDragEvent);\n        break;\n      case 'lm-drop':\n        this._eventDrop(event as IDragEvent);\n        break;\n      case 'mousedown':\n        super.handleEvent(event);\n        this._eventMouseDown(event as MouseEvent);\n        break;\n      default:\n        super.handleEvent(event);\n        break;\n    }\n  }\n\n  private _singleClickToUnfold = true;\n}\n\n/**\n * Filetree browser model with optional filter on element.\n */\nexport class FilterFileTreeBrowserModel extends FilterFileBrowserModel {\n  constructor(options: FilterFileBrowserModel.IOptions) {\n    super(options);\n\n    this.contentManager = this.manager.services.contents;\n\n    this._savedState = options.state || null;\n\n    this._path = this.rootPath;\n  }\n\n  get path(): string {\n    return this._path;\n  }\n\n  set path(value: string) {\n    let needsToEmit = false;\n\n    if (this._path !== value) {\n      needsToEmit = true;\n    }\n\n    const oldValue = this._path;\n    this._path = value;\n\n    if (needsToEmit) {\n      const pathChanged = this.pathChanged as Signal<\n        this,\n        IChangedArgs<string>\n      >;\n\n      pathChanged.emit({\n        name: 'path',\n        oldValue,\n        newValue: this._path\n      });\n    }\n  }\n\n  /**\n   * Change directory.\n   *\n   * @param path - The path to the file or directory.\n   *\n   * @returns A promise with the contents of the directory.\n   */\n  async cd(pathToUpdate = this.rootPath): Promise<void> {\n    const result = await this.fetchContent(this.rootPath, pathToUpdate);\n\n    // @ts-ignore\n    this.handleContents({\n      name: this.rootPath,\n      path: this.rootPath,\n      type: 'directory',\n      content: result\n    });\n\n    if (this._savedState && this._stateKey) {\n      void this._savedState.save(this._stateKey, { openState: this.openState });\n    }\n\n    this.onRunningChanged(\n      this.manager.services.sessions,\n      this.manager.services.sessions.running()\n    );\n  }\n\n  /**\n   * A promise that resolves when the model is first restored.\n   */\n  get restored(): Promise<void> {\n    return this._isRestored.promise;\n  }\n\n  /**\n   * Restore the state of the file browser.\n   *\n   * @param id - The unique ID that is used to construct a state database key.\n   *\n   * @param populate - If `false`, the restoration ID will be set but the file\n   * browser state will not be fetched from the state database.\n   *\n   * @returns A promise when restoration is complete.\n   *\n   * #### Notes\n   * This function will only restore the model *once*. If it is called multiple\n   * times, all subsequent invocations are no-ops.\n   */\n  async restore(id: string, populate = true): Promise<void> {\n    const { manager } = this;\n    const key = `file-browser-${id}:openState`;\n    const state = this._savedState;\n    const restored = !!this._stateKey;\n\n    if (restored) {\n      return;\n    }\n\n    // Set the file browser key for state database fetch/save.\n    this._stateKey = key;\n\n    if (!populate || !state) {\n      this._isRestored.resolve(undefined);\n      return;\n    }\n\n    await manager.services.ready;\n\n    try {\n      const value = await state.fetch(key);\n\n      if (!value) {\n        await this.cd(this.rootPath);\n        this._isRestored.resolve(undefined);\n        return;\n      }\n\n      this.openState = (value as ReadonlyJSONObject)['openState'] as {\n        [path: string]: boolean;\n      };\n      await this.cd(this.rootPath);\n    } catch (error) {\n      await this.cd(this.rootPath);\n      await state.remove(key);\n    }\n\n    this._isRestored.resolve(undefined);\n  }\n\n  /**\n   * Open/close directories to discover/hide a given path.\n   *\n   * @param pathToToggle - The path to discover/hide.\n   */\n  async toggle(pathToToggle = this.rootPath): Promise<void> {\n    this.openState[pathToToggle] = !this.openState[pathToToggle];\n\n    // Refresh\n    this.cd(this.rootPath);\n  }\n\n  /**\n   * Check whether a directory path is opened or not.\n   *\n   * @param path - The given path\n   *\n   * @returns Whether the directory is opened or not.\n   *\n   */\n  isOpen(path: string): boolean {\n    return !!this.openState[path];\n  }\n\n  private async fetchContent(\n    path: string,\n    pathToUpdate?: string\n  ): Promise<Contents.IModel[]> {\n    const result = await this.contentManager.get(path);\n\n    if (!result.content) {\n      return [];\n    }\n\n    let items: Contents.IModel[] = [];\n\n    const sortedContent = this.sortContents(result.content);\n\n    this.openState[path] = true;\n\n    for (const entry of sortedContent) {\n      items.push(entry);\n\n      if (entry.type !== 'directory') {\n        continue;\n      }\n\n      const isOpen =\n        (pathToUpdate && pathToUpdate.startsWith('/' + entry.path)) ||\n        this.isOpen(entry.path);\n\n      if (isOpen) {\n        const subEntryContent = await this.fetchContent(\n          entry.path,\n          pathToUpdate\n        );\n\n        items = items.concat(subEntryContent);\n      } else {\n        this.openState[entry.path] = false;\n      }\n    }\n\n    return items;\n  }\n\n  /**\n   * Sort the entries\n   *\n   * @param data: The entries to sort\n   * @returns the sorted entries\n   */\n  private sortContents(data: Contents.IModel[]): Contents.IModel[] {\n    const directories = data.filter(value => value.type === 'directory');\n    const files = data.filter(value => value.type !== 'directory');\n\n    const sortedDirectories = directories.sort((a, b) =>\n      a.name.localeCompare(b.name)\n    );\n    const sortedFiles = files.sort((a, b) => a.name.localeCompare(b.name));\n\n    return sortedDirectories.concat(sortedFiles);\n  }\n\n  protected onFileChanged(\n    sender: Contents.IManager,\n    change: Contents.IChangedArgs\n  ): void {\n    this.refresh();\n  }\n\n  private _isRestored = new PromiseDelegate<void>();\n  private _savedState: IStateDB | null = null;\n  private _stateKey: string | null = null;\n  private _path: string;\n  private contentManager: Contents.IManager;\n  private openState: { [path: string]: boolean } = {};\n}\n\n/**\n * The filetree browser.\n */\nexport class FileTreeBrowser extends FileBrowser {\n  constructor(options: FileTreeBrowser.IOptions) {\n    super(options);\n\n    this.mainPanel.layout?.removeWidget(this.crumbs);\n\n    this.showLastModifiedColumn = false;\n    this.showFileCheckboxes = false;\n  }\n\n  get showFileCheckboxes(): boolean {\n    return false;\n  }\n\n  set showFileCheckboxes(value: boolean) {\n    if (this.listing.setColumnVisibility) {\n      this.listing.setColumnVisibility('is_selected', false);\n      // @ts-ignore\n      this._showFileCheckboxes = false;\n    }\n  }\n\n  get showLastModifiedColumn(): boolean {\n    return false;\n  }\n\n  set showLastModifiedColumn(value: boolean) {\n    if (this.listing.setColumnVisibility) {\n      this.listing.setColumnVisibility('last_modified', false);\n    }\n  }\n\n  protected createDirListing(options: DirListing.IOptions): DirListing {\n    // @ts-ignore: _onPathChanged is private upstream, need to change this\n    return new DirTreeListing({\n      model: this.model,\n      translator: this.translator\n    });\n  }\n\n  set useFuzzyFilter(value: boolean) {\n    // No-op\n  }\n\n  model: FilterFileTreeBrowserModel;\n\n  // @ts-ignore: _onPathChanged is private upstream, need to change this\n  listing: DirTreeListing;\n}\n"],"names":[],"sourceRoot":""}