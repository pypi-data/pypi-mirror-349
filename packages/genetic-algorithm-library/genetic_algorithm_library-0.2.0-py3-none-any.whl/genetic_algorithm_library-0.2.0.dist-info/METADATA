Metadata-Version: 2.4
Name: genetic_algorithm_library
Version: 0.2.0
Summary: Librer√≠a avanzada de algoritmos gen√©ticos adaptativos para problemas de optimizaci√≥n
Home-page: https://github.com/Zaxazgames1/genetic-algorithm-library
Author: Julian Lara, Johan Rojas
Author-email: johansebastianrojasramirez7@gmail.com
Project-URL: Bug Tracker, https://github.com/Zaxazgames1/genetic-algorithm-library/issues
Project-URL: Documentation, https://github.com/Zaxazgames1/genetic-algorithm-library/wiki
Project-URL: Source Code, https://github.com/Zaxazgames1/genetic-algorithm-library
Keywords: genetic algorithm,optimization,evolutionary computation,adaptive algorithms,multi-objective optimization,TSP,permutation
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Classifier: Topic :: Scientific/Engineering :: Mathematics
Classifier: Intended Audience :: Science/Research
Classifier: Intended Audience :: Developers
Classifier: Development Status :: 4 - Beta
Requires-Python: >=3.6
Description-Content-Type: text/markdown
Requires-Dist: numpy>=1.19.0
Requires-Dist: matplotlib>=3.3.0
Requires-Dist: pandas>=1.1.0
Requires-Dist: scipy>=1.5.0
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: keywords
Dynamic: project-url
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

# üß¨ Genetic Algorithm Library

[![PyPI version](https://img.shields.io/badge/pypi-v0.2.0-blue.svg)](https://pypi.org/project/genetic-algorithm-library/)
[![Python 3.6+](https://img.shields.io/badge/python-3.6+-blue.svg)](https://www.python.org/downloads/)
[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)
[![Documentation](https://img.shields.io/badge/docs-wiki-green.svg)](https://github.com/Zaxazgames1/genetic-algorithm-library/wiki)
[![Tests](https://img.shields.io/badge/tests-passing-brightgreen.svg)]()

<div align="center">
  <img src="https://raw.githubusercontent.com/Zaxazgames1/genetic-algorithm-library/main/docs/images/logo.png" alt="Genetic Algorithm Library Logo" width="300"/>
  <br>
  <em>Optimizaci√≥n evolutiva avanzada para problemas complejos</em>
</div>

## üìã Descripci√≥n General

**Genetic Algorithm Library** es un potente framework de computaci√≥n evolutiva dise√±ado para resolver problemas de optimizaci√≥n complejos. Esta librer√≠a implementa algoritmos gen√©ticos avanzados con capacidades adaptativas, proporcionando herramientas flexibles y eficientes para investigadores y desarrolladores.

La librer√≠a destaca por su amplia variedad de operadores gen√©ticos, soporte para optimizaci√≥n multi-objetivo, y mecanismos de adaptaci√≥n din√°mica que mejoran la convergencia y diversidad poblacional.

## ‚ú® Caracter√≠sticas Principales

- **üîÑ M√∫ltiples codificaciones gen√©ticas**: 
  - Representaciones reales, binarias, enteras y de permutaci√≥n
  - Adaptaci√≥n autom√°tica al tipo de problema

- **üîß Operadores gen√©ticos avanzados**:
  - **Selecci√≥n**: Torneo, Ruleta, Ranking, SUS (Muestreo Universal Estoc√°stico), Boltzmann
  - **Cruce**: Uniforme, Un punto, Dos puntos, Blend, SBX, PMX (para permutaciones)
  - **Mutaci√≥n**: Gaussiana, Uniforme, Reset, Adaptativa, Swap e Inversi√≥n (para permutaciones)

- **üìä Algoritmos especializados**:
  - Algoritmo gen√©tico est√°ndar con adaptaci√≥n din√°mica
  - Optimizaci√≥n multi-objetivo (basada en NSGA-II)
  - Modelo de islas con migraci√≥n controlada
  - Capacidades paralelas para problemas computacionalmente intensivos

- **üìà Herramientas anal√≠ticas integradas**:
  - Visualizaci√≥n avanzada de evoluci√≥n y convergencia
  - An√°lisis de frentes de Pareto para optimizaci√≥n multi-objetivo
  - Monitoreo de diversidad poblacional
  - Seguimiento de rendimiento y eficiencia

- **‚öôÔ∏è Alta personalizaci√≥n**:
  - Integraci√≥n sencilla de funciones objetivo personalizadas
  - Operadores gen√©ticos personalizables
  - Par√°metros adaptables durante la ejecuci√≥n

## üöÄ Instalaci√≥n

```bash
pip install genetic-algorithm-library
```

## üèÅ Gu√≠a R√°pida

### Optimizaci√≥n Simple

```python
from genetic_algorithm import run_genetic_algorithm, plot_evolution
import numpy as np

# Definir funci√≥n objetivo (maximizar)
def objective_function(x):
    return -(x[0]**2 + x[1]**2)  # Minimizar la suma de cuadrados

# Ejecutar algoritmo gen√©tico
result = run_genetic_algorithm(
    objective_function=objective_function,
    gene_length=2,               # 2 par√°metros a optimizar
    bounds=(-10, 10),            # L√≠mites de b√∫squeda
    pop_size=100,                # Tama√±o de poblaci√≥n
    num_generations=50,          # N√∫mero de generaciones
    selection_type="tournament", # M√©todo de selecci√≥n
    adaptive=True,               # Mutaci√≥n adaptativa
    verbose=True                 # Mostrar progreso
)

# Mostrar resultados
print(f"Mejor soluci√≥n: {result['best_individual']}")
print(f"Mejor fitness: {result['best_fitness']}")

# Visualizar evoluci√≥n
plot_evolution(result['history'])
```

### Optimizaci√≥n Multi-objetivo

```python
from genetic_algorithm import run_multi_objective_ga, plot_pareto_front

# Definir funciones objetivo
def objective1(x):
    return -sum(x**2)  # Minimizar (convertido a maximizar con negativo)

def objective2(x):
    return -sum((x-2)**2)  # Minimizar distancia a (2,2,...,2)

# Ejecutar algoritmo gen√©tico multi-objetivo
result = run_multi_objective_ga(
    objective_functions=[objective1, objective2],
    gene_length=2,
    bounds=(-5, 5),
    pop_size=200,
    num_generations=100
)

# Visualizar frente de Pareto
plot_pareto_front(
    result['pareto_fitness'],
    objective_names=["Suma de cuadrados", "Distancia a (2,2)"]
)
```

### Modelo de Islas

```python
from genetic_algorithm import run_island_model_ga

# Ejecutar algoritmo con modelo de islas
result = run_island_model_ga(
    objective_function=my_objective,
    gene_length=5,
    bounds=(-10, 10),
    num_islands=4,              # N√∫mero de islas
    pop_size_per_island=50,     # Poblaci√≥n por isla
    num_generations=100,
    migration_interval=10,      # Migraci√≥n cada 10 generaciones
    migration_rate=0.1          # 10% de individuos migran
)
```

## üõ†Ô∏è Uso Avanzado

La biblioteca permite un control completo de todos los aspectos del algoritmo gen√©tico:

```python
import numpy as np
from genetic_algorithm import (
    create_population,
    selection,
    crossover,
    mutation,
    adaptive_mutation,
    fitness_function
)

# Crear poblaci√≥n inicial con codificaci√≥n espec√≠fica
population = create_population(
    size=50, 
    gene_length=5, 
    min_val=-5, 
    max_val=5,
    encoding="real"  # Otras: "binary", "integer", "permutation"
)

# Funci√≥n objetivo personalizada
def my_objective(x):
    return np.sin(x[0]) + np.cos(x[1]) + x[2]**2 - x[3] + x[4]

# Iteraci√≥n manual del algoritmo
for generation in range(100):
    # Evaluar fitness
    fitness_values = np.array([fitness_function(ind, my_objective) for ind in population])
    
    # Seleccionar padres
    parents = selection(
        population, 
        fitness_values, 
        num_parents=25, 
        selection_type="rank"  # Otras: "tournament", "roulette", "sus", "boltzmann"
    )
    
    # Crear descendencia mediante cruce
    offspring = crossover(
        parents, 
        offspring_size=(25, 5), 
        crossover_type="blend"  # Otras: "uniform", "single_point", "two_point", "sbx"
    )
    
    # Aplicar mutaci√≥n adaptativa basada en fitness
    offspring = adaptive_mutation(
        offspring,
        fitness_values[:25],  # Fitness de los padres
        np.max(fitness_values),
        np.mean(fitness_values),
        min_val=-5,
        max_val=5,
        base_rate=0.05
    )
    
    # Actualizar poblaci√≥n con elitismo
    best_idx = np.argmax(fitness_values)
    population = np.vstack([population[best_idx:best_idx+1], parents[:-1], offspring])
```

## üìä Visualizaci√≥n de Resultados

La librer√≠a incluye herramientas para visualizar y analizar los resultados:

<div align="center">
  <table>
    <tr>
      <td align="center"><img src="https://raw.githubusercontent.com/Zaxazgames1/genetic-algorithm-library/main/docs/images/evolution_plot.png" alt="Evolution Plot" width="400"/></td>
      <td align="center"><img src="https://raw.githubusercontent.com/Zaxazgames1/genetic-algorithm-library/main/docs/images/pareto_front.png" alt="Pareto Front" width="400"/></td>
    </tr>
    <tr>
      <td align="center"><em>Evoluci√≥n del Fitness</em></td>
      <td align="center"><em>Frente de Pareto Multi-objetivo</em></td>
    </tr>
  </table>
</div>

## üß™ Problemas Implementados

La librer√≠a incluye implementaciones para diversos problemas:

- **Optimizaci√≥n de funciones continuas**:
  - Sphere, Rastrigin, Schwefel, Ackley, Rosenbrock, Griewank y m√°s
  - F√°cilmente extensible a funciones personalizadas

- **Problemas de permutaci√≥n**:
  - Problema del Viajante (TSP)
  - Ordenamiento y secuenciaci√≥n

- **Problemas discretos**:
  - Mochila (Knapsack)
  - Asignaci√≥n de tareas
  - Max-Cut

- **Optimizaci√≥n multi-objetivo**:
  - Problemas con objetivos en conflicto
  - Visualizaci√≥n de frentes de Pareto

## üìñ Documentaci√≥n

Para la documentaci√≥n completa, visite nuestra [Wiki en GitHub](https://github.com/Zaxazgames1/genetic-algorithm-library/wiki).

Tambi√©n puede consultar los ejemplos incluidos:

- [`examples/basic_optimization.py`](https://github.com/Zaxazgames1/genetic-algorithm-library/blob/main/examples/basic_optimization.py): Optimizaci√≥n b√°sica
- [`examples/tsp_example.py`](https://github.com/Zaxazgames1/genetic-algorithm-library/blob/main/examples/tsp_example.py): Problema del Viajante
- [`examples/multi_objective.py`](https://github.com/Zaxazgames1/genetic-algorithm-library/blob/main/examples/multi_objective.py): Optimizaci√≥n multi-objetivo

## üë• Colaboradores

- **Johan Rojas** - Desarrollo principal y algoritmos avanzados
- **Julian Lara** - Dise√±o de API y optimizaci√≥n de rendimiento

## üìÑ Licencia

Este proyecto est√° licenciado bajo la Licencia MIT - ver el archivo [LICENSE](LICENSE) para m√°s detalles.

## üìö C√≥mo Citar

Si utiliza esta biblioteca en su investigaci√≥n, por favor cite:

```
@software{genetic_algorithm_library,
  author = {Lara, Julian and Rojas, Johan},
  title = {Genetic Algorithm Library},
  url = {https://github.com/Zaxazgames1/genetic-algorithm-library},
  version = {0.2.0},
  year = {2025},
}
```

## üîó Enlaces √ötiles

- [Repositorio GitHub](https://github.com/Zaxazgames1/genetic-algorithm-library)
- [Registro de Problemas](https://github.com/Zaxazgames1/genetic-algorithm-library/issues)
- [P√°gina PyPI](https://pypi.org/project/genetic-algorithm-library/)
- [Documentaci√≥n Wiki](https://github.com/Zaxazgames1/genetic-algorithm-library/wiki)

---

<div align="center">
  <p>Desarrollado con ‚ù§Ô∏è para la comunidad de investigaci√≥n en computaci√≥n evolutiva</p>
</div>
