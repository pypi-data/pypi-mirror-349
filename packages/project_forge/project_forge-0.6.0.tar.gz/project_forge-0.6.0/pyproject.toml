[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "project_forge"
description = "a tool that combines one or more templates and the user's answers to questions to generate a code project"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "Programming Language :: Python :: 3.12",
    "Framework :: Pytest",
]
keywords = ["project_forge"]
dynamic = ["version"]
license = { file = "LICENSE" }
requires-python = ">=3.12"
dependencies = [
    "click>=8.1.7",
    "environs>=9.3.5",
    "gitpython>=3.1.43",
    "immutabledict>=4.2.0",
    "jinja2>=3.1.0",
    "platformdirs>=4.2.2",
    "pydantic-settings>=2.4.0",
    "pydantic>=2.8.2",
    "pyyaml>=6.0.2",
    "questionary>=2.0.1",
    "rich-click>=1.8.3",
    "tomlkit>=0.13.2",
]
authors = [
    { name = "Calloway Project", email = "coreyoordt@gmail.com" },
]

[project.readme]
file = "README.md"
content-type = "text/markdown"

[project.urls]
Homepage = "https://github.com/callowayproject/project-forge"
Documentation = "https://callowayproject.github.io/project_forge"
Repository = "https://github.com/callowayproject/project-forge"
Changelog = "https://github.com/callowayproject/project-forge/CHANGELOG.md"

[dependency-groups]
dev = [
    "bump-my-version",
    "generate-changelog>=0.7.6",
    "icecream",
    "uv",
]
test = [
    "coverage>=6.1.2",
    "gitpython",
    "pre-commit>=2.15.0",
    "pytest-cov>=3.0.0",
    "pytest>=6.0.0",
    "pytest-sugar",
]
docs = [
    "black",
    "griffe-pydantic",
    "markdown-customblocks",
    "mdformat-mkdocs[recommended]>=4.1.1",
    "mdformat>=0.7.21",
    "mdx-truly-sane-lists",
    "mkdocs",
    "mkdocs-click",
    "mkdocs-gen-files",
    "mkdocs-git-authors-plugin",
    "mkdocs-git-committers-plugin",
    "mkdocs-git-revision-date-localized-plugin",
    "mkdocs-include-markdown-plugin",
    "mkdocs-literate-nav",
    "mkdocs-material",
    "mkdocs-section-index",
    "mkdocstrings[python]",
    "python-frontmatter",
]

[project.scripts]
project-forge = "project_forge.cli:cli"

[project.entry-points.pytest11]
forger = "project_forge.testing.plugin"

[tool.hatch.version]
path = "project_forge/__init__.py"

[tool.mypy]
python_version = "3.12"

[tool.coverage.run]
branch = true
source = ["project_forge"]
omit = ["**/test_*.py", "**/__main__.py"]

[tool.coverage.report]
omit = [
    "*site-packages*",
    "*tests*",
    "*.tox*",
]
show_missing = true
exclude_lines = [
    "raise NotImplementedError",
    "pragma: no-coverage",
]

[tool.pytest.ini_options]
norecursedirs = [
    ".*",
    "build",
    "dist",
    "{arch}",
    "*.egg",
    "venv",
    "requirements*",
    "lib",
]
python_files = [
    "test_*.py",
    "*_test.py",
    "tests.py",
]

[tool.interrogate]
ignore-init-method = true
ignore-init-module = false
ignore-magic = true
ignore-semiprivate = false
ignore-private = false
ignore-property-decorators = false
ignore-module = false
ignore-nested-functions = true
ignore-nested-classes = true
ignore-setters = false
fail-under = 90
exclude = ["setup.py", "docs", "build"]
ignore-regex = ["^get$", "^mock_.*", ".*BaseClass.*"]
verbose = 0
quiet = false
whitelist-regex = []
color = true

[tool.black]
line-length = 119

[tool.ruff]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

# Same as Black.
line-length = 119

[tool.ruff.lint]
preview = true
select = [
    "E", # pycodestyle errors
    "W", # pycodestyle warnings
    "F", # pyflakes
    "I", # isort
    "N", # PEP8 naming
    "B", # flake8-bugbear
    "BLE", # flake8-blind except
    "D", # pydocstyle
    # "DOC", # pydoclint
    "S", # flakeu-bandit
    "RUF", # Ruff-specific rules
    "NPY", # NumPy-specific rules
    "PD", # Pandas-vet
    "PGH", # PyGrep hooks
    "ANN", # flake8-annotations
    "C90", # McCabe complexity
    "PLC", # Pylint conventions
    "PLE", # Pylint errors
    "PLW", # Pylint warnings
    "TCH", # Flake8 type-checking
]
ignore = [
    "ANN002", # missing-type-args
    "ANN003", # missing-type-kwargs
    "ANN204", # missing-return-type-special-method
    "ANN401", # any-type
    "S101", # assert
    "S104", # hardcoded-bind-all-interfaces
    "S404", # suspicious-subprocess-import
    "S602", # subprocess-popen-with-shell-equals-true
    "D105", # undocumented-magic-method
    "D106", # undocumented-public-nested-class
    "D107", # undocumented-public-init
    "D200", # fits-on-one-line
    "D212", # multi-line-summary-first-line
    "PD011", # pandas-use-of-dot-values
    "PLC0415", # import-outside-toplevel
    "PLW1641", # eq-without-hash
]

fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

typing-modules = ["typing", "types", "typing_extensions", "mypy", "mypy_extensions"]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "PLR0913", "PLR0915", "PGH003", "ANN001", "ANN202", "ANN201", "PLR0912", "TRY301", "PLW0603", "PLR2004", "ANN101", "S106", "TRY201", "ANN003", "ANN002", "S105", "TRY003"]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.isort]
order-by-type = true

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true
mypy-init-return = true
suppress-dummy-args = true
suppress-none-returning = true

[tool.pydoclint]
style = "google"
exclude = '\.git|tests'
require-return-section-when-returning-nothing = false
arg-type-hints-in-docstring = false
check-return-types = false
skip-checking-raises = true
quiet = true

[tool.bumpversion]
current_version = "0.6.0"
commit = true
commit_args = "--no-verify"
tag = true
tag_name = "{new_version}"
allow_dirty = true
parse = "(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)(\\.(?P<dev>post)\\d+\\.dev\\d+)?"
serialize = [
    "{major}.{minor}.{patch}.{dev}{$PR_NUMBER}.dev{distance_to_latest_tag}",
    "{major}.{minor}.{patch}"
]
message = "Version updated from {current_version} to {new_version}"

[tool.bumpversion.parts.dev]
values = ["release", "post"]

[[tool.bumpversion.files]]
filename = "project_forge/__init__.py"

[[tool.bumpversion.files]]
filename = "CHANGELOG.md"
search = "Unreleased"

[[tool.bumpversion.files]]
filename = "CHANGELOG.md"
search = "{current_version}...HEAD"
replace = "{current_version}...{new_version}"
