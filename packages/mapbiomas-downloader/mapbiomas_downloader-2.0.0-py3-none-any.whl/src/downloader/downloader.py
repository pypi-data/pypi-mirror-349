# src/downloader/downloader.py
# Author: Ricardo Malnati

"""
Este m√≥dulo cont√©m as fun√ß√µes principais para o download e recorte de arquivos GeoTIFF do MapBiomas.
"""

import os
import sys
import logging
import geopandas as gpd
import rasterio
from rasterio.mask import mask
from typing import Dict, List, Optional, Tuple
import asyncio
import subprocess
import shutil

def limpar_diretorios_vazios(diretorio_base: str):
    """
    Remove subdiret√≥rios vazios dentro do diret√≥rio base.
    
    Args:
        diretorio_base: Caminho para o diret√≥rio base
    """
    if not os.path.exists(diretorio_base):
        return
    
    logging.info(f"Verificando diret√≥rios vazios em {diretorio_base}")
    print(f"üßπ Limpando diret√≥rios vazios em {diretorio_base}...")
    
    # Lista todos os subdiret√≥rios
    diretorios_removidos = 0
    for diretorio_raiz, subdiretorios, arquivos in os.walk(diretorio_base, topdown=False):
        # Ignora o diret√≥rio base
        if diretorio_raiz == diretorio_base:
            continue
        
        # Verifica se o diret√≥rio est√° vazio (sem arquivos e sem subdiret√≥rios)
        if not arquivos and not subdiretorios:
            try:
                # Tenta remover o diret√≥rio vazio
                os.rmdir(diretorio_raiz)
                logging.info(f"Diret√≥rio vazio removido: {diretorio_raiz}")
                diretorios_removidos += 1
            except OSError as e:
                logging.warning(f"Erro ao remover diret√≥rio vazio {diretorio_raiz}: {e}")
    
    if diretorios_removidos > 0:
        print(f"‚úÖ {diretorios_removidos} diret√≥rios vazios foram removidos.")
    else:
        print(f"‚ÑπÔ∏è  Nenhum diret√≥rio vazio encontrado.")

def verificar_existencia_shapefile(path_shapefile: str) -> bool:
    """
    Verifica se o shapefile e seus arquivos dependentes existem no disco.
    
    Args:
        path_shapefile: Caminho para o arquivo principal do shapefile (.shp)
        
    Returns:
        True se o shapefile e seus arquivos dependentes existem, False caso contr√°rio
    """
    # Verifica se o arquivo principal .shp existe
    if not os.path.exists(path_shapefile):
        return False
    
    # Obt√©m o caminho base e o nome do arquivo sem extens√£o
    base_path = os.path.dirname(path_shapefile)
    base_name = os.path.splitext(os.path.basename(path_shapefile))[0]
    
    # Lista de extens√µes comuns que comp√µem um shapefile
    dependencias = ['.shx', '.dbf', '.prj']
    
    # Verifica cada arquivo dependente
    for ext in dependencias:
        arquivo_dependente = os.path.join(base_path, base_name + ext)
        if not os.path.exists(arquivo_dependente):
            return False
    
    return True

def exibir_mensagem_shapefile_ausente(path_shapefile: str):
    """
    Exibe uma mensagem informativa quando um shapefile n√£o √© encontrado.
    
    Args:
        path_shapefile: Caminho para o arquivo principal do shapefile (.shp)
    """
    print("\n" + "="*80)
    print("‚ùå ERRO: SHAPEFILE N√ÉO ENCONTRADO")
    print("="*80)
    print(f"O arquivo shapefile esperado n√£o foi encontrado: {path_shapefile}")
    print("\nPARA QUE SERVE:")
    print("  Este arquivo √© necess√°rio para delimitar as √°reas geogr√°ficas que")
    print("  ser√£o utilizadas para recortar os dados do MapBiomas. O shapefile")
    print("  deve conter o c√≥digo IBGE dos munic√≠pios (campo CD_MUN) ou identificador")
    print("  equivalente no formato 'UF-CODIGO-XXXX' no campo 'cod_imovel'.")
    print("\nCOMO OBTER:")
    print("  1. Voc√™ pode baixar shapefiles de munic√≠pios no site do IBGE:")
    print("     https://www.ibge.gov.br/geociencias/downloads-geociencias.html")
    print("\n  2. Para √°reas rurais, voc√™ pode obter shapefiles no site do CAR:")
    print("     https://www.car.gov.br")
    print("     ou via aplicativo SICAR (dispon√≠vel no GitHub)")
    print("\nCOMO INFORMAR:")
    print("  Execute o aplicativo novamente informando o caminho correto do shapefile:")
    print(f"  python -m src.downloader.downloader --shapefile /caminho/para/seu/arquivo.shp")
    print("\nESTRUTURA ESPERADA:")
    print("  Um shapefile completo consiste em pelo menos 4 arquivos com o mesmo nome")
    print("  e extens√µes diferentes: .shp, .shx, .dbf e .prj")
    print("  Todos estes arquivos devem estar no mesmo diret√≥rio.")
    print("="*80 + "\n")

def verificar_cd_mun(path_shapefile: str, _teste: bool = False) -> Dict[str, str]:
    """
    Verifica se o shapefile existe e se cont√©m o campo CD_MUN ou uma alternativa.
    
    Args:
        path_shapefile: Caminho para o shapefile
        _teste: Par√¢metro interno usado apenas para testes automatizados
        
    Returns:
        Um dicion√°rio com informa√ß√µes do campo CD_MUN ou equivalente
        
    Raises:
        ValueError: Se o shapefile n√£o contiver campo CD_MUN ou alternativa
    """
    # Verifica se o shapefile e seus arquivos dependentes existem
    if not _teste and not verificar_existencia_shapefile(path_shapefile):
        exibir_mensagem_shapefile_ausente(path_shapefile)
        raise ValueError(f"O arquivo shapefile ou suas depend√™ncias n√£o foram encontrados: {path_shapefile}")
    
    try:
        gdf = gpd.read_file(path_shapefile)
        print(f"‚úÖ Shapefile carregado com sucesso: {path_shapefile}")
        
        # Verifica se CD_MUN est√° presente diretamente
        if "CD_MUN" in gdf.columns:
            print("‚úÖ Campo 'CD_MUN' encontrado no shapefile.")
            return {"campo": "CD_MUN", "formato": "direto"}
        
        # Verifica formato alternativo no cod_imovel (ex: "DF-5300108-XXXX")
        if "cod_imovel" in gdf.columns:
            # No modo de teste, n√£o verifica o formato real
            if _teste:
                print("‚úÖ Modo de teste: aceitando campo cod_imovel sem valida√ß√£o")
                return {"campo": "cod_imovel", "formato": "extrair"}
            
            sample = gdf["cod_imovel"].iloc[0] if not gdf.empty else ""
            if sample and "-" in sample:
                parts = sample.split("-")
                if len(parts) >= 2 and len(parts[1]) == 7 and parts[1].isdigit():
                    print(f"‚úÖ Formato alternativo encontrado em 'cod_imovel': {sample}")
                    print(f"   Extraindo c√≥digo do munic√≠pio da segunda parte: {parts[1]}")
                    return {"campo": "cod_imovel", "formato": "extrair"}
        
        print("‚ö†Ô∏è Campo 'CD_MUN' n√£o encontrado no shapefile.")
        print(f"Campos dispon√≠veis: {list(gdf.columns)}")
        raise ValueError(f"O shapefile {path_shapefile} n√£o cont√©m o campo CD_MUN ou equivalente.")
    
    except Exception as e:
        if "shapefile ou suas depend√™ncias n√£o foram encontrados" not in str(e):
            print(f"‚ùå Erro ao ler o shapefile: {e}")
        raise ValueError(f"Erro ao ler shapefile: {str(e)}")

def extrair_cd_mun(codigo: str) -> str:
    """
    Extrai o c√≥digo do munic√≠pio de uma string no formato "UF-CODIGO-XXXX"
    
    Args:
        codigo: String no formato "UF-CODIGO-XXXX"
        
    Returns:
        C√≥digo do munic√≠pio (7 d√≠gitos)
    """
    if not codigo or "-" not in codigo:
        return ""
    
    partes = codigo.split("-")
    if len(partes) < 2:
        return ""
    
    cod_mun = partes[1]
    if len(cod_mun) == 7 and cod_mun.isdigit():
        return cod_mun
    
    return ""

def perguntar_substituir(arquivo: str) -> bool:
    """
    Pergunta ao usu√°rio se deseja substituir um arquivo existente.
    
    Args:
        arquivo: Caminho do arquivo que j√° existe
    
    Returns:
        True se o usu√°rio deseja substituir, False caso contr√°rio
    """
    print(f"‚ö†Ô∏è O arquivo {arquivo} j√° existe.")
    while True:
        resposta = input(f"Deseja substitu√≠-lo? (s/n): ").lower()
        if resposta in ["s", "sim", "y", "yes"]:
            print(f"‚úÖ Substituindo arquivo existente: {arquivo}")
            return True
        elif resposta in ["n", "n√£o", "nao", "no"]:
            print(f"‚úÖ Utilizando arquivo existente: {arquivo}")
            return False
        else:
            print("Por favor, responda com 's' para sim ou 'n' para n√£o.")

def obter_anos_validos():
    """
    Retorna a lista de anos v√°lidos dispon√≠veis no MapBiomas.
    
    Returns:
        Lista de anos dispon√≠veis
    """
    # Lista de anos dispon√≠veis no MapBiomas
    return [1985, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 
            2016, 2017, 2018, 2019, 2020, 2021, 2023]

def verificar_periodo_valido(ano_inicio: int, ano_fim: int) -> bool:
    """
    Verifica se o per√≠odo especificado √© v√°lido para os dados do MapBiomas.
    
    Args:
        ano_inicio: Ano inicial do per√≠odo
        ano_fim: Ano final do per√≠odo
        
    Returns:
        True se o per√≠odo √© v√°lido, False caso contr√°rio
    """
    anos_validos = obter_anos_validos()
    
    # Verifica se os anos de in√≠cio e fim est√£o na lista de anos v√°lidos
    # e se o ano inicial √© menor ou igual ao ano final
    return (ano_inicio in anos_validos and 
            ano_fim in anos_validos and 
            ano_inicio <= ano_fim)

def exibir_mensagem_periodo_invalido(ano_inicio: int, ano_fim: int):
    """
    Exibe uma mensagem informativa quando o per√≠odo especificado √© inv√°lido.
    
    Args:
        ano_inicio: Ano inicial especificado
        ano_fim: Ano final especificado
    """
    anos_validos = obter_anos_validos()
    anos_validos_str = ", ".join(str(ano) for ano in anos_validos)
    primeiro_ano = min(anos_validos)
    ultimo_ano = max(anos_validos)
    
    print("\n" + "="*80)
    print("‚ö†Ô∏è AVISO: PER√çODO INV√ÅLIDO PARA DADOS DO MAPBIOMAS")
    print("="*80)
    print(f"O per√≠odo solicitado (de {ano_inicio} a {ano_fim}) cont√©m anos n√£o dispon√≠veis.")
    print(f"O MapBiomas atualmente disponibiliza dados apenas para os seguintes anos:")
    print(f"  {anos_validos_str}")
    print("\nPOSS√çVEIS PROBLEMAS:")
    
    if ano_inicio not in anos_validos:
        print(f"  ‚Ä¢ O ano inicial ({ano_inicio}) n√£o est√° dispon√≠vel")
    if ano_fim not in anos_validos:
        print(f"  ‚Ä¢ O ano final ({ano_fim}) n√£o est√° dispon√≠vel")
    if ano_inicio > ano_fim:
        print(f"  ‚Ä¢ O ano inicial ({ano_inicio}) √© posterior ao ano final ({ano_fim})")
    
    print("\nRECOMENDA√á√ïES:")
    print(f"  Execute novamente especificando anos dispon√≠veis:")
    print(f"  python -m src.downloader.downloader --shapefile seu_shapefile.shp --ano-inicio {primeiro_ano} --ano-fim {ultimo_ano}")
    print("\n  Para processar apenas anos espec√≠ficos, voc√™ pode executar o programa v√°rias vezes,")
    print("  uma para cada ano desejado, usando o mesmo valor para --ano-inicio e --ano-fim.")
    print("="*80 + "\n")

async def baixar_e_recortar_por_shapefile(
    shapefile_path: str,
    ano_inicio: int = 1985,
    ano_fim: int = 2023,  # Atualizado para 2023, √∫ltimo ano dispon√≠vel
    diretorio_base: str = "downloads_mapbiomas",
    _teste: bool = False,
    limite_feicoes: int = 0,
    substituir_arquivos: Optional[bool] = None,
    utilizar_existentes: Optional[bool] = None
) -> Dict[str, List[str]]:
    """
    Baixa arquivos GeoTIFF nacionais do MapBiomas e recorta usando shapefile.
    
    Args:
        shapefile_path: Caminho para o shapefile com limites municipais
        ano_inicio: Ano inicial para baixar (padr√£o: 1985)
        ano_fim: Ano final para baixar (padr√£o: 2023)
        diretorio_base: Diret√≥rio base onde os arquivos recortados ser√£o salvos
        _teste: Par√¢metro interno usado apenas para testes automatizados
        limite_feicoes: Limitar o n√∫mero de fei√ß√µes processadas (0 = todas)
        substituir_arquivos: Se True, substitui arquivos existentes sem perguntar.
                           Se False, utiliza arquivos existentes sem perguntar.
                           Se None (padr√£o), pergunta ao usu√°rio para cada arquivo.
        utilizar_existentes: Par√¢metro alternativo para manter a compatibilidade.
                           Se True, equivale a substituir_arquivos=False.
        
    Returns:
        Dicion√°rio com os resultados do processamento por munic√≠pio
    """
    # Configura o log na raiz do projeto
    projeto_raiz = os.path.abspath(os.path.join(os.path.dirname(__file__), "../.."))
    log_path = os.path.join(projeto_raiz, "mapbiomas_download.log")
    logging.basicConfig(
        filename=log_path, 
        level=logging.INFO, 
        format="%(asctime)s - %(levelname)s - %(message)s"
    )
    
    # Lista para armazenar resultados
    resultados = {}
    
    # Cria diret√≥rio base se n√£o existir
    os.makedirs(diretorio_base, exist_ok=True)
    
    # Dicion√°rio para armazenar decis√µes sobre substituir arquivos (para n√£o perguntar m√∫ltiplas vezes)
    decisoes_arquivos = {
        "nacionais": {},  # Por ano
        "municipais": {}  # Por munic√≠pio e ano
    }
    
    # Se utilizar_existentes for True, configuramos substituir_arquivos como False
    if utilizar_existentes:
        substituir_arquivos = False
    
    # Verifica se o per√≠odo especificado √© v√°lido
    if not _teste and not verificar_periodo_valido(ano_inicio, ano_fim):
        exibir_mensagem_periodo_invalido(ano_inicio, ano_fim)
        print("‚ö†Ô∏è Continuando o processamento apenas para os anos dispon√≠veis dentro do per√≠odo solicitado...")
        
        # Obt√©m os anos v√°lidos e filtra apenas os que est√£o dentro do per√≠odo solicitado
        anos_validos = obter_anos_validos()
        anos_para_processar = [ano for ano in anos_validos if ano_inicio <= ano <= ano_fim]
        
        if not anos_para_processar:
            raise ValueError(f"N√£o h√° anos v√°lidos dispon√≠veis no per√≠odo solicitado: {ano_inicio} a {ano_fim}")
        
        print(f"‚ÑπÔ∏è Anos v√°lidos a serem processados: {', '.join(map(str, anos_para_processar))}")
    
    # Se estamos em modo de teste, pula o download real e a verifica√ß√£o do shapefile
    if _teste:
        print("üß™ Modo de teste: simulando download e recorte")
        nacional_dir = os.path.join(diretorio_base, "nacional")
        os.makedirs(nacional_dir, exist_ok=True)
        
        # Dados simulados para o teste - extrai o estado do caminho do shapefile
        # C√≥digos dos munic√≠pios das capitais dos estados
        if "AC" in shapefile_path:
            cd_muns = ["1200401"]  # Rio Branco
        elif "AL" in shapefile_path:
            cd_muns = ["2704302"]  # Macei√≥
        elif "AM" in shapefile_path:
            cd_muns = ["1302603"]  # Manaus
        elif "AP" in shapefile_path:
            cd_muns = ["1600303"]  # Macap√°
        elif "BA" in shapefile_path:
            cd_muns = ["2927408"]  # Salvador
        elif "CE" in shapefile_path:
            cd_muns = ["2304400"]  # Fortaleza
        elif "ES" in shapefile_path:
            cd_muns = ["3205309"]  # Vit√≥ria
        elif "GO" in shapefile_path:
            cd_muns = ["5208707"]  # Goi√¢nia
        elif "MA" in shapefile_path:
            cd_muns = ["2111300"]  # S√£o Lu√≠s
        elif "MG" in shapefile_path:
            cd_muns = ["3106200"]  # Belo Horizonte
        elif "MS" in shapefile_path:
            cd_muns = ["5002704"]  # Campo Grande
        elif "MT" in shapefile_path:
            cd_muns = ["5103403"]  # Cuiab√°
        elif "PA" in shapefile_path:
            cd_muns = ["1501402"]  # Bel√©m
        elif "PB" in shapefile_path:
            cd_muns = ["2507507"]  # Jo√£o Pessoa
        elif "PE" in shapefile_path:
            cd_muns = ["2611606"]  # Recife
        elif "PI" in shapefile_path:
            cd_muns = ["2211001"]  # Teresina
        elif "PR" in shapefile_path:
            cd_muns = ["4106902"]  # Curitiba
        elif "RJ" in shapefile_path:
            cd_muns = ["3304557"]  # Rio de Janeiro
        elif "RN" in shapefile_path:
            cd_muns = ["2408102"]  # Natal
        elif "RO" in shapefile_path:
            cd_muns = ["1100205"]  # Porto Velho
        elif "RR" in shapefile_path:
            cd_muns = ["1400100"]  # Boa Vista
        elif "RS" in shapefile_path:
            cd_muns = ["4314902"]  # Porto Alegre
        elif "SC" in shapefile_path:
            cd_muns = ["4205407"]  # Florian√≥polis
        elif "SE" in shapefile_path:
            cd_muns = ["2800308"]  # Aracaju
        elif "SP" in shapefile_path:
            cd_muns = ["3550308"]  # S√£o Paulo
        elif "TO" in shapefile_path:
            cd_muns = ["1721000"]  # Palmas
        else:
            cd_muns = ["5300108"]  # Bras√≠lia (DF)
        
        # Cria diret√≥rios para cada ano solicitado
        for ano in range(ano_inicio, ano_fim + 1):
            # Cria diret√≥rio para o ano
            ano_dir = os.path.join(diretorio_base, str(ano))
            os.makedirs(ano_dir, exist_ok=True)
            
            # Simula o recorte para cada munic√≠pio
            for cd_mun in cd_muns:
                # Nome do arquivo de sa√≠da para o munic√≠pio
                arquivo_municipio = os.path.join(ano_dir, f"{cd_mun}.tif")
                
                # Adiciona ao resultado
                if cd_mun not in resultados:
                    resultados[cd_mun] = []
                resultados[cd_mun].append(arquivo_municipio)
                
                print(f"‚úÇÔ∏è  [SIMULA√á√ÉO] Recorte para munic√≠pio {cd_mun}, ano {ano} simulado")
        
        return resultados
    
    # Verifica√ß√£o real do shapefile
    try:
        campo_info = verificar_cd_mun(shapefile_path, _teste)
    except ValueError as e:
        erro_msg = f"Erro ao validar shapefile '{shapefile_path}': {str(e)}"
        logging.error(erro_msg)
        print(f"‚ùå {erro_msg}")
        return {}
    
    # Carrega o shapefile
    try:
        gdf = gpd.read_file(shapefile_path)
        
        # Se um limite foi especificado, reduz o n√∫mero de fei√ß√µes
        if limite_feicoes > 0 and len(gdf) > limite_feicoes:
            print(f"‚ö†Ô∏è Limitando processamento a {limite_feicoes} fei√ß√µes de {len(gdf)} para economizar mem√≥ria")
            gdf = gdf.iloc[:limite_feicoes]
            
        logging.info(f"Shapefile carregado: {shapefile_path} com {len(gdf)} fei√ß√µes")
        print(f"üìä Shapefile cont√©m {len(gdf)} fei√ß√µes/geometrias para recorte")
    except Exception as e:
        erro_msg = f"Erro ao carregar shapefile: {e}"
        logging.error(erro_msg)
        print(f"‚ùå {erro_msg}")
        return {}
    
    # Determina o campo e m√©todo para obter o CD_MUN
    campo = campo_info["campo"]
    formato = campo_info["formato"]
    
    # Lista para armazenar resultados
    arquivos_nacionais = []
    
    # Baixa os rasters nacionais para cada ano usando curl
    for ano in range(ano_inicio, ano_fim + 1):
        # Pula anos n√£o dispon√≠veis
        anos_validos = obter_anos_validos()
        if ano not in anos_validos:
            logging.warning(f"Ano {ano} n√£o est√° dispon√≠vel no MapBiomas. Anos dispon√≠veis: {anos_validos}. Pulando.")
            continue
            
        # URLs poss√≠veis para o raster nacional
        urls = [
            f"https://storage.googleapis.com/mapbiomas-public/initiatives/brasil/collection_9/lclu/coverage/brasil_coverage_{ano}.tif",
            f"https://storage.googleapis.com/mapbiomas-public/initiatives/brasil/collection_8/lclu/coverage/brasil_coverage_{ano}.tif",
            f"https://storage.googleapis.com/mapbiomas-public/initiatives/brasil/collection_7/lclu/coverage/brasil_coverage_{ano}.tif",
            f"https://storage.googleapis.com/mapbiomas-public/collection_9/lclu/coverage/brasil_coverage_{ano}.tif",
            f"https://storage.googleapis.com/mapbiomas-public/COLECAO/9/ANUAL/BRASIL_COBERTURA/{ano}/coverage_{ano}.tif"
        ]
        
        # Nome tempor√°rio para o arquivo nacional
        nacional_dir = os.path.join(diretorio_base, "nacional")
        os.makedirs(nacional_dir, exist_ok=True)
        arquivo_nacional = os.path.join(nacional_dir, f"brasil_coverage_{ano}.tif")
        
        # Verifica se o arquivo nacional j√° existe
        arquivo_ja_existe = os.path.exists(arquivo_nacional)
        arquivo_baixado = False
        
        if arquivo_ja_existe:
            # Decide se utiliza o arquivo existente ou faz download novamente
            if ano in decisoes_arquivos["nacionais"]:
                # Usa decis√£o anterior
                usar_existente = not decisoes_arquivos["nacionais"][ano]
            elif substituir_arquivos is not None:
                # Usa par√¢metro da fun√ß√£o
                usar_existente = not substituir_arquivos
            else:
                # Pergunta ao usu√°rio
                substituir = perguntar_substituir(arquivo_nacional)
                decisoes_arquivos["nacionais"][ano] = substituir
                usar_existente = not substituir
            
            if usar_existente:
                print(f"üîÑ Utilizando arquivo nacional existente para {ano}: {os.path.basename(arquivo_nacional)}")
                logging.info(f"Utilizando arquivo nacional existente: {arquivo_nacional}")
                arquivos_nacionais.append(arquivo_nacional)
                arquivo_baixado = True
            else:
                print(f"üîÑ Preparando para substituir arquivo nacional existente para {ano}")
                logging.info(f"Substituindo arquivo nacional existente: {arquivo_nacional}")
        
        # Se n√£o temos arquivo ou decidimos substituir, fazemos o download
        if not arquivo_baixado:
            erros = []
            
            # Tenta baixar o arquivo de cada URL usando curl
            for url in urls:
                logging.info(f"Tentando baixar raster nacional para {ano} de: {url}")
                print(f"‚¨áÔ∏è  Baixando raster nacional para {ano} de {url}...")
                
                try:
                    # Primeiro verifica se o arquivo existe com um HEAD request
                    check_cmd = ["curl", "-s", "-I", url]
                    resultado_check = subprocess.run(check_cmd, capture_output=True, text=True)
                    
                    if "200 OK" not in resultado_check.stdout and "HTTP/2 200" not in resultado_check.stdout:
                        erro = f"Arquivo n√£o encontrado em {url} (status: n√£o √© 200 OK)"
                        erros.append(erro)
                        logging.warning(erro)
                        print(f"‚ö†Ô∏è {erro}")
                        continue
                        
                    # Baixa o arquivo usando curl com barra de progresso
                    cmd = ["curl", "-#", "-L", "-o", arquivo_nacional, url]
                    resultado = subprocess.run(cmd, check=True)
                    
                    if resultado.returncode == 0:
                        arquivos_nacionais.append(arquivo_nacional)
                        logging.info(f"Download conclu√≠do: {arquivo_nacional}")
                        print(f"‚úÖ Raster nacional baixado: {os.path.basename(arquivo_nacional)}")
                        arquivo_baixado = True
                        break
                    else:
                        erro = f"Falha ao baixar de {url}: curl retornou c√≥digo {resultado.returncode}"
                        erros.append(erro)
                        logging.warning(erro)
                        print(f"‚ö†Ô∏è {erro}")
                except subprocess.CalledProcessError as e:
                    erro = f"Falha ao baixar de {url}: {str(e)}"
                    erros.append(erro)
                    logging.warning(erro)
                    print(f"‚ö†Ô∏è {erro}")
                except Exception as e:
                    erro = f"Erro inesperado ao baixar de {url}: {str(e)}"
                    erros.append(erro)
                    logging.warning(erro)
                    print(f"‚ö†Ô∏è {erro}")
        
        if not arquivo_baixado:
            erro_msg = f"Erro ao baixar raster nacional para {ano}: Todas as tentativas falharam."
            logging.error(erro_msg)
            print(f"‚ùå {erro_msg}")
            print("Detalhes dos erros:")
            for i, erro in enumerate(erros, 1):
                print(f"  {i}. {erro}")
            continue
        
        # Cria diret√≥rio para o ano
        ano_dir = os.path.join(diretorio_base, str(ano))
        os.makedirs(ano_dir, exist_ok=True)
        
        # Recorta o raster nacional para cada munic√≠pio no shapefile
        for idx, feature in gdf.iterrows():
            # Mostra progresso a cada 1000 fei√ß√µes
            if idx % 1000 == 0:
                print(f"üîÑ Processando fei√ß√£o {idx} de {len(gdf)}...")
                
            # Obt√©m o c√≥digo do munic√≠pio
            if formato == "direto":
                cd_mun = str(feature[campo])
            else:  # formato == "extrair"
                cd_mun = extrair_cd_mun(feature[campo])
            
            if not cd_mun:
                logging.warning(f"N√£o foi poss√≠vel extrair CD_MUN para a fei√ß√£o {idx}")
                continue
            
            # Nome do arquivo de sa√≠da para o munic√≠pio
            arquivo_municipio = os.path.join(ano_dir, f"{cd_mun}.tif")
            
            # Verifica se o arquivo municipal j√° existe
            arquivo_municipal_existe = os.path.exists(arquivo_municipio)
            
            # Chave composta para identificar munic√≠pio/ano
            chave_municipal = f"{cd_mun}_{ano}"
            
            if arquivo_municipal_existe:
                # Decide se utiliza o arquivo existente ou recorta novamente
                if chave_municipal in decisoes_arquivos["municipais"]:
                    # Usa decis√£o anterior
                    usar_existente = not decisoes_arquivos["municipais"][chave_municipal]
                elif substituir_arquivos is not None:
                    # Usa par√¢metro da fun√ß√£o
                    usar_existente = not substituir_arquivos
                else:
                    # Pergunta ao usu√°rio
                    substituir = perguntar_substituir(arquivo_municipio)
                    decisoes_arquivos["municipais"][chave_municipal] = substituir
                    usar_existente = not substituir
                
                if usar_existente:
                    # Adiciona ao resultado e pula o recorte
                    if cd_mun not in resultados:
                        resultados[cd_mun] = []
                    resultados[cd_mun].append(arquivo_municipio)
                    
                    logging.info(f"Utilizando raster existente para {cd_mun}, ano {ano}: {arquivo_municipio}")
                    
                    # Mostra mensagem apenas para a primeira e √∫ltima fei√ß√£o para n√£o sobrecarregar o console
                    if idx == 0 or idx == len(gdf) - 1 or idx % 1000 == 0:
                        print(f"üîÑ Utilizando recorte existente para munic√≠pio {cd_mun}, ano {ano} (fei√ß√£o {idx})")
                    continue
                else:
                    logging.info(f"Preparando para substituir raster existente para {cd_mun}, ano {ano}")
                    if idx == 0 or idx == len(gdf) - 1 or idx % 1000 == 0:
                        print(f"üîÑ Preparando para substituir recorte existente para munic√≠pio {cd_mun}, ano {ano} (fei√ß√£o {idx})")
            
            try:
                # Prepara a geometria para recorte
                geometria = [feature.geometry.__geo_interface__]
                
                # Abre o raster nacional
                with rasterio.open(arquivo_nacional) as src:
                    # Recorta o raster pela geometria
                    out_image, out_transform = mask(src, geometria, crop=True, nodata=src.nodata)
                    
                    # Copia o metadata e atualiza a transforma√ß√£o
                    out_meta = src.meta.copy()
                    out_meta.update({
                        "driver": "GTiff",
                        "height": out_image.shape[1],
                        "width": out_image.shape[2],
                        "transform": out_transform
                    })
                    
                    # Salva o raster recortado
                    with rasterio.open(arquivo_municipio, "w", **out_meta) as dest:
                        dest.write(out_image)
                    
                    # Adiciona ao resultado
                    if cd_mun not in resultados:
                        resultados[cd_mun] = []
                    resultados[cd_mun].append(arquivo_municipio)
                    
                    logging.info(f"Raster recortado para {cd_mun}, ano {ano}: {arquivo_municipio}")
                    # Mostra mensagem apenas para a primeira e √∫ltima fei√ß√£o para n√£o sobrecarregar o console
                    if idx == 0 or idx == len(gdf) - 1 or idx % 1000 == 0:
                        print(f"‚úÇÔ∏è  Recorte para munic√≠pio {cd_mun}, ano {ano} conclu√≠do (fei√ß√£o {idx})")
            
            except Exception as e:
                logging.error(f"Erro ao recortar raster para munic√≠pio {cd_mun}, ano {ano}: {e}")
                print(f"‚ùå Erro ao recortar para {cd_mun}, ano {ano}: {e}")
    
    # Limpa diret√≥rios vazios
    limpar_diretorios_vazios(diretorio_base)
    
    # Retorna resumo do processamento
    return resultados

async def main():
    """
    Fun√ß√£o principal para execu√ß√£o do script.
    Processa os argumentos da linha de comando e inicia os downloads.
    """
    import argparse
    import os
    
    parser = argparse.ArgumentParser(
        description="Ferramenta para download e recorte de arquivos GeoTIFF do MapBiomas utilizando shapefile",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Exemplos de uso:
  python -m src.downloader.downloader --shapefile shape/DF/APPS_1.shp --ano-inicio 2020 --ano-fim 2021
  python -m src.downloader.downloader --shapefile dados/municipios_brasil.shp --ano-inicio 2022 --ano-fim 2022
  python -m src.downloader.downloader --teste

O shapefile deve conter o campo CD_MUN com o c√≥digo IBGE de 7 d√≠gitos dos munic√≠pios,
ou o campo cod_imovel no formato "UF-CODIGO-XXXX" (ex: "DF-5300108-XXXX").

Valores padr√£o se n√£o especificados:
  - Ano inicial: 1985
  - Ano final: 2023
  - Diret√≥rio de sa√≠da: ./downloads_mapbiomas/<ano>/<CD_MUN>.tif

Anos dispon√≠veis:
  - Os dados do MapBiomas est√£o dispon√≠veis apenas para os seguintes anos:
    1985, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2023
  - O programa processar√° automaticamente apenas os anos dispon√≠veis.

Fonte de dados:
  - Collection 9 do MapBiomas
"""
    )
    
    grupo_dados = parser.add_argument_group('Op√ß√µes de download')
    grupo_dados.add_argument("--shapefile", "-s", required=True, help="Caminho para shapefile com limites municipais")
    grupo_dados.add_argument("--ano-inicio", "-i", type=int, default=1985, help="Ano inicial (padr√£o: 1985)")
    grupo_dados.add_argument("--ano-fim", "-f", type=int, default=2023, help="Ano final (padr√£o: 2023)")
    grupo_dados.add_argument("--diretorio", "-d", default="downloads_mapbiomas", help="Diret√≥rio base para os arquivos baixados")
    grupo_dados.add_argument("--limite-feicoes", "-l", type=int, default=0, help="Limitar o n√∫mero de fei√ß√µes processadas (0 = todas)")
    
    grupo_operacoes = parser.add_argument_group('Outras opera√ß√µes')
    grupo_operacoes.add_argument("--teste", "-t", action="store_true", help="Executa em modo de teste (sem download real)")
    grupo_operacoes.add_argument("--substituir", action="store_true", help="Substitui arquivos existentes sem perguntar")
    grupo_operacoes.add_argument("--manter", "--usar-existentes", action="store_true", help="Mant√©m arquivos existentes sem perguntar")
    
    args = parser.parse_args()
    
    # Verifica se foi especificado o shapefile (obrigat√≥rio)
    if not args.shapefile:
        print("‚ùå Erro: √â necess√°rio especificar um shapefile (--shapefile)")
        print("‚ÑπÔ∏è  Use --help para ver todas as op√ß√µes dispon√≠veis")
        parser.print_help()
        return
    
    # Verifica conflito de op√ß√µes
    if args.substituir and args.manter:
        print("‚ùå Erro: As op√ß√µes --substituir e --manter n√£o podem ser usadas juntas")
        return
    
    # Define o comportamento para arquivos existentes
    substituir_arquivos = None
    
    # Verifica a vari√°vel de ambiente V_MAPBIOMAS_REPLACE
    v_mapbiomas_replace = os.environ.get('V_MAPBIOMAS_REPLACE')
    if v_mapbiomas_replace is not None:
        try:
            v_mapbiomas_replace = int(v_mapbiomas_replace)
            # Se V_MAPBIOMAS_REPLACE=0, substituir arquivos
            # Se V_MAPBIOMAS_REPLACE=1, n√£o substituir arquivos
            substituir_arquivos = v_mapbiomas_replace == 0
            print(f"‚ÑπÔ∏è  Usando configura√ß√£o do ambiente: {'substituir' if substituir_arquivos else 'manter'} arquivos existentes")
        except ValueError:
            print(f"‚ö†Ô∏è  Valor inv√°lido para V_MAPBIOMAS_REPLACE: {v_mapbiomas_replace}, usando padr√£o")
    
    # Par√¢metros da linha de comando t√™m preced√™ncia sobre vari√°veis de ambiente
    if args.substituir:
        substituir_arquivos = True
    elif args.manter:
        substituir_arquivos = False
    
    # Processa por shapefile
    try:
        resultados = await baixar_e_recortar_por_shapefile(
            shapefile_path=args.shapefile,
            ano_inicio=args.ano_inicio,
            ano_fim=args.ano_fim,
            diretorio_base=args.diretorio,
            _teste=args.teste,
            limite_feicoes=args.limite_feicoes,
            substituir_arquivos=substituir_arquivos,
            utilizar_existentes=args.manter
        )
        
        # Imprime resumo
        if resultados:
            print(f"\nüìä Resumo do processamento com shapefile:")
            print(f"   ‚úÖ Munic√≠pios processados: {len(resultados)}")
            for cd_mun, arquivos in resultados.items():
                print(f"     - {cd_mun}: {len(arquivos)} anos processados")
        else:
            print("\n‚ùå N√£o foram gerados resultados. Verifique os erros acima.")
    except Exception as e:
        logging.error(f"Erro ao processar shapefile {args.shapefile}: {e}")
        print(f"‚ùå Erro: {e}")
    finally:
        # Limpa diret√≥rios vazios mesmo em caso de erro
        if args.diretorio:
            limpar_diretorios_vazios(args.diretorio)

if __name__ == "__main__":
    asyncio.run(main()) 