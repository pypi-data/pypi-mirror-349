# -*- coding: utf-8 -*-
"""
Created on Thu Jul 11 18:10:18 2024

@author: yangl
"""
from minio import Minio
from neuon.neuon_utils import print_debug as print
import os
from io import BytesIO
from minio.error import S3Error
import urllib3

LOG_PING = True

def supress_ping_log(supress:bool=True):
    """
    Overide function to supress ping logs emiteed during checking connection
    with database. This ping message will emit everytime interaction
    with database is invoke to check if database connection is active which
    potentially could be over-logging.

    Parameters
    ----------
    ```
    supress : bool, optional  
        True to supress this specific log. The default is True.

    ```
    Returns
    -------
    ```
    None.

    ```
    """
    global LOG_PING
    LOG_PING = not supress

class minio_storage(object):
    def __init__(self,endpoint:str,access_key:str,secret_key:str):
        """
        Create manager for minio

        Parameters
        ----------
        endpoint : str
            console endpoint for minio.
        access_key : str
            access key generated by access policy.
        secret_key : str
            secret key come along the generated access policy.

        Returns
        -------
        None.

        """
        self.endpoint = endpoint
        self.access_key = access_key
        self.secret_key = secret_key
        
        secure = os.environ.get('MINIO_SECURE','1')
        if secure == '1':
            secure = True
        else:
            secure = False
        self.secure = secure
        
        self.connect_storage()

    def connect_storage(self):
        """
        Attempt to connect to minio server

        Returns
        -------
        bool
            Return True upon success connect, False otherwise.

        """
        try:
            self.client = Minio(
                self.endpoint,
                access_key = self.access_key,
                secret_key = self.secret_key,
                secure = self.secure,
                http_client=urllib3.PoolManager(
                    timeout=urllib3.Timeout(connect=5.0, read=10.0),
                    retries=False)
                )
            return self.is_storage_connected()
            
        except Exception as e:
            print(e)
            return False
        
    def is_storage_connected(self):
        """
        Verify if storage connected.

        Returns
        -------
        bool
            Return True upon success connect, False otherwise.

        """
        try:
            buckets = self.client.list_buckets()
            if LOG_PING:
                print(f'Storage connection active : {buckets}')
            return True
        except Exception as e:
            print(e)
            return False
        
    def upload_file(self,bucket_name:str,source_file:str,destination_file:str):
        """
        Upload a file

        Parameters
        ----------
        bucket_name : str
            bucket name of the storage to upload.
        source_file : str
            source file path in local.
        destination_file : str
            file path to save in minio.

        Returns
        -------
        object_write_result : minio.ObjectWriteResult object
            write result object by minio api fput_object.
            In the event of failing, return None

        """
        try:
            object_write_result = self.client.fput_object(
                bucket_name,destination_file,source_file
                )
            if object_write_result.etag is None:
                return None
            else:
                print(f'File {destination_file} uploaded')
                return object_write_result
            
        except Exception as e:
            print(e)
            return None
        
    def download_file_as_byte(self,bucket_name:str,file_path:str):
        """
        Download a file from minio as io.BytesIO object

        Parameters
        ----------
        bucket_name : str
            bucket name of the storage to download.
        file_path : str
            file path of item to download in minio.

        Returns
        -------
        filebytes : io.BytesIO
            return bytes if success, else, None.

        """
        try:
            obj = self.client.get_object(bucket_name,file_path)
            filebytes = BytesIO(obj.read())
            obj.close()
            obj.release_conn()
            
            return filebytes
        except S3Error as e:
            print(f"Download error S3Error {e}")
            return None
        except Exception as e:
            print(e)
            return None
    
    def download_file(self,bucket_name:str,file_path:str,save_path:str):
        """
        Download a file from minio server to local

        Parameters
        ----------
        bucket_name : str
            bucket name of the storage to download.
        file_path : str
            file path of item to download in minio.
        save_path : str
            file path to save in local.

        Returns
        -------
        bool
            True of success download, otherwise, False.

        """
        ret = self.download_file_as_byte(bucket_name,file_path)
        
        savefolder = os.path.split(save_path)[0]
        if savefolder != "":
            if not os.path.exists(savefolder):
                os.makedirs(savefolder)
        
        if ret is not None:
            with open(save_path,'wb') as fid:
                fid.write(ret.getvalue())
                
            return True
        else:
            return False

    def remove_file(self,bucket_name:str,file_path:str):
        """
        Remove a file in minio server

        Parameters
        ----------
        bucket_name : str
            bucket name of the storage to download.
        file_path : str
            file path of item to delete in minio.

        Returns
        -------
        bool
            True of success download, otherwise, False.

        """
        print(bucket_name,file_path)
        try:
            self.client.stat_object(bucket_name,file_path)
        except Exception as e:
            print(e)
            return False
        
        try:
            self.client.remove_object(bucket_name,file_path)
            return True
        except Exception as e:
            print(e)
            return False            
        
if __name__ == "__main__":
    os.environ['NEUON_DEBUG'] = '1'
    MINIO_ENDPOINT = os.environ.get("MINIO_ENDPOINT")
    MINIO_ACCESS_KEY = os.environ.get("MINIO_ACCESS_KEY")
    MINIO_SECRET_KEY = os.environ.get("MINIO_SECRET_KEY")
    
    mS3 = minio_storage(MINIO_ENDPOINT,MINIO_ACCESS_KEY,MINIO_SECRET_KEY)
    
    # mS3.upload_file('bucketname',r"/path/in/local/myfile.jpg",'path/to/minio/storage/myfile.jpg')
    
    obj = mS3.download_file_as_byte('bucketname','path/to/minio/storage/myfile.jpg')
    obj = mS3.download_file('bucketname',
                            'path/to/minio/storage/myfile.jpg',
                            'path/to/save/in/local/myfile.jpg')

    
    

