Metadata-Version: 2.3
Name: hg_systematic
Version: 0.0.31
Summary:  A library and examples to show how HGraph can be used for systematic trading. 
License: MIT
Keywords: reactive,graph,fpg,forward propogating graph,time series,functional reactive programming,frp,functional,time-series,systematic,trading,strategy
Author: Howard Henson
Author-email: howard@henson.me.uk
Requires-Python: >=3.11
Classifier: Development Status :: 3 - Alpha
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.13
Classifier: Programming Language :: Python :: Implementation :: CPython
Requires-Dist: antlr4-python3-runtime
Requires-Dist: frozendict (>=2.3.10)
Requires-Dist: hg_oap (>=0.1.13)
Requires-Dist: hgraph (>=0.4.28)
Requires-Dist: importlib_resources
Requires-Dist: matplotlib
Requires-Dist: numpy (>=1.23)
Requires-Dist: ordered-set (>=4.1.0)
Requires-Dist: polars (>=1.0)
Requires-Dist: sortedcontainers (>=2.4.0)
Project-URL: Changelog, https://github.com/hhenson/hg_systematic/blob/main/CHANGELOG.md
Project-URL: Documentation, https://github.com/hhenson/hg_systematic/blob/main/README.md
Project-URL: Homepage, https://github.com/hhenson/hg_systematic
Project-URL: Issues, https://github.com/hhenson/hg_systematic/blob/main/ISSUES.md
Project-URL: Repository, https://github.com/hhenson/hg_systematic.git
Description-Content-Type: text/markdown

# HG Systematic

This is a library of utilities and examples to highlight how HGraph can be used to implement
systematic trading strategies.


See [this](https://hgraph.readthedocs.io/en/latest/) for more information.

## Development

The project is currently configured to make use of [Poetry](https://python-poetry.org) for dependency management. 
Take a look at the website to see how best to install the tool.

Here are some useful commands:

First, this will cause the virtual environment to be installed in the same folder as the project (in .venv folder)

```bash
poetry config virtualenvs.in-project true
```

Use this command to set the version of Python to make use of if you want a specific version of Python.

```bash
poetry env use 3.12
```

Then use the following command to install the project and its dependencies. Note that the ``--with docs`` installs
the dependencies to build the documentation set which is not required otherwise, also the ``--all-extras`` is only
required for the adaptors.

```bash
poetry install --with docs --all-extras
```

If you did not use the first command, you can find the location of the installation using:

```bash
poetry env info
```

PyCharm can make use of poetry to ``setup`` the project.

### Run Tests

```bash
# No Coverage
poetry run pytest
```

```bash
# Generate Coverage Report
poetry run pytest --cov=your_package_name --cov-report=xml
```

