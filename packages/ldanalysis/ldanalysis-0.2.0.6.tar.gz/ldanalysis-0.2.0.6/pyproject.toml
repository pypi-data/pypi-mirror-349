[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[project]
name = "ldanalysis"
version = "0.2.0.6"
description = "Linked Document Analysis - A provenance-driven project management system"
readme = "README.md"
authors = [
    {name = "ErnieP", email = "ernie@cincineuro.com"}
]
license = {text = "MIT"}
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
requires-python = ">=3.8"
keywords = ["document-analysis", "provenance", "project-management", "tracking", "scientific-computing"]
dependencies = [
    "pyyaml>=6.0",
    "rich>=13.0",
    "click>=8.1",
    "jinja2>=3.0",
    "build>=1.2.2.post1",
    "twine>=6.1.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "black>=22.0",
    "flake8>=5.0",
    "mypy>=0.990",
    "build>=1.2.0",
    "twine>=6.0.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocs-material-extensions>=1.3",
    "mkdocs-minify-plugin>=0.7.0",
    "pymdown-extensions>=10.0",
    "mkdocs-git-revision-date-localized-plugin>=1.2.0",
    "mike>=2.1.0",
]
all = ["ldanalysis[dev,docs]"]

[project.scripts]
lda = "lda.cli.main:main"
ldanalysis = "lda.cli.main:main"

[project.urls]
Homepage = "https://cincineuro.github.io/ldanalysis/"
Documentation = "https://cincineuro.github.io/ldanalysis/"
Repository = "https://github.com/cincineuro/ldanalysis"
Issues = "https://github.com/cincineuro/ldanalysis/issues"
Changelog = "https://github.com/cincineuro/ldanalysis/blob/main/CHANGELOG.md"

# Dynamic version from __init__.py if needed
# [tool.setuptools.dynamic]
# version = {attr = "lda.__version__"}

[tool.setuptools.packages.find]
where = ["."]
include = ["lda", "lda.*"]
exclude = ["tests*", "docs*", "examples*"]

[tool.setuptools.package-data]
lda = [
    "templates/**/*",
    "examples/**/*",
    "py.typed",  # for PEP 561 type checking support
]

[tool.setuptools.exclude-package-data]
"*" = [
    "*.pyc",
    "*.pyo",
    "__pycache__",
    ".DS_Store",
    "*.swp",
    "*~",
]

# Tool configurations
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--cov=lda",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--strict-markers",
    "-vv",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "interactive: marks tests that require user interaction",
]
filterwarnings = [
    "ignore::DeprecationWarning:packaging.*",
]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_calls = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
plugins = ["mypy_django_plugin.main"]

[tool.coverage.run]
source = ["lda"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__main__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503", "E501"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    "*.egg-info",
    ".venv",
    "venv",
]
per-file-ignores = """
    __init__.py:F401
"""

[tool.bandit]
exclude_dirs = ["tests", "docs"]
severity = "medium"
confidence = "medium"

[tool.pydocstyle]
inherit = false
convention = "google"
add-ignore = ["D100", "D104", "D107", "D212", "D213"]

[tool.ruff]
line-length = 88
target-version = "py38"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "C90", # McCabe complexity
    "B",   # bugbear
    "D",   # pydocstyle
    "UP",  # pyupgrade
    "S",   # bandit
    "T20", # print statements
    "N",   # pep8-naming
    "ERA", # eradicate
    "RUF", # Ruff-specific rules
]
ignore = [
    "D100", # Missing docstring in public module
    "D107", # Missing docstring in `__init__`
    "D203", # 1 blank line required before class docstring
    "D213", # Multi-line docstring summary should start at the second line
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401", "D104"]
"tests/*" = ["S101", "D100", "D101", "D102", "D103"]

[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.pydocstyle]
convention = "google"

[dependency-groups]
dev = [
    "pytest>=8.3.5",
]

