# coding: utf-8

"""
    Hatchet API

    The Hatchet API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from mtmai.clients.rest.models.adk_session_list import AdkSessionList
from mtmai.clients.rest.models.agent_event_type import AgentEventType
from mtmai.clients.rest.models.agent_runner_input import AgentRunnerInput
from mtmai.clients.rest.models.agent_runner_output import AgentRunnerOutput
from mtmai.clients.rest.models.content import Content
from mtmai.clients.rest.models.flow_names import FlowNames
from mtmai.clients.rest.models.part import Part
from mtmai.clients.rest.models.platform_account_list import PlatformAccountList
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

SIDERBARCONFIGOTHER_ONE_OF_SCHEMAS = ["AdkSessionList", "AgentEventType", "AgentRunnerInput", "AgentRunnerOutput", "Content", "FlowNames", "Part", "PlatformAccountList"]

class SiderbarConfigOther(BaseModel):
    """
    SiderbarConfigOther
    """
    # data type: FlowNames
    oneof_schema_1_validator: Optional[FlowNames] = None
    # data type: AgentEventType
    oneof_schema_2_validator: Optional[AgentEventType] = None
    # data type: PlatformAccountList
    oneof_schema_3_validator: Optional[PlatformAccountList] = None
    # data type: Content
    oneof_schema_4_validator: Optional[Content] = None
    # data type: Part
    oneof_schema_5_validator: Optional[Part] = None
    # data type: AdkSessionList
    oneof_schema_6_validator: Optional[AdkSessionList] = None
    # data type: AgentRunnerInput
    oneof_schema_7_validator: Optional[AgentRunnerInput] = None
    # data type: AgentRunnerOutput
    oneof_schema_8_validator: Optional[AgentRunnerOutput] = None
    actual_instance: Optional[Union[AdkSessionList, AgentEventType, AgentRunnerInput, AgentRunnerOutput, Content, FlowNames, Part, PlatformAccountList]] = None
    one_of_schemas: Set[str] = { "AdkSessionList", "AgentEventType", "AgentRunnerInput", "AgentRunnerOutput", "Content", "FlowNames", "Part", "PlatformAccountList" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = SiderbarConfigOther.model_construct()
        error_messages = []
        match = 0
        # validate data type: FlowNames
        if not isinstance(v, FlowNames):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FlowNames`")
        else:
            match += 1
        # validate data type: AgentEventType
        if not isinstance(v, AgentEventType):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AgentEventType`")
        else:
            match += 1
        # validate data type: PlatformAccountList
        if not isinstance(v, PlatformAccountList):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PlatformAccountList`")
        else:
            match += 1
        # validate data type: Content
        if not isinstance(v, Content):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Content`")
        else:
            match += 1
        # validate data type: Part
        if not isinstance(v, Part):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Part`")
        else:
            match += 1
        # validate data type: AdkSessionList
        if not isinstance(v, AdkSessionList):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AdkSessionList`")
        else:
            match += 1
        # validate data type: AgentRunnerInput
        if not isinstance(v, AgentRunnerInput):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AgentRunnerInput`")
        else:
            match += 1
        # validate data type: AgentRunnerOutput
        if not isinstance(v, AgentRunnerOutput):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AgentRunnerOutput`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in SiderbarConfigOther with oneOf schemas: AdkSessionList, AgentEventType, AgentRunnerInput, AgentRunnerOutput, Content, FlowNames, Part, PlatformAccountList. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in SiderbarConfigOther with oneOf schemas: AdkSessionList, AgentEventType, AgentRunnerInput, AgentRunnerOutput, Content, FlowNames, Part, PlatformAccountList. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into FlowNames
        try:
            instance.actual_instance = FlowNames.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AgentEventType
        try:
            instance.actual_instance = AgentEventType.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PlatformAccountList
        try:
            instance.actual_instance = PlatformAccountList.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Content
        try:
            instance.actual_instance = Content.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Part
        try:
            instance.actual_instance = Part.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AdkSessionList
        try:
            instance.actual_instance = AdkSessionList.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AgentRunnerInput
        try:
            instance.actual_instance = AgentRunnerInput.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AgentRunnerOutput
        try:
            instance.actual_instance = AgentRunnerOutput.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into SiderbarConfigOther with oneOf schemas: AdkSessionList, AgentEventType, AgentRunnerInput, AgentRunnerOutput, Content, FlowNames, Part, PlatformAccountList. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into SiderbarConfigOther with oneOf schemas: AdkSessionList, AgentEventType, AgentRunnerInput, AgentRunnerOutput, Content, FlowNames, Part, PlatformAccountList. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], AdkSessionList, AgentEventType, AgentRunnerInput, AgentRunnerOutput, Content, FlowNames, Part, PlatformAccountList]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


