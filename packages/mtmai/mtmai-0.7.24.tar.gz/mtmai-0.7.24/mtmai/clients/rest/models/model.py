# coding: utf-8

"""
    Hatchet API

    The Hatchet API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from mtmai.clients.rest.models.api_resource_meta import APIResourceMeta
from typing import Optional, Set
from typing_extensions import Self

class Model(BaseModel):
    """
    Model
    """ # noqa: E501
    metadata: APIResourceMeta
    name: StrictStr
    model: StrictStr
    provider: StrictStr
    api_key: StrictStr = Field(alias="apiKey")
    api_base: StrictStr = Field(alias="apiBase")
    vendor: StrictStr
    description: Optional[StrictStr] = None
    family: StrictStr
    vision: StrictBool
    function_calling: StrictBool = Field(alias="functionCalling")
    json_output: StrictBool = Field(alias="jsonOutput")
    tags: Optional[List[StrictStr]] = None
    __properties: ClassVar[List[str]] = ["metadata", "name", "model", "provider", "apiKey", "apiBase", "vendor", "description", "family", "vision", "functionCalling", "jsonOutput", "tags"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Model from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Model from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in Model) in the input: " + _key)

        _obj = cls.model_validate({
            "metadata": APIResourceMeta.from_dict(obj["metadata"]) if obj.get("metadata") is not None else None,
            "name": obj.get("name"),
            "model": obj.get("model"),
            "provider": obj.get("provider"),
            "apiKey": obj.get("apiKey"),
            "apiBase": obj.get("apiBase"),
            "vendor": obj.get("vendor"),
            "description": obj.get("description"),
            "family": obj.get("family"),
            "vision": obj.get("vision"),
            "functionCalling": obj.get("functionCalling"),
            "jsonOutput": obj.get("jsonOutput"),
            "tags": obj.get("tags")
        })
        return _obj


