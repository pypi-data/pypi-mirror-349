# coding: utf-8

"""
    Mtmai API

    The Mtmai API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GalleryMeta(BaseModel):
    """
    GalleryMeta
    """ # noqa: E501
    author: StrictStr
    created_at: StrictStr
    updated_at: StrictStr
    version: StrictStr
    description: Optional[StrictStr] = None
    tags: Optional[List[Any]] = None
    license: Optional[StrictStr] = None
    homepage: Optional[StrictStr] = None
    category: Optional[StrictStr] = None
    last_synced: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["author", "created_at", "updated_at", "version", "description", "tags", "license", "homepage", "category", "last_synced"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GalleryMeta from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GalleryMeta from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "author": obj.get("author"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "version": obj.get("version"),
            "description": obj.get("description"),
            "tags": obj.get("tags"),
            "license": obj.get("license"),
            "homepage": obj.get("homepage"),
            "category": obj.get("category"),
            "last_synced": obj.get("last_synced")
        })
        return _obj


