# coding: utf-8

"""
    Mtmai API

    The Mtmai API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from mtmai.clients.rest.models.instagram_credentials import InstagramCredentials
from typing import Optional, Set
from typing_extensions import Self

class InstagramAgentState(BaseModel):
    """
    InstagramAgentState
    """ # noqa: E501
    type: StrictStr
    version: Optional[StrictStr] = None
    llm_context: Optional[Any] = None
    username: Optional[StrictStr] = None
    password: Optional[StrictStr] = None
    otp_key: Optional[StrictStr] = None
    session_state: Optional[Dict[str, Any]] = None
    is_wait_user_input: Optional[StrictBool] = None
    ig_settings: Optional[Dict[str, Any]] = None
    proxy_url: Optional[StrictStr] = None
    platform_account_id: Optional[StrictStr] = None
    credentials: Optional[InstagramCredentials] = None
    __properties: ClassVar[List[str]] = ["type", "version", "llm_context", "username", "password", "otp_key", "session_state", "is_wait_user_input", "ig_settings", "proxy_url", "platform_account_id", "credentials"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['InstagramAgentState']):
            raise ValueError("must be one of enum values ('InstagramAgentState')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InstagramAgentState from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of credentials
        if self.credentials:
            _dict['credentials'] = self.credentials.to_dict()
        # set to None if llm_context (nullable) is None
        # and model_fields_set contains the field
        if self.llm_context is None and "llm_context" in self.model_fields_set:
            _dict['llm_context'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InstagramAgentState from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in InstagramAgentState) in the input: " + _key)

        _obj = cls.model_validate({
            "type": obj.get("type") if obj.get("type") is not None else 'InstagramAgentState',
            "version": obj.get("version"),
            "llm_context": obj.get("llm_context"),
            "username": obj.get("username"),
            "password": obj.get("password"),
            "otp_key": obj.get("otp_key"),
            "session_state": obj.get("session_state"),
            "is_wait_user_input": obj.get("is_wait_user_input"),
            "ig_settings": obj.get("ig_settings"),
            "proxy_url": obj.get("proxy_url"),
            "platform_account_id": obj.get("platform_account_id"),
            "credentials": InstagramCredentials.from_dict(obj["credentials"]) if obj.get("credentials") is not None else None
        })
        return _obj


