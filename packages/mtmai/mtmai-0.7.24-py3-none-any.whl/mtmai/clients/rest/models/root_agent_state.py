# coding: utf-8

"""
    Mtmai API

    The Mtmai API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from mtmai.clients.rest.models.mcp_server import McpServer
from typing import Optional, Set
from typing_extensions import Self

class RootAgentState(BaseModel):
    """
    RootAgentState
    """ # noqa: E501
    type: StrictStr
    version: Optional[StrictStr] = None
    is_agent_run_local: Optional[StrictBool] = None
    counter: Optional[Union[StrictFloat, StrictInt]] = None
    color: Optional[StrictStr] = None
    main_view_type: Optional[StrictStr] = Field(default=None, alias="mainViewType")
    chat_history_ids: Optional[List[StrictStr]] = Field(default=None, alias="chatHistoryIds")
    current_chat_history_ids: Optional[StrictStr] = Field(default=None, alias="currentChatHistoryIds")
    current_chat_history: Optional[Dict[str, Any]] = Field(default=None, alias="currentChatHistory")
    mcp_servers: Optional[List[McpServer]] = Field(default=None, alias="mcpServers")
    mcp_tools: Optional[List[Dict[str, Any]]] = Field(default=None, alias="mcpTools")
    mcp_prompts: Optional[List[Dict[str, Any]]] = Field(default=None, alias="mcpPrompts")
    mcp_resources: Optional[List[Any]] = Field(default=None, alias="mcpResources")
    __properties: ClassVar[List[str]] = ["type", "version", "is_agent_run_local", "counter", "color", "mainViewType", "chatHistoryIds", "currentChatHistoryIds", "currentChatHistory", "mcpServers", "mcpTools", "mcpPrompts", "mcpResources"]

    @field_validator('main_view_type')
    def main_view_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['chat', 'scheduler']):
            raise ValueError("must be one of enum values ('chat', 'scheduler')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RootAgentState from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in mcp_servers (list)
        _items = []
        if self.mcp_servers:
            for _item_mcp_servers in self.mcp_servers:
                if _item_mcp_servers:
                    _items.append(_item_mcp_servers.to_dict())
            _dict['mcpServers'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RootAgentState from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in RootAgentState) in the input: " + _key)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "version": obj.get("version"),
            "is_agent_run_local": obj.get("is_agent_run_local"),
            "counter": obj.get("counter"),
            "color": obj.get("color"),
            "mainViewType": obj.get("mainViewType"),
            "chatHistoryIds": obj.get("chatHistoryIds"),
            "currentChatHistoryIds": obj.get("currentChatHistoryIds"),
            "currentChatHistory": obj.get("currentChatHistory"),
            "mcpServers": [McpServer.from_dict(_item) for _item in obj["mcpServers"]] if obj.get("mcpServers") is not None else None,
            "mcpTools": obj.get("mcpTools"),
            "mcpPrompts": obj.get("mcpPrompts"),
            "mcpResources": obj.get("mcpResources")
        })
        return _obj


