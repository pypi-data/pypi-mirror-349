import asyncio
from typing import Any, AsyncGenerator, Mapping, Sequence

from autogen_agentchat.base import TaskResult, Team
from autogen_agentchat.messages import (
    AgentEvent,
    BaseAgentEvent,
    BaseChatMessage,
    ChatMessage,
)
from autogen_core import (
    AgentRuntime,
    CancellationToken,
    Component,
    SingleThreadedAgentRuntime,
    TopicId,
    TypeSubscription,
    try_get_known_serializers_for_type,
)
from autogen_core.models import SystemMessage
from autogen_ext.code_executors.docker import DockerCommandLineCodeExecutor
from autogen_ext.tools.code_execution import PythonCodeExecutionTool
from mtmai.clients.rest.models.flow_names import FlowNames
from loguru import logger
from mtlibs.autogen_utils.intervention_handlers import (
    NeedsUserInputHandler,
    ToolInterventionHandler,
)
from mtmai.agents._types import agent_message_types
from mtmai.agents.cancel_token import MtCancelToken
from mtmai.agents.tooluse_agent import ToolUseAgent
from mtmai.clients.rest.models.ag_state_upsert import AgStateUpsert
from mtmai.clients.rest.models.instagram_team_config import InstagramTeamConfig
from mtmai.clients.rest.models.mt_ag_event import MtAgEvent
from mtmai.clients.rest.models.social_team_config import SocialTeamConfig
from mtmai.clients.rest.models.state_type import StateType
from mtmai.clients.tenant_client import TenantClient
from mtmai.context.context import Context
from mtmai.context.ctx import get_chat_session_id_ctx
from mtmai.model_client.utils import get_default_model_client
from mtmai.worker_app import mtmapp
from pydantic import BaseModel
from typing_extensions import Self


class TenantTeamConfig(BaseModel):
    pass


@mtmapp.workflow(
    name=FlowNames.TENANT.value,
    on_events=[FlowNames.TENANT.value],
)
class FlowTenant:
    @mtmapp.step(timeout="60m")
    async def step0(self, hatctx: Context):
        input = MtAgEvent.from_dict(hatctx.input)
        cancellation_token = MtCancelToken()
        team = TenantTeam._from_config(TenantTeamConfig())
        return await team.run(task=input, cancellation_token=cancellation_token)


class TenantTeam(Team, Component[TenantTeamConfig]):
    component_provider_override = "mtmai.teams.team_tenant.TenantTeam"
    component_config_schema = TenantTeamConfig

    def __init__(
        self,
        *,
        runtime: AgentRuntime | None = None,
        max_turns: int | None = 25,
    ) -> None:
        self._runtime = runtime
        self._initialized = False
        self._max_turns = max_turns
        # The queue for collecting the output messages.
        self._output_message_queue: asyncio.Queue[BaseAgentEvent | BaseChatMessage] = (
            asyncio.Queue()
        )

    async def _init(self):
        self.session_id = get_chat_session_id_ctx()
        self.tenant_client = TenantClient()
        self.model_client = get_default_model_client()

        if not self._runtime:
            needs_user_input_handler = NeedsUserInputHandler(self.session_id)
            tool_intervention_handler = ToolInterventionHandler(self.session_id)
            self._runtime = SingleThreadedAgentRuntime(
                intervention_handlers=[
                    needs_user_input_handler,
                    tool_intervention_handler,
                ],
                ignore_unhandled_exceptions=False,
            )

        for t in agent_message_types:
            self._runtime.add_message_serializer(try_get_known_serializers_for_type(t))

        team_topic = f"social.{self.session_id}"
        topic_source = "default"
        self.team_topic_id = TopicId(type=team_topic, source=topic_source)

        # Create the Semantic Router
        # agent_registry = MockAgentRegistry()
        # intent_classifier = MockIntentClassifier()

        self.model_client = get_default_model_client()

        # tooluse agent
        # Create the docker executor for the Python code execution tool.
        docker_executor = DockerCommandLineCodeExecutor()

        # Create the Python code execution tool.
        python_tool = PythonCodeExecutionTool(executor=docker_executor)
        tool_agent_type = await ToolUseAgent.register(
            runtime=self._runtime,
            type="tooluse",
            factory=lambda: ToolUseAgent(
                description="Tool Use Agent",
                system_messages=[
                    SystemMessage(
                        content="You are a helpful AI Assistant. Use your tools to solve problems."
                    )
                ],
                model_client=self.model_client,
                tool_schema=[python_tool.schema],
                tool_agent_type=tool_agent_type,
            ),
        )
        await self._runtime.add_subscription(
            subscription=TypeSubscription(
                topic_type=self.team_topic_id.type,
                agent_type=tool_agent_type.type,
            )
        )

        self._initialized = True
        await self.load_runtimestate(self.session_id, self._runtime)
        self._runtime.start()

    async def run(
        self,
        *,
        task: str | ChatMessage | Sequence[ChatMessage] | MtAgEvent | None = None,
        cancellation_token: CancellationToken | None = None,
    ) -> AsyncGenerator[AgentEvent | ChatMessage | TaskResult, None]:
        if not self._initialized:
            await self._init()

        if isinstance(task, MtAgEvent):
            await self._runtime.publish_message(
                message=task.actual_instance,
                topic_id=self.team_topic_id,
                cancellation_token=cancellation_token,
            )

        await self._runtime.stop_when_idle()
        await self.save_state_db()

    async def reset(self) -> None:
        self._is_running = False

    async def save_state(self) -> Mapping[str, Any]:
        state = await self._runtime.save_state()
        return state

    async def save_state_db(self):
        state_data = await self.save_state()
        for k, v in state_data.items():
            logger.info(f"key: {k}, value: {v}")
            parts = k.split("/")
            topic = parts[0]
            source = parts[1] if len(parts) > 1 else "default"
            await self.tenant_client.ag_state_api.ag_state_upsert(
                tenant=self.tenant_client.tenant_id,
                ag_state_upsert=AgStateUpsert(
                    topic=topic,
                    source=source,
                    type=StateType.RUNTIMESTATE.value,
                    chatId=self.session_id,
                    state=v,
                ),
            )

    async def load_state(self, state: Mapping[str, Any]) -> None:
        await self._runtime.load_state(state)

    async def load_runtimestate(self, session_id: str, runtime: AgentRuntime) -> None:
        state_list = await self.tenant_client.ag_state_api.ag_state_list(
            tenant=self.tenant_client.tenant_id,
            session=session_id,
        )

        state_dict = {}
        for state in state_list.rows:
            key = f"{state.topic}/{state.source}"
            state_dict[key] = state.state
        await runtime.load_state(state_dict)

    def _to_config(self) -> InstagramTeamConfig:
        return SocialTeamConfig(
            max_turns=self._max_turns,
        )

    @classmethod
    def _from_config(cls, config: InstagramTeamConfig) -> Self:
        return cls(
            max_turns=config.max_turns or 25,
        )

    async def pause(self) -> None:
        logger.info("TODO: pause team")

    async def resume(self) -> None:
        logger.info("TODO: resume team")
