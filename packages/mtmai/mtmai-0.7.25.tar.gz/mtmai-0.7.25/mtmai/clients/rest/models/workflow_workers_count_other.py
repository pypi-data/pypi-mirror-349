# coding: utf-8

"""
    Mtmai API

    The Mtmai API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Optional
from mtmai.clients.rest.models.add_session_to_eval_set_request import AddSessionToEvalSetRequest
from mtmai.clients.rest.models.adk_app_types import AdkAppTypes
from mtmai.clients.rest.models.adk_raw_event import AdkRawEvent
from mtmai.clients.rest.models.agent_event_type import AgentEventType
from mtmai.clients.rest.models.agent_incoming_event import AgentIncomingEvent
from mtmai.clients.rest.models.agent_outgoing_event import AgentOutgoingEvent
from mtmai.clients.rest.models.agent_run_request_v3 import AgentRunRequestV3
from mtmai.clients.rest.models.agent_state_types import AgentStateTypes
from mtmai.clients.rest.models.agent_topic_types import AgentTopicTypes
from mtmai.clients.rest.models.agent_types import AgentTypes
from mtmai.clients.rest.models.code_execution_result import CodeExecutionResult
from mtmai.clients.rest.models.component_types import ComponentTypes
from mtmai.clients.rest.models.content import Content
from mtmai.clients.rest.models.flow_error import FlowError
from mtmai.clients.rest.models.flow_names import FlowNames
from mtmai.clients.rest.models.flow_result import FlowResult
from mtmai.clients.rest.models.flow_team_input import FlowTeamInput
from mtmai.clients.rest.models.provider_types import ProviderTypes
from mtmai.clients.rest.models.root_agent_state import RootAgentState
from mtmai.clients.rest.models.social_login_input import SocialLoginInput
from mtmai.clients.rest.models.social_login_result import SocialLoginResult
from mtmai.clients.rest.models.social_team import SocialTeam
from mtmai.clients.rest.models.tool_types import ToolTypes
from mtmai.clients.rest.models.video_params import VideoParams
from typing import Union, Any, List, Set, TYPE_CHECKING, Optional, Dict
from typing_extensions import Literal, Self
from pydantic import Field

WORKFLOWWORKERSCOUNTOTHER_ANY_OF_SCHEMAS = ["AddSessionToEvalSetRequest", "AdkAppTypes", "AdkRawEvent", "AgentEventType", "AgentIncomingEvent", "AgentOutgoingEvent", "AgentRunRequestV3", "AgentStateTypes", "AgentTopicTypes", "AgentTypes", "CodeExecutionResult", "ComponentTypes", "Content", "FlowError", "FlowNames", "FlowResult", "FlowTeamInput", "ProviderTypes", "RootAgentState", "SocialLoginInput", "SocialLoginResult", "SocialTeam", "ToolTypes", "VideoParams"]

class WorkflowWorkersCountOther(BaseModel):
    """
    WorkflowWorkersCountOther
    """

    # data type: ToolTypes
    anyof_schema_1_validator: Optional[ToolTypes] = None
    # data type: FlowNames
    anyof_schema_2_validator: Optional[FlowNames] = None
    # data type: AgentTopicTypes
    anyof_schema_3_validator: Optional[AgentTopicTypes] = None
    # data type: ComponentTypes
    anyof_schema_4_validator: Optional[ComponentTypes] = None
    # data type: ProviderTypes
    anyof_schema_5_validator: Optional[ProviderTypes] = None
    # data type: AgentEventType
    anyof_schema_6_validator: Optional[AgentEventType] = None
    # data type: AgentStateTypes
    anyof_schema_7_validator: Optional[AgentStateTypes] = None
    # data type: AgentTypes
    anyof_schema_8_validator: Optional[AgentTypes] = None
    # data type: FlowError
    anyof_schema_9_validator: Optional[FlowError] = None
    # data type: FlowTeamInput
    anyof_schema_10_validator: Optional[FlowTeamInput] = None
    # data type: CodeExecutionResult
    anyof_schema_11_validator: Optional[CodeExecutionResult] = None
    # data type: SocialLoginInput
    anyof_schema_12_validator: Optional[SocialLoginInput] = None
    # data type: SocialLoginResult
    anyof_schema_13_validator: Optional[SocialLoginResult] = None
    # data type: FlowResult
    anyof_schema_14_validator: Optional[FlowResult] = None
    # data type: SocialTeam
    anyof_schema_15_validator: Optional[SocialTeam] = None
    # data type: RootAgentState
    anyof_schema_16_validator: Optional[RootAgentState] = None
    # data type: AgentIncomingEvent
    anyof_schema_17_validator: Optional[AgentIncomingEvent] = None
    # data type: AgentOutgoingEvent
    anyof_schema_18_validator: Optional[AgentOutgoingEvent] = None
    # data type: AddSessionToEvalSetRequest
    anyof_schema_19_validator: Optional[AddSessionToEvalSetRequest] = None
    # data type: AdkRawEvent
    anyof_schema_20_validator: Optional[AdkRawEvent] = None
    # data type: AdkAppTypes
    anyof_schema_21_validator: Optional[AdkAppTypes] = None
    # data type: Content
    anyof_schema_22_validator: Optional[Content] = None
    # data type: AgentRunRequestV3
    anyof_schema_23_validator: Optional[AgentRunRequestV3] = None
    # data type: VideoParams
    anyof_schema_24_validator: Optional[VideoParams] = None
    if TYPE_CHECKING:
        actual_instance: Optional[Union[AddSessionToEvalSetRequest, AdkAppTypes, AdkRawEvent, AgentEventType, AgentIncomingEvent, AgentOutgoingEvent, AgentRunRequestV3, AgentStateTypes, AgentTopicTypes, AgentTypes, CodeExecutionResult, ComponentTypes, Content, FlowError, FlowNames, FlowResult, FlowTeamInput, ProviderTypes, RootAgentState, SocialLoginInput, SocialLoginResult, SocialTeam, ToolTypes, VideoParams]] = None
    else:
        actual_instance: Any = None
    any_of_schemas: Set[str] = { "AddSessionToEvalSetRequest", "AdkAppTypes", "AdkRawEvent", "AgentEventType", "AgentIncomingEvent", "AgentOutgoingEvent", "AgentRunRequestV3", "AgentStateTypes", "AgentTopicTypes", "AgentTypes", "CodeExecutionResult", "ComponentTypes", "Content", "FlowError", "FlowNames", "FlowResult", "FlowTeamInput", "ProviderTypes", "RootAgentState", "SocialLoginInput", "SocialLoginResult", "SocialTeam", "ToolTypes", "VideoParams" }

    model_config = {
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_anyof(cls, v):
        instance = WorkflowWorkersCountOther.model_construct()
        error_messages = []
        # validate data type: ToolTypes
        if not isinstance(v, ToolTypes):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ToolTypes`")
        else:
            return v

        # validate data type: FlowNames
        if not isinstance(v, FlowNames):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FlowNames`")
        else:
            return v

        # validate data type: AgentTopicTypes
        if not isinstance(v, AgentTopicTypes):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AgentTopicTypes`")
        else:
            return v

        # validate data type: ComponentTypes
        if not isinstance(v, ComponentTypes):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ComponentTypes`")
        else:
            return v

        # validate data type: ProviderTypes
        if not isinstance(v, ProviderTypes):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ProviderTypes`")
        else:
            return v

        # validate data type: AgentEventType
        if not isinstance(v, AgentEventType):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AgentEventType`")
        else:
            return v

        # validate data type: AgentStateTypes
        if not isinstance(v, AgentStateTypes):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AgentStateTypes`")
        else:
            return v

        # validate data type: AgentTypes
        if not isinstance(v, AgentTypes):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AgentTypes`")
        else:
            return v

        # validate data type: FlowError
        if not isinstance(v, FlowError):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FlowError`")
        else:
            return v

        # validate data type: FlowTeamInput
        if not isinstance(v, FlowTeamInput):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FlowTeamInput`")
        else:
            return v

        # validate data type: CodeExecutionResult
        if not isinstance(v, CodeExecutionResult):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CodeExecutionResult`")
        else:
            return v

        # validate data type: SocialLoginInput
        if not isinstance(v, SocialLoginInput):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SocialLoginInput`")
        else:
            return v

        # validate data type: SocialLoginResult
        if not isinstance(v, SocialLoginResult):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SocialLoginResult`")
        else:
            return v

        # validate data type: FlowResult
        if not isinstance(v, FlowResult):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FlowResult`")
        else:
            return v

        # validate data type: SocialTeam
        if not isinstance(v, SocialTeam):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SocialTeam`")
        else:
            return v

        # validate data type: RootAgentState
        if not isinstance(v, RootAgentState):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RootAgentState`")
        else:
            return v

        # validate data type: AgentIncomingEvent
        if not isinstance(v, AgentIncomingEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AgentIncomingEvent`")
        else:
            return v

        # validate data type: AgentOutgoingEvent
        if not isinstance(v, AgentOutgoingEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AgentOutgoingEvent`")
        else:
            return v

        # validate data type: AddSessionToEvalSetRequest
        if not isinstance(v, AddSessionToEvalSetRequest):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AddSessionToEvalSetRequest`")
        else:
            return v

        # validate data type: AdkRawEvent
        if not isinstance(v, AdkRawEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AdkRawEvent`")
        else:
            return v

        # validate data type: AdkAppTypes
        if not isinstance(v, AdkAppTypes):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AdkAppTypes`")
        else:
            return v

        # validate data type: Content
        if not isinstance(v, Content):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Content`")
        else:
            return v

        # validate data type: AgentRunRequestV3
        if not isinstance(v, AgentRunRequestV3):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AgentRunRequestV3`")
        else:
            return v

        # validate data type: VideoParams
        if not isinstance(v, VideoParams):
            error_messages.append(f"Error! Input type `{type(v)}` is not `VideoParams`")
        else:
            return v

        if error_messages:
            # no match
            raise ValueError("No match found when setting the actual_instance in WorkflowWorkersCountOther with anyOf schemas: AddSessionToEvalSetRequest, AdkAppTypes, AdkRawEvent, AgentEventType, AgentIncomingEvent, AgentOutgoingEvent, AgentRunRequestV3, AgentStateTypes, AgentTopicTypes, AgentTypes, CodeExecutionResult, ComponentTypes, Content, FlowError, FlowNames, FlowResult, FlowTeamInput, ProviderTypes, RootAgentState, SocialLoginInput, SocialLoginResult, SocialTeam, ToolTypes, VideoParams. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        # anyof_schema_1_validator: Optional[ToolTypes] = None
        try:
            instance.actual_instance = ToolTypes.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_2_validator: Optional[FlowNames] = None
        try:
            instance.actual_instance = FlowNames.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_3_validator: Optional[AgentTopicTypes] = None
        try:
            instance.actual_instance = AgentTopicTypes.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_4_validator: Optional[ComponentTypes] = None
        try:
            instance.actual_instance = ComponentTypes.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_5_validator: Optional[ProviderTypes] = None
        try:
            instance.actual_instance = ProviderTypes.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_6_validator: Optional[AgentEventType] = None
        try:
            instance.actual_instance = AgentEventType.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_7_validator: Optional[AgentStateTypes] = None
        try:
            instance.actual_instance = AgentStateTypes.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_8_validator: Optional[AgentTypes] = None
        try:
            instance.actual_instance = AgentTypes.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_9_validator: Optional[FlowError] = None
        try:
            instance.actual_instance = FlowError.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_10_validator: Optional[FlowTeamInput] = None
        try:
            instance.actual_instance = FlowTeamInput.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_11_validator: Optional[CodeExecutionResult] = None
        try:
            instance.actual_instance = CodeExecutionResult.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_12_validator: Optional[SocialLoginInput] = None
        try:
            instance.actual_instance = SocialLoginInput.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_13_validator: Optional[SocialLoginResult] = None
        try:
            instance.actual_instance = SocialLoginResult.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_14_validator: Optional[FlowResult] = None
        try:
            instance.actual_instance = FlowResult.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_15_validator: Optional[SocialTeam] = None
        try:
            instance.actual_instance = SocialTeam.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_16_validator: Optional[RootAgentState] = None
        try:
            instance.actual_instance = RootAgentState.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_17_validator: Optional[AgentIncomingEvent] = None
        try:
            instance.actual_instance = AgentIncomingEvent.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_18_validator: Optional[AgentOutgoingEvent] = None
        try:
            instance.actual_instance = AgentOutgoingEvent.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_19_validator: Optional[AddSessionToEvalSetRequest] = None
        try:
            instance.actual_instance = AddSessionToEvalSetRequest.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_20_validator: Optional[AdkRawEvent] = None
        try:
            instance.actual_instance = AdkRawEvent.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_21_validator: Optional[AdkAppTypes] = None
        try:
            instance.actual_instance = AdkAppTypes.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_22_validator: Optional[Content] = None
        try:
            instance.actual_instance = Content.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_23_validator: Optional[AgentRunRequestV3] = None
        try:
            instance.actual_instance = AgentRunRequestV3.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_24_validator: Optional[VideoParams] = None
        try:
            instance.actual_instance = VideoParams.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))

        if error_messages:
            # no match
            raise ValueError("No match found when deserializing the JSON string into WorkflowWorkersCountOther with anyOf schemas: AddSessionToEvalSetRequest, AdkAppTypes, AdkRawEvent, AgentEventType, AgentIncomingEvent, AgentOutgoingEvent, AgentRunRequestV3, AgentStateTypes, AgentTopicTypes, AgentTypes, CodeExecutionResult, ComponentTypes, Content, FlowError, FlowNames, FlowResult, FlowTeamInput, ProviderTypes, RootAgentState, SocialLoginInput, SocialLoginResult, SocialTeam, ToolTypes, VideoParams. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], AddSessionToEvalSetRequest, AdkAppTypes, AdkRawEvent, AgentEventType, AgentIncomingEvent, AgentOutgoingEvent, AgentRunRequestV3, AgentStateTypes, AgentTopicTypes, AgentTypes, CodeExecutionResult, ComponentTypes, Content, FlowError, FlowNames, FlowResult, FlowTeamInput, ProviderTypes, RootAgentState, SocialLoginInput, SocialLoginResult, SocialTeam, ToolTypes, VideoParams]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


