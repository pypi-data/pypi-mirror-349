# -*- coding: utf-8 -*-
# Generated by https://github.com/i2y/connecpy/protoc-gen-connecpy.  DO NOT EDIT!
# source: mtmai/mtmpb/cli.proto

from typing import Any, Protocol, Union

import httpx

from connecpy.async_client import AsyncConnecpyClient
from connecpy.base import Endpoint
from connecpy.server import ConnecpyServer
from connecpy.client import ConnecpyClient
from connecpy.context import ClientContext, ServiceContext

import mtmai.mtmpb.cli_pb2 as _pb2

from google.protobuf import symbol_database

_sym_db = symbol_database.Default()


class MtCliService(Protocol):
    async def CliCommandTemplates(self, req: _pb2.ListCliReq, ctx: ServiceContext) -> _pb2.ListCliRes: ...


class MtCliServiceServer(ConnecpyServer):
    def __init__(self, *, service: MtCliService, server_path_prefix=""):
        super().__init__()
        self._prefix = f"{server_path_prefix}/mtmai.mtm.cli.MtCliService"
        self._endpoints = {
            "CliCommandTemplates": Endpoint[_pb2.ListCliReq, _pb2.ListCliRes](
                service_name="MtCliService",
                name="CliCommandTemplates",
                function=getattr(service, "CliCommandTemplates"),
                input=_pb2.ListCliReq,
                output=_pb2.ListCliRes,
                allowed_methods=("POST",),
            ),
        }

    def serviceName(self):
        return "mtmai.mtm.cli.MtCliService"


class MtCliServiceSync(Protocol):
    def CliCommandTemplates(self, req: _pb2.ListCliReq, ctx: ServiceContext) -> _pb2.ListCliRes: ...


class MtCliServiceServerSync(ConnecpyServer):
    def __init__(self, *, service: MtCliServiceSync, server_path_prefix=""):
        super().__init__()
        self._prefix = f"{server_path_prefix}/mtmai.mtm.cli.MtCliService"
        self._endpoints = {
            "CliCommandTemplates": Endpoint[_pb2.ListCliReq, _pb2.ListCliRes](
                service_name="MtCliService",
                name="CliCommandTemplates",
                function=getattr(service, "CliCommandTemplates"),
                input=_pb2.ListCliReq,
                output=_pb2.ListCliRes,
                allowed_methods=("POST",),
            ),
        }

    def serviceName(self):
        return "mtmai.mtm.cli.MtCliService"


class MtCliServiceClient(ConnecpyClient):
    def CliCommandTemplates(
        self,
        *,
        request: _pb2.ListCliReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.ListCliRes:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/mtmai.mtm.cli.MtCliService/CliCommandTemplates",
            ctx=ctx,
            request=request,
            response_obj=_pb2.ListCliRes,
            method=method,
            **kwargs,
        )


class AsyncMtCliServiceClient(AsyncConnecpyClient):
    async def CliCommandTemplates(
        self,
        *,
        request: _pb2.ListCliReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.ListCliRes:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/mtmai.mtm.cli.MtCliService/CliCommandTemplates",
            ctx=ctx,
            request=request,
            response_obj=_pb2.ListCliRes,
            method=method,
            session=session,
            **kwargs,
        )
