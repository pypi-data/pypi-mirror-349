# -*- coding: utf-8 -*-
# Generated by https://github.com/i2y/connecpy/protoc-gen-connecpy.  DO NOT EDIT!
# source: mtmai/mtmpb/agent_worker.proto

from typing import Any, Protocol, Union

import httpx

from connecpy.async_client import AsyncConnecpyClient
from connecpy.base import Endpoint
from connecpy.server import ConnecpyServer
from connecpy.client import ConnecpyClient
from connecpy.context import ClientContext, ServiceContext

import mtmai.mtmpb.agent_worker_pb2 as _pb2

from google.protobuf import symbol_database

_sym_db = symbol_database.Default()


class AgentRpc(Protocol):
    async def OpenChannel(self, req: _pb2.Message, ctx: ServiceContext) -> _pb2.Message: ...
    async def OpenControlChannel(self, req: _pb2.ControlMessage, ctx: ServiceContext) -> _pb2.ControlMessage: ...
    async def RegisterAgent(self, req: _pb2.RegisterAgentTypeRequest, ctx: ServiceContext) -> _pb2.RegisterAgentTypeResponse: ...
    async def AddSubscription(self, req: _pb2.AddSubscriptionRequest, ctx: ServiceContext) -> _pb2.AddSubscriptionResponse: ...
    async def RemoveSubscription(self, req: _pb2.RemoveSubscriptionRequest, ctx: ServiceContext) -> _pb2.RemoveSubscriptionResponse: ...
    async def GetSubscriptions(self, req: _pb2.GetSubscriptionsRequest, ctx: ServiceContext) -> _pb2.GetSubscriptionsResponse: ...


class AgentRpcServer(ConnecpyServer):
    def __init__(self, *, service: AgentRpc, server_path_prefix=""):
        super().__init__()
        self._prefix = f"{server_path_prefix}/mtmai.mtmpb.agent_worker.AgentRpc"
        self._endpoints = {
            "OpenChannel": Endpoint[_pb2.Message, _pb2.Message](
                service_name="AgentRpc",
                name="OpenChannel",
                function=getattr(service, "OpenChannel"),
                input=_pb2.Message,
                output=_pb2.Message,
                allowed_methods=("POST",),
            ),
            "OpenControlChannel": Endpoint[_pb2.ControlMessage, _pb2.ControlMessage](
                service_name="AgentRpc",
                name="OpenControlChannel",
                function=getattr(service, "OpenControlChannel"),
                input=_pb2.ControlMessage,
                output=_pb2.ControlMessage,
                allowed_methods=("POST",),
            ),
            "RegisterAgent": Endpoint[_pb2.RegisterAgentTypeRequest, _pb2.RegisterAgentTypeResponse](
                service_name="AgentRpc",
                name="RegisterAgent",
                function=getattr(service, "RegisterAgent"),
                input=_pb2.RegisterAgentTypeRequest,
                output=_pb2.RegisterAgentTypeResponse,
                allowed_methods=("POST",),
            ),
            "AddSubscription": Endpoint[_pb2.AddSubscriptionRequest, _pb2.AddSubscriptionResponse](
                service_name="AgentRpc",
                name="AddSubscription",
                function=getattr(service, "AddSubscription"),
                input=_pb2.AddSubscriptionRequest,
                output=_pb2.AddSubscriptionResponse,
                allowed_methods=("POST",),
            ),
            "RemoveSubscription": Endpoint[_pb2.RemoveSubscriptionRequest, _pb2.RemoveSubscriptionResponse](
                service_name="AgentRpc",
                name="RemoveSubscription",
                function=getattr(service, "RemoveSubscription"),
                input=_pb2.RemoveSubscriptionRequest,
                output=_pb2.RemoveSubscriptionResponse,
                allowed_methods=("POST",),
            ),
            "GetSubscriptions": Endpoint[_pb2.GetSubscriptionsRequest, _pb2.GetSubscriptionsResponse](
                service_name="AgentRpc",
                name="GetSubscriptions",
                function=getattr(service, "GetSubscriptions"),
                input=_pb2.GetSubscriptionsRequest,
                output=_pb2.GetSubscriptionsResponse,
                allowed_methods=("POST",),
            ),
        }

    def serviceName(self):
        return "mtmai.mtmpb.agent_worker.AgentRpc"


class AgentRpcSync(Protocol):
    def OpenChannel(self, req: _pb2.Message, ctx: ServiceContext) -> _pb2.Message: ...
    def OpenControlChannel(self, req: _pb2.ControlMessage, ctx: ServiceContext) -> _pb2.ControlMessage: ...
    def RegisterAgent(self, req: _pb2.RegisterAgentTypeRequest, ctx: ServiceContext) -> _pb2.RegisterAgentTypeResponse: ...
    def AddSubscription(self, req: _pb2.AddSubscriptionRequest, ctx: ServiceContext) -> _pb2.AddSubscriptionResponse: ...
    def RemoveSubscription(self, req: _pb2.RemoveSubscriptionRequest, ctx: ServiceContext) -> _pb2.RemoveSubscriptionResponse: ...
    def GetSubscriptions(self, req: _pb2.GetSubscriptionsRequest, ctx: ServiceContext) -> _pb2.GetSubscriptionsResponse: ...


class AgentRpcServerSync(ConnecpyServer):
    def __init__(self, *, service: AgentRpcSync, server_path_prefix=""):
        super().__init__()
        self._prefix = f"{server_path_prefix}/mtmai.mtmpb.agent_worker.AgentRpc"
        self._endpoints = {
            "OpenChannel": Endpoint[_pb2.Message, _pb2.Message](
                service_name="AgentRpc",
                name="OpenChannel",
                function=getattr(service, "OpenChannel"),
                input=_pb2.Message,
                output=_pb2.Message,
                allowed_methods=("POST",),
            ),
            "OpenControlChannel": Endpoint[_pb2.ControlMessage, _pb2.ControlMessage](
                service_name="AgentRpc",
                name="OpenControlChannel",
                function=getattr(service, "OpenControlChannel"),
                input=_pb2.ControlMessage,
                output=_pb2.ControlMessage,
                allowed_methods=("POST",),
            ),
            "RegisterAgent": Endpoint[_pb2.RegisterAgentTypeRequest, _pb2.RegisterAgentTypeResponse](
                service_name="AgentRpc",
                name="RegisterAgent",
                function=getattr(service, "RegisterAgent"),
                input=_pb2.RegisterAgentTypeRequest,
                output=_pb2.RegisterAgentTypeResponse,
                allowed_methods=("POST",),
            ),
            "AddSubscription": Endpoint[_pb2.AddSubscriptionRequest, _pb2.AddSubscriptionResponse](
                service_name="AgentRpc",
                name="AddSubscription",
                function=getattr(service, "AddSubscription"),
                input=_pb2.AddSubscriptionRequest,
                output=_pb2.AddSubscriptionResponse,
                allowed_methods=("POST",),
            ),
            "RemoveSubscription": Endpoint[_pb2.RemoveSubscriptionRequest, _pb2.RemoveSubscriptionResponse](
                service_name="AgentRpc",
                name="RemoveSubscription",
                function=getattr(service, "RemoveSubscription"),
                input=_pb2.RemoveSubscriptionRequest,
                output=_pb2.RemoveSubscriptionResponse,
                allowed_methods=("POST",),
            ),
            "GetSubscriptions": Endpoint[_pb2.GetSubscriptionsRequest, _pb2.GetSubscriptionsResponse](
                service_name="AgentRpc",
                name="GetSubscriptions",
                function=getattr(service, "GetSubscriptions"),
                input=_pb2.GetSubscriptionsRequest,
                output=_pb2.GetSubscriptionsResponse,
                allowed_methods=("POST",),
            ),
        }

    def serviceName(self):
        return "mtmai.mtmpb.agent_worker.AgentRpc"


class AgentRpcClient(ConnecpyClient):
    def OpenChannel(
        self,
        *,
        request: _pb2.Message,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.Message:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/mtmai.mtmpb.agent_worker.AgentRpc/OpenChannel",
            ctx=ctx,
            request=request,
            response_obj=_pb2.Message,
            method=method,
            **kwargs,
        )

    def OpenControlChannel(
        self,
        *,
        request: _pb2.ControlMessage,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.ControlMessage:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/mtmai.mtmpb.agent_worker.AgentRpc/OpenControlChannel",
            ctx=ctx,
            request=request,
            response_obj=_pb2.ControlMessage,
            method=method,
            **kwargs,
        )

    def RegisterAgent(
        self,
        *,
        request: _pb2.RegisterAgentTypeRequest,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.RegisterAgentTypeResponse:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/mtmai.mtmpb.agent_worker.AgentRpc/RegisterAgent",
            ctx=ctx,
            request=request,
            response_obj=_pb2.RegisterAgentTypeResponse,
            method=method,
            **kwargs,
        )

    def AddSubscription(
        self,
        *,
        request: _pb2.AddSubscriptionRequest,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.AddSubscriptionResponse:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/mtmai.mtmpb.agent_worker.AgentRpc/AddSubscription",
            ctx=ctx,
            request=request,
            response_obj=_pb2.AddSubscriptionResponse,
            method=method,
            **kwargs,
        )

    def RemoveSubscription(
        self,
        *,
        request: _pb2.RemoveSubscriptionRequest,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.RemoveSubscriptionResponse:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/mtmai.mtmpb.agent_worker.AgentRpc/RemoveSubscription",
            ctx=ctx,
            request=request,
            response_obj=_pb2.RemoveSubscriptionResponse,
            method=method,
            **kwargs,
        )

    def GetSubscriptions(
        self,
        *,
        request: _pb2.GetSubscriptionsRequest,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.GetSubscriptionsResponse:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/mtmai.mtmpb.agent_worker.AgentRpc/GetSubscriptions",
            ctx=ctx,
            request=request,
            response_obj=_pb2.GetSubscriptionsResponse,
            method=method,
            **kwargs,
        )


class AsyncAgentRpcClient(AsyncConnecpyClient):
    async def OpenChannel(
        self,
        *,
        request: _pb2.Message,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.Message:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/mtmai.mtmpb.agent_worker.AgentRpc/OpenChannel",
            ctx=ctx,
            request=request,
            response_obj=_pb2.Message,
            method=method,
            session=session,
            **kwargs,
        )

    async def OpenControlChannel(
        self,
        *,
        request: _pb2.ControlMessage,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.ControlMessage:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/mtmai.mtmpb.agent_worker.AgentRpc/OpenControlChannel",
            ctx=ctx,
            request=request,
            response_obj=_pb2.ControlMessage,
            method=method,
            session=session,
            **kwargs,
        )

    async def RegisterAgent(
        self,
        *,
        request: _pb2.RegisterAgentTypeRequest,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.RegisterAgentTypeResponse:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/mtmai.mtmpb.agent_worker.AgentRpc/RegisterAgent",
            ctx=ctx,
            request=request,
            response_obj=_pb2.RegisterAgentTypeResponse,
            method=method,
            session=session,
            **kwargs,
        )

    async def AddSubscription(
        self,
        *,
        request: _pb2.AddSubscriptionRequest,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.AddSubscriptionResponse:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/mtmai.mtmpb.agent_worker.AgentRpc/AddSubscription",
            ctx=ctx,
            request=request,
            response_obj=_pb2.AddSubscriptionResponse,
            method=method,
            session=session,
            **kwargs,
        )

    async def RemoveSubscription(
        self,
        *,
        request: _pb2.RemoveSubscriptionRequest,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.RemoveSubscriptionResponse:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/mtmai.mtmpb.agent_worker.AgentRpc/RemoveSubscription",
            ctx=ctx,
            request=request,
            response_obj=_pb2.RemoveSubscriptionResponse,
            method=method,
            session=session,
            **kwargs,
        )

    async def GetSubscriptions(
        self,
        *,
        request: _pb2.GetSubscriptionsRequest,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.GetSubscriptionsResponse:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/mtmai.mtmpb.agent_worker.AgentRpc/GetSubscriptions",
            ctx=ctx,
            request=request,
            response_obj=_pb2.GetSubscriptionsResponse,
            method=method,
            session=session,
            **kwargs,
        )
