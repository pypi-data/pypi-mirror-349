# -*- coding: utf-8 -*-
# Generated by https://github.com/i2y/connecpy/protoc-gen-connecpy.  DO NOT EDIT!
# source: mtmai/mtmpb/dispatcher.proto

from typing import Any, Protocol, Union

import httpx

from connecpy.async_client import AsyncConnecpyClient
from connecpy.base import Endpoint
from connecpy.server import ConnecpyServer
from connecpy.client import ConnecpyClient
from connecpy.context import ClientContext, ServiceContext

import mtmai.mtmpb.dispatcher_pb2 as _pb2

from google.protobuf import symbol_database

_sym_db = symbol_database.Default()


class Dispatcher(Protocol):
    async def Register(self, req: _pb2.WorkerRegisterRequest, ctx: ServiceContext) -> _pb2.WorkerRegisterResponse: ...
    async def Listen(self, req: _pb2.WorkerListenRequest, ctx: ServiceContext) -> _pb2.AssignedAction: ...
    async def ListenV2(self, req: _pb2.WorkerListenRequest, ctx: ServiceContext) -> _pb2.AssignedAction: ...
    async def Heartbeat(self, req: _pb2.HeartbeatRequest, ctx: ServiceContext) -> _pb2.HeartbeatResponse: ...
    async def SubscribeToWorkflowEvents(self, req: _pb2.SubscribeToWorkflowEventsRequest, ctx: ServiceContext) -> _pb2.WorkflowEvent: ...
    async def SubscribeToWorkflowRuns(self, req: _pb2.SubscribeToWorkflowRunsRequest, ctx: ServiceContext) -> _pb2.WorkflowRunEvent: ...
    async def SendStepActionEvent(self, req: _pb2.StepActionEvent, ctx: ServiceContext) -> _pb2.ActionEventResponse: ...
    async def SendGroupKeyActionEvent(self, req: _pb2.GroupKeyActionEvent, ctx: ServiceContext) -> _pb2.ActionEventResponse: ...
    async def PutOverridesData(self, req: _pb2.OverridesData, ctx: ServiceContext) -> _pb2.OverridesDataResponse: ...
    async def Unsubscribe(self, req: _pb2.WorkerUnsubscribeRequest, ctx: ServiceContext) -> _pb2.WorkerUnsubscribeResponse: ...
    async def RefreshTimeout(self, req: _pb2.RefreshTimeoutRequest, ctx: ServiceContext) -> _pb2.RefreshTimeoutResponse: ...
    async def ReleaseSlot(self, req: _pb2.ReleaseSlotRequest, ctx: ServiceContext) -> _pb2.ReleaseSlotResponse: ...
    async def UpsertWorkerLabels(self, req: _pb2.UpsertWorkerLabelsRequest, ctx: ServiceContext) -> _pb2.UpsertWorkerLabelsResponse: ...


class DispatcherServer(ConnecpyServer):
    def __init__(self, *, service: Dispatcher, server_path_prefix=""):
        super().__init__()
        self._prefix = f"{server_path_prefix}/mtmai.mtmpb.Dispatcher"
        self._endpoints = {
            "Register": Endpoint[_pb2.WorkerRegisterRequest, _pb2.WorkerRegisterResponse](
                service_name="Dispatcher",
                name="Register",
                function=getattr(service, "Register"),
                input=_pb2.WorkerRegisterRequest,
                output=_pb2.WorkerRegisterResponse,
                allowed_methods=("POST",),
            ),
            "Listen": Endpoint[_pb2.WorkerListenRequest, _pb2.AssignedAction](
                service_name="Dispatcher",
                name="Listen",
                function=getattr(service, "Listen"),
                input=_pb2.WorkerListenRequest,
                output=_pb2.AssignedAction,
                allowed_methods=("POST",),
            ),
            "ListenV2": Endpoint[_pb2.WorkerListenRequest, _pb2.AssignedAction](
                service_name="Dispatcher",
                name="ListenV2",
                function=getattr(service, "ListenV2"),
                input=_pb2.WorkerListenRequest,
                output=_pb2.AssignedAction,
                allowed_methods=("POST",),
            ),
            "Heartbeat": Endpoint[_pb2.HeartbeatRequest, _pb2.HeartbeatResponse](
                service_name="Dispatcher",
                name="Heartbeat",
                function=getattr(service, "Heartbeat"),
                input=_pb2.HeartbeatRequest,
                output=_pb2.HeartbeatResponse,
                allowed_methods=("POST",),
            ),
            "SubscribeToWorkflowEvents": Endpoint[_pb2.SubscribeToWorkflowEventsRequest, _pb2.WorkflowEvent](
                service_name="Dispatcher",
                name="SubscribeToWorkflowEvents",
                function=getattr(service, "SubscribeToWorkflowEvents"),
                input=_pb2.SubscribeToWorkflowEventsRequest,
                output=_pb2.WorkflowEvent,
                allowed_methods=("POST",),
            ),
            "SubscribeToWorkflowRuns": Endpoint[_pb2.SubscribeToWorkflowRunsRequest, _pb2.WorkflowRunEvent](
                service_name="Dispatcher",
                name="SubscribeToWorkflowRuns",
                function=getattr(service, "SubscribeToWorkflowRuns"),
                input=_pb2.SubscribeToWorkflowRunsRequest,
                output=_pb2.WorkflowRunEvent,
                allowed_methods=("POST",),
            ),
            "SendStepActionEvent": Endpoint[_pb2.StepActionEvent, _pb2.ActionEventResponse](
                service_name="Dispatcher",
                name="SendStepActionEvent",
                function=getattr(service, "SendStepActionEvent"),
                input=_pb2.StepActionEvent,
                output=_pb2.ActionEventResponse,
                allowed_methods=("POST",),
            ),
            "SendGroupKeyActionEvent": Endpoint[_pb2.GroupKeyActionEvent, _pb2.ActionEventResponse](
                service_name="Dispatcher",
                name="SendGroupKeyActionEvent",
                function=getattr(service, "SendGroupKeyActionEvent"),
                input=_pb2.GroupKeyActionEvent,
                output=_pb2.ActionEventResponse,
                allowed_methods=("POST",),
            ),
            "PutOverridesData": Endpoint[_pb2.OverridesData, _pb2.OverridesDataResponse](
                service_name="Dispatcher",
                name="PutOverridesData",
                function=getattr(service, "PutOverridesData"),
                input=_pb2.OverridesData,
                output=_pb2.OverridesDataResponse,
                allowed_methods=("POST",),
            ),
            "Unsubscribe": Endpoint[_pb2.WorkerUnsubscribeRequest, _pb2.WorkerUnsubscribeResponse](
                service_name="Dispatcher",
                name="Unsubscribe",
                function=getattr(service, "Unsubscribe"),
                input=_pb2.WorkerUnsubscribeRequest,
                output=_pb2.WorkerUnsubscribeResponse,
                allowed_methods=("POST",),
            ),
            "RefreshTimeout": Endpoint[_pb2.RefreshTimeoutRequest, _pb2.RefreshTimeoutResponse](
                service_name="Dispatcher",
                name="RefreshTimeout",
                function=getattr(service, "RefreshTimeout"),
                input=_pb2.RefreshTimeoutRequest,
                output=_pb2.RefreshTimeoutResponse,
                allowed_methods=("POST",),
            ),
            "ReleaseSlot": Endpoint[_pb2.ReleaseSlotRequest, _pb2.ReleaseSlotResponse](
                service_name="Dispatcher",
                name="ReleaseSlot",
                function=getattr(service, "ReleaseSlot"),
                input=_pb2.ReleaseSlotRequest,
                output=_pb2.ReleaseSlotResponse,
                allowed_methods=("POST",),
            ),
            "UpsertWorkerLabels": Endpoint[_pb2.UpsertWorkerLabelsRequest, _pb2.UpsertWorkerLabelsResponse](
                service_name="Dispatcher",
                name="UpsertWorkerLabels",
                function=getattr(service, "UpsertWorkerLabels"),
                input=_pb2.UpsertWorkerLabelsRequest,
                output=_pb2.UpsertWorkerLabelsResponse,
                allowed_methods=("POST",),
            ),
        }

    def serviceName(self):
        return "mtmai.mtmpb.Dispatcher"


class DispatcherSync(Protocol):
    def Register(self, req: _pb2.WorkerRegisterRequest, ctx: ServiceContext) -> _pb2.WorkerRegisterResponse: ...
    def Listen(self, req: _pb2.WorkerListenRequest, ctx: ServiceContext) -> _pb2.AssignedAction: ...
    def ListenV2(self, req: _pb2.WorkerListenRequest, ctx: ServiceContext) -> _pb2.AssignedAction: ...
    def Heartbeat(self, req: _pb2.HeartbeatRequest, ctx: ServiceContext) -> _pb2.HeartbeatResponse: ...
    def SubscribeToWorkflowEvents(self, req: _pb2.SubscribeToWorkflowEventsRequest, ctx: ServiceContext) -> _pb2.WorkflowEvent: ...
    def SubscribeToWorkflowRuns(self, req: _pb2.SubscribeToWorkflowRunsRequest, ctx: ServiceContext) -> _pb2.WorkflowRunEvent: ...
    def SendStepActionEvent(self, req: _pb2.StepActionEvent, ctx: ServiceContext) -> _pb2.ActionEventResponse: ...
    def SendGroupKeyActionEvent(self, req: _pb2.GroupKeyActionEvent, ctx: ServiceContext) -> _pb2.ActionEventResponse: ...
    def PutOverridesData(self, req: _pb2.OverridesData, ctx: ServiceContext) -> _pb2.OverridesDataResponse: ...
    def Unsubscribe(self, req: _pb2.WorkerUnsubscribeRequest, ctx: ServiceContext) -> _pb2.WorkerUnsubscribeResponse: ...
    def RefreshTimeout(self, req: _pb2.RefreshTimeoutRequest, ctx: ServiceContext) -> _pb2.RefreshTimeoutResponse: ...
    def ReleaseSlot(self, req: _pb2.ReleaseSlotRequest, ctx: ServiceContext) -> _pb2.ReleaseSlotResponse: ...
    def UpsertWorkerLabels(self, req: _pb2.UpsertWorkerLabelsRequest, ctx: ServiceContext) -> _pb2.UpsertWorkerLabelsResponse: ...


class DispatcherServerSync(ConnecpyServer):
    def __init__(self, *, service: DispatcherSync, server_path_prefix=""):
        super().__init__()
        self._prefix = f"{server_path_prefix}/mtmai.mtmpb.Dispatcher"
        self._endpoints = {
            "Register": Endpoint[_pb2.WorkerRegisterRequest, _pb2.WorkerRegisterResponse](
                service_name="Dispatcher",
                name="Register",
                function=getattr(service, "Register"),
                input=_pb2.WorkerRegisterRequest,
                output=_pb2.WorkerRegisterResponse,
                allowed_methods=("POST",),
            ),
            "Listen": Endpoint[_pb2.WorkerListenRequest, _pb2.AssignedAction](
                service_name="Dispatcher",
                name="Listen",
                function=getattr(service, "Listen"),
                input=_pb2.WorkerListenRequest,
                output=_pb2.AssignedAction,
                allowed_methods=("POST",),
            ),
            "ListenV2": Endpoint[_pb2.WorkerListenRequest, _pb2.AssignedAction](
                service_name="Dispatcher",
                name="ListenV2",
                function=getattr(service, "ListenV2"),
                input=_pb2.WorkerListenRequest,
                output=_pb2.AssignedAction,
                allowed_methods=("POST",),
            ),
            "Heartbeat": Endpoint[_pb2.HeartbeatRequest, _pb2.HeartbeatResponse](
                service_name="Dispatcher",
                name="Heartbeat",
                function=getattr(service, "Heartbeat"),
                input=_pb2.HeartbeatRequest,
                output=_pb2.HeartbeatResponse,
                allowed_methods=("POST",),
            ),
            "SubscribeToWorkflowEvents": Endpoint[_pb2.SubscribeToWorkflowEventsRequest, _pb2.WorkflowEvent](
                service_name="Dispatcher",
                name="SubscribeToWorkflowEvents",
                function=getattr(service, "SubscribeToWorkflowEvents"),
                input=_pb2.SubscribeToWorkflowEventsRequest,
                output=_pb2.WorkflowEvent,
                allowed_methods=("POST",),
            ),
            "SubscribeToWorkflowRuns": Endpoint[_pb2.SubscribeToWorkflowRunsRequest, _pb2.WorkflowRunEvent](
                service_name="Dispatcher",
                name="SubscribeToWorkflowRuns",
                function=getattr(service, "SubscribeToWorkflowRuns"),
                input=_pb2.SubscribeToWorkflowRunsRequest,
                output=_pb2.WorkflowRunEvent,
                allowed_methods=("POST",),
            ),
            "SendStepActionEvent": Endpoint[_pb2.StepActionEvent, _pb2.ActionEventResponse](
                service_name="Dispatcher",
                name="SendStepActionEvent",
                function=getattr(service, "SendStepActionEvent"),
                input=_pb2.StepActionEvent,
                output=_pb2.ActionEventResponse,
                allowed_methods=("POST",),
            ),
            "SendGroupKeyActionEvent": Endpoint[_pb2.GroupKeyActionEvent, _pb2.ActionEventResponse](
                service_name="Dispatcher",
                name="SendGroupKeyActionEvent",
                function=getattr(service, "SendGroupKeyActionEvent"),
                input=_pb2.GroupKeyActionEvent,
                output=_pb2.ActionEventResponse,
                allowed_methods=("POST",),
            ),
            "PutOverridesData": Endpoint[_pb2.OverridesData, _pb2.OverridesDataResponse](
                service_name="Dispatcher",
                name="PutOverridesData",
                function=getattr(service, "PutOverridesData"),
                input=_pb2.OverridesData,
                output=_pb2.OverridesDataResponse,
                allowed_methods=("POST",),
            ),
            "Unsubscribe": Endpoint[_pb2.WorkerUnsubscribeRequest, _pb2.WorkerUnsubscribeResponse](
                service_name="Dispatcher",
                name="Unsubscribe",
                function=getattr(service, "Unsubscribe"),
                input=_pb2.WorkerUnsubscribeRequest,
                output=_pb2.WorkerUnsubscribeResponse,
                allowed_methods=("POST",),
            ),
            "RefreshTimeout": Endpoint[_pb2.RefreshTimeoutRequest, _pb2.RefreshTimeoutResponse](
                service_name="Dispatcher",
                name="RefreshTimeout",
                function=getattr(service, "RefreshTimeout"),
                input=_pb2.RefreshTimeoutRequest,
                output=_pb2.RefreshTimeoutResponse,
                allowed_methods=("POST",),
            ),
            "ReleaseSlot": Endpoint[_pb2.ReleaseSlotRequest, _pb2.ReleaseSlotResponse](
                service_name="Dispatcher",
                name="ReleaseSlot",
                function=getattr(service, "ReleaseSlot"),
                input=_pb2.ReleaseSlotRequest,
                output=_pb2.ReleaseSlotResponse,
                allowed_methods=("POST",),
            ),
            "UpsertWorkerLabels": Endpoint[_pb2.UpsertWorkerLabelsRequest, _pb2.UpsertWorkerLabelsResponse](
                service_name="Dispatcher",
                name="UpsertWorkerLabels",
                function=getattr(service, "UpsertWorkerLabels"),
                input=_pb2.UpsertWorkerLabelsRequest,
                output=_pb2.UpsertWorkerLabelsResponse,
                allowed_methods=("POST",),
            ),
        }

    def serviceName(self):
        return "mtmai.mtmpb.Dispatcher"


class DispatcherClient(ConnecpyClient):
    def Register(
        self,
        *,
        request: _pb2.WorkerRegisterRequest,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.WorkerRegisterResponse:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/mtmai.mtmpb.Dispatcher/Register",
            ctx=ctx,
            request=request,
            response_obj=_pb2.WorkerRegisterResponse,
            method=method,
            **kwargs,
        )

    def Listen(
        self,
        *,
        request: _pb2.WorkerListenRequest,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.AssignedAction:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/mtmai.mtmpb.Dispatcher/Listen",
            ctx=ctx,
            request=request,
            response_obj=_pb2.AssignedAction,
            method=method,
            **kwargs,
        )

    def ListenV2(
        self,
        *,
        request: _pb2.WorkerListenRequest,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.AssignedAction:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/mtmai.mtmpb.Dispatcher/ListenV2",
            ctx=ctx,
            request=request,
            response_obj=_pb2.AssignedAction,
            method=method,
            **kwargs,
        )

    def Heartbeat(
        self,
        *,
        request: _pb2.HeartbeatRequest,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.HeartbeatResponse:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/mtmai.mtmpb.Dispatcher/Heartbeat",
            ctx=ctx,
            request=request,
            response_obj=_pb2.HeartbeatResponse,
            method=method,
            **kwargs,
        )

    def SubscribeToWorkflowEvents(
        self,
        *,
        request: _pb2.SubscribeToWorkflowEventsRequest,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.WorkflowEvent:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/mtmai.mtmpb.Dispatcher/SubscribeToWorkflowEvents",
            ctx=ctx,
            request=request,
            response_obj=_pb2.WorkflowEvent,
            method=method,
            **kwargs,
        )

    def SubscribeToWorkflowRuns(
        self,
        *,
        request: _pb2.SubscribeToWorkflowRunsRequest,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.WorkflowRunEvent:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/mtmai.mtmpb.Dispatcher/SubscribeToWorkflowRuns",
            ctx=ctx,
            request=request,
            response_obj=_pb2.WorkflowRunEvent,
            method=method,
            **kwargs,
        )

    def SendStepActionEvent(
        self,
        *,
        request: _pb2.StepActionEvent,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.ActionEventResponse:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/mtmai.mtmpb.Dispatcher/SendStepActionEvent",
            ctx=ctx,
            request=request,
            response_obj=_pb2.ActionEventResponse,
            method=method,
            **kwargs,
        )

    def SendGroupKeyActionEvent(
        self,
        *,
        request: _pb2.GroupKeyActionEvent,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.ActionEventResponse:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/mtmai.mtmpb.Dispatcher/SendGroupKeyActionEvent",
            ctx=ctx,
            request=request,
            response_obj=_pb2.ActionEventResponse,
            method=method,
            **kwargs,
        )

    def PutOverridesData(
        self,
        *,
        request: _pb2.OverridesData,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.OverridesDataResponse:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/mtmai.mtmpb.Dispatcher/PutOverridesData",
            ctx=ctx,
            request=request,
            response_obj=_pb2.OverridesDataResponse,
            method=method,
            **kwargs,
        )

    def Unsubscribe(
        self,
        *,
        request: _pb2.WorkerUnsubscribeRequest,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.WorkerUnsubscribeResponse:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/mtmai.mtmpb.Dispatcher/Unsubscribe",
            ctx=ctx,
            request=request,
            response_obj=_pb2.WorkerUnsubscribeResponse,
            method=method,
            **kwargs,
        )

    def RefreshTimeout(
        self,
        *,
        request: _pb2.RefreshTimeoutRequest,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.RefreshTimeoutResponse:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/mtmai.mtmpb.Dispatcher/RefreshTimeout",
            ctx=ctx,
            request=request,
            response_obj=_pb2.RefreshTimeoutResponse,
            method=method,
            **kwargs,
        )

    def ReleaseSlot(
        self,
        *,
        request: _pb2.ReleaseSlotRequest,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.ReleaseSlotResponse:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/mtmai.mtmpb.Dispatcher/ReleaseSlot",
            ctx=ctx,
            request=request,
            response_obj=_pb2.ReleaseSlotResponse,
            method=method,
            **kwargs,
        )

    def UpsertWorkerLabels(
        self,
        *,
        request: _pb2.UpsertWorkerLabelsRequest,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.UpsertWorkerLabelsResponse:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/mtmai.mtmpb.Dispatcher/UpsertWorkerLabels",
            ctx=ctx,
            request=request,
            response_obj=_pb2.UpsertWorkerLabelsResponse,
            method=method,
            **kwargs,
        )


class AsyncDispatcherClient(AsyncConnecpyClient):
    async def Register(
        self,
        *,
        request: _pb2.WorkerRegisterRequest,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.WorkerRegisterResponse:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/mtmai.mtmpb.Dispatcher/Register",
            ctx=ctx,
            request=request,
            response_obj=_pb2.WorkerRegisterResponse,
            method=method,
            session=session,
            **kwargs,
        )

    async def Listen(
        self,
        *,
        request: _pb2.WorkerListenRequest,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.AssignedAction:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/mtmai.mtmpb.Dispatcher/Listen",
            ctx=ctx,
            request=request,
            response_obj=_pb2.AssignedAction,
            method=method,
            session=session,
            **kwargs,
        )

    async def ListenV2(
        self,
        *,
        request: _pb2.WorkerListenRequest,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.AssignedAction:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/mtmai.mtmpb.Dispatcher/ListenV2",
            ctx=ctx,
            request=request,
            response_obj=_pb2.AssignedAction,
            method=method,
            session=session,
            **kwargs,
        )

    async def Heartbeat(
        self,
        *,
        request: _pb2.HeartbeatRequest,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.HeartbeatResponse:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/mtmai.mtmpb.Dispatcher/Heartbeat",
            ctx=ctx,
            request=request,
            response_obj=_pb2.HeartbeatResponse,
            method=method,
            session=session,
            **kwargs,
        )

    async def SubscribeToWorkflowEvents(
        self,
        *,
        request: _pb2.SubscribeToWorkflowEventsRequest,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.WorkflowEvent:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/mtmai.mtmpb.Dispatcher/SubscribeToWorkflowEvents",
            ctx=ctx,
            request=request,
            response_obj=_pb2.WorkflowEvent,
            method=method,
            session=session,
            **kwargs,
        )

    async def SubscribeToWorkflowRuns(
        self,
        *,
        request: _pb2.SubscribeToWorkflowRunsRequest,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.WorkflowRunEvent:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/mtmai.mtmpb.Dispatcher/SubscribeToWorkflowRuns",
            ctx=ctx,
            request=request,
            response_obj=_pb2.WorkflowRunEvent,
            method=method,
            session=session,
            **kwargs,
        )

    async def SendStepActionEvent(
        self,
        *,
        request: _pb2.StepActionEvent,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.ActionEventResponse:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/mtmai.mtmpb.Dispatcher/SendStepActionEvent",
            ctx=ctx,
            request=request,
            response_obj=_pb2.ActionEventResponse,
            method=method,
            session=session,
            **kwargs,
        )

    async def SendGroupKeyActionEvent(
        self,
        *,
        request: _pb2.GroupKeyActionEvent,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.ActionEventResponse:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/mtmai.mtmpb.Dispatcher/SendGroupKeyActionEvent",
            ctx=ctx,
            request=request,
            response_obj=_pb2.ActionEventResponse,
            method=method,
            session=session,
            **kwargs,
        )

    async def PutOverridesData(
        self,
        *,
        request: _pb2.OverridesData,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.OverridesDataResponse:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/mtmai.mtmpb.Dispatcher/PutOverridesData",
            ctx=ctx,
            request=request,
            response_obj=_pb2.OverridesDataResponse,
            method=method,
            session=session,
            **kwargs,
        )

    async def Unsubscribe(
        self,
        *,
        request: _pb2.WorkerUnsubscribeRequest,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.WorkerUnsubscribeResponse:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/mtmai.mtmpb.Dispatcher/Unsubscribe",
            ctx=ctx,
            request=request,
            response_obj=_pb2.WorkerUnsubscribeResponse,
            method=method,
            session=session,
            **kwargs,
        )

    async def RefreshTimeout(
        self,
        *,
        request: _pb2.RefreshTimeoutRequest,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.RefreshTimeoutResponse:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/mtmai.mtmpb.Dispatcher/RefreshTimeout",
            ctx=ctx,
            request=request,
            response_obj=_pb2.RefreshTimeoutResponse,
            method=method,
            session=session,
            **kwargs,
        )

    async def ReleaseSlot(
        self,
        *,
        request: _pb2.ReleaseSlotRequest,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.ReleaseSlotResponse:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/mtmai.mtmpb.Dispatcher/ReleaseSlot",
            ctx=ctx,
            request=request,
            response_obj=_pb2.ReleaseSlotResponse,
            method=method,
            session=session,
            **kwargs,
        )

    async def UpsertWorkerLabels(
        self,
        *,
        request: _pb2.UpsertWorkerLabelsRequest,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.UpsertWorkerLabelsResponse:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/mtmai.mtmpb.Dispatcher/UpsertWorkerLabels",
            ctx=ctx,
            request=request,
            response_obj=_pb2.UpsertWorkerLabelsResponse,
            method=method,
            session=session,
            **kwargs,
        )
