# -*- coding: utf-8 -*-
# Generated by https://github.com/i2y/connecpy/protoc-gen-connecpy.  DO NOT EDIT!
# source: mtmai/mtmpb/workflows.proto

from typing import Any, Protocol, Union

import httpx

from connecpy.async_client import AsyncConnecpyClient
from connecpy.base import Endpoint
from connecpy.server import ConnecpyServer
from connecpy.client import ConnecpyClient
from connecpy.context import ClientContext, ServiceContext

import mtmai.mtmpb.workflows_pb2 as _pb2

from google.protobuf import symbol_database

_sym_db = symbol_database.Default()


class WorkflowService(Protocol):
    async def PutWorkflow(self, req: _pb2.PutWorkflowRequest, ctx: ServiceContext) -> _pb2.WorkflowVersion: ...
    async def ScheduleWorkflow(self, req: _pb2.ScheduleWorkflowRequest, ctx: ServiceContext) -> _pb2.WorkflowVersion: ...
    async def TriggerWorkflow(self, req: _pb2.TriggerWorkflowRequest, ctx: ServiceContext) -> _pb2.TriggerWorkflowResponse: ...
    async def BulkTriggerWorkflow(self, req: _pb2.BulkTriggerWorkflowRequest, ctx: ServiceContext) -> _pb2.BulkTriggerWorkflowResponse: ...
    async def PutRateLimit(self, req: _pb2.PutRateLimitRequest, ctx: ServiceContext) -> _pb2.PutRateLimitResponse: ...


class WorkflowServiceServer(ConnecpyServer):
    def __init__(self, *, service: WorkflowService, server_path_prefix=""):
        super().__init__()
        self._prefix = f"{server_path_prefix}/.WorkflowService"
        self._endpoints = {
            "PutWorkflow": Endpoint[_pb2.PutWorkflowRequest, _pb2.WorkflowVersion](
                service_name="WorkflowService",
                name="PutWorkflow",
                function=getattr(service, "PutWorkflow"),
                input=_pb2.PutWorkflowRequest,
                output=_pb2.WorkflowVersion,
                allowed_methods=("POST",),
            ),
            "ScheduleWorkflow": Endpoint[_pb2.ScheduleWorkflowRequest, _pb2.WorkflowVersion](
                service_name="WorkflowService",
                name="ScheduleWorkflow",
                function=getattr(service, "ScheduleWorkflow"),
                input=_pb2.ScheduleWorkflowRequest,
                output=_pb2.WorkflowVersion,
                allowed_methods=("POST",),
            ),
            "TriggerWorkflow": Endpoint[_pb2.TriggerWorkflowRequest, _pb2.TriggerWorkflowResponse](
                service_name="WorkflowService",
                name="TriggerWorkflow",
                function=getattr(service, "TriggerWorkflow"),
                input=_pb2.TriggerWorkflowRequest,
                output=_pb2.TriggerWorkflowResponse,
                allowed_methods=("POST",),
            ),
            "BulkTriggerWorkflow": Endpoint[_pb2.BulkTriggerWorkflowRequest, _pb2.BulkTriggerWorkflowResponse](
                service_name="WorkflowService",
                name="BulkTriggerWorkflow",
                function=getattr(service, "BulkTriggerWorkflow"),
                input=_pb2.BulkTriggerWorkflowRequest,
                output=_pb2.BulkTriggerWorkflowResponse,
                allowed_methods=("POST",),
            ),
            "PutRateLimit": Endpoint[_pb2.PutRateLimitRequest, _pb2.PutRateLimitResponse](
                service_name="WorkflowService",
                name="PutRateLimit",
                function=getattr(service, "PutRateLimit"),
                input=_pb2.PutRateLimitRequest,
                output=_pb2.PutRateLimitResponse,
                allowed_methods=("POST",),
            ),
        }

    def serviceName(self):
        return ".WorkflowService"


class WorkflowServiceSync(Protocol):
    def PutWorkflow(self, req: _pb2.PutWorkflowRequest, ctx: ServiceContext) -> _pb2.WorkflowVersion: ...
    def ScheduleWorkflow(self, req: _pb2.ScheduleWorkflowRequest, ctx: ServiceContext) -> _pb2.WorkflowVersion: ...
    def TriggerWorkflow(self, req: _pb2.TriggerWorkflowRequest, ctx: ServiceContext) -> _pb2.TriggerWorkflowResponse: ...
    def BulkTriggerWorkflow(self, req: _pb2.BulkTriggerWorkflowRequest, ctx: ServiceContext) -> _pb2.BulkTriggerWorkflowResponse: ...
    def PutRateLimit(self, req: _pb2.PutRateLimitRequest, ctx: ServiceContext) -> _pb2.PutRateLimitResponse: ...


class WorkflowServiceServerSync(ConnecpyServer):
    def __init__(self, *, service: WorkflowServiceSync, server_path_prefix=""):
        super().__init__()
        self._prefix = f"{server_path_prefix}/.WorkflowService"
        self._endpoints = {
            "PutWorkflow": Endpoint[_pb2.PutWorkflowRequest, _pb2.WorkflowVersion](
                service_name="WorkflowService",
                name="PutWorkflow",
                function=getattr(service, "PutWorkflow"),
                input=_pb2.PutWorkflowRequest,
                output=_pb2.WorkflowVersion,
                allowed_methods=("POST",),
            ),
            "ScheduleWorkflow": Endpoint[_pb2.ScheduleWorkflowRequest, _pb2.WorkflowVersion](
                service_name="WorkflowService",
                name="ScheduleWorkflow",
                function=getattr(service, "ScheduleWorkflow"),
                input=_pb2.ScheduleWorkflowRequest,
                output=_pb2.WorkflowVersion,
                allowed_methods=("POST",),
            ),
            "TriggerWorkflow": Endpoint[_pb2.TriggerWorkflowRequest, _pb2.TriggerWorkflowResponse](
                service_name="WorkflowService",
                name="TriggerWorkflow",
                function=getattr(service, "TriggerWorkflow"),
                input=_pb2.TriggerWorkflowRequest,
                output=_pb2.TriggerWorkflowResponse,
                allowed_methods=("POST",),
            ),
            "BulkTriggerWorkflow": Endpoint[_pb2.BulkTriggerWorkflowRequest, _pb2.BulkTriggerWorkflowResponse](
                service_name="WorkflowService",
                name="BulkTriggerWorkflow",
                function=getattr(service, "BulkTriggerWorkflow"),
                input=_pb2.BulkTriggerWorkflowRequest,
                output=_pb2.BulkTriggerWorkflowResponse,
                allowed_methods=("POST",),
            ),
            "PutRateLimit": Endpoint[_pb2.PutRateLimitRequest, _pb2.PutRateLimitResponse](
                service_name="WorkflowService",
                name="PutRateLimit",
                function=getattr(service, "PutRateLimit"),
                input=_pb2.PutRateLimitRequest,
                output=_pb2.PutRateLimitResponse,
                allowed_methods=("POST",),
            ),
        }

    def serviceName(self):
        return ".WorkflowService"


class WorkflowServiceClient(ConnecpyClient):
    def PutWorkflow(
        self,
        *,
        request: _pb2.PutWorkflowRequest,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.WorkflowVersion:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/.WorkflowService/PutWorkflow",
            ctx=ctx,
            request=request,
            response_obj=_pb2.WorkflowVersion,
            method=method,
            **kwargs,
        )

    def ScheduleWorkflow(
        self,
        *,
        request: _pb2.ScheduleWorkflowRequest,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.WorkflowVersion:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/.WorkflowService/ScheduleWorkflow",
            ctx=ctx,
            request=request,
            response_obj=_pb2.WorkflowVersion,
            method=method,
            **kwargs,
        )

    def TriggerWorkflow(
        self,
        *,
        request: _pb2.TriggerWorkflowRequest,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.TriggerWorkflowResponse:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/.WorkflowService/TriggerWorkflow",
            ctx=ctx,
            request=request,
            response_obj=_pb2.TriggerWorkflowResponse,
            method=method,
            **kwargs,
        )

    def BulkTriggerWorkflow(
        self,
        *,
        request: _pb2.BulkTriggerWorkflowRequest,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.BulkTriggerWorkflowResponse:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/.WorkflowService/BulkTriggerWorkflow",
            ctx=ctx,
            request=request,
            response_obj=_pb2.BulkTriggerWorkflowResponse,
            method=method,
            **kwargs,
        )

    def PutRateLimit(
        self,
        *,
        request: _pb2.PutRateLimitRequest,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.PutRateLimitResponse:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/.WorkflowService/PutRateLimit",
            ctx=ctx,
            request=request,
            response_obj=_pb2.PutRateLimitResponse,
            method=method,
            **kwargs,
        )


class AsyncWorkflowServiceClient(AsyncConnecpyClient):
    async def PutWorkflow(
        self,
        *,
        request: _pb2.PutWorkflowRequest,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.WorkflowVersion:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/.WorkflowService/PutWorkflow",
            ctx=ctx,
            request=request,
            response_obj=_pb2.WorkflowVersion,
            method=method,
            session=session,
            **kwargs,
        )

    async def ScheduleWorkflow(
        self,
        *,
        request: _pb2.ScheduleWorkflowRequest,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.WorkflowVersion:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/.WorkflowService/ScheduleWorkflow",
            ctx=ctx,
            request=request,
            response_obj=_pb2.WorkflowVersion,
            method=method,
            session=session,
            **kwargs,
        )

    async def TriggerWorkflow(
        self,
        *,
        request: _pb2.TriggerWorkflowRequest,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.TriggerWorkflowResponse:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/.WorkflowService/TriggerWorkflow",
            ctx=ctx,
            request=request,
            response_obj=_pb2.TriggerWorkflowResponse,
            method=method,
            session=session,
            **kwargs,
        )

    async def BulkTriggerWorkflow(
        self,
        *,
        request: _pb2.BulkTriggerWorkflowRequest,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.BulkTriggerWorkflowResponse:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/.WorkflowService/BulkTriggerWorkflow",
            ctx=ctx,
            request=request,
            response_obj=_pb2.BulkTriggerWorkflowResponse,
            method=method,
            session=session,
            **kwargs,
        )

    async def PutRateLimit(
        self,
        *,
        request: _pb2.PutRateLimitRequest,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.PutRateLimitResponse:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/.WorkflowService/PutRateLimit",
            ctx=ctx,
            request=request,
            response_obj=_pb2.PutRateLimitResponse,
            method=method,
            session=session,
            **kwargs,
        )
