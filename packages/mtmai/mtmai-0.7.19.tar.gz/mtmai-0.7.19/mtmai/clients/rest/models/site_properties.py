# coding: utf-8

"""
    Hatchet API

    The Hatchet API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from mtmai.clients.rest.models.site_properties_state import SitePropertiesState
from typing import Optional, Set
from typing_extensions import Self

class SiteProperties(BaseModel):
    """
    SiteProperties
    """ # noqa: E501
    id: StrictStr = Field(description="站点ID")
    tenant_id: StrictStr = Field(description="租户ID")
    updated_at: Optional[StrictStr] = Field(default=None, description="更新时间")
    created_at: Optional[StrictStr] = Field(default=None, description="创建时间")
    enabled: StrictBool = Field(description="是否启用")
    title: StrictStr = Field(description="site 标题")
    description: StrictStr = Field(description="site 描述")
    automation_enabled: StrictBool = Field(description="是否启用自动化")
    state: SitePropertiesState
    __properties: ClassVar[List[str]] = ["id", "tenant_id", "updated_at", "created_at", "enabled", "title", "description", "automation_enabled", "state"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SiteProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of state
        if self.state:
            _dict['state'] = self.state.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SiteProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in SiteProperties) in the input: " + _key)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "tenant_id": obj.get("tenant_id"),
            "updated_at": obj.get("updated_at"),
            "created_at": obj.get("created_at"),
            "enabled": obj.get("enabled"),
            "title": obj.get("title"),
            "description": obj.get("description"),
            "automation_enabled": obj.get("automation_enabled"),
            "state": SitePropertiesState.from_dict(obj["state"]) if obj.get("state") is not None else None
        })
        return _obj


