# coding: utf-8

"""
    Mtmai API

    The Mtmai API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from mtmai.clients.rest.models.chat_message_input import ChatMessageInput
from mtmai.clients.rest.models.platform_account_flow_input import PlatformAccountFlowInput
from mtmai.clients.rest.models.social_add_followers_input import SocialAddFollowersInput
from mtmai.clients.rest.models.social_login_input import SocialLoginInput
from mtmai.clients.rest.models.tenant_init_input import TenantInitInput
from mtmai.clients.rest.models.text_message import TextMessage
from mtmai.clients.rest.models.thought_event import ThoughtEvent
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

AGENTEVENT_ONE_OF_SCHEMAS = ["ChatMessageInput", "PlatformAccountFlowInput", "SocialAddFollowersInput", "SocialLoginInput", "TenantInitInput", "TextMessage", "ThoughtEvent"]

class AgentEvent(BaseModel):
    """
    AgentEvent
    """
    # data type: ThoughtEvent
    oneof_schema_1_validator: Optional[ThoughtEvent] = None
    # data type: TextMessage
    oneof_schema_2_validator: Optional[TextMessage] = None
    # data type: PlatformAccountFlowInput
    oneof_schema_3_validator: Optional[PlatformAccountFlowInput] = None
    # data type: SocialAddFollowersInput
    oneof_schema_4_validator: Optional[SocialAddFollowersInput] = None
    # data type: SocialLoginInput
    oneof_schema_5_validator: Optional[SocialLoginInput] = None
    # data type: TenantInitInput
    oneof_schema_6_validator: Optional[TenantInitInput] = None
    # data type: ChatMessageInput
    oneof_schema_7_validator: Optional[ChatMessageInput] = None
    actual_instance: Optional[Union[ChatMessageInput, PlatformAccountFlowInput, SocialAddFollowersInput, SocialLoginInput, TenantInitInput, TextMessage, ThoughtEvent]] = None
    one_of_schemas: Set[str] = { "ChatMessageInput", "PlatformAccountFlowInput", "SocialAddFollowersInput", "SocialLoginInput", "TenantInitInput", "TextMessage", "ThoughtEvent" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    discriminator_value_class_map: Dict[str, str] = {
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = AgentEvent.model_construct()
        error_messages = []
        match = 0
        # validate data type: ThoughtEvent
        if not isinstance(v, ThoughtEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ThoughtEvent`")
        else:
            match += 1
        # validate data type: TextMessage
        if not isinstance(v, TextMessage):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TextMessage`")
        else:
            match += 1
        # validate data type: PlatformAccountFlowInput
        if not isinstance(v, PlatformAccountFlowInput):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PlatformAccountFlowInput`")
        else:
            match += 1
        # validate data type: SocialAddFollowersInput
        if not isinstance(v, SocialAddFollowersInput):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SocialAddFollowersInput`")
        else:
            match += 1
        # validate data type: SocialLoginInput
        if not isinstance(v, SocialLoginInput):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SocialLoginInput`")
        else:
            match += 1
        # validate data type: TenantInitInput
        if not isinstance(v, TenantInitInput):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TenantInitInput`")
        else:
            match += 1
        # validate data type: ChatMessageInput
        if not isinstance(v, ChatMessageInput):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ChatMessageInput`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in AgentEvent with oneOf schemas: ChatMessageInput, PlatformAccountFlowInput, SocialAddFollowersInput, SocialLoginInput, TenantInitInput, TextMessage, ThoughtEvent. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in AgentEvent with oneOf schemas: ChatMessageInput, PlatformAccountFlowInput, SocialAddFollowersInput, SocialLoginInput, TenantInitInput, TextMessage, ThoughtEvent. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # use oneOf discriminator to lookup the data type
        _data_type = json.loads(json_str).get("type")
        if not _data_type:
            raise ValueError("Failed to lookup data type from the field `type` in the input.")

        # check if data type is `ChatMessageInput`
        if _data_type == "ChatMessageInput":
            instance.actual_instance = ChatMessageInput.from_json(json_str)
            return instance

        # check if data type is `PlatformAccountFlowInput`
        if _data_type == "PlatformAccountFlowInput":
            instance.actual_instance = PlatformAccountFlowInput.from_json(json_str)
            return instance

        # check if data type is `SocialAddFollowersInput`
        if _data_type == "SocialAddFollowersInput":
            instance.actual_instance = SocialAddFollowersInput.from_json(json_str)
            return instance

        # check if data type is `SocialLoginInput`
        if _data_type == "SocialLoginInput":
            instance.actual_instance = SocialLoginInput.from_json(json_str)
            return instance

        # check if data type is `TenantInitInput`
        if _data_type == "TenantInitInput":
            instance.actual_instance = TenantInitInput.from_json(json_str)
            return instance

        # check if data type is `TextMessage`
        if _data_type == "TextMessage":
            instance.actual_instance = TextMessage.from_json(json_str)
            return instance

        # check if data type is `ThoughtEvent`
        if _data_type == "ThoughtEvent":
            instance.actual_instance = ThoughtEvent.from_json(json_str)
            return instance

        # deserialize data into ThoughtEvent
        try:
            instance.actual_instance = ThoughtEvent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into TextMessage
        try:
            instance.actual_instance = TextMessage.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PlatformAccountFlowInput
        try:
            instance.actual_instance = PlatformAccountFlowInput.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SocialAddFollowersInput
        try:
            instance.actual_instance = SocialAddFollowersInput.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SocialLoginInput
        try:
            instance.actual_instance = SocialLoginInput.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into TenantInitInput
        try:
            instance.actual_instance = TenantInitInput.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ChatMessageInput
        try:
            instance.actual_instance = ChatMessageInput.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into AgentEvent with oneOf schemas: ChatMessageInput, PlatformAccountFlowInput, SocialAddFollowersInput, SocialLoginInput, TenantInitInput, TextMessage, ThoughtEvent. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into AgentEvent with oneOf schemas: ChatMessageInput, PlatformAccountFlowInput, SocialAddFollowersInput, SocialLoginInput, TenantInitInput, TextMessage, ThoughtEvent. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], ChatMessageInput, PlatformAccountFlowInput, SocialAddFollowersInput, SocialLoginInput, TenantInitInput, TextMessage, ThoughtEvent]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


