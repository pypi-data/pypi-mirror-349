# -*- coding: utf-8 -*-
# Generated by https://github.com/i2y/connecpy/protoc-gen-connecpy.  DO NOT EDIT!
# source: mtmai/mtmpb/sp.proto

from typing import Any, Protocol, Union

import httpx

from connecpy.async_client import AsyncConnecpyClient
from connecpy.base import Endpoint
from connecpy.server import ConnecpyServer
from connecpy.client import ConnecpyClient
from connecpy.context import ClientContext, ServiceContext

import mtmai.mtmpb.sp_pb2 as _pb2

from google.protobuf import symbol_database

_sym_db = symbol_database.Default()


class SpService(Protocol):
    async def SpProjectList(self, req: _pb2.SpProjectListReq, ctx: ServiceContext) -> _pb2.SpProjectListReply: ...
    async def SpProjectGet(self, req: _pb2.SpProjectGetReq, ctx: ServiceContext) -> _pb2.SpProject: ...
    async def SpProjectCreate(self, req: _pb2.SpProjectCreateReq, ctx: ServiceContext) -> _pb2.Result: ...
    async def SpProjectUpdate(self, req: _pb2.SpProjectUpdateReq, ctx: ServiceContext) -> _pb2.Result: ...
    async def SpProjectDelete(self, req: _pb2.ResDeleteReq, ctx: ServiceContext) -> _pb2.Result: ...
    async def SpProjectRun(self, req: _pb2.SpiderProjectRunReq, ctx: ServiceContext) -> _pb2.Result: ...
    async def SpProjectVisit(self, req: _pb2.SpiderProjectVisitReq, ctx: ServiceContext) -> _pb2.Result: ...
    async def SpProjectReload(self, req: _pb2.SpProjectReloadReq, ctx: ServiceContext) -> _pb2.Result: ...
    async def SpRouteList(self, req: _pb2.SpRouteListReq, ctx: ServiceContext) -> _pb2.SpRouteListReply: ...
    async def SpRouteGet(self, req: _pb2.SpRouteGetReq, ctx: ServiceContext) -> _pb2.SpRoute: ...
    async def SpRouteCreate(self, req: _pb2.SpRouteCreateReq, ctx: ServiceContext) -> _pb2.Result: ...
    async def SpRouteUpdate(self, req: _pb2.SpRouteUpdateReq, ctx: ServiceContext) -> _pb2.Result: ...
    async def SpRouteDelete(self, req: _pb2.ResDeleteReq, ctx: ServiceContext) -> _pb2.Result: ...
    async def SpContentmodiList(self, req: _pb2.SpContentmodiListReq, ctx: ServiceContext) -> _pb2.SpContentmodiListReply: ...
    async def SpContentmodiGet(self, req: _pb2.SpContentmodiGetReq, ctx: ServiceContext) -> _pb2.SpContentmodi: ...
    async def SpContentmodiCreate(self, req: _pb2.SpContentmodiCreateReq, ctx: ServiceContext) -> _pb2.Result: ...
    async def SpContentmodiUpdate(self, req: _pb2.SpContentmodiUpdateReq, ctx: ServiceContext) -> _pb2.Result: ...
    async def SpContentmodiDelete(self, req: _pb2.ResDeleteReq, ctx: ServiceContext) -> _pb2.Result: ...
    async def SpOptionGet(self, req: _pb2.SpOptionGetReq, ctx: ServiceContext) -> _pb2.SpOption: ...
    async def SpOptionSave(self, req: _pb2.SpOption, ctx: ServiceContext) -> _pb2.Result: ...
    async def Sp2Fetch(self, req: _pb2.Sp2FetchReq, ctx: ServiceContext) -> _pb2.Sp2FetchRes: ...


class SpServiceServer(ConnecpyServer):
    def __init__(self, *, service: SpService, server_path_prefix=""):
        super().__init__()
        self._prefix = f"{server_path_prefix}/mtmai.mtmpb.SpService"
        self._endpoints = {
            "SpProjectList": Endpoint[_pb2.SpProjectListReq, _pb2.SpProjectListReply](
                service_name="SpService",
                name="SpProjectList",
                function=getattr(service, "SpProjectList"),
                input=_pb2.SpProjectListReq,
                output=_pb2.SpProjectListReply,
                allowed_methods=("POST",),
            ),
            "SpProjectGet": Endpoint[_pb2.SpProjectGetReq, _pb2.SpProject](
                service_name="SpService",
                name="SpProjectGet",
                function=getattr(service, "SpProjectGet"),
                input=_pb2.SpProjectGetReq,
                output=_pb2.SpProject,
                allowed_methods=("POST",),
            ),
            "SpProjectCreate": Endpoint[_pb2.SpProjectCreateReq, _pb2.Result](
                service_name="SpService",
                name="SpProjectCreate",
                function=getattr(service, "SpProjectCreate"),
                input=_pb2.SpProjectCreateReq,
                output=_pb2.Result,
                allowed_methods=("POST",),
            ),
            "SpProjectUpdate": Endpoint[_pb2.SpProjectUpdateReq, _pb2.Result](
                service_name="SpService",
                name="SpProjectUpdate",
                function=getattr(service, "SpProjectUpdate"),
                input=_pb2.SpProjectUpdateReq,
                output=_pb2.Result,
                allowed_methods=("POST",),
            ),
            "SpProjectDelete": Endpoint[_pb2.ResDeleteReq, _pb2.Result](
                service_name="SpService",
                name="SpProjectDelete",
                function=getattr(service, "SpProjectDelete"),
                input=_pb2.ResDeleteReq,
                output=_pb2.Result,
                allowed_methods=("POST",),
            ),
            "SpProjectRun": Endpoint[_pb2.SpiderProjectRunReq, _pb2.Result](
                service_name="SpService",
                name="SpProjectRun",
                function=getattr(service, "SpProjectRun"),
                input=_pb2.SpiderProjectRunReq,
                output=_pb2.Result,
                allowed_methods=("POST",),
            ),
            "SpProjectVisit": Endpoint[_pb2.SpiderProjectVisitReq, _pb2.Result](
                service_name="SpService",
                name="SpProjectVisit",
                function=getattr(service, "SpProjectVisit"),
                input=_pb2.SpiderProjectVisitReq,
                output=_pb2.Result,
                allowed_methods=("POST",),
            ),
            "SpProjectReload": Endpoint[_pb2.SpProjectReloadReq, _pb2.Result](
                service_name="SpService",
                name="SpProjectReload",
                function=getattr(service, "SpProjectReload"),
                input=_pb2.SpProjectReloadReq,
                output=_pb2.Result,
                allowed_methods=("POST",),
            ),
            "SpRouteList": Endpoint[_pb2.SpRouteListReq, _pb2.SpRouteListReply](
                service_name="SpService",
                name="SpRouteList",
                function=getattr(service, "SpRouteList"),
                input=_pb2.SpRouteListReq,
                output=_pb2.SpRouteListReply,
                allowed_methods=("POST",),
            ),
            "SpRouteGet": Endpoint[_pb2.SpRouteGetReq, _pb2.SpRoute](
                service_name="SpService",
                name="SpRouteGet",
                function=getattr(service, "SpRouteGet"),
                input=_pb2.SpRouteGetReq,
                output=_pb2.SpRoute,
                allowed_methods=("POST",),
            ),
            "SpRouteCreate": Endpoint[_pb2.SpRouteCreateReq, _pb2.Result](
                service_name="SpService",
                name="SpRouteCreate",
                function=getattr(service, "SpRouteCreate"),
                input=_pb2.SpRouteCreateReq,
                output=_pb2.Result,
                allowed_methods=("POST",),
            ),
            "SpRouteUpdate": Endpoint[_pb2.SpRouteUpdateReq, _pb2.Result](
                service_name="SpService",
                name="SpRouteUpdate",
                function=getattr(service, "SpRouteUpdate"),
                input=_pb2.SpRouteUpdateReq,
                output=_pb2.Result,
                allowed_methods=("POST",),
            ),
            "SpRouteDelete": Endpoint[_pb2.ResDeleteReq, _pb2.Result](
                service_name="SpService",
                name="SpRouteDelete",
                function=getattr(service, "SpRouteDelete"),
                input=_pb2.ResDeleteReq,
                output=_pb2.Result,
                allowed_methods=("POST",),
            ),
            "SpContentmodiList": Endpoint[_pb2.SpContentmodiListReq, _pb2.SpContentmodiListReply](
                service_name="SpService",
                name="SpContentmodiList",
                function=getattr(service, "SpContentmodiList"),
                input=_pb2.SpContentmodiListReq,
                output=_pb2.SpContentmodiListReply,
                allowed_methods=("POST",),
            ),
            "SpContentmodiGet": Endpoint[_pb2.SpContentmodiGetReq, _pb2.SpContentmodi](
                service_name="SpService",
                name="SpContentmodiGet",
                function=getattr(service, "SpContentmodiGet"),
                input=_pb2.SpContentmodiGetReq,
                output=_pb2.SpContentmodi,
                allowed_methods=("POST",),
            ),
            "SpContentmodiCreate": Endpoint[_pb2.SpContentmodiCreateReq, _pb2.Result](
                service_name="SpService",
                name="SpContentmodiCreate",
                function=getattr(service, "SpContentmodiCreate"),
                input=_pb2.SpContentmodiCreateReq,
                output=_pb2.Result,
                allowed_methods=("POST",),
            ),
            "SpContentmodiUpdate": Endpoint[_pb2.SpContentmodiUpdateReq, _pb2.Result](
                service_name="SpService",
                name="SpContentmodiUpdate",
                function=getattr(service, "SpContentmodiUpdate"),
                input=_pb2.SpContentmodiUpdateReq,
                output=_pb2.Result,
                allowed_methods=("POST",),
            ),
            "SpContentmodiDelete": Endpoint[_pb2.ResDeleteReq, _pb2.Result](
                service_name="SpService",
                name="SpContentmodiDelete",
                function=getattr(service, "SpContentmodiDelete"),
                input=_pb2.ResDeleteReq,
                output=_pb2.Result,
                allowed_methods=("POST",),
            ),
            "SpOptionGet": Endpoint[_pb2.SpOptionGetReq, _pb2.SpOption](
                service_name="SpService",
                name="SpOptionGet",
                function=getattr(service, "SpOptionGet"),
                input=_pb2.SpOptionGetReq,
                output=_pb2.SpOption,
                allowed_methods=("POST",),
            ),
            "SpOptionSave": Endpoint[_pb2.SpOption, _pb2.Result](
                service_name="SpService",
                name="SpOptionSave",
                function=getattr(service, "SpOptionSave"),
                input=_pb2.SpOption,
                output=_pb2.Result,
                allowed_methods=("POST",),
            ),
            "Sp2Fetch": Endpoint[_pb2.Sp2FetchReq, _pb2.Sp2FetchRes](
                service_name="SpService",
                name="Sp2Fetch",
                function=getattr(service, "Sp2Fetch"),
                input=_pb2.Sp2FetchReq,
                output=_pb2.Sp2FetchRes,
                allowed_methods=("POST",),
            ),
        }

    def serviceName(self):
        return "mtmai.mtmpb.SpService"


class SpServiceSync(Protocol):
    def SpProjectList(self, req: _pb2.SpProjectListReq, ctx: ServiceContext) -> _pb2.SpProjectListReply: ...
    def SpProjectGet(self, req: _pb2.SpProjectGetReq, ctx: ServiceContext) -> _pb2.SpProject: ...
    def SpProjectCreate(self, req: _pb2.SpProjectCreateReq, ctx: ServiceContext) -> _pb2.Result: ...
    def SpProjectUpdate(self, req: _pb2.SpProjectUpdateReq, ctx: ServiceContext) -> _pb2.Result: ...
    def SpProjectDelete(self, req: _pb2.ResDeleteReq, ctx: ServiceContext) -> _pb2.Result: ...
    def SpProjectRun(self, req: _pb2.SpiderProjectRunReq, ctx: ServiceContext) -> _pb2.Result: ...
    def SpProjectVisit(self, req: _pb2.SpiderProjectVisitReq, ctx: ServiceContext) -> _pb2.Result: ...
    def SpProjectReload(self, req: _pb2.SpProjectReloadReq, ctx: ServiceContext) -> _pb2.Result: ...
    def SpRouteList(self, req: _pb2.SpRouteListReq, ctx: ServiceContext) -> _pb2.SpRouteListReply: ...
    def SpRouteGet(self, req: _pb2.SpRouteGetReq, ctx: ServiceContext) -> _pb2.SpRoute: ...
    def SpRouteCreate(self, req: _pb2.SpRouteCreateReq, ctx: ServiceContext) -> _pb2.Result: ...
    def SpRouteUpdate(self, req: _pb2.SpRouteUpdateReq, ctx: ServiceContext) -> _pb2.Result: ...
    def SpRouteDelete(self, req: _pb2.ResDeleteReq, ctx: ServiceContext) -> _pb2.Result: ...
    def SpContentmodiList(self, req: _pb2.SpContentmodiListReq, ctx: ServiceContext) -> _pb2.SpContentmodiListReply: ...
    def SpContentmodiGet(self, req: _pb2.SpContentmodiGetReq, ctx: ServiceContext) -> _pb2.SpContentmodi: ...
    def SpContentmodiCreate(self, req: _pb2.SpContentmodiCreateReq, ctx: ServiceContext) -> _pb2.Result: ...
    def SpContentmodiUpdate(self, req: _pb2.SpContentmodiUpdateReq, ctx: ServiceContext) -> _pb2.Result: ...
    def SpContentmodiDelete(self, req: _pb2.ResDeleteReq, ctx: ServiceContext) -> _pb2.Result: ...
    def SpOptionGet(self, req: _pb2.SpOptionGetReq, ctx: ServiceContext) -> _pb2.SpOption: ...
    def SpOptionSave(self, req: _pb2.SpOption, ctx: ServiceContext) -> _pb2.Result: ...
    def Sp2Fetch(self, req: _pb2.Sp2FetchReq, ctx: ServiceContext) -> _pb2.Sp2FetchRes: ...


class SpServiceServerSync(ConnecpyServer):
    def __init__(self, *, service: SpServiceSync, server_path_prefix=""):
        super().__init__()
        self._prefix = f"{server_path_prefix}/mtmai.mtmpb.SpService"
        self._endpoints = {
            "SpProjectList": Endpoint[_pb2.SpProjectListReq, _pb2.SpProjectListReply](
                service_name="SpService",
                name="SpProjectList",
                function=getattr(service, "SpProjectList"),
                input=_pb2.SpProjectListReq,
                output=_pb2.SpProjectListReply,
                allowed_methods=("POST",),
            ),
            "SpProjectGet": Endpoint[_pb2.SpProjectGetReq, _pb2.SpProject](
                service_name="SpService",
                name="SpProjectGet",
                function=getattr(service, "SpProjectGet"),
                input=_pb2.SpProjectGetReq,
                output=_pb2.SpProject,
                allowed_methods=("POST",),
            ),
            "SpProjectCreate": Endpoint[_pb2.SpProjectCreateReq, _pb2.Result](
                service_name="SpService",
                name="SpProjectCreate",
                function=getattr(service, "SpProjectCreate"),
                input=_pb2.SpProjectCreateReq,
                output=_pb2.Result,
                allowed_methods=("POST",),
            ),
            "SpProjectUpdate": Endpoint[_pb2.SpProjectUpdateReq, _pb2.Result](
                service_name="SpService",
                name="SpProjectUpdate",
                function=getattr(service, "SpProjectUpdate"),
                input=_pb2.SpProjectUpdateReq,
                output=_pb2.Result,
                allowed_methods=("POST",),
            ),
            "SpProjectDelete": Endpoint[_pb2.ResDeleteReq, _pb2.Result](
                service_name="SpService",
                name="SpProjectDelete",
                function=getattr(service, "SpProjectDelete"),
                input=_pb2.ResDeleteReq,
                output=_pb2.Result,
                allowed_methods=("POST",),
            ),
            "SpProjectRun": Endpoint[_pb2.SpiderProjectRunReq, _pb2.Result](
                service_name="SpService",
                name="SpProjectRun",
                function=getattr(service, "SpProjectRun"),
                input=_pb2.SpiderProjectRunReq,
                output=_pb2.Result,
                allowed_methods=("POST",),
            ),
            "SpProjectVisit": Endpoint[_pb2.SpiderProjectVisitReq, _pb2.Result](
                service_name="SpService",
                name="SpProjectVisit",
                function=getattr(service, "SpProjectVisit"),
                input=_pb2.SpiderProjectVisitReq,
                output=_pb2.Result,
                allowed_methods=("POST",),
            ),
            "SpProjectReload": Endpoint[_pb2.SpProjectReloadReq, _pb2.Result](
                service_name="SpService",
                name="SpProjectReload",
                function=getattr(service, "SpProjectReload"),
                input=_pb2.SpProjectReloadReq,
                output=_pb2.Result,
                allowed_methods=("POST",),
            ),
            "SpRouteList": Endpoint[_pb2.SpRouteListReq, _pb2.SpRouteListReply](
                service_name="SpService",
                name="SpRouteList",
                function=getattr(service, "SpRouteList"),
                input=_pb2.SpRouteListReq,
                output=_pb2.SpRouteListReply,
                allowed_methods=("POST",),
            ),
            "SpRouteGet": Endpoint[_pb2.SpRouteGetReq, _pb2.SpRoute](
                service_name="SpService",
                name="SpRouteGet",
                function=getattr(service, "SpRouteGet"),
                input=_pb2.SpRouteGetReq,
                output=_pb2.SpRoute,
                allowed_methods=("POST",),
            ),
            "SpRouteCreate": Endpoint[_pb2.SpRouteCreateReq, _pb2.Result](
                service_name="SpService",
                name="SpRouteCreate",
                function=getattr(service, "SpRouteCreate"),
                input=_pb2.SpRouteCreateReq,
                output=_pb2.Result,
                allowed_methods=("POST",),
            ),
            "SpRouteUpdate": Endpoint[_pb2.SpRouteUpdateReq, _pb2.Result](
                service_name="SpService",
                name="SpRouteUpdate",
                function=getattr(service, "SpRouteUpdate"),
                input=_pb2.SpRouteUpdateReq,
                output=_pb2.Result,
                allowed_methods=("POST",),
            ),
            "SpRouteDelete": Endpoint[_pb2.ResDeleteReq, _pb2.Result](
                service_name="SpService",
                name="SpRouteDelete",
                function=getattr(service, "SpRouteDelete"),
                input=_pb2.ResDeleteReq,
                output=_pb2.Result,
                allowed_methods=("POST",),
            ),
            "SpContentmodiList": Endpoint[_pb2.SpContentmodiListReq, _pb2.SpContentmodiListReply](
                service_name="SpService",
                name="SpContentmodiList",
                function=getattr(service, "SpContentmodiList"),
                input=_pb2.SpContentmodiListReq,
                output=_pb2.SpContentmodiListReply,
                allowed_methods=("POST",),
            ),
            "SpContentmodiGet": Endpoint[_pb2.SpContentmodiGetReq, _pb2.SpContentmodi](
                service_name="SpService",
                name="SpContentmodiGet",
                function=getattr(service, "SpContentmodiGet"),
                input=_pb2.SpContentmodiGetReq,
                output=_pb2.SpContentmodi,
                allowed_methods=("POST",),
            ),
            "SpContentmodiCreate": Endpoint[_pb2.SpContentmodiCreateReq, _pb2.Result](
                service_name="SpService",
                name="SpContentmodiCreate",
                function=getattr(service, "SpContentmodiCreate"),
                input=_pb2.SpContentmodiCreateReq,
                output=_pb2.Result,
                allowed_methods=("POST",),
            ),
            "SpContentmodiUpdate": Endpoint[_pb2.SpContentmodiUpdateReq, _pb2.Result](
                service_name="SpService",
                name="SpContentmodiUpdate",
                function=getattr(service, "SpContentmodiUpdate"),
                input=_pb2.SpContentmodiUpdateReq,
                output=_pb2.Result,
                allowed_methods=("POST",),
            ),
            "SpContentmodiDelete": Endpoint[_pb2.ResDeleteReq, _pb2.Result](
                service_name="SpService",
                name="SpContentmodiDelete",
                function=getattr(service, "SpContentmodiDelete"),
                input=_pb2.ResDeleteReq,
                output=_pb2.Result,
                allowed_methods=("POST",),
            ),
            "SpOptionGet": Endpoint[_pb2.SpOptionGetReq, _pb2.SpOption](
                service_name="SpService",
                name="SpOptionGet",
                function=getattr(service, "SpOptionGet"),
                input=_pb2.SpOptionGetReq,
                output=_pb2.SpOption,
                allowed_methods=("POST",),
            ),
            "SpOptionSave": Endpoint[_pb2.SpOption, _pb2.Result](
                service_name="SpService",
                name="SpOptionSave",
                function=getattr(service, "SpOptionSave"),
                input=_pb2.SpOption,
                output=_pb2.Result,
                allowed_methods=("POST",),
            ),
            "Sp2Fetch": Endpoint[_pb2.Sp2FetchReq, _pb2.Sp2FetchRes](
                service_name="SpService",
                name="Sp2Fetch",
                function=getattr(service, "Sp2Fetch"),
                input=_pb2.Sp2FetchReq,
                output=_pb2.Sp2FetchRes,
                allowed_methods=("POST",),
            ),
        }

    def serviceName(self):
        return "mtmai.mtmpb.SpService"


class SpServiceClient(ConnecpyClient):
    def SpProjectList(
        self,
        *,
        request: _pb2.SpProjectListReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.SpProjectListReply:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/mtmai.mtmpb.SpService/SpProjectList",
            ctx=ctx,
            request=request,
            response_obj=_pb2.SpProjectListReply,
            method=method,
            **kwargs,
        )

    def SpProjectGet(
        self,
        *,
        request: _pb2.SpProjectGetReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.SpProject:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/mtmai.mtmpb.SpService/SpProjectGet",
            ctx=ctx,
            request=request,
            response_obj=_pb2.SpProject,
            method=method,
            **kwargs,
        )

    def SpProjectCreate(
        self,
        *,
        request: _pb2.SpProjectCreateReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.Result:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/mtmai.mtmpb.SpService/SpProjectCreate",
            ctx=ctx,
            request=request,
            response_obj=_pb2.Result,
            method=method,
            **kwargs,
        )

    def SpProjectUpdate(
        self,
        *,
        request: _pb2.SpProjectUpdateReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.Result:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/mtmai.mtmpb.SpService/SpProjectUpdate",
            ctx=ctx,
            request=request,
            response_obj=_pb2.Result,
            method=method,
            **kwargs,
        )

    def SpProjectDelete(
        self,
        *,
        request: _pb2.ResDeleteReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.Result:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/mtmai.mtmpb.SpService/SpProjectDelete",
            ctx=ctx,
            request=request,
            response_obj=_pb2.Result,
            method=method,
            **kwargs,
        )

    def SpProjectRun(
        self,
        *,
        request: _pb2.SpiderProjectRunReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.Result:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/mtmai.mtmpb.SpService/SpProjectRun",
            ctx=ctx,
            request=request,
            response_obj=_pb2.Result,
            method=method,
            **kwargs,
        )

    def SpProjectVisit(
        self,
        *,
        request: _pb2.SpiderProjectVisitReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.Result:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/mtmai.mtmpb.SpService/SpProjectVisit",
            ctx=ctx,
            request=request,
            response_obj=_pb2.Result,
            method=method,
            **kwargs,
        )

    def SpProjectReload(
        self,
        *,
        request: _pb2.SpProjectReloadReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.Result:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/mtmai.mtmpb.SpService/SpProjectReload",
            ctx=ctx,
            request=request,
            response_obj=_pb2.Result,
            method=method,
            **kwargs,
        )

    def SpRouteList(
        self,
        *,
        request: _pb2.SpRouteListReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.SpRouteListReply:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/mtmai.mtmpb.SpService/SpRouteList",
            ctx=ctx,
            request=request,
            response_obj=_pb2.SpRouteListReply,
            method=method,
            **kwargs,
        )

    def SpRouteGet(
        self,
        *,
        request: _pb2.SpRouteGetReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.SpRoute:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/mtmai.mtmpb.SpService/SpRouteGet",
            ctx=ctx,
            request=request,
            response_obj=_pb2.SpRoute,
            method=method,
            **kwargs,
        )

    def SpRouteCreate(
        self,
        *,
        request: _pb2.SpRouteCreateReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.Result:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/mtmai.mtmpb.SpService/SpRouteCreate",
            ctx=ctx,
            request=request,
            response_obj=_pb2.Result,
            method=method,
            **kwargs,
        )

    def SpRouteUpdate(
        self,
        *,
        request: _pb2.SpRouteUpdateReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.Result:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/mtmai.mtmpb.SpService/SpRouteUpdate",
            ctx=ctx,
            request=request,
            response_obj=_pb2.Result,
            method=method,
            **kwargs,
        )

    def SpRouteDelete(
        self,
        *,
        request: _pb2.ResDeleteReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.Result:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/mtmai.mtmpb.SpService/SpRouteDelete",
            ctx=ctx,
            request=request,
            response_obj=_pb2.Result,
            method=method,
            **kwargs,
        )

    def SpContentmodiList(
        self,
        *,
        request: _pb2.SpContentmodiListReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.SpContentmodiListReply:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/mtmai.mtmpb.SpService/SpContentmodiList",
            ctx=ctx,
            request=request,
            response_obj=_pb2.SpContentmodiListReply,
            method=method,
            **kwargs,
        )

    def SpContentmodiGet(
        self,
        *,
        request: _pb2.SpContentmodiGetReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.SpContentmodi:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/mtmai.mtmpb.SpService/SpContentmodiGet",
            ctx=ctx,
            request=request,
            response_obj=_pb2.SpContentmodi,
            method=method,
            **kwargs,
        )

    def SpContentmodiCreate(
        self,
        *,
        request: _pb2.SpContentmodiCreateReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.Result:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/mtmai.mtmpb.SpService/SpContentmodiCreate",
            ctx=ctx,
            request=request,
            response_obj=_pb2.Result,
            method=method,
            **kwargs,
        )

    def SpContentmodiUpdate(
        self,
        *,
        request: _pb2.SpContentmodiUpdateReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.Result:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/mtmai.mtmpb.SpService/SpContentmodiUpdate",
            ctx=ctx,
            request=request,
            response_obj=_pb2.Result,
            method=method,
            **kwargs,
        )

    def SpContentmodiDelete(
        self,
        *,
        request: _pb2.ResDeleteReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.Result:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/mtmai.mtmpb.SpService/SpContentmodiDelete",
            ctx=ctx,
            request=request,
            response_obj=_pb2.Result,
            method=method,
            **kwargs,
        )

    def SpOptionGet(
        self,
        *,
        request: _pb2.SpOptionGetReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.SpOption:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/mtmai.mtmpb.SpService/SpOptionGet",
            ctx=ctx,
            request=request,
            response_obj=_pb2.SpOption,
            method=method,
            **kwargs,
        )

    def SpOptionSave(
        self,
        *,
        request: _pb2.SpOption,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.Result:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/mtmai.mtmpb.SpService/SpOptionSave",
            ctx=ctx,
            request=request,
            response_obj=_pb2.Result,
            method=method,
            **kwargs,
        )

    def Sp2Fetch(
        self,
        *,
        request: _pb2.Sp2FetchReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.Sp2FetchRes:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/mtmai.mtmpb.SpService/Sp2Fetch",
            ctx=ctx,
            request=request,
            response_obj=_pb2.Sp2FetchRes,
            method=method,
            **kwargs,
        )


class AsyncSpServiceClient(AsyncConnecpyClient):
    async def SpProjectList(
        self,
        *,
        request: _pb2.SpProjectListReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.SpProjectListReply:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/mtmai.mtmpb.SpService/SpProjectList",
            ctx=ctx,
            request=request,
            response_obj=_pb2.SpProjectListReply,
            method=method,
            session=session,
            **kwargs,
        )

    async def SpProjectGet(
        self,
        *,
        request: _pb2.SpProjectGetReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.SpProject:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/mtmai.mtmpb.SpService/SpProjectGet",
            ctx=ctx,
            request=request,
            response_obj=_pb2.SpProject,
            method=method,
            session=session,
            **kwargs,
        )

    async def SpProjectCreate(
        self,
        *,
        request: _pb2.SpProjectCreateReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.Result:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/mtmai.mtmpb.SpService/SpProjectCreate",
            ctx=ctx,
            request=request,
            response_obj=_pb2.Result,
            method=method,
            session=session,
            **kwargs,
        )

    async def SpProjectUpdate(
        self,
        *,
        request: _pb2.SpProjectUpdateReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.Result:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/mtmai.mtmpb.SpService/SpProjectUpdate",
            ctx=ctx,
            request=request,
            response_obj=_pb2.Result,
            method=method,
            session=session,
            **kwargs,
        )

    async def SpProjectDelete(
        self,
        *,
        request: _pb2.ResDeleteReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.Result:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/mtmai.mtmpb.SpService/SpProjectDelete",
            ctx=ctx,
            request=request,
            response_obj=_pb2.Result,
            method=method,
            session=session,
            **kwargs,
        )

    async def SpProjectRun(
        self,
        *,
        request: _pb2.SpiderProjectRunReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.Result:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/mtmai.mtmpb.SpService/SpProjectRun",
            ctx=ctx,
            request=request,
            response_obj=_pb2.Result,
            method=method,
            session=session,
            **kwargs,
        )

    async def SpProjectVisit(
        self,
        *,
        request: _pb2.SpiderProjectVisitReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.Result:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/mtmai.mtmpb.SpService/SpProjectVisit",
            ctx=ctx,
            request=request,
            response_obj=_pb2.Result,
            method=method,
            session=session,
            **kwargs,
        )

    async def SpProjectReload(
        self,
        *,
        request: _pb2.SpProjectReloadReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.Result:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/mtmai.mtmpb.SpService/SpProjectReload",
            ctx=ctx,
            request=request,
            response_obj=_pb2.Result,
            method=method,
            session=session,
            **kwargs,
        )

    async def SpRouteList(
        self,
        *,
        request: _pb2.SpRouteListReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.SpRouteListReply:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/mtmai.mtmpb.SpService/SpRouteList",
            ctx=ctx,
            request=request,
            response_obj=_pb2.SpRouteListReply,
            method=method,
            session=session,
            **kwargs,
        )

    async def SpRouteGet(
        self,
        *,
        request: _pb2.SpRouteGetReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.SpRoute:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/mtmai.mtmpb.SpService/SpRouteGet",
            ctx=ctx,
            request=request,
            response_obj=_pb2.SpRoute,
            method=method,
            session=session,
            **kwargs,
        )

    async def SpRouteCreate(
        self,
        *,
        request: _pb2.SpRouteCreateReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.Result:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/mtmai.mtmpb.SpService/SpRouteCreate",
            ctx=ctx,
            request=request,
            response_obj=_pb2.Result,
            method=method,
            session=session,
            **kwargs,
        )

    async def SpRouteUpdate(
        self,
        *,
        request: _pb2.SpRouteUpdateReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.Result:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/mtmai.mtmpb.SpService/SpRouteUpdate",
            ctx=ctx,
            request=request,
            response_obj=_pb2.Result,
            method=method,
            session=session,
            **kwargs,
        )

    async def SpRouteDelete(
        self,
        *,
        request: _pb2.ResDeleteReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.Result:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/mtmai.mtmpb.SpService/SpRouteDelete",
            ctx=ctx,
            request=request,
            response_obj=_pb2.Result,
            method=method,
            session=session,
            **kwargs,
        )

    async def SpContentmodiList(
        self,
        *,
        request: _pb2.SpContentmodiListReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.SpContentmodiListReply:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/mtmai.mtmpb.SpService/SpContentmodiList",
            ctx=ctx,
            request=request,
            response_obj=_pb2.SpContentmodiListReply,
            method=method,
            session=session,
            **kwargs,
        )

    async def SpContentmodiGet(
        self,
        *,
        request: _pb2.SpContentmodiGetReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.SpContentmodi:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/mtmai.mtmpb.SpService/SpContentmodiGet",
            ctx=ctx,
            request=request,
            response_obj=_pb2.SpContentmodi,
            method=method,
            session=session,
            **kwargs,
        )

    async def SpContentmodiCreate(
        self,
        *,
        request: _pb2.SpContentmodiCreateReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.Result:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/mtmai.mtmpb.SpService/SpContentmodiCreate",
            ctx=ctx,
            request=request,
            response_obj=_pb2.Result,
            method=method,
            session=session,
            **kwargs,
        )

    async def SpContentmodiUpdate(
        self,
        *,
        request: _pb2.SpContentmodiUpdateReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.Result:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/mtmai.mtmpb.SpService/SpContentmodiUpdate",
            ctx=ctx,
            request=request,
            response_obj=_pb2.Result,
            method=method,
            session=session,
            **kwargs,
        )

    async def SpContentmodiDelete(
        self,
        *,
        request: _pb2.ResDeleteReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.Result:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/mtmai.mtmpb.SpService/SpContentmodiDelete",
            ctx=ctx,
            request=request,
            response_obj=_pb2.Result,
            method=method,
            session=session,
            **kwargs,
        )

    async def SpOptionGet(
        self,
        *,
        request: _pb2.SpOptionGetReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.SpOption:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/mtmai.mtmpb.SpService/SpOptionGet",
            ctx=ctx,
            request=request,
            response_obj=_pb2.SpOption,
            method=method,
            session=session,
            **kwargs,
        )

    async def SpOptionSave(
        self,
        *,
        request: _pb2.SpOption,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.Result:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/mtmai.mtmpb.SpService/SpOptionSave",
            ctx=ctx,
            request=request,
            response_obj=_pb2.Result,
            method=method,
            session=session,
            **kwargs,
        )

    async def Sp2Fetch(
        self,
        *,
        request: _pb2.Sp2FetchReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.Sp2FetchRes:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/mtmai.mtmpb.SpService/Sp2Fetch",
            ctx=ctx,
            request=request,
            response_obj=_pb2.Sp2FetchRes,
            method=method,
            session=session,
            **kwargs,
        )
