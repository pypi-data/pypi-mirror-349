# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _btkPY
else:
    import _btkPY

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class data_store(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _btkPY.data_store_swiginit(self, _btkPY.new_data_store())
    __swig_destroy__ = _btkPY.delete_data_store

# Register data_store in _btkPY:
_btkPY.data_store_swigregister(data_store)


def unload():
    return _btkPY.unload()

def reload():
    r""" Unload all plugins and load the ones found in the plugins path. This function is usefull in case you added new plugins since the loading of the package. Notes: In case you want to replace a plugin by a newer version, you have first to use the unload() fonction. Your Operating System may lock the plugin files once loaded."""
    return _btkPY.reload()

def btkReadAcquisition(filename):
    return _btkPY.btkReadAcquisition(filename)

def btkGetEvents(store):
    return _btkPY.btkGetEvents(store)

def btkGetAngles(store):
    return _btkPY.btkGetAngles(store)

def btkGetMoments(store):
    return _btkPY.btkGetMoments(store)

def btkGetForces(store):
    return _btkPY.btkGetForces(store)

def btkGetPowers(store):
    return _btkPY.btkGetPowers(store)

def btkGetMarkers(store):
    return _btkPY.btkGetMarkers(store)

def btkGetPoints(store):
    return _btkPY.btkGetPoints(store)

def btkGetAnalogs(store):
    return _btkPY.btkGetAnalogs(store)

def btkGetAnalog(*args):
    return _btkPY.btkGetAnalog(*args)

def btkGetPoint(*args):
    return _btkPY.btkGetPoint(*args)

def btkGetPointFrequency(store):
    return _btkPY.btkGetPointFrequency(store)

def btkGetPointFrameNumber(store):
    return _btkPY.btkGetPointFrameNumber(store)

def btkGetPointNumber(store):
    return _btkPY.btkGetPointNumber(store)

def btkGetAnalogNumber(store):
    return _btkPY.btkGetAnalogNumber(store)

def btkGetAnalogFrameNumber(store):
    return _btkPY.btkGetAnalogFrameNumber(store)

def btkGetAnalogResolution(store):
    return _btkPY.btkGetAnalogResolution(store)

def btkGetAnalogFrequency(store):
    return _btkPY.btkGetAnalogFrequency(store)

def btkGetPointsUnit(store, type):
    return _btkPY.btkGetPointsUnit(store, type)

def btkGetEventNumber(store):
    return _btkPY.btkGetEventNumber(store)

def btkGetForcePlatforms(store):
    return _btkPY.btkGetForcePlatforms(store)

def btkGetVersion():
    return _btkPY.btkGetVersion()

def btkGetMetaData(*args):
    return _btkPY.btkGetMetaData(*args)

def btkGetGroundReactionWrenches(store, fz_threshold=10.0):
    return _btkPY.btkGetGroundReactionWrenches(store, fz_threshold)

def btkGetForcePlatformWrenches(store, inglobalframe=True):
    return _btkPY.btkGetForcePlatformWrenches(store, inglobalframe)

def btkGetAnalogSampleNumberPerFrame(store):
    return _btkPY.btkGetAnalogSampleNumberPerFrame(store)

def btkGetMaxInterpolationGap(store):
    return _btkPY.btkGetMaxInterpolationGap(store)

def btkGetLastFrame(store):
    return _btkPY.btkGetLastFrame(store)

def btkGetFirstFrame(store):
    return _btkPY.btkGetFirstFrame(store)

def btkMetaDataInfo(*args):
    return _btkPY.btkMetaDataInfo(*args)

def btkFindMetaData(*args):
    return _btkPY.btkFindMetaData(*args)

def btkGetAnalysis(store):
    return _btkPY.btkGetAnalysis(store)

def btkGetRotations(store):
    return _btkPY.btkGetRotations(store)

def btkGetRotation(store, label):
    return _btkPY.btkGetRotation(store, label)

def btkSetAnalogDescription(*args):
    return _btkPY.btkSetAnalogDescription(*args)

def btkSetAnalogGain(*args):
    return _btkPY.btkSetAnalogGain(*args)

def btkSetAnalogLabel(*args):
    return _btkPY.btkSetAnalogLabel(*args)

def btkSetAnalogOffset(*args):
    return _btkPY.btkSetAnalogOffset(*args)

def btkSetAnalogScale(*args):
    return _btkPY.btkSetAnalogScale(*args)

def btkSetAnalogUnit(*args):
    return _btkPY.btkSetAnalogUnit(*args)

def btkSetAnalogNumber(store, nb_analogs):
    return _btkPY.btkSetAnalogNumber(store, nb_analogs)

def btkSetAnalogSampleNumberPerFrame(store, ratio):
    return _btkPY.btkSetAnalogSampleNumberPerFrame(store, ratio)

def btkSetAnalogResolution(store, resolution):
    return _btkPY.btkSetAnalogResolution(store, resolution)

def btkSetAnalogsValues(store, values):
    return _btkPY.btkSetAnalogsValues(store, values)

def btkSetAnalogValues(*args):
    return _btkPY.btkSetAnalogValues(*args)

def btkClearAnalogs(store):
    return _btkPY.btkClearAnalogs(store)

def btkRemoveAnalog(*args):
    return _btkPY.btkRemoveAnalog(*args)

def btkAppendAnalog(*args):
    return _btkPY.btkAppendAnalog(*args)

def btkSetEventDescription(store, label, description):
    return _btkPY.btkSetEventDescription(store, label, description)

def btkClearEvents(store):
    return _btkPY.btkClearEvents(store)

def btkAppendEvent(*args):
    return _btkPY.btkAppendEvent(*args)

def btkSetEventId(store, label, new_id):
    return _btkPY.btkSetEventId(store, label, new_id)

def btkSetEventLabel(store, index, new_label):
    return _btkPY.btkSetEventLabel(store, index, new_label)

def btkSetEventTime(store, index, time):
    return _btkPY.btkSetEventTime(store, index, time)

def btkSetEventSubject(store, index, new_label):
    return _btkPY.btkSetEventSubject(store, index, new_label)

def btkSetForcesValues(store, values):
    return _btkPY.btkSetForcesValues(store, values)

def btkSetMarkersValues(store, values):
    return _btkPY.btkSetMarkersValues(store, values)

def btkSetAnglesValues(store, values):
    return _btkPY.btkSetAnglesValues(store, values)

def btkSetPowersValues(store, values):
    return _btkPY.btkSetPowersValues(store, values)

def btkSetMomentsValues(store, values):
    return _btkPY.btkSetMomentsValues(store, values)

def btkSetPointValues(*args):
    return _btkPY.btkSetPointValues(*args)

def btkSetPointsValues(store, values):
    return _btkPY.btkSetPointsValues(store, values)

def btkAppendPoint(store, type, label, values):
    return _btkPY.btkAppendPoint(store, type, label, values)

def btkClearPoints(store):
    return _btkPY.btkClearPoints(store)

def btkRemovePoint(*args):
    return _btkPY.btkRemovePoint(*args)

def btkSetPointNumber(store, number):
    return _btkPY.btkSetPointNumber(store, number)

def btkSetPointsUnit(store, type, unit):
    return _btkPY.btkSetPointsUnit(store, type, unit)

def btkSetPointType(*args):
    return _btkPY.btkSetPointType(*args)

def btkSetPointLabel(*args):
    return _btkPY.btkSetPointLabel(*args)

def btkSetPointDescription(*args):
    return _btkPY.btkSetPointDescription(*args)

def btkNewAcquisition(*args):
    return _btkPY.btkNewAcquisition(*args)

def btkSetFrameNumber(*args):
    return _btkPY.btkSetFrameNumber(*args)

def btkSetFrequency(store, frequency):
    return _btkPY.btkSetFrequency(store, frequency)

def btkSetMaxInterpolationGap(store, gap):
    return _btkPY.btkSetMaxInterpolationGap(store, gap)

def btkAppendMetaData(store, label, sublabel_path, info):
    return _btkPY.btkAppendMetaData(store, label, sublabel_path, info)

def btkClearMetaData(store):
    return _btkPY.btkClearMetaData(store)

def btkRemoveMetaData(*args):
    return _btkPY.btkRemoveMetaData(*args)

def btkSetMetaDataDimensions(*args):
    return _btkPY.btkSetMetaDataDimensions(*args)

def btkSetMetaDataDescription(*args):
    return _btkPY.btkSetMetaDataDescription(*args)

def btkSetMetaDataFormat(*args):
    return _btkPY.btkSetMetaDataFormat(*args)

def btkSetMetaDataValue(*args):
    return _btkPY.btkSetMetaDataValue(*args)

def btkSetMetaData(store, label, sublabel_path, info):
    return _btkPY.btkSetMetaData(store, label, sublabel_path, info)

def btkAppendAnalysisParameter(*args):
    return _btkPY.btkAppendAnalysisParameter(*args)

def btkClearAnalysis(store):
    return _btkPY.btkClearAnalysis(store)

def btkRemoveAnalysisParameter(*args):
    return _btkPY.btkRemoveAnalysisParameter(*args)

def btkSetFirstFrame(*args):
    return _btkPY.btkSetFirstFrame(*args)

def btkWriteAcquisition(store, destination):
    return _btkPY.btkWriteAcquisition(store, destination)

def btkCloseAcquisition(store):
    return _btkPY.btkCloseAcquisition(store)

def btkDeleteAcquisition(store):
    return _btkPY.btkDeleteAcquisition(store)

def btkGetAnglesValues(store):
    return _btkPY.btkGetAnglesValues(store)

def btkGetAnalogsValues(store):
    return _btkPY.btkGetAnalogsValues(store)

def btkGetForcesValues(store):
    return _btkPY.btkGetForcesValues(store)

def btkGetMomentsValues(store):
    return _btkPY.btkGetMomentsValues(store)

def btkGetMarkersValues(store):
    return _btkPY.btkGetMarkersValues(store)

def btkGetPointsValues(store):
    return _btkPY.btkGetPointsValues(store)

def btkGetPowersValues(store):
    return _btkPY.btkGetPowersValues(store)

def btkGetEventsValues(store):
    return _btkPY.btkGetEventsValues(store)

def throw_type_error(val):
    return _btkPY.throw_type_error(val)

def metadata_from_data_set(set):
    return _btkPY.metadata_from_data_set(set)

def from_kaleido_json(kaleido_json):
    return _btkPY.from_kaleido_json(kaleido_json)

def kaleido_to_json(py_obj):
    return _btkPY.kaleido_to_json(py_obj)


